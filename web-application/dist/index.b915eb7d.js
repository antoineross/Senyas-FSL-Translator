// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"5VGEk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _babelPolyfill = require("babel-polyfill");
var _tfjs = require("@tensorflow/tfjs");
var _mobilenet = require("./mobilenet");
var _catJpg = require("./cat.jpg");
var _catJpgDefault = parcelHelpers.interopDefault(_catJpg);
const cat = document.getElementById('cat');
cat.onload = async ()=>{
    const resultElement = document.getElementById('result');
    resultElement.innerText = 'Loading MobileNet...';
    const mobileNet = new _mobilenet.MobileNet();
    console.time('Loading of model');
    await mobileNet.load();
    console.timeEnd('Loading of model');
    const pixels = _tfjs.browser.fromPixels(cat);
    console.time('First prediction');
    let result = mobileNet.predict(pixels);
    const topK = mobileNet.getTopKClasses(result, 5);
    console.timeEnd('First prediction');
    resultElement.innerText = '';
    topK.forEach((x)=>{
        resultElement.innerText += `${x.value.toFixed(3)}: ${x.label}\n`;
    });
    console.time('Subsequent predictions');
    result = mobileNet.predict(pixels);
    mobileNet.getTopKClasses(result, 5);
    console.timeEnd('Subsequent predictions');
    mobileNet.dispose();
};
cat.src = _catJpgDefault.default;

},{"babel-polyfill":"7LKiE","@tensorflow/tfjs":"2Nmqy","./mobilenet":"dOdSf","./cat.jpg":"iJhxD","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7LKiE":[function(require,module,exports) {
"use strict";
var global = arguments[3];
require("core-js/shim");
require("regenerator-runtime/runtime");
require("core-js/fn/regexp/escape");
if (global._babelPolyfill) throw new Error("only one instance of babel-polyfill is allowed");
global._babelPolyfill = true;
var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
    O[key] || Object[DEFINE_PROPERTY](O, key, {
        writable: true,
        configurable: true,
        value: value
    });
}
define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);
"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(key) {
    [][key] && define(Array, key, Function.call.bind([][key]));
});

},{"core-js/shim":"7GhG8","regenerator-runtime/runtime":"cmH2j","core-js/fn/regexp/escape":"4Rfsd"}],"7GhG8":[function(require,module,exports) {
require('./modules/es6.symbol');
require('./modules/es6.object.create');
require('./modules/es6.object.define-property');
require('./modules/es6.object.define-properties');
require('./modules/es6.object.get-own-property-descriptor');
require('./modules/es6.object.get-prototype-of');
require('./modules/es6.object.keys');
require('./modules/es6.object.get-own-property-names');
require('./modules/es6.object.freeze');
require('./modules/es6.object.seal');
require('./modules/es6.object.prevent-extensions');
require('./modules/es6.object.is-frozen');
require('./modules/es6.object.is-sealed');
require('./modules/es6.object.is-extensible');
require('./modules/es6.object.assign');
require('./modules/es6.object.is');
require('./modules/es6.object.set-prototype-of');
require('./modules/es6.object.to-string');
require('./modules/es6.function.bind');
require('./modules/es6.function.name');
require('./modules/es6.function.has-instance');
require('./modules/es6.parse-int');
require('./modules/es6.parse-float');
require('./modules/es6.number.constructor');
require('./modules/es6.number.to-fixed');
require('./modules/es6.number.to-precision');
require('./modules/es6.number.epsilon');
require('./modules/es6.number.is-finite');
require('./modules/es6.number.is-integer');
require('./modules/es6.number.is-nan');
require('./modules/es6.number.is-safe-integer');
require('./modules/es6.number.max-safe-integer');
require('./modules/es6.number.min-safe-integer');
require('./modules/es6.number.parse-float');
require('./modules/es6.number.parse-int');
require('./modules/es6.math.acosh');
require('./modules/es6.math.asinh');
require('./modules/es6.math.atanh');
require('./modules/es6.math.cbrt');
require('./modules/es6.math.clz32');
require('./modules/es6.math.cosh');
require('./modules/es6.math.expm1');
require('./modules/es6.math.fround');
require('./modules/es6.math.hypot');
require('./modules/es6.math.imul');
require('./modules/es6.math.log10');
require('./modules/es6.math.log1p');
require('./modules/es6.math.log2');
require('./modules/es6.math.sign');
require('./modules/es6.math.sinh');
require('./modules/es6.math.tanh');
require('./modules/es6.math.trunc');
require('./modules/es6.string.from-code-point');
require('./modules/es6.string.raw');
require('./modules/es6.string.trim');
require('./modules/es6.string.iterator');
require('./modules/es6.string.code-point-at');
require('./modules/es6.string.ends-with');
require('./modules/es6.string.includes');
require('./modules/es6.string.repeat');
require('./modules/es6.string.starts-with');
require('./modules/es6.string.anchor');
require('./modules/es6.string.big');
require('./modules/es6.string.blink');
require('./modules/es6.string.bold');
require('./modules/es6.string.fixed');
require('./modules/es6.string.fontcolor');
require('./modules/es6.string.fontsize');
require('./modules/es6.string.italics');
require('./modules/es6.string.link');
require('./modules/es6.string.small');
require('./modules/es6.string.strike');
require('./modules/es6.string.sub');
require('./modules/es6.string.sup');
require('./modules/es6.date.now');
require('./modules/es6.date.to-json');
require('./modules/es6.date.to-iso-string');
require('./modules/es6.date.to-string');
require('./modules/es6.date.to-primitive');
require('./modules/es6.array.is-array');
require('./modules/es6.array.from');
require('./modules/es6.array.of');
require('./modules/es6.array.join');
require('./modules/es6.array.slice');
require('./modules/es6.array.sort');
require('./modules/es6.array.for-each');
require('./modules/es6.array.map');
require('./modules/es6.array.filter');
require('./modules/es6.array.some');
require('./modules/es6.array.every');
require('./modules/es6.array.reduce');
require('./modules/es6.array.reduce-right');
require('./modules/es6.array.index-of');
require('./modules/es6.array.last-index-of');
require('./modules/es6.array.copy-within');
require('./modules/es6.array.fill');
require('./modules/es6.array.find');
require('./modules/es6.array.find-index');
require('./modules/es6.array.species');
require('./modules/es6.array.iterator');
require('./modules/es6.regexp.constructor');
require('./modules/es6.regexp.exec');
require('./modules/es6.regexp.to-string');
require('./modules/es6.regexp.flags');
require('./modules/es6.regexp.match');
require('./modules/es6.regexp.replace');
require('./modules/es6.regexp.search');
require('./modules/es6.regexp.split');
require('./modules/es6.promise');
require('./modules/es6.map');
require('./modules/es6.set');
require('./modules/es6.weak-map');
require('./modules/es6.weak-set');
require('./modules/es6.typed.array-buffer');
require('./modules/es6.typed.data-view');
require('./modules/es6.typed.int8-array');
require('./modules/es6.typed.uint8-array');
require('./modules/es6.typed.uint8-clamped-array');
require('./modules/es6.typed.int16-array');
require('./modules/es6.typed.uint16-array');
require('./modules/es6.typed.int32-array');
require('./modules/es6.typed.uint32-array');
require('./modules/es6.typed.float32-array');
require('./modules/es6.typed.float64-array');
require('./modules/es6.reflect.apply');
require('./modules/es6.reflect.construct');
require('./modules/es6.reflect.define-property');
require('./modules/es6.reflect.delete-property');
require('./modules/es6.reflect.enumerate');
require('./modules/es6.reflect.get');
require('./modules/es6.reflect.get-own-property-descriptor');
require('./modules/es6.reflect.get-prototype-of');
require('./modules/es6.reflect.has');
require('./modules/es6.reflect.is-extensible');
require('./modules/es6.reflect.own-keys');
require('./modules/es6.reflect.prevent-extensions');
require('./modules/es6.reflect.set');
require('./modules/es6.reflect.set-prototype-of');
require('./modules/es7.array.includes');
require('./modules/es7.array.flat-map');
require('./modules/es7.array.flatten');
require('./modules/es7.string.at');
require('./modules/es7.string.pad-start');
require('./modules/es7.string.pad-end');
require('./modules/es7.string.trim-left');
require('./modules/es7.string.trim-right');
require('./modules/es7.string.match-all');
require('./modules/es7.symbol.async-iterator');
require('./modules/es7.symbol.observable');
require('./modules/es7.object.get-own-property-descriptors');
require('./modules/es7.object.values');
require('./modules/es7.object.entries');
require('./modules/es7.object.define-getter');
require('./modules/es7.object.define-setter');
require('./modules/es7.object.lookup-getter');
require('./modules/es7.object.lookup-setter');
require('./modules/es7.map.to-json');
require('./modules/es7.set.to-json');
require('./modules/es7.map.of');
require('./modules/es7.set.of');
require('./modules/es7.weak-map.of');
require('./modules/es7.weak-set.of');
require('./modules/es7.map.from');
require('./modules/es7.set.from');
require('./modules/es7.weak-map.from');
require('./modules/es7.weak-set.from');
require('./modules/es7.global');
require('./modules/es7.system.global');
require('./modules/es7.error.is-error');
require('./modules/es7.math.clamp');
require('./modules/es7.math.deg-per-rad');
require('./modules/es7.math.degrees');
require('./modules/es7.math.fscale');
require('./modules/es7.math.iaddh');
require('./modules/es7.math.isubh');
require('./modules/es7.math.imulh');
require('./modules/es7.math.rad-per-deg');
require('./modules/es7.math.radians');
require('./modules/es7.math.scale');
require('./modules/es7.math.umulh');
require('./modules/es7.math.signbit');
require('./modules/es7.promise.finally');
require('./modules/es7.promise.try');
require('./modules/es7.reflect.define-metadata');
require('./modules/es7.reflect.delete-metadata');
require('./modules/es7.reflect.get-metadata');
require('./modules/es7.reflect.get-metadata-keys');
require('./modules/es7.reflect.get-own-metadata');
require('./modules/es7.reflect.get-own-metadata-keys');
require('./modules/es7.reflect.has-metadata');
require('./modules/es7.reflect.has-own-metadata');
require('./modules/es7.reflect.metadata');
require('./modules/es7.asap');
require('./modules/es7.observable');
require('./modules/web.timers');
require('./modules/web.immediate');
require('./modules/web.dom.iterable');
module.exports = require('./modules/_core');

},{"./modules/es6.symbol":"fUQxd","./modules/es6.object.create":"iklZv","./modules/es6.object.define-property":"2JxTY","./modules/es6.object.define-properties":"1cFbl","./modules/es6.object.get-own-property-descriptor":"5sxjB","./modules/es6.object.get-prototype-of":"5fsye","./modules/es6.object.keys":"8woaa","./modules/es6.object.get-own-property-names":"dGCli","./modules/es6.object.freeze":"cb5HM","./modules/es6.object.seal":"j3qY2","./modules/es6.object.prevent-extensions":"2KuMq","./modules/es6.object.is-frozen":"GTKvk","./modules/es6.object.is-sealed":"K45hu","./modules/es6.object.is-extensible":"23gjD","./modules/es6.object.assign":"8DvpM","./modules/es6.object.is":"e23no","./modules/es6.object.set-prototype-of":"d3fGn","./modules/es6.object.to-string":"7cLOk","./modules/es6.function.bind":"54Dqr","./modules/es6.function.name":"lmg4B","./modules/es6.function.has-instance":"flBdS","./modules/es6.parse-int":"l30ZK","./modules/es6.parse-float":"edHLy","./modules/es6.number.constructor":"b3DG0","./modules/es6.number.to-fixed":"jVWO1","./modules/es6.number.to-precision":"fkTCt","./modules/es6.number.epsilon":"dS5u0","./modules/es6.number.is-finite":"gaJ9D","./modules/es6.number.is-integer":"cXfOC","./modules/es6.number.is-nan":"dHEdL","./modules/es6.number.is-safe-integer":"8WZJi","./modules/es6.number.max-safe-integer":"lEoVS","./modules/es6.number.min-safe-integer":"6GYXq","./modules/es6.number.parse-float":"adyPr","./modules/es6.number.parse-int":"cz541","./modules/es6.math.acosh":"atazc","./modules/es6.math.asinh":"9vCFA","./modules/es6.math.atanh":"1Poi7","./modules/es6.math.cbrt":"kEyNP","./modules/es6.math.clz32":"asnnc","./modules/es6.math.cosh":"672oR","./modules/es6.math.expm1":"eLul3","./modules/es6.math.fround":"6JW0t","./modules/es6.math.hypot":"1rcXM","./modules/es6.math.imul":"lAxVU","./modules/es6.math.log10":"fIjzt","./modules/es6.math.log1p":"kK15h","./modules/es6.math.log2":"kkgGM","./modules/es6.math.sign":"18Gp0","./modules/es6.math.sinh":"bkULm","./modules/es6.math.tanh":"br08o","./modules/es6.math.trunc":"8fixj","./modules/es6.string.from-code-point":"gsGce","./modules/es6.string.raw":"4MADL","./modules/es6.string.trim":"hEKob","./modules/es6.string.iterator":"llgDB","./modules/es6.string.code-point-at":"doYwG","./modules/es6.string.ends-with":"39nwy","./modules/es6.string.includes":"9JmYp","./modules/es6.string.repeat":"cqBCd","./modules/es6.string.starts-with":"iMejr","./modules/es6.string.anchor":"97Lll","./modules/es6.string.big":"7nKCA","./modules/es6.string.blink":"jbxAT","./modules/es6.string.bold":"4MfGp","./modules/es6.string.fixed":"4y2Bb","./modules/es6.string.fontcolor":"lmhCi","./modules/es6.string.fontsize":"hL89C","./modules/es6.string.italics":"iwOAc","./modules/es6.string.link":"e07IC","./modules/es6.string.small":"2MSNU","./modules/es6.string.strike":"8kiXd","./modules/es6.string.sub":"iprh9","./modules/es6.string.sup":"doHpa","./modules/es6.date.now":"4HGro","./modules/es6.date.to-json":"7Glbw","./modules/es6.date.to-iso-string":"hQdLT","./modules/es6.date.to-string":"d3yLX","./modules/es6.date.to-primitive":"hoeNq","./modules/es6.array.is-array":"5g48E","./modules/es6.array.from":"i3Nvz","./modules/es6.array.of":"aLmME","./modules/es6.array.join":"lQMhQ","./modules/es6.array.slice":"4E6IU","./modules/es6.array.sort":"lAyeU","./modules/es6.array.for-each":"7cxLy","./modules/es6.array.map":"j4ARR","./modules/es6.array.filter":"5vJuE","./modules/es6.array.some":"iKQGA","./modules/es6.array.every":"5xxJY","./modules/es6.array.reduce":"8tM5y","./modules/es6.array.reduce-right":"aNHFx","./modules/es6.array.index-of":"76kRN","./modules/es6.array.last-index-of":"lEw3U","./modules/es6.array.copy-within":"4xbJW","./modules/es6.array.fill":"bimjQ","./modules/es6.array.find":"cKonp","./modules/es6.array.find-index":"t506G","./modules/es6.array.species":"2S6HD","./modules/es6.array.iterator":"1xhrt","./modules/es6.regexp.constructor":"gc5Or","./modules/es6.regexp.exec":"fcvkD","./modules/es6.regexp.to-string":"aX2Wn","./modules/es6.regexp.flags":"4cXUu","./modules/es6.regexp.match":"93slC","./modules/es6.regexp.replace":"bsjVi","./modules/es6.regexp.search":"ldewt","./modules/es6.regexp.split":"iJScv","./modules/es6.promise":"2sSjP","./modules/es6.map":"1kXi9","./modules/es6.set":"61Y2Y","./modules/es6.weak-map":"dAOwL","./modules/es6.weak-set":"blRp6","./modules/es6.typed.array-buffer":"dp2Nn","./modules/es6.typed.data-view":"FLhcC","./modules/es6.typed.int8-array":"2PtAR","./modules/es6.typed.uint8-array":"g4j5m","./modules/es6.typed.uint8-clamped-array":"68vHx","./modules/es6.typed.int16-array":"iZyZL","./modules/es6.typed.uint16-array":"4Jyn3","./modules/es6.typed.int32-array":"dSRiX","./modules/es6.typed.uint32-array":"lKCGR","./modules/es6.typed.float32-array":"fASXR","./modules/es6.typed.float64-array":"e3YAQ","./modules/es6.reflect.apply":"kstrm","./modules/es6.reflect.construct":"fXcT1","./modules/es6.reflect.define-property":"kibOK","./modules/es6.reflect.delete-property":"2NlGq","./modules/es6.reflect.enumerate":"iKC7x","./modules/es6.reflect.get":"dIqbe","./modules/es6.reflect.get-own-property-descriptor":"lSfAN","./modules/es6.reflect.get-prototype-of":"aO9N4","./modules/es6.reflect.has":"4HzcT","./modules/es6.reflect.is-extensible":"dmYlo","./modules/es6.reflect.own-keys":"15duj","./modules/es6.reflect.prevent-extensions":"cC4pR","./modules/es6.reflect.set":"dl5fS","./modules/es6.reflect.set-prototype-of":"jH9nI","./modules/es7.array.includes":"9KPxe","./modules/es7.array.flat-map":"lKIEm","./modules/es7.array.flatten":"lpb4z","./modules/es7.string.at":"eVq5h","./modules/es7.string.pad-start":"kxeDX","./modules/es7.string.pad-end":"6j6XE","./modules/es7.string.trim-left":"4dYUb","./modules/es7.string.trim-right":"5yndh","./modules/es7.string.match-all":"cZhYH","./modules/es7.symbol.async-iterator":"8vHXs","./modules/es7.symbol.observable":"jDpxk","./modules/es7.object.get-own-property-descriptors":"k5woh","./modules/es7.object.values":"kQJLQ","./modules/es7.object.entries":"7zW9M","./modules/es7.object.define-getter":"92ysW","./modules/es7.object.define-setter":"emt8A","./modules/es7.object.lookup-getter":"9LH3Q","./modules/es7.object.lookup-setter":"kEN8G","./modules/es7.map.to-json":"7iBxS","./modules/es7.set.to-json":"exanP","./modules/es7.map.of":"dT1Dc","./modules/es7.set.of":"jSRTa","./modules/es7.weak-map.of":"39wfA","./modules/es7.weak-set.of":"ikieO","./modules/es7.map.from":"2MGKl","./modules/es7.set.from":"3AF6v","./modules/es7.weak-map.from":"23jtR","./modules/es7.weak-set.from":"hJc4O","./modules/es7.global":"lshq0","./modules/es7.system.global":"aLRNx","./modules/es7.error.is-error":"3xhVh","./modules/es7.math.clamp":"bZ0NA","./modules/es7.math.deg-per-rad":"gOGEZ","./modules/es7.math.degrees":"cdQDY","./modules/es7.math.fscale":"fR5LK","./modules/es7.math.iaddh":"5Jbi2","./modules/es7.math.isubh":"hrxFs","./modules/es7.math.imulh":"i4YiT","./modules/es7.math.rad-per-deg":"il4w2","./modules/es7.math.radians":"7RQmX","./modules/es7.math.scale":"jOPwg","./modules/es7.math.umulh":"8NRee","./modules/es7.math.signbit":"ePksm","./modules/es7.promise.finally":"2JMTL","./modules/es7.promise.try":"2RsT8","./modules/es7.reflect.define-metadata":"iQ9qT","./modules/es7.reflect.delete-metadata":"4glRb","./modules/es7.reflect.get-metadata":"kmvi8","./modules/es7.reflect.get-metadata-keys":"6bA9p","./modules/es7.reflect.get-own-metadata":"jebxh","./modules/es7.reflect.get-own-metadata-keys":"jGnWP","./modules/es7.reflect.has-metadata":"bZiK8","./modules/es7.reflect.has-own-metadata":"khZMr","./modules/es7.reflect.metadata":"dQNHX","./modules/es7.asap":"eXG8y","./modules/es7.observable":"dqE8O","./modules/web.timers":"dl3SO","./modules/web.immediate":"49tUX","./modules/web.dom.iterable":"iv8Qo","./modules/_core":"4o9Ko"}],"fUQxd":[function(require,module,exports) {
'use strict';
// ECMAScript 6 symbols shim
var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toObject = require('./_to-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $GOPS = require('./_object-gops');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {
}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function() {
    return _create(dP({
    }, 'a', {
        get: function() {
            return dP(this, 'a', {
                value: 7
            }).a;
        }
    })).a != 7;
}) ? function(it, key, D) {
    var protoDesc = gOPD(ObjectProto, key);
    if (protoDesc) delete ObjectProto[key];
    dP(it, key, D);
    if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;
var wrap = function(tag) {
    var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
    sym._k = tag;
    return sym;
};
var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it) {
    return typeof it == 'symbol';
} : function(it) {
    return it instanceof $Symbol;
};
var $defineProperty = function defineProperty(it, key, D) {
    if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
    anObject(it);
    key = toPrimitive(key, true);
    anObject(D);
    if (has(AllSymbols, key)) {
        if (!D.enumerable) {
            if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {
            }));
            it[HIDDEN][key] = true;
        } else {
            if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
            D = _create(D, {
                enumerable: createDesc(0, false)
            });
        }
        return setSymbolDesc(it, key, D);
    }
    return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
    anObject(it);
    var keys = enumKeys(P = toIObject(P));
    var i = 0;
    var l = keys.length;
    var key;
    while(l > i)$defineProperty(it, key = keys[i++], P[key]);
    return it;
};
var $create = function create(it, P) {
    return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
    var E = isEnum.call(this, key = toPrimitive(key, true));
    if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
    return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
    it = toIObject(it);
    key = toPrimitive(key, true);
    if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
    var D = gOPD(it, key);
    if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
    return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
    var names = gOPN(toIObject(it));
    var result = [];
    var i = 0;
    var key;
    while(names.length > i)if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
    return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
    var IS_OP = it === ObjectProto;
    var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
    var result = [];
    var i = 0;
    var key;
    while(names.length > i)if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
    return result;
};
// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
    $Symbol = function Symbol() {
        if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
        var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
        var $set = function(value) {
            if (this === ObjectProto) $set.call(OPSymbols, value);
            if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
            setSymbolDesc(this, tag, createDesc(1, value));
        };
        if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, {
            configurable: true,
            set: $set
        });
        return wrap(tag);
    };
    redefine($Symbol[PROTOTYPE], 'toString', function toString() {
        return this._k;
    });
    $GOPD.f = $getOwnPropertyDescriptor;
    $DP.f = $defineProperty;
    require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
    require('./_object-pie').f = $propertyIsEnumerable;
    $GOPS.f = $getOwnPropertySymbols;
    if (DESCRIPTORS && !require('./_library')) redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
    wksExt.f = function(name) {
        return wrap(wks(name));
    };
}
$export($export.G + $export.W + $export.F * !USE_NATIVE, {
    Symbol: $Symbol
});
for(var es6Symbols = // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);
for(var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;)wksDefine(wellKnownSymbols[k++]);
$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
    // 19.4.2.1 Symbol.for(key)
    'for': function(key) {
        return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
    },
    // 19.4.2.5 Symbol.keyFor(sym)
    keyFor: function keyFor(sym) {
        if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
        for(var key in SymbolRegistry)if (SymbolRegistry[key] === sym) return key;
    },
    useSetter: function() {
        setter = true;
    },
    useSimple: function() {
        setter = false;
    }
});
$export($export.S + $export.F * !USE_NATIVE, 'Object', {
    // 19.1.2.2 Object.create(O [, Properties])
    create: $create,
    // 19.1.2.4 Object.defineProperty(O, P, Attributes)
    defineProperty: $defineProperty,
    // 19.1.2.3 Object.defineProperties(O, Properties)
    defineProperties: $defineProperties,
    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
    // 19.1.2.7 Object.getOwnPropertyNames(O)
    getOwnPropertyNames: $getOwnPropertyNames,
    // 19.1.2.8 Object.getOwnPropertySymbols(O)
    getOwnPropertySymbols: $getOwnPropertySymbols
});
// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function() {
    $GOPS.f(1);
});
$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
    getOwnPropertySymbols: function getOwnPropertySymbols(it) {
        return $GOPS.f(toObject(it));
    }
});
// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function() {
    var S = $Symbol();
    // MS Edge converts symbol values to JSON as {}
    // WebKit converts symbol values to JSON as null
    // V8 throws on boxed symbols
    return _stringify([
        S
    ]) != '[null]' || _stringify({
        a: S
    }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
    stringify: function stringify(it) {
        var args = [
            it
        ];
        var i = 1;
        var replacer, $replacer;
        while(arguments.length > i)args.push(arguments[i++]);
        $replacer = replacer = args[1];
        if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
        if (!isArray(replacer)) replacer = function(key, value) {
            if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
            if (!isSymbol(value)) return value;
        };
        args[1] = replacer;
        return _stringify.apply($JSON, args);
    }
});
// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_global":"8xCse","./_has":"biQ7v","./_descriptors":"dr2tY","./_export":"1Tgvm","./_redefine":"9vAu7","./_meta":"043Qa","./_fails":"iAFH1","./_shared":"9XC5J","./_set-to-string-tag":"7YXlq","./_uid":"gBq6n","./_wks":"eaoKZ","./_wks-ext":"2dxMf","./_wks-define":"28rGc","./_enum-keys":"c7wJO","./_is-array":"dTLRt","./_an-object":"kiL2X","./_is-object":"eIE5K","./_to-object":"7HHXi","./_to-iobject":"f9RCz","./_to-primitive":"4Oubb","./_property-desc":"825qY","./_object-create":"b4m8n","./_object-gopn-ext":"2is9e","./_object-gopd":"4bAUG","./_object-gops":"5oH2C","./_object-dp":"cLcWd","./_object-keys":"98CC0","./_object-gopn":"jK0Om","./_object-pie":"2aUxV","./_library":"lmtqY","./_hide":"ddpVq"}],"8xCse":[function(require,module,exports) {
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],"biQ7v":[function(require,module,exports) {
var hasOwnProperty = {
}.hasOwnProperty;
module.exports = function(it, key) {
    return hasOwnProperty.call(it, key);
};

},{}],"dr2tY":[function(require,module,exports) {
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function() {
    return Object.defineProperty({
    }, 'a', {
        get: function() {
            return 7;
        }
    }).a != 7;
});

},{"./_fails":"iAFH1"}],"iAFH1":[function(require,module,exports) {
module.exports = function(exec) {
    try {
        return !!exec();
    } catch (e) {
        return true;
    }
};

},{}],"1Tgvm":[function(require,module,exports) {
var global = require('./_global');
var core = require('./_core');
var hide = require('./_hide');
var redefine = require('./_redefine');
var ctx = require('./_ctx');
var PROTOTYPE = 'prototype';
var $export = function(type, name, source) {
    var IS_FORCED = type & $export.F;
    var IS_GLOBAL = type & $export.G;
    var IS_STATIC = type & $export.S;
    var IS_PROTO = type & $export.P;
    var IS_BIND = type & $export.B;
    var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {
    }) : (global[name] || {
    })[PROTOTYPE];
    var exports = IS_GLOBAL ? core : core[name] || (core[name] = {
    });
    var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {
    });
    var key, own, out, exp;
    if (IS_GLOBAL) source = name;
    for(key in source){
        // contains in native
        own = !IS_FORCED && target && target[key] !== undefined;
        // export native or passed
        out = (own ? target : source)[key];
        // bind timers to global for call from export context
        exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
        // extend global
        if (target) redefine(target, key, out, type & $export.U);
        // export
        if (exports[key] != out) hide(exports, key, exp);
        if (IS_PROTO && expProto[key] != out) expProto[key] = out;
    }
};
global.core = core;
// type bitmap
$export.F = 1; // forced
$export.G = 2; // global
$export.S = 4; // static
$export.P = 8; // proto
$export.B = 16; // bind
$export.W = 32; // wrap
$export.U = 64; // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_global":"8xCse","./_core":"4o9Ko","./_hide":"ddpVq","./_redefine":"9vAu7","./_ctx":"4rQSm"}],"4o9Ko":[function(require,module,exports) {
var core = module.exports = {
    version: '2.6.12'
};
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],"ddpVq":[function(require,module,exports) {
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function(object, key, value) {
    return dP.f(object, key, createDesc(1, value));
} : function(object, key, value) {
    object[key] = value;
    return object;
};

},{"./_object-dp":"cLcWd","./_property-desc":"825qY","./_descriptors":"dr2tY"}],"cLcWd":[function(require,module,exports) {
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;
exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPrimitive(P, true);
    anObject(Attributes);
    if (IE8_DOM_DEFINE) try {
        return dP(O, P, Attributes);
    } catch (e) {
    }
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
};

},{"./_an-object":"kiL2X","./_ie8-dom-define":"cIJOj","./_to-primitive":"4Oubb","./_descriptors":"dr2tY"}],"kiL2X":[function(require,module,exports) {
var isObject = require('./_is-object');
module.exports = function(it) {
    if (!isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
};

},{"./_is-object":"eIE5K"}],"eIE5K":[function(require,module,exports) {
module.exports = function(it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],"cIJOj":[function(require,module,exports) {
module.exports = !require('./_descriptors') && !require('./_fails')(function() {
    return Object.defineProperty(require('./_dom-create')('div'), 'a', {
        get: function() {
            return 7;
        }
    }).a != 7;
});

},{"./_descriptors":"dr2tY","./_fails":"iAFH1","./_dom-create":"2qBag"}],"2qBag":[function(require,module,exports) {
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function(it) {
    return is ? document.createElement(it) : {
    };
};

},{"./_is-object":"eIE5K","./_global":"8xCse"}],"4Oubb":[function(require,module,exports) {
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S) {
    if (!isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":"eIE5K"}],"825qY":[function(require,module,exports) {
module.exports = function(bitmap, value) {
    return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value: value
    };
};

},{}],"9vAu7":[function(require,module,exports) {
var global = require('./_global');
var hide = require('./_hide');
var has = require('./_has');
var SRC = require('./_uid')('src');
var $toString = require('./_function-to-string');
var TO_STRING = 'toString';
var TPL = ('' + $toString).split(TO_STRING);
require('./_core').inspectSource = function(it) {
    return $toString.call(it);
};
(module.exports = function(O, key, val, safe) {
    var isFunction = typeof val == 'function';
    if (isFunction) has(val, 'name') || hide(val, 'name', key);
    if (O[key] === val) return;
    if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
    if (O === global) O[key] = val;
    else if (!safe) {
        delete O[key];
        hide(O, key, val);
    } else if (O[key]) O[key] = val;
    else hide(O, key, val);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
    return typeof this == 'function' && this[SRC] || $toString.call(this);
});

},{"./_global":"8xCse","./_hide":"ddpVq","./_has":"biQ7v","./_uid":"gBq6n","./_function-to-string":"5IPoO","./_core":"4o9Ko"}],"gBq6n":[function(require,module,exports) {
var id = 0;
var px = Math.random();
module.exports = function(key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],"5IPoO":[function(require,module,exports) {
module.exports = require('./_shared')('native-function-to-string', Function.toString);

},{"./_shared":"9XC5J"}],"9XC5J":[function(require,module,exports) {
var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {
});
(module.exports = function(key, value) {
    return store[key] || (store[key] = value !== undefined ? value : {
    });
})('versions', []).push({
    version: core.version,
    mode: require('./_library') ? 'pure' : 'global',
    copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":"4o9Ko","./_global":"8xCse","./_library":"lmtqY"}],"lmtqY":[function(require,module,exports) {
module.exports = false;

},{}],"4rQSm":[function(require,module,exports) {
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function(fn, that, length) {
    aFunction(fn);
    if (that === undefined) return fn;
    switch(length){
        case 1:
            return function(a) {
                return fn.call(that, a);
            };
        case 2:
            return function(a, b) {
                return fn.call(that, a, b);
            };
        case 3:
            return function(a, b, c) {
                return fn.call(that, a, b, c);
            };
    }
    return function() {
        return fn.apply(that, arguments);
    };
};

},{"./_a-function":"55L9l"}],"55L9l":[function(require,module,exports) {
module.exports = function(it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
};

},{}],"043Qa":[function(require,module,exports) {
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function() {
    return true;
};
var FREEZE = !require('./_fails')(function() {
    return isExtensible(Object.preventExtensions({
    }));
});
var setMeta = function(it) {
    setDesc(it, META, {
        value: {
            i: 'O' + ++id,
            w: {
            } // weak collections IDs
        }
    });
};
var fastKey = function(it, create) {
    // return primitive with prefix
    if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    if (!has(it, META)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return 'F';
        // not necessary to add metadata
        if (!create) return 'E';
        // add missing metadata
        setMeta(it);
    // return object ID
    }
    return it[META].i;
};
var getWeak = function(it, create) {
    if (!has(it, META)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return true;
        // not necessary to add metadata
        if (!create) return false;
        // add missing metadata
        setMeta(it);
    // return hash weak collections IDs
    }
    return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it) {
    if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
    return it;
};
var meta = module.exports = {
    KEY: META,
    NEED: false,
    fastKey: fastKey,
    getWeak: getWeak,
    onFreeze: onFreeze
};

},{"./_uid":"gBq6n","./_is-object":"eIE5K","./_has":"biQ7v","./_object-dp":"cLcWd","./_fails":"iAFH1"}],"7YXlq":[function(require,module,exports) {
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');
module.exports = function(it, tag, stat) {
    if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
        configurable: true,
        value: tag
    });
};

},{"./_object-dp":"cLcWd","./_has":"biQ7v","./_wks":"eaoKZ"}],"eaoKZ":[function(require,module,exports) {
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';
var $exports = module.exports = function(name) {
    return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};
$exports.store = store;

},{"./_shared":"9XC5J","./_uid":"gBq6n","./_global":"8xCse"}],"2dxMf":[function(require,module,exports) {
exports.f = require('./_wks');

},{"./_wks":"eaoKZ"}],"28rGc":[function(require,module,exports) {
var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function(name) {
    var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {
    } : global.Symbol || {
    });
    if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
        value: wksExt.f(name)
    });
};

},{"./_global":"8xCse","./_core":"4o9Ko","./_library":"lmtqY","./_wks-ext":"2dxMf","./_object-dp":"cLcWd"}],"c7wJO":[function(require,module,exports) {
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function(it) {
    var result = getKeys(it);
    var getSymbols = gOPS.f;
    if (getSymbols) {
        var symbols = getSymbols(it);
        var isEnum = pIE.f;
        var i = 0;
        var key;
        while(symbols.length > i)if (isEnum.call(it, key = symbols[i++])) result.push(key);
    }
    return result;
};

},{"./_object-keys":"98CC0","./_object-gops":"5oH2C","./_object-pie":"2aUxV"}],"98CC0":[function(require,module,exports) {
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');
module.exports = Object.keys || function keys(O) {
    return $keys(O, enumBugKeys);
};

},{"./_object-keys-internal":"x7vs4","./_enum-bug-keys":"NGsf4"}],"x7vs4":[function(require,module,exports) {
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');
module.exports = function(object, names) {
    var O = toIObject(object);
    var i = 0;
    var result = [];
    var key;
    for(key in O)if (key != IE_PROTO) has(O, key) && result.push(key);
    // Don't enum bug & hidden keys
    while(names.length > i)if (has(O, key = names[i++])) ~arrayIndexOf(result, key) || result.push(key);
    return result;
};

},{"./_has":"biQ7v","./_to-iobject":"f9RCz","./_array-includes":"1Ebaw","./_shared-key":"kPb7V"}],"f9RCz":[function(require,module,exports) {
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function(it) {
    return IObject(defined(it));
};

},{"./_iobject":"24JwK","./_defined":"4Lj5U"}],"24JwK":[function(require,module,exports) {
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it) {
    return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":"frIbo"}],"frIbo":[function(require,module,exports) {
var toString = {
}.toString;
module.exports = function(it) {
    return toString.call(it).slice(8, -1);
};

},{}],"4Lj5U":[function(require,module,exports) {
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it) {
    if (it == undefined) throw TypeError("Can't call method on  " + it);
    return it;
};

},{}],"1Ebaw":[function(require,module,exports) {
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function(IS_INCLUDES) {
    return function($this, el, fromIndex) {
        var O = toIObject($this);
        var length = toLength(O.length);
        var index = toAbsoluteIndex(fromIndex, length);
        var value;
        // Array#includes uses SameValueZero equality algorithm
        // eslint-disable-next-line no-self-compare
        if (IS_INCLUDES && el != el) while(length > index){
            value = O[index++];
            // eslint-disable-next-line no-self-compare
            if (value != value) return true;
        // Array#indexOf ignores holes, Array#includes - not
        }
        else for(; length > index; index++)if (IS_INCLUDES || index in O) {
            if (O[index] === el) return IS_INCLUDES || index || 0;
        }
        return !IS_INCLUDES && -1;
    };
};

},{"./_to-iobject":"f9RCz","./_to-length":"irYfS","./_to-absolute-index":"1lPjf"}],"irYfS":[function(require,module,exports) {
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function(it) {
    return it > 0 ? min(toInteger(it), 9007199254740991) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":"cb0GT"}],"cb0GT":[function(require,module,exports) {
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function(it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],"1lPjf":[function(require,module,exports) {
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function(index, length) {
    index = toInteger(index);
    return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":"cb0GT"}],"kPb7V":[function(require,module,exports) {
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function(key) {
    return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":"9XC5J","./_uid":"gBq6n"}],"NGsf4":[function(require,module,exports) {
// IE 8- don't enum bug keys
module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

},{}],"5oH2C":[function(require,module,exports) {
exports.f = Object.getOwnPropertySymbols;

},{}],"2aUxV":[function(require,module,exports) {
exports.f = ({
}).propertyIsEnumerable;

},{}],"dTLRt":[function(require,module,exports) {
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
    return cof(arg) == 'Array';
};

},{"./_cof":"frIbo"}],"7HHXi":[function(require,module,exports) {
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function(it) {
    return Object(defined(it));
};

},{"./_defined":"4Lj5U"}],"b4m8n":[function(require,module,exports) {
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function() {
};
var PROTOTYPE = 'prototype';
// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function() {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = require('./_dom-create')('iframe');
    var i = enumBugKeys.length;
    var lt = '<';
    var gt = '>';
    var iframeDocument;
    iframe.style.display = 'none';
    require('./_html').appendChild(iframe);
    iframe.src = 'javascript:'; // eslint-disable-line no-script-url
    // createDict = iframe.contentWindow.Object;
    // html.removeChild(iframe);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
    iframeDocument.close();
    createDict = iframeDocument.F;
    while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
    return createDict();
};
module.exports = Object.create || function create(O, Properties) {
    var result;
    if (O !== null) {
        Empty[PROTOTYPE] = anObject(O);
        result = new Empty();
        Empty[PROTOTYPE] = null;
        // add "__proto__" for Object.getPrototypeOf polyfill
        result[IE_PROTO] = O;
    } else result = createDict();
    return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":"kiL2X","./_object-dps":"8EUaM","./_enum-bug-keys":"NGsf4","./_shared-key":"kPb7V","./_dom-create":"2qBag","./_html":"lPhWk"}],"8EUaM":[function(require,module,exports) {
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');
module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject(O);
    var keys = getKeys(Properties);
    var length = keys.length;
    var i = 0;
    var P;
    while(length > i)dP.f(O, P = keys[i++], Properties[P]);
    return O;
};

},{"./_object-dp":"cLcWd","./_an-object":"kiL2X","./_object-keys":"98CC0","./_descriptors":"dr2tY"}],"lPhWk":[function(require,module,exports) {
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":"8xCse"}],"2is9e":[function(require,module,exports) {
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {
}.toString;
var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
var getWindowNames = function(it) {
    try {
        return gOPN(it);
    } catch (e) {
        return windowNames.slice();
    }
};
module.exports.f = function getOwnPropertyNames(it) {
    return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_to-iobject":"f9RCz","./_object-gopn":"jK0Om"}],"jK0Om":[function(require,module,exports) {
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return $keys(O, hiddenKeys);
};

},{"./_object-keys-internal":"x7vs4","./_enum-bug-keys":"NGsf4"}],"4bAUG":[function(require,module,exports) {
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;
exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
    O = toIObject(O);
    P = toPrimitive(P, true);
    if (IE8_DOM_DEFINE) try {
        return gOPD(O, P);
    } catch (e) {
    }
    if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_object-pie":"2aUxV","./_property-desc":"825qY","./_to-iobject":"f9RCz","./_to-primitive":"4Oubb","./_has":"biQ7v","./_ie8-dom-define":"cIJOj","./_descriptors":"dr2tY"}],"iklZv":[function(require,module,exports) {
var $export = require('./_export');
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', {
    create: require('./_object-create')
});

},{"./_export":"1Tgvm","./_object-create":"b4m8n"}],"2JxTY":[function(require,module,exports) {
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {
    defineProperty: require('./_object-dp').f
});

},{"./_export":"1Tgvm","./_descriptors":"dr2tY","./_object-dp":"cLcWd"}],"1cFbl":[function(require,module,exports) {
var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {
    defineProperties: require('./_object-dps')
});

},{"./_export":"1Tgvm","./_descriptors":"dr2tY","./_object-dps":"8EUaM"}],"5sxjB":[function(require,module,exports) {
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject = require('./_to-iobject');
var $getOwnPropertyDescriptor = require('./_object-gopd').f;
require('./_object-sap')('getOwnPropertyDescriptor', function() {
    return function getOwnPropertyDescriptor(it, key) {
        return $getOwnPropertyDescriptor(toIObject(it), key);
    };
});

},{"./_to-iobject":"f9RCz","./_object-gopd":"4bAUG","./_object-sap":"fgwTp"}],"fgwTp":[function(require,module,exports) {
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function(KEY, exec) {
    var fn = (core.Object || {
    })[KEY] || Object[KEY];
    var exp = {
    };
    exp[KEY] = exec(fn);
    $export($export.S + $export.F * fails(function() {
        fn(1);
    }), 'Object', exp);
};

},{"./_export":"1Tgvm","./_core":"4o9Ko","./_fails":"iAFH1"}],"5fsye":[function(require,module,exports) {
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = require('./_to-object');
var $getPrototypeOf = require('./_object-gpo');
require('./_object-sap')('getPrototypeOf', function() {
    return function getPrototypeOf(it) {
        return $getPrototypeOf(toObject(it));
    };
});

},{"./_to-object":"7HHXi","./_object-gpo":"4uFAD","./_object-sap":"fgwTp"}],"4uFAD":[function(require,module,exports) {
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;
module.exports = Object.getPrototypeOf || function(O) {
    O = toObject(O);
    if (has(O, IE_PROTO)) return O[IE_PROTO];
    if (typeof O.constructor == 'function' && O instanceof O.constructor) return O.constructor.prototype;
    return O instanceof Object ? ObjectProto : null;
};

},{"./_has":"biQ7v","./_to-object":"7HHXi","./_shared-key":"kPb7V"}],"8woaa":[function(require,module,exports) {
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object');
var $keys = require('./_object-keys');
require('./_object-sap')('keys', function() {
    return function keys(it) {
        return $keys(toObject(it));
    };
});

},{"./_to-object":"7HHXi","./_object-keys":"98CC0","./_object-sap":"fgwTp"}],"dGCli":[function(require,module,exports) {
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function() {
    return require('./_object-gopn-ext').f;
});

},{"./_object-sap":"fgwTp","./_object-gopn-ext":"2is9e"}],"cb5HM":[function(require,module,exports) {
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;
require('./_object-sap')('freeze', function($freeze) {
    return function freeze(it) {
        return $freeze && isObject(it) ? $freeze(meta(it)) : it;
    };
});

},{"./_is-object":"eIE5K","./_meta":"043Qa","./_object-sap":"fgwTp"}],"j3qY2":[function(require,module,exports) {
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;
require('./_object-sap')('seal', function($seal) {
    return function seal(it) {
        return $seal && isObject(it) ? $seal(meta(it)) : it;
    };
});

},{"./_is-object":"eIE5K","./_meta":"043Qa","./_object-sap":"fgwTp"}],"2KuMq":[function(require,module,exports) {
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object');
var meta = require('./_meta').onFreeze;
require('./_object-sap')('preventExtensions', function($preventExtensions) {
    return function preventExtensions(it) {
        return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
    };
});

},{"./_is-object":"eIE5K","./_meta":"043Qa","./_object-sap":"fgwTp"}],"GTKvk":[function(require,module,exports) {
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');
require('./_object-sap')('isFrozen', function($isFrozen) {
    return function isFrozen(it) {
        return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
    };
});

},{"./_is-object":"eIE5K","./_object-sap":"fgwTp"}],"K45hu":[function(require,module,exports) {
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');
require('./_object-sap')('isSealed', function($isSealed) {
    return function isSealed(it) {
        return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
    };
});

},{"./_is-object":"eIE5K","./_object-sap":"fgwTp"}],"23gjD":[function(require,module,exports) {
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');
require('./_object-sap')('isExtensible', function($isExtensible) {
    return function isExtensible(it) {
        return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
    };
});

},{"./_is-object":"eIE5K","./_object-sap":"fgwTp"}],"8DvpM":[function(require,module,exports) {
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');
$export($export.S + $export.F, 'Object', {
    assign: require('./_object-assign')
});

},{"./_export":"1Tgvm","./_object-assign":"h8iBq"}],"h8iBq":[function(require,module,exports) {
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var DESCRIPTORS = require('./_descriptors');
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var $assign = Object.assign;
// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function() {
    var A = {
    };
    var B = {
    };
    // eslint-disable-next-line no-undef
    var S = Symbol();
    var K = 'abcdefghijklmnopqrst';
    A[S] = 7;
    K.split('').forEach(function(k) {
        B[k] = k;
    });
    return $assign({
    }, A)[S] != 7 || Object.keys($assign({
    }, B)).join('') != K;
}) ? function assign(target, source) {
    var T = toObject(target);
    var aLen = arguments.length;
    var index = 1;
    var getSymbols = gOPS.f;
    var isEnum = pIE.f;
    while(aLen > index){
        var S = IObject(arguments[index++]);
        var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
        var length = keys.length;
        var j = 0;
        var key;
        while(length > j){
            key = keys[j++];
            if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];
        }
    }
    return T;
} : $assign;

},{"./_descriptors":"dr2tY","./_object-keys":"98CC0","./_object-gops":"5oH2C","./_object-pie":"2aUxV","./_to-object":"7HHXi","./_iobject":"24JwK","./_fails":"iAFH1"}],"e23no":[function(require,module,exports) {
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', {
    is: require('./_same-value')
});

},{"./_export":"1Tgvm","./_same-value":"94M5S"}],"94M5S":[function(require,module,exports) {
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y) {
    // eslint-disable-next-line no-self-compare
    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};

},{}],"d3fGn":[function(require,module,exports) {
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', {
    setPrototypeOf: require('./_set-proto').set
});

},{"./_export":"1Tgvm","./_set-proto":"ltEMf"}],"ltEMf":[function(require,module,exports) {
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */ var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function(O, proto) {
    anObject(O);
    if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
    set: Object.setPrototypeOf || ('__proto__' in {
    } ? (function(test, buggy, set) {
        try {
            set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
            set(test, []);
            buggy = !(test instanceof Array);
        } catch (e) {
            buggy = true;
        }
        return function setPrototypeOf(O, proto) {
            check(O, proto);
            if (buggy) O.__proto__ = proto;
            else set(O, proto);
            return O;
        };
    })({
    }, false) : undefined),
    check: check
};

},{"./_is-object":"eIE5K","./_an-object":"kiL2X","./_ctx":"4rQSm","./_object-gopd":"4bAUG"}],"7cLOk":[function(require,module,exports) {
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./_classof');
var test = {
};
test[require('./_wks')('toStringTag')] = 'z';
if (test + '' != '[object z]') require('./_redefine')(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
}, true);

},{"./_classof":"5TIen","./_wks":"eaoKZ","./_redefine":"9vAu7"}],"5TIen":[function(require,module,exports) {
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function() {
    return arguments;
}()) == 'Arguments';
// fallback for IE11 Script Access Denied error
var tryGet = function(it, key) {
    try {
        return it[key];
    } catch (e) {
    }
};
module.exports = function(it) {
    var O, T, B;
    return it === undefined ? 'Undefined' : it === null ? 'Null' : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T : ARG ? cof(O) : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":"frIbo","./_wks":"eaoKZ"}],"54Dqr":[function(require,module,exports) {
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');
$export($export.P, 'Function', {
    bind: require('./_bind')
});

},{"./_export":"1Tgvm","./_bind":"2xSTE"}],"2xSTE":[function(require,module,exports) {
'use strict';
var aFunction = require('./_a-function');
var isObject = require('./_is-object');
var invoke = require('./_invoke');
var arraySlice = [].slice;
var factories = {
};
var construct = function(F, len, args) {
    if (!(len in factories)) {
        for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
        // eslint-disable-next-line no-new-func
        factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
    }
    return factories[len](F, args);
};
module.exports = Function.bind || function bind(that /* , ...args */ ) {
    var fn = aFunction(this);
    var partArgs = arraySlice.call(arguments, 1);
    var bound = function() {
        var args = partArgs.concat(arraySlice.call(arguments));
        return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
    };
    if (isObject(fn.prototype)) bound.prototype = fn.prototype;
    return bound;
};

},{"./_a-function":"55L9l","./_is-object":"eIE5K","./_invoke":"c7Bab"}],"c7Bab":[function(require,module,exports) {
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that) {
    var un = that === undefined;
    switch(args.length){
        case 0:
            return un ? fn() : fn.call(that);
        case 1:
            return un ? fn(args[0]) : fn.call(that, args[0]);
        case 2:
            return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
        case 3:
            return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
        case 4:
            return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
    }
    return fn.apply(that, args);
};

},{}],"lmg4B":[function(require,module,exports) {
var dP = require('./_object-dp').f;
var FProto = Function.prototype;
var nameRE = /^\s*function ([^ (]*)/;
var NAME = 'name';
// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
    configurable: true,
    get: function() {
        try {
            return ('' + this).match(nameRE)[1];
        } catch (e) {
            return '';
        }
    }
});

},{"./_object-dp":"cLcWd","./_descriptors":"dr2tY"}],"flBdS":[function(require,module,exports) {
'use strict';
var isObject = require('./_is-object');
var getPrototypeOf = require('./_object-gpo');
var HAS_INSTANCE = require('./_wks')('hasInstance');
var FunctionProto = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, {
    value: function(O) {
        if (typeof this != 'function' || !isObject(O)) return false;
        if (!isObject(this.prototype)) return O instanceof this;
        // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
        while(O = getPrototypeOf(O))if (this.prototype === O) return true;
        return false;
    }
});

},{"./_is-object":"eIE5K","./_object-gpo":"4uFAD","./_wks":"eaoKZ","./_object-dp":"cLcWd"}],"l30ZK":[function(require,module,exports) {
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), {
    parseInt: $parseInt
});

},{"./_export":"1Tgvm","./_parse-int":"b3ov9"}],"b3ov9":[function(require,module,exports) {
var $parseInt = require('./_global').parseInt;
var $trim = require('./_string-trim').trim;
var ws = require('./_string-ws');
var hex = /^[-+]?0[xX]/;
module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
    var string = $trim(String(str), 3);
    return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));
} : $parseInt;

},{"./_global":"8xCse","./_string-trim":"9YCA9","./_string-ws":"bg6tv"}],"9YCA9":[function(require,module,exports) {
var $export = require('./_export');
var defined = require('./_defined');
var fails = require('./_fails');
var spaces = require('./_string-ws');
var space = '[' + spaces + ']';
var non = '\u200b\u0085';
var ltrim = RegExp('^' + space + space + '*');
var rtrim = RegExp(space + space + '*$');
var exporter = function(KEY, exec, ALIAS) {
    var exp = {
    };
    var FORCE = fails(function() {
        return !!spaces[KEY]() || non[KEY]() != non;
    });
    var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
    if (ALIAS) exp[ALIAS] = fn;
    $export($export.P + $export.F * FORCE, 'String', exp);
};
// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function(string, TYPE) {
    string = String(defined(string));
    if (TYPE & 1) string = string.replace(ltrim, '');
    if (TYPE & 2) string = string.replace(rtrim, '');
    return string;
};
module.exports = exporter;

},{"./_export":"1Tgvm","./_defined":"4Lj5U","./_fails":"iAFH1","./_string-ws":"bg6tv"}],"bg6tv":[function(require,module,exports) {
module.exports = "\t\n\v\f\r \xa0 ᠎             　\u2028\u2029﻿";

},{}],"edHLy":[function(require,module,exports) {
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), {
    parseFloat: $parseFloat
});

},{"./_export":"1Tgvm","./_parse-float":"eAzEB"}],"eAzEB":[function(require,module,exports) {
var $parseFloat = require('./_global').parseFloat;
var $trim = require('./_string-trim').trim;
module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {
    var string = $trim(String(str), 3);
    var result = $parseFloat(string);
    return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;

},{"./_global":"8xCse","./_string-trim":"9YCA9","./_string-ws":"bg6tv"}],"b3DG0":[function(require,module,exports) {
'use strict';
var global = require('./_global');
var has = require('./_has');
var cof = require('./_cof');
var inheritIfRequired = require('./_inherit-if-required');
var toPrimitive = require('./_to-primitive');
var fails = require('./_fails');
var gOPN = require('./_object-gopn').f;
var gOPD = require('./_object-gopd').f;
var dP = require('./_object-dp').f;
var $trim = require('./_string-trim').trim;
var NUMBER = 'Number';
var $Number = global[NUMBER];
var Base = $Number;
var proto = $Number.prototype;
// Opera ~12 has broken Object#toString
var BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;
var TRIM = 'trim' in String.prototype;
// 7.1.3 ToNumber(argument)
var toNumber = function(argument) {
    var it = toPrimitive(argument, false);
    if (typeof it == 'string' && it.length > 2) {
        it = TRIM ? it.trim() : $trim(it, 3);
        var first = it.charCodeAt(0);
        var third, radix, maxCode;
        if (first === 43 || first === 45) {
            third = it.charCodeAt(2);
            if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
        } else if (first === 48) {
            switch(it.charCodeAt(1)){
                case 66:
                case 98:
                    radix = 2;
                    maxCode = 49;
                    break; // fast equal /^0b[01]+$/i
                case 79:
                case 111:
                    radix = 8;
                    maxCode = 55;
                    break; // fast equal /^0o[0-7]+$/i
                default:
                    return +it;
            }
            for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
                code = digits.charCodeAt(i);
                // parseInt parses a string to a first unavailable symbol
                // but ToNumber should return NaN if a string contains unavailable symbols
                if (code < 48 || code > maxCode) return NaN;
            }
            return parseInt(digits, radix);
        }
    }
    return +it;
};
if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
    $Number = function Number(value) {
        var it = arguments.length < 1 ? 0 : value;
        var that = this;
        return that instanceof $Number && (BROKEN_COF ? fails(function() {
            proto.valueOf.call(that);
        }) : cof(that) != NUMBER) ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
    };
    for(var keys = require('./_descriptors') ? gOPN(Base) : // ES3:
    "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(','), j = 0, key; keys.length > j; j++)if (has(Base, key = keys[j]) && !has($Number, key)) dP($Number, key, gOPD(Base, key));
    $Number.prototype = proto;
    proto.constructor = $Number;
    require('./_redefine')(global, NUMBER, $Number);
}

},{"./_global":"8xCse","./_has":"biQ7v","./_cof":"frIbo","./_inherit-if-required":"9GGeZ","./_to-primitive":"4Oubb","./_fails":"iAFH1","./_object-gopn":"jK0Om","./_object-gopd":"4bAUG","./_object-dp":"cLcWd","./_string-trim":"9YCA9","./_object-create":"b4m8n","./_descriptors":"dr2tY","./_redefine":"9vAu7"}],"9GGeZ":[function(require,module,exports) {
var isObject = require('./_is-object');
var setPrototypeOf = require('./_set-proto').set;
module.exports = function(that, target, C) {
    var S = target.constructor;
    var P;
    if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) setPrototypeOf(that, P);
    return that;
};

},{"./_is-object":"eIE5K","./_set-proto":"ltEMf"}],"jVWO1":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toInteger = require('./_to-integer');
var aNumberValue = require('./_a-number-value');
var repeat = require('./_string-repeat');
var $toFixed = 1..toFixed;
var floor = Math.floor;
var data = [
    0,
    0,
    0,
    0,
    0,
    0
];
var ERROR = 'Number.toFixed: incorrect invocation!';
var ZERO = '0';
var multiply = function(n, c) {
    var i = -1;
    var c2 = c;
    while(++i < 6){
        c2 += n * data[i];
        data[i] = c2 % 10000000;
        c2 = floor(c2 / 10000000);
    }
};
var divide = function(n) {
    var i = 6;
    var c = 0;
    while(--i >= 0){
        c += data[i];
        data[i] = floor(c / n);
        c = c % n * 10000000;
    }
};
var numToString = function() {
    var i = 6;
    var s = '';
    while(--i >= 0)if (s !== '' || i === 0 || data[i] !== 0) {
        var t = String(data[i]);
        s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
    return s;
};
var pow = function(x, n, acc) {
    return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function(x) {
    var n = 0;
    var x2 = x;
    while(x2 >= 4096){
        n += 12;
        x2 /= 4096;
    }
    while(x2 >= 2){
        n += 1;
        x2 /= 2;
    }
    return n;
};
$export($export.P + $export.F * (!!$toFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000100..toFixed(0) !== '1000000000000000128') || !require('./_fails')(function() {
    // V8 ~ Android 4.3-
    $toFixed.call({
    });
})), 'Number', {
    toFixed: function toFixed(fractionDigits) {
        var x = aNumberValue(this, ERROR);
        var f = toInteger(fractionDigits);
        var s = '';
        var m = ZERO;
        var e, z, j, k;
        if (f < 0 || f > 20) throw RangeError(ERROR);
        // eslint-disable-next-line no-self-compare
        if (x != x) return 'NaN';
        if (x <= -1000000000000000000000 || x >= 1000000000000000000000) return String(x);
        if (x < 0) {
            s = '-';
            x = -x;
        }
        if (x > 0.000000000000000000001) {
            e = log(x * pow(2, 69, 1)) - 69;
            z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
            z *= 4503599627370496;
            e = 52 - e;
            if (e > 0) {
                multiply(0, z);
                j = f;
                while(j >= 7){
                    multiply(10000000, 0);
                    j -= 7;
                }
                multiply(pow(10, j, 1), 0);
                j = e - 1;
                while(j >= 23){
                    divide(8388608);
                    j -= 23;
                }
                divide(1 << j);
                multiply(1, 1);
                divide(2);
                m = numToString();
            } else {
                multiply(0, z);
                multiply(1 << -e, 0);
                m = numToString() + repeat.call(ZERO, f);
            }
        }
        if (f > 0) {
            k = m.length;
            m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
        } else m = s + m;
        return m;
    }
});

},{"./_export":"1Tgvm","./_to-integer":"cb0GT","./_a-number-value":"3132k","./_string-repeat":"2JEgf","./_fails":"iAFH1"}],"3132k":[function(require,module,exports) {
var cof = require('./_cof');
module.exports = function(it, msg) {
    if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
    return +it;
};

},{"./_cof":"frIbo"}],"2JEgf":[function(require,module,exports) {
'use strict';
var toInteger = require('./_to-integer');
var defined = require('./_defined');
module.exports = function repeat(count) {
    var str = String(defined(this));
    var res = '';
    var n = toInteger(count);
    if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
    for(; n > 0; (n >>>= 1) && (str += str))if (n & 1) res += str;
    return res;
};

},{"./_to-integer":"cb0GT","./_defined":"4Lj5U"}],"fkTCt":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $fails = require('./_fails');
var aNumberValue = require('./_a-number-value');
var $toPrecision = 1..toPrecision;
$export($export.P + $export.F * ($fails(function() {
    // IE7-
    return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function() {
    // V8 ~ Android 4.3-
    $toPrecision.call({
    });
})), 'Number', {
    toPrecision: function toPrecision(precision) {
        var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
        return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
    }
});

},{"./_export":"1Tgvm","./_fails":"iAFH1","./_a-number-value":"3132k"}],"dS5u0":[function(require,module,exports) {
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');
$export($export.S, 'Number', {
    EPSILON: Math.pow(2, -52)
});

},{"./_export":"1Tgvm"}],"gaJ9D":[function(require,module,exports) {
// 20.1.2.2 Number.isFinite(number)
var $export = require('./_export');
var _isFinite = require('./_global').isFinite;
$export($export.S, 'Number', {
    isFinite: function isFinite(it) {
        return typeof it == 'number' && _isFinite(it);
    }
});

},{"./_export":"1Tgvm","./_global":"8xCse"}],"cXfOC":[function(require,module,exports) {
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');
$export($export.S, 'Number', {
    isInteger: require('./_is-integer')
});

},{"./_export":"1Tgvm","./_is-integer":"eFruS"}],"eFruS":[function(require,module,exports) {
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object');
var floor = Math.floor;
module.exports = function isInteger(it) {
    return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"./_is-object":"eIE5K"}],"dHEdL":[function(require,module,exports) {
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');
$export($export.S, 'Number', {
    isNaN: function isNaN(number) {
        // eslint-disable-next-line no-self-compare
        return number != number;
    }
});

},{"./_export":"1Tgvm"}],"8WZJi":[function(require,module,exports) {
// 20.1.2.5 Number.isSafeInteger(number)
var $export = require('./_export');
var isInteger = require('./_is-integer');
var abs = Math.abs;
$export($export.S, 'Number', {
    isSafeInteger: function isSafeInteger(number) {
        return isInteger(number) && abs(number) <= 9007199254740991;
    }
});

},{"./_export":"1Tgvm","./_is-integer":"eFruS"}],"lEoVS":[function(require,module,exports) {
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');
$export($export.S, 'Number', {
    MAX_SAFE_INTEGER: 9007199254740991
});

},{"./_export":"1Tgvm"}],"6GYXq":[function(require,module,exports) {
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');
$export($export.S, 'Number', {
    MIN_SAFE_INTEGER: -9007199254740991
});

},{"./_export":"1Tgvm"}],"adyPr":[function(require,module,exports) {
var $export = require('./_export');
var $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {
    parseFloat: $parseFloat
});

},{"./_export":"1Tgvm","./_parse-float":"eAzEB"}],"cz541":[function(require,module,exports) {
var $export = require('./_export');
var $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {
    parseInt: $parseInt
});

},{"./_export":"1Tgvm","./_parse-int":"b3ov9"}],"atazc":[function(require,module,exports) {
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export');
var log1p = require('./_math-log1p');
var sqrt = Math.sqrt;
var $acosh = Math.acosh;
$export($export.S + $export.F * !($acosh && Math.floor($acosh(Number.MAX_VALUE)) == 710 && $acosh(Infinity) == Infinity), 'Math', {
    acosh: function acosh(x) {
        return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
    }
});

},{"./_export":"1Tgvm","./_math-log1p":"39ll1"}],"39ll1":[function(require,module,exports) {
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x) {
    return (x = +x) > -0.00000001 && x < 0.00000001 ? x - x * x / 2 : Math.log(1 + x);
};

},{}],"9vCFA":[function(require,module,exports) {
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export');
var $asinh = Math.asinh;
function asinh(x) {
    return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}
// Tor Browser bug: Math.asinh(0) -> -0
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {
    asinh: asinh
});

},{"./_export":"1Tgvm"}],"1Poi7":[function(require,module,exports) {
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export');
var $atanh = Math.atanh;
// Tor Browser bug: Math.atanh(-0) -> 0
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
    atanh: function atanh(x) {
        return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
    }
});

},{"./_export":"1Tgvm"}],"kEyNP":[function(require,module,exports) {
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export');
var sign = require('./_math-sign');
$export($export.S, 'Math', {
    cbrt: function cbrt(x) {
        return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
    }
});

},{"./_export":"1Tgvm","./_math-sign":"7nT0W"}],"7nT0W":[function(require,module,exports) {
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x) {
    // eslint-disable-next-line no-self-compare
    return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};

},{}],"asnnc":[function(require,module,exports) {
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');
$export($export.S, 'Math', {
    clz32: function clz32(x) {
        return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
    }
});

},{"./_export":"1Tgvm"}],"672oR":[function(require,module,exports) {
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export');
var exp = Math.exp;
$export($export.S, 'Math', {
    cosh: function cosh(x) {
        return (exp(x = +x) + exp(-x)) / 2;
    }
});

},{"./_export":"1Tgvm"}],"eLul3":[function(require,module,exports) {
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export');
var $expm1 = require('./_math-expm1');
$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {
    expm1: $expm1
});

},{"./_export":"1Tgvm","./_math-expm1":"6SST9"}],"6SST9":[function(require,module,exports) {
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = !$expm1 || $expm1(10) > 22025.465794806718 || $expm1(10) < 22025.465794806718 || $expm1(-0.00000000000000002) != -0.00000000000000002 ? function expm1(x) {
    return (x = +x) == 0 ? x : x > -0.000001 && x < 0.000001 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;

},{}],"6JW0t":[function(require,module,exports) {
// 20.2.2.16 Math.fround(x)
var $export = require('./_export');
$export($export.S, 'Math', {
    fround: require('./_math-fround')
});

},{"./_export":"1Tgvm","./_math-fround":"9TbbN"}],"9TbbN":[function(require,module,exports) {
// 20.2.2.16 Math.fround(x)
var sign = require('./_math-sign');
var pow = Math.pow;
var EPSILON = pow(2, -52);
var EPSILON32 = pow(2, -23);
var MAX32 = pow(2, 127) * (2 - EPSILON32);
var MIN32 = pow(2, -126);
var roundTiesToEven = function(n) {
    return n + 1 / EPSILON - 1 / EPSILON;
};
module.exports = Math.fround || function fround(x) {
    var $abs = Math.abs(x);
    var $sign = sign(x);
    var a, result;
    if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
    a = (1 + EPSILON32 / EPSILON) * $abs;
    result = a - (a - $abs);
    // eslint-disable-next-line no-self-compare
    if (result > MAX32 || result != result) return $sign * Infinity;
    return $sign * result;
};

},{"./_math-sign":"7nT0W"}],"1rcXM":[function(require,module,exports) {
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./_export');
var abs = Math.abs;
$export($export.S, 'Math', {
    hypot: function hypot(value1, value2) {
        var sum = 0;
        var i = 0;
        var aLen = arguments.length;
        var larg = 0;
        var arg, div;
        while(i < aLen){
            arg = abs(arguments[i++]);
            if (larg < arg) {
                div = larg / arg;
                sum = sum * div * div + 1;
                larg = arg;
            } else if (arg > 0) {
                div = arg / larg;
                sum += div * div;
            } else sum += arg;
        }
        return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
    }
});

},{"./_export":"1Tgvm"}],"lAxVU":[function(require,module,exports) {
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export');
var $imul = Math.imul;
// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function() {
    return $imul(4294967295, 5) != -5 || $imul.length != 2;
}), 'Math', {
    imul: function imul(x, y) {
        var UINT16 = 65535;
        var xn = +x;
        var yn = +y;
        var xl = UINT16 & xn;
        var yl = UINT16 & yn;
        return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
    }
});

},{"./_export":"1Tgvm","./_fails":"iAFH1"}],"fIjzt":[function(require,module,exports) {
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');
$export($export.S, 'Math', {
    log10: function log10(x) {
        return Math.log(x) * Math.LOG10E;
    }
});

},{"./_export":"1Tgvm"}],"kK15h":[function(require,module,exports) {
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');
$export($export.S, 'Math', {
    log1p: require('./_math-log1p')
});

},{"./_export":"1Tgvm","./_math-log1p":"39ll1"}],"kkgGM":[function(require,module,exports) {
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');
$export($export.S, 'Math', {
    log2: function log2(x) {
        return Math.log(x) / Math.LN2;
    }
});

},{"./_export":"1Tgvm"}],"18Gp0":[function(require,module,exports) {
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');
$export($export.S, 'Math', {
    sign: require('./_math-sign')
});

},{"./_export":"1Tgvm","./_math-sign":"7nT0W"}],"bkULm":[function(require,module,exports) {
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;
// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function() {
    return !Math.sinh(-0.00000000000000002) != -0.00000000000000002;
}), 'Math', {
    sinh: function sinh(x) {
        return Math.abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
    }
});

},{"./_export":"1Tgvm","./_math-expm1":"6SST9","./_fails":"iAFH1"}],"br08o":[function(require,module,exports) {
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export');
var expm1 = require('./_math-expm1');
var exp = Math.exp;
$export($export.S, 'Math', {
    tanh: function tanh(x) {
        var a = expm1(x = +x);
        var b = expm1(-x);
        return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
    }
});

},{"./_export":"1Tgvm","./_math-expm1":"6SST9"}],"8fixj":[function(require,module,exports) {
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');
$export($export.S, 'Math', {
    trunc: function trunc(it) {
        return (it > 0 ? Math.floor : Math.ceil)(it);
    }
});

},{"./_export":"1Tgvm"}],"gsGce":[function(require,module,exports) {
var $export = require('./_export');
var toAbsoluteIndex = require('./_to-absolute-index');
var fromCharCode = String.fromCharCode;
var $fromCodePoint = String.fromCodePoint;
// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
    // 21.1.2.2 String.fromCodePoint(...codePoints)
    fromCodePoint: function fromCodePoint(x) {
        var res = [];
        var aLen = arguments.length;
        var i = 0;
        var code;
        while(aLen > i){
            code = +arguments[i++];
            if (toAbsoluteIndex(code, 1114111) !== code) throw RangeError(code + ' is not a valid code point');
            res.push(code < 65536 ? fromCharCode(code) : fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320));
        }
        return res.join('');
    }
});

},{"./_export":"1Tgvm","./_to-absolute-index":"1lPjf"}],"4MADL":[function(require,module,exports) {
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
$export($export.S, 'String', {
    // 21.1.2.4 String.raw(callSite, ...substitutions)
    raw: function raw(callSite) {
        var tpl = toIObject(callSite.raw);
        var len = toLength(tpl.length);
        var aLen = arguments.length;
        var res = [];
        var i = 0;
        while(len > i){
            res.push(String(tpl[i++]));
            if (i < aLen) res.push(String(arguments[i]));
        }
        return res.join('');
    }
});

},{"./_export":"1Tgvm","./_to-iobject":"f9RCz","./_to-length":"irYfS"}],"hEKob":[function(require,module,exports) {
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./_string-trim')('trim', function($trim) {
    return function trim() {
        return $trim(this, 3);
    };
});

},{"./_string-trim":"9YCA9"}],"llgDB":[function(require,module,exports) {
'use strict';
var $at = require('./_string-at')(true);
// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function(iterated) {
    this._t = String(iterated); // target
    this._i = 0; // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function() {
    var O = this._t;
    var index = this._i;
    var point;
    if (index >= O.length) return {
        value: undefined,
        done: true
    };
    point = $at(O, index);
    this._i += point.length;
    return {
        value: point,
        done: false
    };
});

},{"./_string-at":"rbgP0","./_iter-define":"egJhK"}],"rbgP0":[function(require,module,exports) {
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING) {
    return function(that, pos) {
        var s = String(defined(that));
        var i = toInteger(pos);
        var l = s.length;
        var a, b;
        if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
        a = s.charCodeAt(i);
        return a < 55296 || a > 56319 || i + 1 === l || (b = s.charCodeAt(i + 1)) < 56320 || b > 57343 ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 55296 << 10) + (b - 56320) + 65536;
    };
};

},{"./_to-integer":"cb0GT","./_defined":"4Lj5U"}],"egJhK":[function(require,module,exports) {
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';
var returnThis = function() {
    return this;
};
module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    $iterCreate(Constructor, NAME, next);
    var getMethod = function(kind) {
        if (!BUGGY && kind in proto) return proto[kind];
        switch(kind){
            case KEYS:
                return function keys() {
                    return new Constructor(this, kind);
                };
            case VALUES:
                return function values() {
                    return new Constructor(this, kind);
                };
        }
        return function entries() {
            return new Constructor(this, kind);
        };
    };
    var TAG = NAME + ' Iterator';
    var DEF_VALUES = DEFAULT == VALUES;
    var VALUES_BUG = false;
    var proto = Base.prototype;
    var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
    var $default = $native || getMethod(DEFAULT);
    var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
    var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
    var methods, key, IteratorPrototype;
    // Fix native
    if ($anyNative) {
        IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
        if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
            // Set @@toStringTag to native iterators
            setToStringTag(IteratorPrototype, TAG, true);
            // fix for some old engines
            if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
        }
    }
    // fix Array#{values, @@iterator}.name in V8 / FF
    if (DEF_VALUES && $native && $native.name !== VALUES) {
        VALUES_BUG = true;
        $default = function values() {
            return $native.call(this);
        };
    }
    // Define iterator
    if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) hide(proto, ITERATOR, $default);
    // Plug for library
    Iterators[NAME] = $default;
    Iterators[TAG] = returnThis;
    if (DEFAULT) {
        methods = {
            values: DEF_VALUES ? $default : getMethod(VALUES),
            keys: IS_SET ? $default : getMethod(KEYS),
            entries: $entries
        };
        if (FORCED) {
            for(key in methods)if (!(key in proto)) redefine(proto, key, methods[key]);
        } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }
    return methods;
};

},{"./_library":"lmtqY","./_export":"1Tgvm","./_redefine":"9vAu7","./_hide":"ddpVq","./_iterators":"dITQr","./_iter-create":"eTcx3","./_set-to-string-tag":"7YXlq","./_object-gpo":"4uFAD","./_wks":"eaoKZ"}],"dITQr":[function(require,module,exports) {
module.exports = {
};

},{}],"eTcx3":[function(require,module,exports) {
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {
};
// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function() {
    return this;
});
module.exports = function(Constructor, NAME, next) {
    Constructor.prototype = create(IteratorPrototype, {
        next: descriptor(1, next)
    });
    setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_object-create":"b4m8n","./_property-desc":"825qY","./_set-to-string-tag":"7YXlq","./_hide":"ddpVq","./_wks":"eaoKZ"}],"doYwG":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $at = require('./_string-at')(false);
$export($export.P, 'String', {
    // 21.1.3.3 String.prototype.codePointAt(pos)
    codePointAt: function codePointAt(pos) {
        return $at(this, pos);
    }
});

},{"./_export":"1Tgvm","./_string-at":"rbgP0"}],"39nwy":[function(require,module,exports) {
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var ENDS_WITH = 'endsWith';
var $endsWith = ''[ENDS_WITH];
$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
    endsWith: function endsWith(searchString /* , endPosition = @length */ ) {
        var that = context(this, searchString, ENDS_WITH);
        var endPosition = arguments.length > 1 ? arguments[1] : undefined;
        var len = toLength(that.length);
        var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);
        var search = String(searchString);
        return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
    }
});

},{"./_export":"1Tgvm","./_to-length":"irYfS","./_string-context":"dNNLc","./_fails-is-regexp":"4q5P7"}],"dNNLc":[function(require,module,exports) {
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp');
var defined = require('./_defined');
module.exports = function(that, searchString, NAME) {
    if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
    return String(defined(that));
};

},{"./_is-regexp":"aGcfF","./_defined":"4Lj5U"}],"aGcfF":[function(require,module,exports) {
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object');
var cof = require('./_cof');
var MATCH = require('./_wks')('match');
module.exports = function(it) {
    var isRegExp;
    return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};

},{"./_is-object":"eIE5K","./_cof":"frIbo","./_wks":"eaoKZ"}],"4q5P7":[function(require,module,exports) {
var MATCH = require('./_wks')('match');
module.exports = function(KEY) {
    var re = /./;
    try {
        '/./'[KEY](re);
    } catch (e) {
        try {
            re[MATCH] = false;
            return !'/./'[KEY](re);
        } catch (f) {
        }
    }
    return true;
};

},{"./_wks":"eaoKZ"}],"9JmYp":[function(require,module,exports) {
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export = require('./_export');
var context = require('./_string-context');
var INCLUDES = 'includes';
$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
    includes: function includes(searchString /* , position = 0 */ ) {
        return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
    }
});

},{"./_export":"1Tgvm","./_string-context":"dNNLc","./_fails-is-regexp":"4q5P7"}],"cqBCd":[function(require,module,exports) {
var $export = require('./_export');
$export($export.P, 'String', {
    // 21.1.3.13 String.prototype.repeat(count)
    repeat: require('./_string-repeat')
});

},{"./_export":"1Tgvm","./_string-repeat":"2JEgf"}],"iMejr":[function(require,module,exports) {
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export = require('./_export');
var toLength = require('./_to-length');
var context = require('./_string-context');
var STARTS_WITH = 'startsWith';
var $startsWith = ''[STARTS_WITH];
$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
    startsWith: function startsWith(searchString /* , position = 0 */ ) {
        var that = context(this, searchString, STARTS_WITH);
        var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
        var search = String(searchString);
        return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
    }
});

},{"./_export":"1Tgvm","./_to-length":"irYfS","./_string-context":"dNNLc","./_fails-is-regexp":"4q5P7"}],"97Lll":[function(require,module,exports) {
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function(createHTML) {
    return function anchor(name) {
        return createHTML(this, 'a', 'name', name);
    };
});

},{"./_string-html":"8eGZd"}],"8eGZd":[function(require,module,exports) {
var $export = require('./_export');
var fails = require('./_fails');
var defined = require('./_defined');
var quot = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function(string, tag, attribute, value) {
    var S = String(defined(string));
    var p1 = '<' + tag;
    if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
    return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function(NAME, exec) {
    var O = {
    };
    O[NAME] = exec(createHTML);
    $export($export.P + $export.F * fails(function() {
        var test = ''[NAME]('"');
        return test !== test.toLowerCase() || test.split('"').length > 3;
    }), 'String', O);
};

},{"./_export":"1Tgvm","./_fails":"iAFH1","./_defined":"4Lj5U"}],"7nKCA":[function(require,module,exports) {
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function(createHTML) {
    return function big() {
        return createHTML(this, 'big', '', '');
    };
});

},{"./_string-html":"8eGZd"}],"jbxAT":[function(require,module,exports) {
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function(createHTML) {
    return function blink() {
        return createHTML(this, 'blink', '', '');
    };
});

},{"./_string-html":"8eGZd"}],"4MfGp":[function(require,module,exports) {
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function(createHTML) {
    return function bold() {
        return createHTML(this, 'b', '', '');
    };
});

},{"./_string-html":"8eGZd"}],"4y2Bb":[function(require,module,exports) {
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function(createHTML) {
    return function fixed() {
        return createHTML(this, 'tt', '', '');
    };
});

},{"./_string-html":"8eGZd"}],"lmhCi":[function(require,module,exports) {
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function(createHTML) {
    return function fontcolor(color) {
        return createHTML(this, 'font', 'color', color);
    };
});

},{"./_string-html":"8eGZd"}],"hL89C":[function(require,module,exports) {
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function(createHTML) {
    return function fontsize(size) {
        return createHTML(this, 'font', 'size', size);
    };
});

},{"./_string-html":"8eGZd"}],"iwOAc":[function(require,module,exports) {
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function(createHTML) {
    return function italics() {
        return createHTML(this, 'i', '', '');
    };
});

},{"./_string-html":"8eGZd"}],"e07IC":[function(require,module,exports) {
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function(createHTML) {
    return function link(url) {
        return createHTML(this, 'a', 'href', url);
    };
});

},{"./_string-html":"8eGZd"}],"2MSNU":[function(require,module,exports) {
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function(createHTML) {
    return function small() {
        return createHTML(this, 'small', '', '');
    };
});

},{"./_string-html":"8eGZd"}],"8kiXd":[function(require,module,exports) {
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function(createHTML) {
    return function strike() {
        return createHTML(this, 'strike', '', '');
    };
});

},{"./_string-html":"8eGZd"}],"iprh9":[function(require,module,exports) {
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function(createHTML) {
    return function sub() {
        return createHTML(this, 'sub', '', '');
    };
});

},{"./_string-html":"8eGZd"}],"doHpa":[function(require,module,exports) {
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function(createHTML) {
    return function sup() {
        return createHTML(this, 'sup', '', '');
    };
});

},{"./_string-html":"8eGZd"}],"4HGro":[function(require,module,exports) {
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = require('./_export');
$export($export.S, 'Date', {
    now: function() {
        return new Date().getTime();
    }
});

},{"./_export":"1Tgvm"}],"7Glbw":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
$export($export.P + $export.F * require('./_fails')(function() {
    return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({
        toISOString: function() {
            return 1;
        }
    }) !== 1;
}), 'Date', {
    // eslint-disable-next-line no-unused-vars
    toJSON: function toJSON(key) {
        var O = toObject(this);
        var pv = toPrimitive(O);
        return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
    }
});

},{"./_export":"1Tgvm","./_to-object":"7HHXi","./_to-primitive":"4Oubb","./_fails":"iAFH1"}],"hQdLT":[function(require,module,exports) {
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = require('./_export');
var toISOString = require('./_date-to-iso-string');
// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {
    toISOString: toISOString
});

},{"./_export":"1Tgvm","./_date-to-iso-string":"aJh30"}],"aJh30":[function(require,module,exports) {
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var fails = require('./_fails');
var getTime = Date.prototype.getTime;
var $toISOString = Date.prototype.toISOString;
var lz = function(num) {
    return num > 9 ? num : '0' + num;
};
// PhantomJS / old WebKit has a broken implementations
module.exports = fails(function() {
    return $toISOString.call(new Date(-50000000000000 - 1)) != '0385-07-25T07:06:39.999Z';
}) || !fails(function() {
    $toISOString.call(new Date(NaN));
}) ? function toISOString() {
    if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
    var d = this;
    var y = d.getUTCFullYear();
    var m = d.getUTCMilliseconds();
    var s = y < 0 ? '-' : y > 9999 ? '+' : '';
    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
} : $toISOString;

},{"./_fails":"iAFH1"}],"d3yLX":[function(require,module,exports) {
var DateProto = Date.prototype;
var INVALID_DATE = 'Invalid Date';
var TO_STRING = 'toString';
var $toString = DateProto[TO_STRING];
var getTime = DateProto.getTime;
if (new Date(NaN) + '' != INVALID_DATE) require('./_redefine')(DateProto, TO_STRING, function toString() {
    var value = getTime.call(this);
    // eslint-disable-next-line no-self-compare
    return value === value ? $toString.call(this) : INVALID_DATE;
});

},{"./_redefine":"9vAu7"}],"hoeNq":[function(require,module,exports) {
var TO_PRIMITIVE = require('./_wks')('toPrimitive');
var proto = Date.prototype;
if (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));

},{"./_wks":"eaoKZ","./_hide":"ddpVq","./_date-to-primitive":"i1V0X"}],"i1V0X":[function(require,module,exports) {
'use strict';
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');
var NUMBER = 'number';
module.exports = function(hint) {
    if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
    return toPrimitive(anObject(this), hint != NUMBER);
};

},{"./_an-object":"kiL2X","./_to-primitive":"4Oubb"}],"5g48E":[function(require,module,exports) {
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');
$export($export.S, 'Array', {
    isArray: require('./_is-array')
});

},{"./_export":"1Tgvm","./_is-array":"dTLRt"}],"i3Nvz":[function(require,module,exports) {
'use strict';
var ctx = require('./_ctx');
var $export = require('./_export');
var toObject = require('./_to-object');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var toLength = require('./_to-length');
var createProperty = require('./_create-property');
var getIterFn = require('./core.get-iterator-method');
$export($export.S + $export.F * !require('./_iter-detect')(function(iter) {
    Array.from(iter);
}), 'Array', {
    // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
    from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */ ) {
        var O = toObject(arrayLike);
        var C = typeof this == 'function' ? this : Array;
        var aLen = arguments.length;
        var mapfn = aLen > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        var index = 0;
        var iterFn = getIterFn(O);
        var length, result, step, iterator;
        if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
        // if object isn't iterable or it's array with default iterator - use simple case
        if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) for(iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++)createProperty(result, index, mapping ? call(iterator, mapfn, [
            step.value,
            index
        ], true) : step.value);
        else {
            length = toLength(O.length);
            for(result = new C(length); length > index; index++)createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
        }
        result.length = index;
        return result;
    }
});

},{"./_ctx":"4rQSm","./_export":"1Tgvm","./_to-object":"7HHXi","./_iter-call":"hZ7Tf","./_is-array-iter":"ipP6u","./_to-length":"irYfS","./_create-property":"8UZLF","./core.get-iterator-method":"hb865","./_iter-detect":"3KQwU"}],"hZ7Tf":[function(require,module,exports) {
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function(iterator, fn, value, entries) {
    try {
        return entries ? fn(anObject(value)[0], value[1]) : fn(value);
    // 7.4.6 IteratorClose(iterator, completion)
    } catch (e) {
        var ret = iterator['return'];
        if (ret !== undefined) anObject(ret.call(iterator));
        throw e;
    }
};

},{"./_an-object":"kiL2X"}],"ipP6u":[function(require,module,exports) {
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;
module.exports = function(it) {
    return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":"dITQr","./_wks":"eaoKZ"}],"8UZLF":[function(require,module,exports) {
'use strict';
var $defineProperty = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = function(object, index, value) {
    if (index in object) $defineProperty.f(object, index, createDesc(0, value));
    else object[index] = value;
};

},{"./_object-dp":"cLcWd","./_property-desc":"825qY"}],"hb865":[function(require,module,exports) {
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function(it) {
    if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
};

},{"./_classof":"5TIen","./_wks":"eaoKZ","./_iterators":"dITQr","./_core":"4o9Ko"}],"3KQwU":[function(require,module,exports) {
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;
try {
    var riter = [
        7
    ][ITERATOR]();
    riter['return'] = function() {
        SAFE_CLOSING = true;
    };
    // eslint-disable-next-line no-throw-literal
    Array.from(riter, function() {
        throw 2;
    });
} catch (e) {
}
module.exports = function(exec, skipClosing) {
    if (!skipClosing && !SAFE_CLOSING) return false;
    var safe = false;
    try {
        var arr = [
            7
        ];
        var iter = arr[ITERATOR]();
        iter.next = function() {
            return {
                done: safe = true
            };
        };
        arr[ITERATOR] = function() {
            return iter;
        };
        exec(arr);
    } catch (e) {
    }
    return safe;
};

},{"./_wks":"eaoKZ"}],"aLmME":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var createProperty = require('./_create-property');
// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function() {
    function F() {
    }
    return !(Array.of.call(F) instanceof F);
}), 'Array', {
    // 22.1.2.3 Array.of( ...items)
    of: function of() {
        var index = 0;
        var aLen = arguments.length;
        var result = new (typeof this == 'function' ? this : Array)(aLen);
        while(aLen > index)createProperty(result, index, arguments[index++]);
        result.length = aLen;
        return result;
    }
});

},{"./_export":"1Tgvm","./_create-property":"8UZLF","./_fails":"iAFH1"}],"lQMhQ":[function(require,module,exports) {
'use strict';
// 22.1.3.13 Array.prototype.join(separator)
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var arrayJoin = [].join;
// fallback for not array-like strings
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
    join: function join(separator) {
        return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
    }
});

},{"./_export":"1Tgvm","./_to-iobject":"f9RCz","./_iobject":"24JwK","./_strict-method":"7xXNH"}],"7xXNH":[function(require,module,exports) {
'use strict';
var fails = require('./_fails');
module.exports = function(method, arg) {
    return !!method && fails(function() {
        // eslint-disable-next-line no-useless-call
        arg ? method.call(null, function() {
        }, 1) : method.call(null);
    });
};

},{"./_fails":"iAFH1"}],"4E6IU":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var html = require('./_html');
var cof = require('./_cof');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var arraySlice = [].slice;
// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function() {
    if (html) arraySlice.call(html);
}), 'Array', {
    slice: function slice(begin, end) {
        var len = toLength(this.length);
        var klass = cof(this);
        end = end === undefined ? len : end;
        if (klass == 'Array') return arraySlice.call(this, begin, end);
        var start = toAbsoluteIndex(begin, len);
        var upTo = toAbsoluteIndex(end, len);
        var size = toLength(upTo - start);
        var cloned = new Array(size);
        var i = 0;
        for(; i < size; i++)cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
        return cloned;
    }
});

},{"./_export":"1Tgvm","./_html":"lPhWk","./_cof":"frIbo","./_to-absolute-index":"1lPjf","./_to-length":"irYfS","./_fails":"iAFH1"}],"lAyeU":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var fails = require('./_fails');
var $sort = [].sort;
var test = [
    1,
    2,
    3
];
$export($export.P + $export.F * (fails(function() {
    // IE8-
    test.sort(undefined);
}) || !fails(function() {
    // V8 bug
    test.sort(null);
// Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
    // 22.1.3.25 Array.prototype.sort(comparefn)
    sort: function sort(comparefn) {
        return comparefn === undefined ? $sort.call(toObject(this)) : $sort.call(toObject(this), aFunction(comparefn));
    }
});

},{"./_export":"1Tgvm","./_a-function":"55L9l","./_to-object":"7HHXi","./_fails":"iAFH1","./_strict-method":"7xXNH"}],"7cxLy":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $forEach = require('./_array-methods')(0);
var STRICT = require('./_strict-method')([].forEach, true);
$export($export.P + $export.F * !STRICT, 'Array', {
    // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
    forEach: function forEach(callbackfn /* , thisArg */ ) {
        return $forEach(this, callbackfn, arguments[1]);
    }
});

},{"./_export":"1Tgvm","./_array-methods":"9C3tD","./_strict-method":"7xXNH"}],"9C3tD":[function(require,module,exports) {
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx = require('./_ctx');
var IObject = require('./_iobject');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var asc = require('./_array-species-create');
module.exports = function(TYPE, $create) {
    var IS_MAP = TYPE == 1;
    var IS_FILTER = TYPE == 2;
    var IS_SOME = TYPE == 3;
    var IS_EVERY = TYPE == 4;
    var IS_FIND_INDEX = TYPE == 6;
    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
    var create = $create || asc;
    return function($this, callbackfn, that) {
        var O = toObject($this);
        var self = IObject(O);
        var f = ctx(callbackfn, that, 3);
        var length = toLength(self.length);
        var index = 0;
        var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
        var val, res;
        for(; length > index; index++)if (NO_HOLES || index in self) {
            val = self[index];
            res = f(val, index, O);
            if (TYPE) {
                if (IS_MAP) result[index] = res; // map
                else if (res) switch(TYPE){
                    case 3:
                        return true; // some
                    case 5:
                        return val; // find
                    case 6:
                        return index; // findIndex
                    case 2:
                        result.push(val); // filter
                }
                else if (IS_EVERY) return false; // every
            }
        }
        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
    };
};

},{"./_ctx":"4rQSm","./_iobject":"24JwK","./_to-object":"7HHXi","./_to-length":"irYfS","./_array-species-create":"93xs6"}],"93xs6":[function(require,module,exports) {
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');
module.exports = function(original, length) {
    return new (speciesConstructor(original))(length);
};

},{"./_array-species-constructor":"9JYoz"}],"9JYoz":[function(require,module,exports) {
var isObject = require('./_is-object');
var isArray = require('./_is-array');
var SPECIES = require('./_wks')('species');
module.exports = function(original) {
    var C;
    if (isArray(original)) {
        C = original.constructor;
        // cross-realm fallback
        if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
        if (isObject(C)) {
            C = C[SPECIES];
            if (C === null) C = undefined;
        }
    }
    return C === undefined ? Array : C;
};

},{"./_is-object":"eIE5K","./_is-array":"dTLRt","./_wks":"eaoKZ"}],"j4ARR":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $map = require('./_array-methods')(1);
$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
    // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
    map: function map(callbackfn /* , thisArg */ ) {
        return $map(this, callbackfn, arguments[1]);
    }
});

},{"./_export":"1Tgvm","./_array-methods":"9C3tD","./_strict-method":"7xXNH"}],"5vJuE":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $filter = require('./_array-methods')(2);
$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
    // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
    filter: function filter(callbackfn /* , thisArg */ ) {
        return $filter(this, callbackfn, arguments[1]);
    }
});

},{"./_export":"1Tgvm","./_array-methods":"9C3tD","./_strict-method":"7xXNH"}],"iKQGA":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $some = require('./_array-methods')(3);
$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
    // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
    some: function some(callbackfn /* , thisArg */ ) {
        return $some(this, callbackfn, arguments[1]);
    }
});

},{"./_export":"1Tgvm","./_array-methods":"9C3tD","./_strict-method":"7xXNH"}],"5xxJY":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $every = require('./_array-methods')(4);
$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
    // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
    every: function every(callbackfn /* , thisArg */ ) {
        return $every(this, callbackfn, arguments[1]);
    }
});

},{"./_export":"1Tgvm","./_array-methods":"9C3tD","./_strict-method":"7xXNH"}],"8tM5y":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');
$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
    // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
    reduce: function reduce(callbackfn /* , initialValue */ ) {
        return $reduce(this, callbackfn, arguments.length, arguments[1], false);
    }
});

},{"./_export":"1Tgvm","./_array-reduce":"743Di","./_strict-method":"7xXNH"}],"743Di":[function(require,module,exports) {
var aFunction = require('./_a-function');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var toLength = require('./_to-length');
module.exports = function(that, callbackfn, aLen, memo, isRight) {
    aFunction(callbackfn);
    var O = toObject(that);
    var self = IObject(O);
    var length = toLength(O.length);
    var index = isRight ? length - 1 : 0;
    var i = isRight ? -1 : 1;
    if (aLen < 2) for(;;){
        if (index in self) {
            memo = self[index];
            index += i;
            break;
        }
        index += i;
        if (isRight ? index < 0 : length <= index) throw TypeError('Reduce of empty array with no initial value');
    }
    for(; isRight ? index >= 0 : length > index; index += i)if (index in self) memo = callbackfn(memo, self[index], index, O);
    return memo;
};

},{"./_a-function":"55L9l","./_to-object":"7HHXi","./_iobject":"24JwK","./_to-length":"irYfS"}],"aNHFx":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $reduce = require('./_array-reduce');
$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
    // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
    reduceRight: function reduceRight(callbackfn /* , initialValue */ ) {
        return $reduce(this, callbackfn, arguments.length, arguments[1], true);
    }
});

},{"./_export":"1Tgvm","./_array-reduce":"743Di","./_strict-method":"7xXNH"}],"76kRN":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $indexOf = require('./_array-includes')(false);
var $native = [].indexOf;
var NEGATIVE_ZERO = !!$native && 1 / [
    1
].indexOf(1, -0) < 0;
$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
    // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
    indexOf: function indexOf(searchElement /* , fromIndex = 0 */ ) {
        return NEGATIVE_ZERO ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);
    }
});

},{"./_export":"1Tgvm","./_array-includes":"1Ebaw","./_strict-method":"7xXNH"}],"lEw3U":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toIObject = require('./_to-iobject');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var $native = [].lastIndexOf;
var NEGATIVE_ZERO = !!$native && 1 / [
    1
].lastIndexOf(1, -0) < 0;
$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
    // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */ ) {
        // convert -0 to +0
        if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
        var O = toIObject(this);
        var length = toLength(O.length);
        var index = length - 1;
        if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
        if (index < 0) index = length + index;
        for(; index >= 0; index--)if (index in O) {
            if (O[index] === searchElement) return index || 0;
        }
        return -1;
    }
});

},{"./_export":"1Tgvm","./_to-iobject":"f9RCz","./_to-integer":"cb0GT","./_to-length":"irYfS","./_strict-method":"7xXNH"}],"4xbJW":[function(require,module,exports) {
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');
$export($export.P, 'Array', {
    copyWithin: require('./_array-copy-within')
});
require('./_add-to-unscopables')('copyWithin');

},{"./_export":"1Tgvm","./_array-copy-within":"55wbB","./_add-to-unscopables":"ltQTG"}],"55wbB":[function(require,module,exports) {
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
module.exports = [].copyWithin || function copyWithin(target /* = 0 */ , start /* = 0, end = @length */ ) {
    var O = toObject(this);
    var len = toLength(O.length);
    var to = toAbsoluteIndex(target, len);
    var from = toAbsoluteIndex(start, len);
    var end = arguments.length > 2 ? arguments[2] : undefined;
    var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
    var inc = 1;
    if (from < to && to < from + count) {
        inc = -1;
        from += count - 1;
        to += count - 1;
    }
    while(count-- > 0){
        if (from in O) O[to] = O[from];
        else delete O[to];
        to += inc;
        from += inc;
    }
    return O;
};

},{"./_to-object":"7HHXi","./_to-absolute-index":"1lPjf","./_to-length":"irYfS"}],"ltQTG":[function(require,module,exports) {
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {
});
module.exports = function(key) {
    ArrayProto[UNSCOPABLES][key] = true;
};

},{"./_wks":"eaoKZ","./_hide":"ddpVq"}],"bimjQ":[function(require,module,exports) {
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');
$export($export.P, 'Array', {
    fill: require('./_array-fill')
});
require('./_add-to-unscopables')('fill');

},{"./_export":"1Tgvm","./_array-fill":"dXwYX","./_add-to-unscopables":"ltQTG"}],"dXwYX":[function(require,module,exports) {
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
module.exports = function fill(value /* , start = 0, end = @length */ ) {
    var O = toObject(this);
    var length = toLength(O.length);
    var aLen = arguments.length;
    var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);
    var end = aLen > 2 ? arguments[2] : undefined;
    var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
    while(endPos > index)O[index++] = value;
    return O;
};

},{"./_to-object":"7HHXi","./_to-absolute-index":"1lPjf","./_to-length":"irYfS"}],"cKonp":[function(require,module,exports) {
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(5);
var KEY = 'find';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function() {
    forced = false;
});
$export($export.P + $export.F * forced, 'Array', {
    find: function find(callbackfn /* , that = undefined */ ) {
        return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
});
require('./_add-to-unscopables')(KEY);

},{"./_export":"1Tgvm","./_array-methods":"9C3tD","./_add-to-unscopables":"ltQTG"}],"t506G":[function(require,module,exports) {
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export');
var $find = require('./_array-methods')(6);
var KEY = 'findIndex';
var forced = true;
// Shouldn't skip holes
if (KEY in []) Array(1)[KEY](function() {
    forced = false;
});
$export($export.P + $export.F * forced, 'Array', {
    findIndex: function findIndex(callbackfn /* , that = undefined */ ) {
        return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
});
require('./_add-to-unscopables')(KEY);

},{"./_export":"1Tgvm","./_array-methods":"9C3tD","./_add-to-unscopables":"ltQTG"}],"2S6HD":[function(require,module,exports) {
require('./_set-species')('Array');

},{"./_set-species":"1qQNM"}],"1qQNM":[function(require,module,exports) {
'use strict';
var global = require('./_global');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');
module.exports = function(KEY) {
    var C = global[KEY];
    if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
        configurable: true,
        get: function() {
            return this;
        }
    });
};

},{"./_global":"8xCse","./_object-dp":"cLcWd","./_descriptors":"dr2tY","./_wks":"eaoKZ"}],"1xhrt":[function(require,module,exports) {
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');
// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind) {
    this._t = toIObject(iterated); // target
    this._i = 0; // next index
    this._k = kind; // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function() {
    var O = this._t;
    var kind = this._k;
    var index = this._i++;
    if (!O || index >= O.length) {
        this._t = undefined;
        return step(1);
    }
    if (kind == 'keys') return step(0, index);
    if (kind == 'values') return step(0, O[index]);
    return step(0, [
        index,
        O[index]
    ]);
}, 'values');
// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":"ltQTG","./_iter-step":"6kbrW","./_iterators":"dITQr","./_to-iobject":"f9RCz","./_iter-define":"egJhK"}],"6kbrW":[function(require,module,exports) {
module.exports = function(done, value) {
    return {
        value: value,
        done: !!done
    };
};

},{}],"gc5Or":[function(require,module,exports) {
var global = require('./_global');
var inheritIfRequired = require('./_inherit-if-required');
var dP = require('./_object-dp').f;
var gOPN = require('./_object-gopn').f;
var isRegExp = require('./_is-regexp');
var $flags = require('./_flags');
var $RegExp = global.RegExp;
var Base = $RegExp;
var proto = $RegExp.prototype;
var re1 = /a/g;
var re2 = /a/g;
// "new" creates a new object, old webkit buggy here
var CORRECT_NEW = new $RegExp(re1) !== re1;
if (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function() {
    re2[require('./_wks')('match')] = false;
    // RegExp constructor can alter flags and IsRegExp works correct with @@match
    return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))) {
    $RegExp = function RegExp(p, f) {
        var tiRE = this instanceof $RegExp;
        var piRE = isRegExp(p);
        var fiU = f === undefined;
        return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : inheritIfRequired(CORRECT_NEW ? new Base(piRE && !fiU ? p.source : p, f) : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f), tiRE ? this : proto, $RegExp);
    };
    var proxy = function(key) {
        key in $RegExp || dP($RegExp, key, {
            configurable: true,
            get: function() {
                return Base[key];
            },
            set: function(it) {
                Base[key] = it;
            }
        });
    };
    for(var keys = gOPN(Base), i = 0; keys.length > i;)proxy(keys[i++]);
    proto.constructor = $RegExp;
    $RegExp.prototype = proto;
    require('./_redefine')(global, 'RegExp', $RegExp);
}
require('./_set-species')('RegExp');

},{"./_global":"8xCse","./_inherit-if-required":"9GGeZ","./_object-dp":"cLcWd","./_object-gopn":"jK0Om","./_is-regexp":"aGcfF","./_flags":"KuZtV","./_descriptors":"dr2tY","./_fails":"iAFH1","./_wks":"eaoKZ","./_redefine":"9vAu7","./_set-species":"1qQNM"}],"KuZtV":[function(require,module,exports) {
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function() {
    var that = anObject(this);
    var result = '';
    if (that.global) result += 'g';
    if (that.ignoreCase) result += 'i';
    if (that.multiline) result += 'm';
    if (that.unicode) result += 'u';
    if (that.sticky) result += 'y';
    return result;
};

},{"./_an-object":"kiL2X"}],"fcvkD":[function(require,module,exports) {
'use strict';
var regexpExec = require('./_regexp-exec');
require('./_export')({
    target: 'RegExp',
    proto: true,
    forced: regexpExec !== /./.exec
}, {
    exec: regexpExec
});

},{"./_regexp-exec":"lUZX6","./_export":"1Tgvm"}],"lUZX6":[function(require,module,exports) {
'use strict';
var regexpFlags = require('./_flags');
var nativeExec = RegExp.prototype.exec;
// This always refers to the native implementation, because the
// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,
// which loads this file before patching the method.
var nativeReplace = String.prototype.replace;
var patchedExec = nativeExec;
var LAST_INDEX = 'lastIndex';
var UPDATES_LAST_INDEX_WRONG = function() {
    var re1 = /a/, re2 = /b*/g;
    nativeExec.call(re1, 'a');
    nativeExec.call(re2, 'a');
    return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;
}();
// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;
if (PATCH) patchedExec = function exec(str) {
    var re = this;
    var lastIndex, reCopy, match, i;
    if (NPCG_INCLUDED) reCopy = new RegExp('^' + re.source + '$(?!\\s)', regexpFlags.call(re));
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];
    match = nativeExec.call(re, str);
    if (UPDATES_LAST_INDEX_WRONG && match) re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;
    if (NPCG_INCLUDED && match && match.length > 1) // Fix browsers whose `exec` methods don't consistently return `undefined`
    // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
    // eslint-disable-next-line no-loop-func
    nativeReplace.call(match[0], reCopy, function() {
        for(i = 1; i < arguments.length - 2; i++)if (arguments[i] === undefined) match[i] = undefined;
    });
    return match;
};
module.exports = patchedExec;

},{"./_flags":"KuZtV"}],"aX2Wn":[function(require,module,exports) {
'use strict';
require('./es6.regexp.flags');
var anObject = require('./_an-object');
var $flags = require('./_flags');
var DESCRIPTORS = require('./_descriptors');
var TO_STRING = 'toString';
var $toString = /./[TO_STRING];
var define = function(fn) {
    require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};
// 21.2.5.14 RegExp.prototype.toString()
if (require('./_fails')(function() {
    return $toString.call({
        source: 'a',
        flags: 'b'
    }) != '/a/b';
})) define(function toString() {
    var R = anObject(this);
    return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
});
else if ($toString.name != TO_STRING) define(function toString() {
    return $toString.call(this);
});

},{"./es6.regexp.flags":"4cXUu","./_an-object":"kiL2X","./_flags":"KuZtV","./_descriptors":"dr2tY","./_redefine":"9vAu7","./_fails":"iAFH1"}],"4cXUu":[function(require,module,exports) {
// 21.2.5.3 get RegExp.prototype.flags()
if (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {
    configurable: true,
    get: require('./_flags')
});

},{"./_descriptors":"dr2tY","./_object-dp":"cLcWd","./_flags":"KuZtV"}],"93slC":[function(require,module,exports) {
'use strict';
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var advanceStringIndex = require('./_advance-string-index');
var regExpExec = require('./_regexp-exec-abstract');
// @@match logic
require('./_fix-re-wks')('match', 1, function(defined, MATCH, $match, maybeCallNative) {
    return [
        // `String.prototype.match` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.match
        function match(regexp) {
            var O = defined(this);
            var fn = regexp == undefined ? undefined : regexp[MATCH];
            return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
        },
        // `RegExp.prototype[@@match]` method
        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match
        function(regexp) {
            var res = maybeCallNative($match, regexp, this);
            if (res.done) return res.value;
            var rx = anObject(regexp);
            var S = String(this);
            if (!rx.global) return regExpExec(rx, S);
            var fullUnicode = rx.unicode;
            rx.lastIndex = 0;
            var A = [];
            var n = 0;
            var result;
            while((result = regExpExec(rx, S)) !== null){
                var matchStr = String(result[0]);
                A[n] = matchStr;
                if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
                n++;
            }
            return n === 0 ? null : A;
        }
    ];
});

},{"./_an-object":"kiL2X","./_to-length":"irYfS","./_advance-string-index":"dBZmz","./_regexp-exec-abstract":"27rgt","./_fix-re-wks":"80W9B"}],"dBZmz":[function(require,module,exports) {
'use strict';
var at = require('./_string-at')(true);
// `AdvanceStringIndex` abstract operation
// https://tc39.github.io/ecma262/#sec-advancestringindex
module.exports = function(S, index, unicode) {
    return index + (unicode ? at(S, index).length : 1);
};

},{"./_string-at":"rbgP0"}],"27rgt":[function(require,module,exports) {
'use strict';
var classof = require('./_classof');
var builtinExec = RegExp.prototype.exec;
// `RegExpExec` abstract operation
// https://tc39.github.io/ecma262/#sec-regexpexec
module.exports = function(R, S) {
    var exec = R.exec;
    if (typeof exec === 'function') {
        var result = exec.call(R, S);
        if (typeof result !== 'object') throw new TypeError('RegExp exec method returned something other than an Object or null');
        return result;
    }
    if (classof(R) !== 'RegExp') throw new TypeError('RegExp#exec called on incompatible receiver');
    return builtinExec.call(R, S);
};

},{"./_classof":"5TIen"}],"80W9B":[function(require,module,exports) {
'use strict';
require('./es6.regexp.exec');
var redefine = require('./_redefine');
var hide = require('./_hide');
var fails = require('./_fails');
var defined = require('./_defined');
var wks = require('./_wks');
var regexpExec = require('./_regexp-exec');
var SPECIES = wks('species');
var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function() {
    // #replace needs built-in support for named groups.
    // #match works fine because it just return the exec results, even if it has
    // a "grops" property.
    var re = /./;
    re.exec = function() {
        var result = [];
        result.groups = {
            a: '7'
        };
        return result;
    };
    return ''.replace(re, '$<a>') !== '7';
});
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = function() {
    // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
    var re = /(?:)/;
    var originalExec = re.exec;
    re.exec = function() {
        return originalExec.apply(this, arguments);
    };
    var result = 'ab'.split(re);
    return result.length === 2 && result[0] === 'a' && result[1] === 'b';
}();
module.exports = function(KEY, length, exec) {
    var SYMBOL = wks(KEY);
    var DELEGATES_TO_SYMBOL = !fails(function() {
        // String methods call symbol-named RegEp methods
        var O = {
        };
        O[SYMBOL] = function() {
            return 7;
        };
        return ''[KEY](O) != 7;
    });
    var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function() {
        // Symbol-named RegExp methods call .exec
        var execCalled = false;
        var re = /a/;
        re.exec = function() {
            execCalled = true;
            return null;
        };
        if (KEY === 'split') {
            // RegExp[@@split] doesn't call the regex's exec method, but first creates
            // a new one. We need to return the patched regex when creating the new one.
            re.constructor = {
            };
            re.constructor[SPECIES] = function() {
                return re;
            };
        }
        re[SYMBOL]('');
        return !execCalled;
    }) : undefined;
    if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS || KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
        var nativeRegExpMethod = /./[SYMBOL];
        var fns = exec(defined, SYMBOL, ''[KEY], function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {
            if (regexp.exec === regexpExec) {
                if (DELEGATES_TO_SYMBOL && !forceStringMethod) // The native String method already delegates to @@method (this
                // polyfilled function), leasing to infinite recursion.
                // We avoid it by directly calling the native @@method method.
                return {
                    done: true,
                    value: nativeRegExpMethod.call(regexp, str, arg2)
                };
                return {
                    done: true,
                    value: nativeMethod.call(str, regexp, arg2)
                };
            }
            return {
                done: false
            };
        });
        var strfn = fns[0];
        var rxfn = fns[1];
        redefine(String.prototype, KEY, strfn);
        hide(RegExp.prototype, SYMBOL, length == 2 ? function(string, arg) {
            return rxfn.call(string, this, arg);
        } : function(string) {
            return rxfn.call(string, this);
        });
    }
};

},{"./es6.regexp.exec":"fcvkD","./_redefine":"9vAu7","./_hide":"ddpVq","./_fails":"iAFH1","./_defined":"4Lj5U","./_wks":"eaoKZ","./_regexp-exec":"lUZX6"}],"bsjVi":[function(require,module,exports) {
'use strict';
var anObject = require('./_an-object');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var toInteger = require('./_to-integer');
var advanceStringIndex = require('./_advance-string-index');
var regExpExec = require('./_regexp-exec-abstract');
var max = Math.max;
var min = Math.min;
var floor = Math.floor;
var SUBSTITUTION_SYMBOLS = /\$([$&`']|\d\d?|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&`']|\d\d?)/g;
var maybeToString = function(it) {
    return it === undefined ? it : String(it);
};
// @@replace logic
require('./_fix-re-wks')('replace', 2, function(defined, REPLACE, $replace, maybeCallNative) {
    // https://tc39.github.io/ecma262/#sec-getsubstitution
    function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
        var tailPos = position + matched.length;
        var m = captures.length;
        var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
        if (namedCaptures !== undefined) {
            namedCaptures = toObject(namedCaptures);
            symbols = SUBSTITUTION_SYMBOLS;
        }
        return $replace.call(replacement, symbols, function(match, ch) {
            var capture;
            switch(ch.charAt(0)){
                case '$':
                    return '$';
                case '&':
                    return matched;
                case '`':
                    return str.slice(0, position);
                case "'":
                    return str.slice(tailPos);
                case '<':
                    capture = namedCaptures[ch.slice(1, -1)];
                    break;
                default:
                    var n = +ch;
                    if (n === 0) return match;
                    if (n > m) {
                        var f = floor(n / 10);
                        if (f === 0) return match;
                        if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                        return match;
                    }
                    capture = captures[n - 1];
            }
            return capture === undefined ? '' : capture;
        });
    }
    return [
        // `String.prototype.replace` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.replace
        function replace(searchValue, replaceValue) {
            var O = defined(this);
            var fn = searchValue == undefined ? undefined : searchValue[REPLACE];
            return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
        },
        // `RegExp.prototype[@@replace]` method
        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace
        function(regexp, replaceValue) {
            var res = maybeCallNative($replace, regexp, this, replaceValue);
            if (res.done) return res.value;
            var rx = anObject(regexp);
            var S = String(this);
            var functionalReplace = typeof replaceValue === 'function';
            if (!functionalReplace) replaceValue = String(replaceValue);
            var global = rx.global;
            if (global) {
                var fullUnicode = rx.unicode;
                rx.lastIndex = 0;
            }
            var results = [];
            while(true){
                var result = regExpExec(rx, S);
                if (result === null) break;
                results.push(result);
                if (!global) break;
                var matchStr = String(result[0]);
                if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
            }
            var accumulatedResult = '';
            var nextSourcePosition = 0;
            for(var i = 0; i < results.length; i++){
                result = results[i];
                var matched = String(result[0]);
                var position = max(min(toInteger(result.index), S.length), 0);
                var captures = [];
                // NOTE: This is equivalent to
                //   captures = result.slice(1).map(maybeToString)
                // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
                // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
                // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
                for(var j = 1; j < result.length; j++)captures.push(maybeToString(result[j]));
                var namedCaptures = result.groups;
                if (functionalReplace) {
                    var replacerArgs = [
                        matched
                    ].concat(captures, position, S);
                    if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
                    var replacement = String(replaceValue.apply(undefined, replacerArgs));
                } else replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
                if (position >= nextSourcePosition) {
                    accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
                    nextSourcePosition = position + matched.length;
                }
            }
            return accumulatedResult + S.slice(nextSourcePosition);
        }
    ];
});

},{"./_an-object":"kiL2X","./_to-object":"7HHXi","./_to-length":"irYfS","./_to-integer":"cb0GT","./_advance-string-index":"dBZmz","./_regexp-exec-abstract":"27rgt","./_fix-re-wks":"80W9B"}],"ldewt":[function(require,module,exports) {
'use strict';
var anObject = require('./_an-object');
var sameValue = require('./_same-value');
var regExpExec = require('./_regexp-exec-abstract');
// @@search logic
require('./_fix-re-wks')('search', 1, function(defined, SEARCH, $search, maybeCallNative) {
    return [
        // `String.prototype.search` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.search
        function search(regexp) {
            var O = defined(this);
            var fn = regexp == undefined ? undefined : regexp[SEARCH];
            return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
        },
        // `RegExp.prototype[@@search]` method
        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search
        function(regexp) {
            var res = maybeCallNative($search, regexp, this);
            if (res.done) return res.value;
            var rx = anObject(regexp);
            var S = String(this);
            var previousLastIndex = rx.lastIndex;
            if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
            var result = regExpExec(rx, S);
            if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
            return result === null ? -1 : result.index;
        }
    ];
});

},{"./_an-object":"kiL2X","./_same-value":"94M5S","./_regexp-exec-abstract":"27rgt","./_fix-re-wks":"80W9B"}],"iJScv":[function(require,module,exports) {
'use strict';
var isRegExp = require('./_is-regexp');
var anObject = require('./_an-object');
var speciesConstructor = require('./_species-constructor');
var advanceStringIndex = require('./_advance-string-index');
var toLength = require('./_to-length');
var callRegExpExec = require('./_regexp-exec-abstract');
var regexpExec = require('./_regexp-exec');
var fails = require('./_fails');
var $min = Math.min;
var $push = [].push;
var $SPLIT = 'split';
var LENGTH = 'length';
var LAST_INDEX = 'lastIndex';
var MAX_UINT32 = 4294967295;
// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError
var SUPPORTS_Y = !fails(function() {
    RegExp(MAX_UINT32, 'y');
});
// @@split logic
require('./_fix-re-wks')('split', 2, function(defined, SPLIT, $split, maybeCallNative) {
    var internalSplit;
    if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) // based on es5-shim implementation, need to rework it
    internalSplit = function(separator, limit) {
        var string = String(this);
        if (separator === undefined && limit === 0) return [];
        // If `separator` is not a regex, use native split
        if (!isRegExp(separator)) return $split.call(string, separator, limit);
        var output = [];
        var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
        var lastLastIndex = 0;
        var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;
        // Make `global` and avoid `lastIndex` issues by working with a copy
        var separatorCopy = new RegExp(separator.source, flags + 'g');
        var match, lastIndex, lastLength;
        while(match = regexpExec.call(separatorCopy, string)){
            lastIndex = separatorCopy[LAST_INDEX];
            if (lastIndex > lastLastIndex) {
                output.push(string.slice(lastLastIndex, match.index));
                if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
                lastLength = match[0][LENGTH];
                lastLastIndex = lastIndex;
                if (output[LENGTH] >= splitLimit) break;
            }
            if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
        }
        if (lastLastIndex === string[LENGTH]) {
            if (lastLength || !separatorCopy.test('')) output.push('');
        } else output.push(string.slice(lastLastIndex));
        return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
    else if ('0'[$SPLIT](undefined, 0)[LENGTH]) internalSplit = function(separator, limit) {
        return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);
    };
    else internalSplit = $split;
    return [
        // `String.prototype.split` method
        // https://tc39.github.io/ecma262/#sec-string.prototype.split
        function split(separator, limit) {
            var O = defined(this);
            var splitter = separator == undefined ? undefined : separator[SPLIT];
            return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
        },
        // `RegExp.prototype[@@split]` method
        // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split
        //
        // NOTE: This cannot be properly polyfilled in engines that don't support
        // the 'y' flag.
        function(regexp, limit) {
            var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);
            if (res.done) return res.value;
            var rx = anObject(regexp);
            var S = String(this);
            var C = speciesConstructor(rx, RegExp);
            var unicodeMatching = rx.unicode;
            var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (SUPPORTS_Y ? 'y' : 'g');
            // ^(? + rx + ) is needed, in combination with some S slicing, to
            // simulate the 'y' flag.
            var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);
            var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
            if (lim === 0) return [];
            if (S.length === 0) return callRegExpExec(splitter, S) === null ? [
                S
            ] : [];
            var p = 0;
            var q = 0;
            var A = [];
            while(q < S.length){
                splitter.lastIndex = SUPPORTS_Y ? q : 0;
                var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));
                var e;
                if (z === null || (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p) q = advanceStringIndex(S, q, unicodeMatching);
                else {
                    A.push(S.slice(p, q));
                    if (A.length === lim) return A;
                    for(var i = 1; i <= z.length - 1; i++){
                        A.push(z[i]);
                        if (A.length === lim) return A;
                    }
                    q = p = e;
                }
            }
            A.push(S.slice(p));
            return A;
        }
    ];
});

},{"./_is-regexp":"aGcfF","./_an-object":"kiL2X","./_species-constructor":"8Vo8d","./_advance-string-index":"dBZmz","./_to-length":"irYfS","./_regexp-exec-abstract":"27rgt","./_regexp-exec":"lUZX6","./_fails":"iAFH1","./_fix-re-wks":"80W9B"}],"8Vo8d":[function(require,module,exports) {
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function(O, D) {
    var C = anObject(O).constructor;
    var S;
    return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_an-object":"kiL2X","./_a-function":"55L9l","./_wks":"eaoKZ"}],"2sSjP":[function(require,module,exports) {
'use strict';
var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var userAgent = require('./_user-agent');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function() {
};
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
var USE_NATIVE = !!function() {
    try {
        // correct subclassing with @@species support
        var promise = $Promise.resolve(1);
        var FakePromise = (promise.constructor = {
        })[require('./_wks')('species')] = function(exec) {
            exec(empty, empty);
        };
        // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
        return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise && v8.indexOf('6.6') !== 0 && userAgent.indexOf('Chrome/66') === -1;
    } catch (e) {
    }
}();
// helpers
var isThenable = function(it) {
    var then;
    return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function(promise, isReject) {
    if (promise._n) return;
    promise._n = true;
    var chain = promise._c;
    microtask(function() {
        var value = promise._v;
        var ok = promise._s == 1;
        var i = 0;
        var run = function(reaction) {
            var handler = ok ? reaction.ok : reaction.fail;
            var resolve = reaction.resolve;
            var reject = reaction.reject;
            var domain = reaction.domain;
            var result, then, exited;
            try {
                if (handler) {
                    if (!ok) {
                        if (promise._h == 2) onHandleUnhandled(promise);
                        promise._h = 1;
                    }
                    if (handler === true) result = value;
                    else {
                        if (domain) domain.enter();
                        result = handler(value); // may throw
                        if (domain) {
                            domain.exit();
                            exited = true;
                        }
                    }
                    if (result === reaction.promise) reject(TypeError('Promise-chain cycle'));
                    else if (then = isThenable(result)) then.call(result, resolve, reject);
                    else resolve(result);
                } else reject(value);
            } catch (e) {
                if (domain && !exited) domain.exit();
                reject(e);
            }
        };
        while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
        promise._c = [];
        promise._n = false;
        if (isReject && !promise._h) onUnhandled(promise);
    });
};
var onUnhandled = function(promise) {
    task.call(global, function() {
        var value = promise._v;
        var unhandled = isUnhandled(promise);
        var result, handler, console;
        if (unhandled) {
            result = perform(function() {
                if (isNode) process.emit('unhandledRejection', value, promise);
                else if (handler = global.onunhandledrejection) handler({
                    promise: promise,
                    reason: value
                });
                else if ((console = global.console) && console.error) console.error('Unhandled promise rejection', value);
            });
            // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
            promise._h = isNode || isUnhandled(promise) ? 2 : 1;
        }
        promise._a = undefined;
        if (unhandled && result.e) throw result.v;
    });
};
var isUnhandled = function(promise) {
    return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function(promise) {
    task.call(global, function() {
        var handler;
        if (isNode) process.emit('rejectionHandled', promise);
        else if (handler = global.onrejectionhandled) handler({
            promise: promise,
            reason: promise._v
        });
    });
};
var $reject = function(value) {
    var promise = this;
    if (promise._d) return;
    promise._d = true;
    promise = promise._w || promise; // unwrap
    promise._v = value;
    promise._s = 2;
    if (!promise._a) promise._a = promise._c.slice();
    notify(promise, true);
};
var $resolve = function(value) {
    var promise = this;
    var then;
    if (promise._d) return;
    promise._d = true;
    promise = promise._w || promise; // unwrap
    try {
        if (promise === value) throw TypeError("Promise can't be resolved itself");
        if (then = isThenable(value)) microtask(function() {
            var wrapper = {
                _w: promise,
                _d: false
            }; // wrap
            try {
                then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
            } catch (e) {
                $reject.call(wrapper, e);
            }
        });
        else {
            promise._v = value;
            promise._s = 1;
            notify(promise, false);
        }
    } catch (e) {
        $reject.call({
            _w: promise,
            _d: false
        }, e); // wrap
    }
};
// constructor polyfill
if (!USE_NATIVE) {
    // 25.4.3.1 Promise(executor)
    $Promise = function Promise(executor) {
        anInstance(this, $Promise, PROMISE, '_h');
        aFunction(executor);
        Internal.call(this);
        try {
            executor(ctx($resolve, this, 1), ctx($reject, this, 1));
        } catch (err) {
            $reject.call(this, err);
        }
    };
    // eslint-disable-next-line no-unused-vars
    Internal = function Promise(executor) {
        this._c = []; // <- awaiting reactions
        this._a = undefined; // <- checked in isUnhandled reactions
        this._s = 0; // <- state
        this._d = false; // <- done
        this._v = undefined; // <- value
        this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
        this._n = false; // <- notify
    };
    Internal.prototype = require('./_redefine-all')($Promise.prototype, {
        // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
        then: function then(onFulfilled, onRejected) {
            var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
            reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
            reaction.fail = typeof onRejected == 'function' && onRejected;
            reaction.domain = isNode ? process.domain : undefined;
            this._c.push(reaction);
            if (this._a) this._a.push(reaction);
            if (this._s) notify(this, false);
            return reaction.promise;
        },
        // 25.4.5.1 Promise.prototype.catch(onRejected)
        'catch': function(onRejected) {
            return this.then(undefined, onRejected);
        }
    });
    OwnPromiseCapability = function() {
        var promise = new Internal();
        this.promise = promise;
        this.resolve = ctx($resolve, promise, 1);
        this.reject = ctx($reject, promise, 1);
    };
    newPromiseCapabilityModule.f = newPromiseCapability = function(C) {
        return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
    };
}
$export($export.G + $export.W + $export.F * !USE_NATIVE, {
    Promise: $Promise
});
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];
// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
    // 25.4.4.5 Promise.reject(r)
    reject: function reject(r) {
        var capability = newPromiseCapability(this);
        var $$reject = capability.reject;
        $$reject(r);
        return capability.promise;
    }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
    // 25.4.4.6 Promise.resolve(x)
    resolve: function resolve(x) {
        return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
    }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function(iter) {
    $Promise.all(iter)['catch'](empty);
})), PROMISE, {
    // 25.4.4.1 Promise.all(iterable)
    all: function all(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform(function() {
            var values = [];
            var index = 0;
            var remaining = 1;
            forOf(iterable, false, function(promise) {
                var $index = index++;
                var alreadyCalled = false;
                values.push(undefined);
                remaining++;
                C.resolve(promise).then(function(value) {
                    if (alreadyCalled) return;
                    alreadyCalled = true;
                    values[$index] = value;
                    --remaining || resolve(values);
                }, reject);
            });
            --remaining || resolve(values);
        });
        if (result.e) reject(result.v);
        return capability.promise;
    },
    // 25.4.4.4 Promise.race(iterable)
    race: function race(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var reject = capability.reject;
        var result = perform(function() {
            forOf(iterable, false, function(promise) {
                C.resolve(promise).then(capability.resolve, reject);
            });
        });
        if (result.e) reject(result.v);
        return capability.promise;
    }
});

},{"./_library":"lmtqY","./_global":"8xCse","./_ctx":"4rQSm","./_classof":"5TIen","./_export":"1Tgvm","./_is-object":"eIE5K","./_a-function":"55L9l","./_an-instance":"ivm35","./_for-of":"9a8I8","./_species-constructor":"8Vo8d","./_task":"bPiT9","./_microtask":"8lwWF","./_new-promise-capability":"clM6P","./_perform":"7Nx5Z","./_user-agent":"9eCfU","./_promise-resolve":"58Dua","./_wks":"eaoKZ","./_redefine-all":"6Mnp5","./_set-to-string-tag":"7YXlq","./_set-species":"1qQNM","./_core":"4o9Ko","./_iter-detect":"3KQwU"}],"ivm35":[function(require,module,exports) {
module.exports = function(it, Constructor, name, forbiddenField) {
    if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) throw TypeError(name + ': incorrect invocation!');
    return it;
};

},{}],"9a8I8":[function(require,module,exports) {
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {
};
var RETURN = {
};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR) {
    var iterFn = ITERATOR ? function() {
        return iterable;
    } : getIterFn(iterable);
    var f = ctx(fn, that, entries ? 2 : 1);
    var index = 0;
    var length, step, iterator, result;
    if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
    // fast case for arrays with default iterator
    if (isArrayIter(iterFn)) for(length = toLength(iterable.length); length > index; index++){
        result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
        if (result === BREAK || result === RETURN) return result;
    }
    else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done;){
        result = call(iterator, f, step.value, entries);
        if (result === BREAK || result === RETURN) return result;
    }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_ctx":"4rQSm","./_iter-call":"hZ7Tf","./_is-array-iter":"ipP6u","./_an-object":"kiL2X","./_to-length":"irYfS","./core.get-iterator-method":"hb865"}],"bPiT9":[function(require,module,exports) {
var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {
};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function() {
    var id = +this;
    // eslint-disable-next-line no-prototype-builtins
    if (queue.hasOwnProperty(id)) {
        var fn = queue[id];
        delete queue[id];
        fn();
    }
};
var listener = function(event) {
    run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
    setTask = function setImmediate(fn) {
        var args = [];
        var i = 1;
        while(arguments.length > i)args.push(arguments[i++]);
        queue[++counter] = function() {
            // eslint-disable-next-line no-new-func
            invoke(typeof fn == 'function' ? fn : Function(fn), args);
        };
        defer(counter);
        return counter;
    };
    clearTask = function clearImmediate(id) {
        delete queue[id];
    };
    // Node.js 0.8-
    if (require('./_cof')(process) == 'process') defer = function(id) {
        process.nextTick(ctx(run, id, 1));
    };
    else if (Dispatch && Dispatch.now) defer = function(id) {
        Dispatch.now(ctx(run, id, 1));
    };
    else if (MessageChannel) {
        channel = new MessageChannel();
        port = channel.port2;
        channel.port1.onmessage = listener;
        defer = ctx(port.postMessage, port, 1);
    // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
    } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
        defer = function(id) {
            global.postMessage(id + '', '*');
        };
        global.addEventListener('message', listener, false);
    // IE8-
    } else if (ONREADYSTATECHANGE in cel('script')) defer = function(id) {
        html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function() {
            html.removeChild(this);
            run.call(id);
        };
    };
    else defer = function(id) {
        setTimeout(ctx(run, id, 1), 0);
    };
}
module.exports = {
    set: setTask,
    clear: clearTask
};

},{"./_ctx":"4rQSm","./_invoke":"c7Bab","./_html":"lPhWk","./_dom-create":"2qBag","./_global":"8xCse","./_cof":"frIbo"}],"8lwWF":[function(require,module,exports) {
var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';
module.exports = function() {
    var head, last, notify;
    var flush = function() {
        var parent, fn;
        if (isNode && (parent = process.domain)) parent.exit();
        while(head){
            fn = head.fn;
            head = head.next;
            try {
                fn();
            } catch (e) {
                if (head) notify();
                else last = undefined;
                throw e;
            }
        }
        last = undefined;
        if (parent) parent.enter();
    };
    // Node.js
    if (isNode) notify = function() {
        process.nextTick(flush);
    };
    else if (Observer && !(global.navigator && global.navigator.standalone)) {
        var toggle = true;
        var node = document.createTextNode('');
        new Observer(flush).observe(node, {
            characterData: true
        }); // eslint-disable-line no-new
        notify = function() {
            node.data = toggle = !toggle;
        };
    // environments with maybe non-completely correct, but existent Promise
    } else if (Promise && Promise.resolve) {
        // Promise.resolve without an argument throws an error in LG WebOS 2
        var promise = Promise.resolve(undefined);
        notify = function() {
            promise.then(flush);
        };
    // for other environments - macrotask based on:
    // - setImmediate
    // - MessageChannel
    // - window.postMessag
    // - onreadystatechange
    // - setTimeout
    } else notify = function() {
        // strange IE + webpack dev server bug - use .call(global)
        macrotask.call(global, flush);
    };
    return function(fn) {
        var task = {
            fn: fn,
            next: undefined
        };
        if (last) last.next = task;
        if (!head) {
            head = task;
            notify();
        }
        last = task;
    };
};

},{"./_global":"8xCse","./_task":"bPiT9","./_cof":"frIbo"}],"clM6P":[function(require,module,exports) {
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = require('./_a-function');
function PromiseCapability(C) {
    var resolve, reject;
    this.promise = new C(function($$resolve, $$reject) {
        if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
        resolve = $$resolve;
        reject = $$reject;
    });
    this.resolve = aFunction(resolve);
    this.reject = aFunction(reject);
}
module.exports.f = function(C) {
    return new PromiseCapability(C);
};

},{"./_a-function":"55L9l"}],"7Nx5Z":[function(require,module,exports) {
module.exports = function(exec) {
    try {
        return {
            e: false,
            v: exec()
        };
    } catch (e) {
        return {
            e: true,
            v: e
        };
    }
};

},{}],"9eCfU":[function(require,module,exports) {
var global = require('./_global');
var navigator = global.navigator;
module.exports = navigator && navigator.userAgent || '';

},{"./_global":"8xCse"}],"58Dua":[function(require,module,exports) {
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');
module.exports = function(C, x) {
    anObject(C);
    if (isObject(x) && x.constructor === C) return x;
    var promiseCapability = newPromiseCapability.f(C);
    var resolve = promiseCapability.resolve;
    resolve(x);
    return promiseCapability.promise;
};

},{"./_an-object":"kiL2X","./_is-object":"eIE5K","./_new-promise-capability":"clM6P"}],"6Mnp5":[function(require,module,exports) {
var redefine = require('./_redefine');
module.exports = function(target, src, safe) {
    for(var key in src)redefine(target, key, src[key], safe);
    return target;
};

},{"./_redefine":"9vAu7"}],"1kXi9":[function(require,module,exports) {
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var MAP = 'Map';
// 23.1 Map Objects
module.exports = require('./_collection')(MAP, function(get) {
    return function Map() {
        return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
}, {
    // 23.1.3.6 Map.prototype.get(key)
    get: function get(key) {
        var entry = strong.getEntry(validate(this, MAP), key);
        return entry && entry.v;
    },
    // 23.1.3.9 Map.prototype.set(key, value)
    set: function set(key, value) {
        return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);
    }
}, strong, true);

},{"./_collection-strong":"65T55","./_validate-collection":"8oFKK","./_collection":"6SH4d"}],"65T55":[function(require,module,exports) {
'use strict';
var dP = require('./_object-dp').f;
var create = require('./_object-create');
var redefineAll = require('./_redefine-all');
var ctx = require('./_ctx');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var $iterDefine = require('./_iter-define');
var step = require('./_iter-step');
var setSpecies = require('./_set-species');
var DESCRIPTORS = require('./_descriptors');
var fastKey = require('./_meta').fastKey;
var validate = require('./_validate-collection');
var SIZE = DESCRIPTORS ? '_s' : 'size';
var getEntry = function(that, key) {
    // fast case
    var index = fastKey(key);
    var entry;
    if (index !== 'F') return that._i[index];
    // frozen object case
    for(entry = that._f; entry; entry = entry.n){
        if (entry.k == key) return entry;
    }
};
module.exports = {
    getConstructor: function(wrapper, NAME, IS_MAP, ADDER) {
        var C = wrapper(function(that, iterable) {
            anInstance(that, C, NAME, '_i');
            that._t = NAME; // collection type
            that._i = create(null); // index
            that._f = undefined; // first entry
            that._l = undefined; // last entry
            that[SIZE] = 0; // size
            if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        });
        redefineAll(C.prototype, {
            // 23.1.3.1 Map.prototype.clear()
            // 23.2.3.2 Set.prototype.clear()
            clear: function clear() {
                for(var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n){
                    entry.r = true;
                    if (entry.p) entry.p = entry.p.n = undefined;
                    delete data[entry.i];
                }
                that._f = that._l = undefined;
                that[SIZE] = 0;
            },
            // 23.1.3.3 Map.prototype.delete(key)
            // 23.2.3.4 Set.prototype.delete(value)
            'delete': function(key) {
                var that = validate(this, NAME);
                var entry = getEntry(that, key);
                if (entry) {
                    var next = entry.n;
                    var prev = entry.p;
                    delete that._i[entry.i];
                    entry.r = true;
                    if (prev) prev.n = next;
                    if (next) next.p = prev;
                    if (that._f == entry) that._f = next;
                    if (that._l == entry) that._l = prev;
                    that[SIZE]--;
                }
                return !!entry;
            },
            // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
            // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
            forEach: function forEach(callbackfn /* , that = undefined */ ) {
                validate(this, NAME);
                var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
                var entry;
                while(entry = entry ? entry.n : this._f){
                    f(entry.v, entry.k, this);
                    // revert to the last existing entry
                    while(entry && entry.r)entry = entry.p;
                }
            },
            // 23.1.3.7 Map.prototype.has(key)
            // 23.2.3.7 Set.prototype.has(value)
            has: function has(key) {
                return !!getEntry(validate(this, NAME), key);
            }
        });
        if (DESCRIPTORS) dP(C.prototype, 'size', {
            get: function() {
                return validate(this, NAME)[SIZE];
            }
        });
        return C;
    },
    def: function(that, key, value) {
        var entry = getEntry(that, key);
        var prev, index;
        // change existing entry
        if (entry) entry.v = value;
        else {
            that._l = entry = {
                i: index = fastKey(key, true),
                k: key,
                v: value,
                p: prev = that._l,
                n: undefined,
                r: false // <- removed
            };
            if (!that._f) that._f = entry;
            if (prev) prev.n = entry;
            that[SIZE]++;
            // add to index
            if (index !== 'F') that._i[index] = entry;
        }
        return that;
    },
    getEntry: getEntry,
    setStrong: function(C, NAME, IS_MAP) {
        // add .keys, .values, .entries, [@@iterator]
        // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
        $iterDefine(C, NAME, function(iterated, kind) {
            this._t = validate(iterated, NAME); // target
            this._k = kind; // kind
            this._l = undefined; // previous
        }, function() {
            var that = this;
            var kind = that._k;
            var entry = that._l;
            // revert to the last existing entry
            while(entry && entry.r)entry = entry.p;
            // get next entry
            if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
                // or finish the iteration
                that._t = undefined;
                return step(1);
            }
            // return step by kind
            if (kind == 'keys') return step(0, entry.k);
            if (kind == 'values') return step(0, entry.v);
            return step(0, [
                entry.k,
                entry.v
            ]);
        }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);
        // add [@@species], 23.1.2.2, 23.2.2.2
        setSpecies(NAME);
    }
};

},{"./_object-dp":"cLcWd","./_object-create":"b4m8n","./_redefine-all":"6Mnp5","./_ctx":"4rQSm","./_an-instance":"ivm35","./_for-of":"9a8I8","./_iter-define":"egJhK","./_iter-step":"6kbrW","./_set-species":"1qQNM","./_descriptors":"dr2tY","./_meta":"043Qa","./_validate-collection":"8oFKK"}],"8oFKK":[function(require,module,exports) {
var isObject = require('./_is-object');
module.exports = function(it, TYPE) {
    if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');
    return it;
};

},{"./_is-object":"eIE5K"}],"6SH4d":[function(require,module,exports) {
'use strict';
var global = require('./_global');
var $export = require('./_export');
var redefine = require('./_redefine');
var redefineAll = require('./_redefine-all');
var meta = require('./_meta');
var forOf = require('./_for-of');
var anInstance = require('./_an-instance');
var isObject = require('./_is-object');
var fails = require('./_fails');
var $iterDetect = require('./_iter-detect');
var setToStringTag = require('./_set-to-string-tag');
var inheritIfRequired = require('./_inherit-if-required');
module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
    var Base = global[NAME];
    var C = Base;
    var ADDER = IS_MAP ? 'set' : 'add';
    var proto = C && C.prototype;
    var O = {
    };
    var fixMethod = function(KEY) {
        var fn = proto[KEY];
        redefine(proto, KEY, KEY == 'delete' ? function(a) {
            return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
        } : KEY == 'has' ? function has(a) {
            return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
        } : KEY == 'get' ? function get(a) {
            return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
        } : KEY == 'add' ? function add(a) {
            fn.call(this, a === 0 ? 0 : a);
            return this;
        } : function set(a, b) {
            fn.call(this, a === 0 ? 0 : a, b);
            return this;
        });
    };
    if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function() {
        new C().entries().next();
    }))) {
        // create collection constructor
        C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
        redefineAll(C.prototype, methods);
        meta.NEED = true;
    } else {
        var instance = new C();
        // early implementations not supports chaining
        var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {
        } : -0, 1) != instance;
        // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
        var THROWS_ON_PRIMITIVES = fails(function() {
            instance.has(1);
        });
        // most early implementations doesn't supports iterables, most modern - not close it correctly
        var ACCEPT_ITERABLES = $iterDetect(function(iter) {
            new C(iter);
        }); // eslint-disable-line no-new
        // for early implementations -0 and +0 not the same
        var BUGGY_ZERO = !IS_WEAK && fails(function() {
            // V8 ~ Chromium 42- fails only with 5+ elements
            var $instance = new C();
            var index = 5;
            while(index--)$instance[ADDER](index, index);
            return !$instance.has(-0);
        });
        if (!ACCEPT_ITERABLES) {
            C = wrapper(function(target, iterable) {
                anInstance(target, C, NAME);
                var that = inheritIfRequired(new Base(), target, C);
                if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
                return that;
            });
            C.prototype = proto;
            proto.constructor = C;
        }
        if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
            fixMethod('delete');
            fixMethod('has');
            IS_MAP && fixMethod('get');
        }
        if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
        // weak collections should not contains .clear method
        if (IS_WEAK && proto.clear) delete proto.clear;
    }
    setToStringTag(C, NAME);
    O[NAME] = C;
    $export($export.G + $export.W + $export.F * (C != Base), O);
    if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);
    return C;
};

},{"./_global":"8xCse","./_export":"1Tgvm","./_redefine":"9vAu7","./_redefine-all":"6Mnp5","./_meta":"043Qa","./_for-of":"9a8I8","./_an-instance":"ivm35","./_is-object":"eIE5K","./_fails":"iAFH1","./_iter-detect":"3KQwU","./_set-to-string-tag":"7YXlq","./_inherit-if-required":"9GGeZ"}],"61Y2Y":[function(require,module,exports) {
'use strict';
var strong = require('./_collection-strong');
var validate = require('./_validate-collection');
var SET = 'Set';
// 23.2 Set Objects
module.exports = require('./_collection')(SET, function(get) {
    return function Set() {
        return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
}, {
    // 23.2.3.1 Set.prototype.add(value)
    add: function add(value) {
        return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);
    }
}, strong);

},{"./_collection-strong":"65T55","./_validate-collection":"8oFKK","./_collection":"6SH4d"}],"dAOwL":[function(require,module,exports) {
'use strict';
var global = require('./_global');
var each = require('./_array-methods')(0);
var redefine = require('./_redefine');
var meta = require('./_meta');
var assign = require('./_object-assign');
var weak = require('./_collection-weak');
var isObject = require('./_is-object');
var validate = require('./_validate-collection');
var NATIVE_WEAK_MAP = require('./_validate-collection');
var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var WEAK_MAP = 'WeakMap';
var getWeak = meta.getWeak;
var isExtensible = Object.isExtensible;
var uncaughtFrozenStore = weak.ufstore;
var InternalMap;
var wrapper = function(get) {
    return function WeakMap() {
        return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
};
var methods = {
    // 23.3.3.3 WeakMap.prototype.get(key)
    get: function get(key) {
        if (isObject(key)) {
            var data = getWeak(key);
            if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);
            return data ? data[this._i] : undefined;
        }
    },
    // 23.3.3.5 WeakMap.prototype.set(key, value)
    set: function set(key, value) {
        return weak.def(validate(this, WEAK_MAP), key, value);
    }
};
// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);
// IE11 WeakMap frozen keys fix
if (NATIVE_WEAK_MAP && IS_IE11) {
    InternalMap = weak.getConstructor(wrapper, WEAK_MAP);
    assign(InternalMap.prototype, methods);
    meta.NEED = true;
    each([
        'delete',
        'has',
        'get',
        'set'
    ], function(key) {
        var proto = $WeakMap.prototype;
        var method = proto[key];
        redefine(proto, key, function(a, b) {
            // store frozen objects on internal weakmap shim
            if (isObject(a) && !isExtensible(a)) {
                if (!this._f) this._f = new InternalMap();
                var result = this._f[key](a, b);
                return key == 'set' ? this : result;
            // store all the rest on native weakmap
            }
            return method.call(this, a, b);
        });
    });
}

},{"./_global":"8xCse","./_array-methods":"9C3tD","./_redefine":"9vAu7","./_meta":"043Qa","./_object-assign":"h8iBq","./_collection-weak":"lBiRK","./_is-object":"eIE5K","./_validate-collection":"8oFKK","./_collection":"6SH4d"}],"lBiRK":[function(require,module,exports) {
'use strict';
var redefineAll = require('./_redefine-all');
var getWeak = require('./_meta').getWeak;
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var createArrayMethod = require('./_array-methods');
var $has = require('./_has');
var validate = require('./_validate-collection');
var arrayFind = createArrayMethod(5);
var arrayFindIndex = createArrayMethod(6);
var id = 0;
// fallback for uncaught frozen keys
var uncaughtFrozenStore = function(that) {
    return that._l || (that._l = new UncaughtFrozenStore());
};
var UncaughtFrozenStore = function() {
    this.a = [];
};
var findUncaughtFrozen = function(store, key) {
    return arrayFind(store.a, function(it) {
        return it[0] === key;
    });
};
UncaughtFrozenStore.prototype = {
    get: function(key) {
        var entry = findUncaughtFrozen(this, key);
        if (entry) return entry[1];
    },
    has: function(key) {
        return !!findUncaughtFrozen(this, key);
    },
    set: function(key, value) {
        var entry = findUncaughtFrozen(this, key);
        if (entry) entry[1] = value;
        else this.a.push([
            key,
            value
        ]);
    },
    'delete': function(key) {
        var index = arrayFindIndex(this.a, function(it) {
            return it[0] === key;
        });
        if (~index) this.a.splice(index, 1);
        return !!~index;
    }
};
module.exports = {
    getConstructor: function(wrapper, NAME, IS_MAP, ADDER) {
        var C = wrapper(function(that, iterable) {
            anInstance(that, C, NAME, '_i');
            that._t = NAME; // collection type
            that._i = id++; // collection id
            that._l = undefined; // leak store for uncaught frozen objects
            if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
        });
        redefineAll(C.prototype, {
            // 23.3.3.2 WeakMap.prototype.delete(key)
            // 23.4.3.3 WeakSet.prototype.delete(value)
            'delete': function(key) {
                if (!isObject(key)) return false;
                var data = getWeak(key);
                if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);
                return data && $has(data, this._i) && delete data[this._i];
            },
            // 23.3.3.4 WeakMap.prototype.has(key)
            // 23.4.3.4 WeakSet.prototype.has(value)
            has: function has(key) {
                if (!isObject(key)) return false;
                var data = getWeak(key);
                if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);
                return data && $has(data, this._i);
            }
        });
        return C;
    },
    def: function(that, key, value) {
        var data = getWeak(anObject(key), true);
        if (data === true) uncaughtFrozenStore(that).set(key, value);
        else data[that._i] = value;
        return that;
    },
    ufstore: uncaughtFrozenStore
};

},{"./_redefine-all":"6Mnp5","./_meta":"043Qa","./_an-object":"kiL2X","./_is-object":"eIE5K","./_an-instance":"ivm35","./_for-of":"9a8I8","./_array-methods":"9C3tD","./_has":"biQ7v","./_validate-collection":"8oFKK"}],"blRp6":[function(require,module,exports) {
'use strict';
var weak = require('./_collection-weak');
var validate = require('./_validate-collection');
var WEAK_SET = 'WeakSet';
// 23.4 WeakSet Objects
require('./_collection')(WEAK_SET, function(get) {
    return function WeakSet() {
        return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
}, {
    // 23.4.3.1 WeakSet.prototype.add(value)
    add: function add(value) {
        return weak.def(validate(this, WEAK_SET), value, true);
    }
}, weak, false, true);

},{"./_collection-weak":"lBiRK","./_validate-collection":"8oFKK","./_collection":"6SH4d"}],"dp2Nn":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var $typed = require('./_typed');
var buffer = require('./_typed-buffer');
var anObject = require('./_an-object');
var toAbsoluteIndex = require('./_to-absolute-index');
var toLength = require('./_to-length');
var isObject = require('./_is-object');
var ArrayBuffer = require('./_global').ArrayBuffer;
var speciesConstructor = require('./_species-constructor');
var $ArrayBuffer = buffer.ArrayBuffer;
var $DataView = buffer.DataView;
var $isView = $typed.ABV && ArrayBuffer.isView;
var $slice = $ArrayBuffer.prototype.slice;
var VIEW = $typed.VIEW;
var ARRAY_BUFFER = 'ArrayBuffer';
$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {
    ArrayBuffer: $ArrayBuffer
});
$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
    // 24.1.3.1 ArrayBuffer.isView(arg)
    isView: function isView(it) {
        return $isView && $isView(it) || isObject(it) && VIEW in it;
    }
});
$export($export.P + $export.U + $export.F * require('./_fails')(function() {
    return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
    // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
    slice: function slice(start, end) {
        if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
        var len = anObject(this).byteLength;
        var first = toAbsoluteIndex(start, len);
        var fin = toAbsoluteIndex(end === undefined ? len : end, len);
        var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));
        var viewS = new $DataView(this);
        var viewT = new $DataView(result);
        var index = 0;
        while(first < fin)viewT.setUint8(index++, viewS.getUint8(first++));
        return result;
    }
});
require('./_set-species')(ARRAY_BUFFER);

},{"./_export":"1Tgvm","./_typed":"euXsj","./_typed-buffer":"bO20V","./_an-object":"kiL2X","./_to-absolute-index":"1lPjf","./_to-length":"irYfS","./_is-object":"eIE5K","./_global":"8xCse","./_species-constructor":"8Vo8d","./_fails":"iAFH1","./_set-species":"1qQNM"}],"euXsj":[function(require,module,exports) {
var global = require('./_global');
var hide = require('./_hide');
var uid = require('./_uid');
var TYPED = uid('typed_array');
var VIEW = uid('view');
var ABV = !!(global.ArrayBuffer && global.DataView);
var CONSTR = ABV;
var i = 0;
var l = 9;
var Typed;
var TypedArrayConstructors = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(',');
while(i < l)if (Typed = global[TypedArrayConstructors[i++]]) {
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
} else CONSTR = false;
module.exports = {
    ABV: ABV,
    CONSTR: CONSTR,
    TYPED: TYPED,
    VIEW: VIEW
};

},{"./_global":"8xCse","./_hide":"ddpVq","./_uid":"gBq6n"}],"bO20V":[function(require,module,exports) {
'use strict';
var global = require('./_global');
var DESCRIPTORS = require('./_descriptors');
var LIBRARY = require('./_library');
var $typed = require('./_typed');
var hide = require('./_hide');
var redefineAll = require('./_redefine-all');
var fails = require('./_fails');
var anInstance = require('./_an-instance');
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
var toIndex = require('./_to-index');
var gOPN = require('./_object-gopn').f;
var dP = require('./_object-dp').f;
var arrayFill = require('./_array-fill');
var setToStringTag = require('./_set-to-string-tag');
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH = 'Wrong length!';
var WRONG_INDEX = 'Wrong index!';
var $ArrayBuffer = global[ARRAY_BUFFER];
var $DataView = global[DATA_VIEW];
var Math = global.Math;
var RangeError = global.RangeError;
// eslint-disable-next-line no-shadow-restricted-names
var Infinity = global.Infinity;
var BaseBuffer = $ArrayBuffer;
var abs = Math.abs;
var pow = Math.pow;
var floor = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;
var BUFFER = 'buffer';
var BYTE_LENGTH = 'byteLength';
var BYTE_OFFSET = 'byteOffset';
var $BUFFER = DESCRIPTORS ? '_b' : BUFFER;
var $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;
var $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;
// IEEE754 conversions based on https://github.com/feross/ieee754
function packIEEE754(value, mLen, nBytes) {
    var buffer = new Array(nBytes);
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;
    var i = 0;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    var e, m, c;
    value = abs(value);
    // eslint-disable-next-line no-self-compare
    if (value != value || value === Infinity) {
        // eslint-disable-next-line no-self-compare
        m = value != value ? 1 : 0;
        e = eMax;
    } else {
        e = floor(log(value) / LN2);
        if (value * (c = pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * pow(2, eBias - 1) * pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
    buffer[--i] |= s * 128;
    return buffer;
}
function unpackIEEE754(buffer, mLen, nBytes) {
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = eLen - 7;
    var i = nBytes - 1;
    var s = buffer[i--];
    var e = s & 127;
    var m;
    s >>= 7;
    for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : s ? -Infinity : Infinity;
    else {
        m = m + pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * pow(2, e - mLen);
}
function unpackI32(bytes) {
    return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
}
function packI8(it) {
    return [
        it & 255
    ];
}
function packI16(it) {
    return [
        it & 255,
        it >> 8 & 255
    ];
}
function packI32(it) {
    return [
        it & 255,
        it >> 8 & 255,
        it >> 16 & 255,
        it >> 24 & 255
    ];
}
function packF64(it) {
    return packIEEE754(it, 52, 8);
}
function packF32(it) {
    return packIEEE754(it, 23, 4);
}
function addGetter(C, key1, internal) {
    dP(C[PROTOTYPE], key1, {
        get: function() {
            return this[internal];
        }
    });
}
function get(view1, bytes, index, isLittleEndian) {
    var numIndex = +index;
    var intIndex = toIndex(numIndex);
    if (intIndex + bytes > view1[$LENGTH]) throw RangeError(WRONG_INDEX);
    var store = view1[$BUFFER]._b;
    var start = intIndex + view1[$OFFSET];
    var pack = store.slice(start, start + bytes);
    return isLittleEndian ? pack : pack.reverse();
}
function set(view2, bytes, index, conversion, value, isLittleEndian) {
    var numIndex = +index;
    var intIndex = toIndex(numIndex);
    if (intIndex + bytes > view2[$LENGTH]) throw RangeError(WRONG_INDEX);
    var store = view2[$BUFFER]._b;
    var start = intIndex + view2[$OFFSET];
    var pack = conversion(+value);
    for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
}
if (!$typed.ABV) {
    $ArrayBuffer = function ArrayBuffer(length) {
        anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
        var byteLength = toIndex(length);
        this._b = arrayFill.call(new Array(byteLength), 0);
        this[$LENGTH] = byteLength;
    };
    $DataView = function DataView(buffer, byteOffset, byteLength) {
        anInstance(this, $DataView, DATA_VIEW);
        anInstance(buffer, $ArrayBuffer, DATA_VIEW);
        var bufferLength = buffer[$LENGTH];
        var offset = toInteger(byteOffset);
        if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
        byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
        if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
        this[$BUFFER] = buffer;
        this[$OFFSET] = offset;
        this[$LENGTH] = byteLength;
    };
    if (DESCRIPTORS) {
        addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
        addGetter($DataView, BUFFER, '_b');
        addGetter($DataView, BYTE_LENGTH, '_l');
        addGetter($DataView, BYTE_OFFSET, '_o');
    }
    redefineAll($DataView[PROTOTYPE], {
        getInt8: function getInt8(byteOffset) {
            return get(this, 1, byteOffset)[0] << 24 >> 24;
        },
        getUint8: function getUint8(byteOffset) {
            return get(this, 1, byteOffset)[0];
        },
        getInt16: function getInt16(byteOffset /* , littleEndian */ ) {
            var bytes = get(this, 2, byteOffset, arguments[1]);
            return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
        },
        getUint16: function getUint16(byteOffset /* , littleEndian */ ) {
            var bytes = get(this, 2, byteOffset, arguments[1]);
            return bytes[1] << 8 | bytes[0];
        },
        getInt32: function getInt32(byteOffset /* , littleEndian */ ) {
            return unpackI32(get(this, 4, byteOffset, arguments[1]));
        },
        getUint32: function getUint32(byteOffset /* , littleEndian */ ) {
            return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
        },
        getFloat32: function getFloat32(byteOffset /* , littleEndian */ ) {
            return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
        },
        getFloat64: function getFloat64(byteOffset /* , littleEndian */ ) {
            return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
        },
        setInt8: function setInt8(byteOffset, value) {
            set(this, 1, byteOffset, packI8, value);
        },
        setUint8: function setUint8(byteOffset, value) {
            set(this, 1, byteOffset, packI8, value);
        },
        setInt16: function setInt16(byteOffset, value /* , littleEndian */ ) {
            set(this, 2, byteOffset, packI16, value, arguments[2]);
        },
        setUint16: function setUint16(byteOffset, value /* , littleEndian */ ) {
            set(this, 2, byteOffset, packI16, value, arguments[2]);
        },
        setInt32: function setInt32(byteOffset, value /* , littleEndian */ ) {
            set(this, 4, byteOffset, packI32, value, arguments[2]);
        },
        setUint32: function setUint32(byteOffset, value /* , littleEndian */ ) {
            set(this, 4, byteOffset, packI32, value, arguments[2]);
        },
        setFloat32: function setFloat32(byteOffset, value /* , littleEndian */ ) {
            set(this, 4, byteOffset, packF32, value, arguments[2]);
        },
        setFloat64: function setFloat64(byteOffset, value /* , littleEndian */ ) {
            set(this, 8, byteOffset, packF64, value, arguments[2]);
        }
    });
} else {
    if (!fails(function() {
        $ArrayBuffer(1);
    }) || !fails(function() {
        new $ArrayBuffer(-1); // eslint-disable-line no-new
    }) || fails(function() {
        new $ArrayBuffer(); // eslint-disable-line no-new
        new $ArrayBuffer(1.5); // eslint-disable-line no-new
        new $ArrayBuffer(NaN); // eslint-disable-line no-new
        return $ArrayBuffer.name != ARRAY_BUFFER;
    })) {
        $ArrayBuffer = function ArrayBuffer(length) {
            anInstance(this, $ArrayBuffer);
            return new BaseBuffer(toIndex(length));
        };
        var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
        for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;)if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
        if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
    }
    // iOS Safari 7.x bug
    var view = new $DataView(new $ArrayBuffer(2));
    var $setInt8 = $DataView[PROTOTYPE].setInt8;
    view.setInt8(0, 2147483648);
    view.setInt8(1, 2147483649);
    if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
        setInt8: function setInt8(byteOffset, value) {
            $setInt8.call(this, byteOffset, value << 24 >> 24);
        },
        setUint8: function setUint8(byteOffset, value) {
            $setInt8.call(this, byteOffset, value << 24 >> 24);
        }
    }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;

},{"./_global":"8xCse","./_descriptors":"dr2tY","./_library":"lmtqY","./_typed":"euXsj","./_hide":"ddpVq","./_redefine-all":"6Mnp5","./_fails":"iAFH1","./_an-instance":"ivm35","./_to-integer":"cb0GT","./_to-length":"irYfS","./_to-index":"3tbBZ","./_object-gopn":"jK0Om","./_object-dp":"cLcWd","./_array-fill":"dXwYX","./_set-to-string-tag":"7YXlq"}],"3tbBZ":[function(require,module,exports) {
// https://tc39.github.io/ecma262/#sec-toindex
var toInteger = require('./_to-integer');
var toLength = require('./_to-length');
module.exports = function(it) {
    if (it === undefined) return 0;
    var number = toInteger(it);
    var length = toLength(number);
    if (number !== length) throw RangeError('Wrong length!');
    return length;
};

},{"./_to-integer":"cb0GT","./_to-length":"irYfS"}],"FLhcC":[function(require,module,exports) {
var $export = require('./_export');
$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
    DataView: require('./_typed-buffer').DataView
});

},{"./_export":"1Tgvm","./_typed":"euXsj","./_typed-buffer":"bO20V"}],"2PtAR":[function(require,module,exports) {
require('./_typed-array')('Int8', 1, function(init) {
    return function Int8Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
    };
});

},{"./_typed-array":"heDu8"}],"heDu8":[function(require,module,exports) {
'use strict';
if (require('./_descriptors')) {
    var LIBRARY = require('./_library');
    var global = require('./_global');
    var fails = require('./_fails');
    var $export = require('./_export');
    var $typed = require('./_typed');
    var $buffer = require('./_typed-buffer');
    var ctx = require('./_ctx');
    var anInstance = require('./_an-instance');
    var propertyDesc = require('./_property-desc');
    var hide = require('./_hide');
    var redefineAll = require('./_redefine-all');
    var toInteger = require('./_to-integer');
    var toLength = require('./_to-length');
    var toIndex = require('./_to-index');
    var toAbsoluteIndex = require('./_to-absolute-index');
    var toPrimitive = require('./_to-primitive');
    var has = require('./_has');
    var classof = require('./_classof');
    var isObject = require('./_is-object');
    var toObject = require('./_to-object');
    var isArrayIter = require('./_is-array-iter');
    var create = require('./_object-create');
    var getPrototypeOf = require('./_object-gpo');
    var gOPN = require('./_object-gopn').f;
    var getIterFn = require('./core.get-iterator-method');
    var uid = require('./_uid');
    var wks = require('./_wks');
    var createArrayMethod = require('./_array-methods');
    var createArrayIncludes = require('./_array-includes');
    var speciesConstructor = require('./_species-constructor');
    var ArrayIterators = require('./es6.array.iterator');
    var Iterators = require('./_iterators');
    var $iterDetect = require('./_iter-detect');
    var setSpecies = require('./_set-species');
    var arrayFill = require('./_array-fill');
    var arrayCopyWithin = require('./_array-copy-within');
    var $DP = require('./_object-dp');
    var $GOPD = require('./_object-gopd');
    var dP = $DP.f;
    var gOPD = $GOPD.f;
    var RangeError = global.RangeError;
    var TypeError = global.TypeError;
    var Uint8Array = global.Uint8Array;
    var ARRAY_BUFFER = 'ArrayBuffer';
    var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;
    var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
    var PROTOTYPE = 'prototype';
    var ArrayProto = Array[PROTOTYPE];
    var $ArrayBuffer = $buffer.ArrayBuffer;
    var $DataView = $buffer.DataView;
    var arrayForEach = createArrayMethod(0);
    var arrayFilter = createArrayMethod(2);
    var arraySome = createArrayMethod(3);
    var arrayEvery = createArrayMethod(4);
    var arrayFind = createArrayMethod(5);
    var arrayFindIndex = createArrayMethod(6);
    var arrayIncludes = createArrayIncludes(true);
    var arrayIndexOf = createArrayIncludes(false);
    var arrayValues = ArrayIterators.values;
    var arrayKeys = ArrayIterators.keys;
    var arrayEntries = ArrayIterators.entries;
    var arrayLastIndexOf = ArrayProto.lastIndexOf;
    var arrayReduce = ArrayProto.reduce;
    var arrayReduceRight = ArrayProto.reduceRight;
    var arrayJoin = ArrayProto.join;
    var arraySort = ArrayProto.sort;
    var arraySlice = ArrayProto.slice;
    var arrayToString = ArrayProto.toString;
    var arrayToLocaleString = ArrayProto.toLocaleString;
    var ITERATOR = wks('iterator');
    var TAG = wks('toStringTag');
    var TYPED_CONSTRUCTOR = uid('typed_constructor');
    var DEF_CONSTRUCTOR = uid('def_constructor');
    var ALL_CONSTRUCTORS = $typed.CONSTR;
    var TYPED_ARRAY = $typed.TYPED;
    var VIEW = $typed.VIEW;
    var WRONG_LENGTH = 'Wrong length!';
    var $map = createArrayMethod(1, function(O, length) {
        return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
    });
    var LITTLE_ENDIAN = fails(function() {
        // eslint-disable-next-line no-undef
        return new Uint8Array(new Uint16Array([
            1
        ]).buffer)[0] === 1;
    });
    var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function() {
        new Uint8Array(1).set({
        });
    });
    var toOffset = function(it, BYTES) {
        var offset = toInteger(it);
        if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
        return offset;
    };
    var validate = function(it) {
        if (isObject(it) && TYPED_ARRAY in it) return it;
        throw TypeError(it + ' is not a typed array!');
    };
    var allocate = function(C, length) {
        if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) throw TypeError('It is not a typed array constructor!');
        return new C(length);
    };
    var speciesFromList = function(O, list) {
        return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
    };
    var fromList = function(C, list) {
        var index = 0;
        var length = list.length;
        var result = allocate(C, length);
        while(length > index)result[index] = list[index++];
        return result;
    };
    var addGetter = function(it, key, internal) {
        dP(it, key, {
            get: function() {
                return this._d[internal];
            }
        });
    };
    var $from = function from(source /* , mapfn, thisArg */ ) {
        var O = toObject(source);
        var aLen = arguments.length;
        var mapfn = aLen > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        var iterFn = getIterFn(O);
        var i, length, values, result, step, iterator;
        if (iterFn != undefined && !isArrayIter(iterFn)) {
            for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++)values.push(step.value);
            O = values;
        }
        if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
        for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++)result[i] = mapping ? mapfn(O[i], i) : O[i];
        return result;
    };
    var $of = function of() {
        var index = 0;
        var length = arguments.length;
        var result = allocate(this, length);
        while(length > index)result[index] = arguments[index++];
        return result;
    };
    // iOS Safari 6.x fails here
    var TO_LOCALE_BUG = !!Uint8Array && fails(function() {
        arrayToLocaleString.call(new Uint8Array(1));
    });
    var $toLocaleString = function toLocaleString() {
        return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
    };
    var proto = {
        copyWithin: function copyWithin(target, start /* , end */ ) {
            return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
        },
        every: function every(callbackfn /* , thisArg */ ) {
            return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        fill: function fill(value /* , start, end */ ) {
            return arrayFill.apply(validate(this), arguments);
        },
        filter: function filter(callbackfn /* , thisArg */ ) {
            return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined));
        },
        find: function find(predicate /* , thisArg */ ) {
            return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
        },
        findIndex: function findIndex(predicate /* , thisArg */ ) {
            return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
        },
        forEach: function forEach(callbackfn /* , thisArg */ ) {
            arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        indexOf: function indexOf(searchElement /* , fromIndex */ ) {
            return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
        },
        includes: function includes(searchElement /* , fromIndex */ ) {
            return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
        },
        join: function join(separator) {
            return arrayJoin.apply(validate(this), arguments);
        },
        lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */ ) {
            return arrayLastIndexOf.apply(validate(this), arguments);
        },
        map: function map(mapfn /* , thisArg */ ) {
            return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        reduce: function reduce(callbackfn /* , initialValue */ ) {
            return arrayReduce.apply(validate(this), arguments);
        },
        reduceRight: function reduceRight(callbackfn /* , initialValue */ ) {
            return arrayReduceRight.apply(validate(this), arguments);
        },
        reverse: function reverse() {
            var that = this;
            var length = validate(that).length;
            var middle = Math.floor(length / 2);
            var index = 0;
            var value;
            while(index < middle){
                value = that[index];
                that[index++] = that[--length];
                that[length] = value;
            }
            return that;
        },
        some: function some(callbackfn /* , thisArg */ ) {
            return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        },
        sort: function sort(comparefn) {
            return arraySort.call(validate(this), comparefn);
        },
        subarray: function subarray(begin, end) {
            var O = validate(this);
            var length = O.length;
            var $begin = toAbsoluteIndex(begin, length);
            return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin));
        }
    };
    var $slice = function slice(start, end) {
        return speciesFromList(this, arraySlice.call(validate(this), start, end));
    };
    var $set = function set(arrayLike /* , offset */ ) {
        validate(this);
        var offset = toOffset(arguments[1], 1);
        var length = this.length;
        var src = toObject(arrayLike);
        var len = toLength(src.length);
        var index = 0;
        if (len + offset > length) throw RangeError(WRONG_LENGTH);
        while(index < len)this[offset + index] = src[index++];
    };
    var $iterators = {
        entries: function entries() {
            return arrayEntries.call(validate(this));
        },
        keys: function keys() {
            return arrayKeys.call(validate(this));
        },
        values: function values() {
            return arrayValues.call(validate(this));
        }
    };
    var isTAIndex = function(target, key) {
        return isObject(target) && target[TYPED_ARRAY] && typeof key != 'symbol' && key in target && String(+key) == String(key);
    };
    var $getDesc = function getOwnPropertyDescriptor(target, key) {
        return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);
    };
    var $setDesc = function defineProperty(target, key, desc) {
        if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, 'value') && !has(desc, 'get') && !has(desc, 'set') && !desc.configurable && (!has(desc, 'writable') || desc.writable) && (!has(desc, 'enumerable') || desc.enumerable)) {
            target[key] = desc.value;
            return target;
        }
        return dP(target, key, desc);
    };
    if (!ALL_CONSTRUCTORS) {
        $GOPD.f = $getDesc;
        $DP.f = $setDesc;
    }
    $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
        getOwnPropertyDescriptor: $getDesc,
        defineProperty: $setDesc
    });
    if (fails(function() {
        arrayToString.call({
        });
    })) arrayToString = arrayToLocaleString = function toString() {
        return arrayJoin.call(this);
    };
    var $TypedArrayPrototype$ = redefineAll({
    }, proto);
    redefineAll($TypedArrayPrototype$, $iterators);
    hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
    redefineAll($TypedArrayPrototype$, {
        slice: $slice,
        set: $set,
        constructor: function() {
        },
        toString: arrayToString,
        toLocaleString: $toLocaleString
    });
    addGetter($TypedArrayPrototype$, 'buffer', 'b');
    addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
    addGetter($TypedArrayPrototype$, 'byteLength', 'l');
    addGetter($TypedArrayPrototype$, 'length', 'e');
    dP($TypedArrayPrototype$, TAG, {
        get: function() {
            return this[TYPED_ARRAY];
        }
    });
    // eslint-disable-next-line max-statements
    module.exports = function(KEY, BYTES, wrapper, CLAMPED) {
        CLAMPED = !!CLAMPED;
        var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';
        var GETTER = 'get' + KEY;
        var SETTER = 'set' + KEY;
        var TypedArray = global[NAME];
        var Base = TypedArray || {
        };
        var TAC = TypedArray && getPrototypeOf(TypedArray);
        var FORCED = !TypedArray || !$typed.ABV;
        var O = {
        };
        var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
        var getter = function(that, index) {
            var data = that._d;
            return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
        };
        var setter = function(that, index, value) {
            var data = that._d;
            if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 255 ? 255 : value & 255;
            data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
        };
        var addElement = function(that, index) {
            dP(that, index, {
                get: function() {
                    return getter(this, index);
                },
                set: function(value) {
                    return setter(this, index, value);
                },
                enumerable: true
            });
        };
        if (FORCED) {
            TypedArray = wrapper(function(that, data, $offset, $length) {
                anInstance(that, TypedArray, NAME, '_d');
                var index = 0;
                var offset = 0;
                var buffer, byteLength, length, klass;
                if (!isObject(data)) {
                    length = toIndex(data);
                    byteLength = length * BYTES;
                    buffer = new $ArrayBuffer(byteLength);
                } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
                    buffer = data;
                    offset = toOffset($offset, BYTES);
                    var $len = data.byteLength;
                    if ($length === undefined) {
                        if ($len % BYTES) throw RangeError(WRONG_LENGTH);
                        byteLength = $len - offset;
                        if (byteLength < 0) throw RangeError(WRONG_LENGTH);
                    } else {
                        byteLength = toLength($length) * BYTES;
                        if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
                    }
                    length = byteLength / BYTES;
                } else if (TYPED_ARRAY in data) return fromList(TypedArray, data);
                else return $from.call(TypedArray, data);
                hide(that, '_d', {
                    b: buffer,
                    o: offset,
                    l: byteLength,
                    e: length,
                    v: new $DataView(buffer)
                });
                while(index < length)addElement(that, index++);
            });
            TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
            hide(TypedArrayPrototype, 'constructor', TypedArray);
        } else if (!fails(function() {
            TypedArray(1);
        }) || !fails(function() {
            new TypedArray(-1); // eslint-disable-line no-new
        }) || !$iterDetect(function(iter) {
            new TypedArray(); // eslint-disable-line no-new
            new TypedArray(null); // eslint-disable-line no-new
            new TypedArray(1.5); // eslint-disable-line no-new
            new TypedArray(iter); // eslint-disable-line no-new
        }, true)) {
            TypedArray = wrapper(function(that, data, $offset, $length) {
                anInstance(that, TypedArray, NAME);
                var klass;
                // `ws` module bug, temporarily remove validation length for Uint8Array
                // https://github.com/websockets/ws/pull/645
                if (!isObject(data)) return new Base(toIndex(data));
                if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data);
                if (TYPED_ARRAY in data) return fromList(TypedArray, data);
                return $from.call(TypedArray, data);
            });
            arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key) {
                if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
            });
            TypedArray[PROTOTYPE] = TypedArrayPrototype;
            if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
        }
        var $nativeIterator = TypedArrayPrototype[ITERATOR];
        var CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);
        var $iterator = $iterators.values;
        hide(TypedArray, TYPED_CONSTRUCTOR, true);
        hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
        hide(TypedArrayPrototype, VIEW, true);
        hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);
        if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) dP(TypedArrayPrototype, TAG, {
            get: function() {
                return NAME;
            }
        });
        O[NAME] = TypedArray;
        $export($export.G + $export.W + $export.F * (TypedArray != Base), O);
        $export($export.S, NAME, {
            BYTES_PER_ELEMENT: BYTES
        });
        $export($export.S + $export.F * fails(function() {
            Base.of.call(TypedArray, 1);
        }), NAME, {
            from: $from,
            of: $of
        });
        if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);
        $export($export.P, NAME, proto);
        setSpecies(NAME);
        $export($export.P + $export.F * FORCED_SET, NAME, {
            set: $set
        });
        $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);
        if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;
        $export($export.P + $export.F * fails(function() {
            new TypedArray(1).slice();
        }), NAME, {
            slice: $slice
        });
        $export($export.P + $export.F * (fails(function() {
            return [
                1,
                2
            ].toLocaleString() != new TypedArray([
                1,
                2
            ]).toLocaleString();
        }) || !fails(function() {
            TypedArrayPrototype.toLocaleString.call([
                1,
                2
            ]);
        })), NAME, {
            toLocaleString: $toLocaleString
        });
        Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
        if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
    };
} else module.exports = function() {
};

},{"./_descriptors":"dr2tY","./_library":"lmtqY","./_global":"8xCse","./_fails":"iAFH1","./_export":"1Tgvm","./_typed":"euXsj","./_typed-buffer":"bO20V","./_ctx":"4rQSm","./_an-instance":"ivm35","./_property-desc":"825qY","./_hide":"ddpVq","./_redefine-all":"6Mnp5","./_to-integer":"cb0GT","./_to-length":"irYfS","./_to-index":"3tbBZ","./_to-absolute-index":"1lPjf","./_to-primitive":"4Oubb","./_has":"biQ7v","./_classof":"5TIen","./_is-object":"eIE5K","./_to-object":"7HHXi","./_is-array-iter":"ipP6u","./_object-create":"b4m8n","./_object-gpo":"4uFAD","./_object-gopn":"jK0Om","./core.get-iterator-method":"hb865","./_uid":"gBq6n","./_wks":"eaoKZ","./_array-methods":"9C3tD","./_array-includes":"1Ebaw","./_species-constructor":"8Vo8d","./es6.array.iterator":"1xhrt","./_iterators":"dITQr","./_iter-detect":"3KQwU","./_set-species":"1qQNM","./_array-fill":"dXwYX","./_array-copy-within":"55wbB","./_object-dp":"cLcWd","./_object-gopd":"4bAUG"}],"g4j5m":[function(require,module,exports) {
require('./_typed-array')('Uint8', 1, function(init) {
    return function Uint8Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
    };
});

},{"./_typed-array":"heDu8"}],"68vHx":[function(require,module,exports) {
require('./_typed-array')('Uint8', 1, function(init) {
    return function Uint8ClampedArray(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
    };
}, true);

},{"./_typed-array":"heDu8"}],"iZyZL":[function(require,module,exports) {
require('./_typed-array')('Int16', 2, function(init) {
    return function Int16Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
    };
});

},{"./_typed-array":"heDu8"}],"4Jyn3":[function(require,module,exports) {
require('./_typed-array')('Uint16', 2, function(init) {
    return function Uint16Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
    };
});

},{"./_typed-array":"heDu8"}],"dSRiX":[function(require,module,exports) {
require('./_typed-array')('Int32', 4, function(init) {
    return function Int32Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
    };
});

},{"./_typed-array":"heDu8"}],"lKCGR":[function(require,module,exports) {
require('./_typed-array')('Uint32', 4, function(init) {
    return function Uint32Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
    };
});

},{"./_typed-array":"heDu8"}],"fASXR":[function(require,module,exports) {
require('./_typed-array')('Float32', 4, function(init) {
    return function Float32Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
    };
});

},{"./_typed-array":"heDu8"}],"e3YAQ":[function(require,module,exports) {
require('./_typed-array')('Float64', 8, function(init) {
    return function Float64Array(data, byteOffset, length) {
        return init(this, data, byteOffset, length);
    };
});

},{"./_typed-array":"heDu8"}],"kstrm":[function(require,module,exports) {
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export = require('./_export');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var rApply = (require('./_global').Reflect || {
}).apply;
var fApply = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function() {
    rApply(function() {
    });
}), 'Reflect', {
    apply: function apply(target, thisArgument, argumentsList) {
        var T = aFunction(target);
        var L = anObject(argumentsList);
        return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
    }
});

},{"./_export":"1Tgvm","./_a-function":"55L9l","./_an-object":"kiL2X","./_global":"8xCse","./_fails":"iAFH1"}],"fXcT1":[function(require,module,exports) {
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export = require('./_export');
var create = require('./_object-create');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var fails = require('./_fails');
var bind = require('./_bind');
var rConstruct = (require('./_global').Reflect || {
}).construct;
// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function() {
    function F() {
    }
    return !(rConstruct(function() {
    }, [], F) instanceof F);
});
var ARGS_BUG = !fails(function() {
    rConstruct(function() {
    });
});
$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
    construct: function construct(Target, args /* , newTarget */ ) {
        aFunction(Target);
        anObject(args);
        var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
        if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
        if (Target == newTarget) {
            // w/o altered newTarget, optimization for 0-4 arguments
            switch(args.length){
                case 0:
                    return new Target();
                case 1:
                    return new Target(args[0]);
                case 2:
                    return new Target(args[0], args[1]);
                case 3:
                    return new Target(args[0], args[1], args[2]);
                case 4:
                    return new Target(args[0], args[1], args[2], args[3]);
            }
            // w/o altered newTarget, lot of arguments case
            var $args = [
                null
            ];
            $args.push.apply($args, args);
            return new (bind.apply(Target, $args))();
        }
        // with altered newTarget, not support built-in constructors
        var proto = newTarget.prototype;
        var instance = create(isObject(proto) ? proto : Object.prototype);
        var result = Function.apply.call(Target, instance, args);
        return isObject(result) ? result : instance;
    }
});

},{"./_export":"1Tgvm","./_object-create":"b4m8n","./_a-function":"55L9l","./_an-object":"kiL2X","./_is-object":"eIE5K","./_fails":"iAFH1","./_bind":"2xSTE","./_global":"8xCse"}],"kibOK":[function(require,module,exports) {
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP = require('./_object-dp');
var $export = require('./_export');
var anObject = require('./_an-object');
var toPrimitive = require('./_to-primitive');
// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function() {
    // eslint-disable-next-line no-undef
    Reflect.defineProperty(dP.f({
    }, 1, {
        value: 1
    }), 1, {
        value: 2
    });
}), 'Reflect', {
    defineProperty: function defineProperty(target, propertyKey, attributes) {
        anObject(target);
        propertyKey = toPrimitive(propertyKey, true);
        anObject(attributes);
        try {
            dP.f(target, propertyKey, attributes);
            return true;
        } catch (e) {
            return false;
        }
    }
});

},{"./_object-dp":"cLcWd","./_export":"1Tgvm","./_an-object":"kiL2X","./_to-primitive":"4Oubb","./_fails":"iAFH1"}],"2NlGq":[function(require,module,exports) {
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export = require('./_export');
var gOPD = require('./_object-gopd').f;
var anObject = require('./_an-object');
$export($export.S, 'Reflect', {
    deleteProperty: function deleteProperty(target, propertyKey) {
        var desc = gOPD(anObject(target), propertyKey);
        return desc && !desc.configurable ? false : delete target[propertyKey];
    }
});

},{"./_export":"1Tgvm","./_object-gopd":"4bAUG","./_an-object":"kiL2X"}],"iKC7x":[function(require,module,exports) {
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var Enumerate = function(iterated) {
    this._t = anObject(iterated); // target
    this._i = 0; // next index
    var keys = this._k = []; // keys
    var key;
    for(key in iterated)keys.push(key);
};
require('./_iter-create')(Enumerate, 'Object', function() {
    var that = this;
    var keys = that._k;
    var key;
    do {
        if (that._i >= keys.length) return {
            value: undefined,
            done: true
        };
    }while (!((key = keys[that._i++]) in that._t))
    return {
        value: key,
        done: false
    };
});
$export($export.S, 'Reflect', {
    enumerate: function enumerate(target) {
        return new Enumerate(target);
    }
});

},{"./_export":"1Tgvm","./_an-object":"kiL2X","./_iter-create":"eTcx3"}],"dIqbe":[function(require,module,exports) {
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var isObject = require('./_is-object');
var anObject = require('./_an-object');
function get(target, propertyKey /* , receiver */ ) {
    var receiver = arguments.length < 3 ? target : arguments[2];
    var desc, proto;
    if (anObject(target) === receiver) return target[propertyKey];
    if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
    if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
}
$export($export.S, 'Reflect', {
    get: get
});

},{"./_object-gopd":"4bAUG","./_object-gpo":"4uFAD","./_has":"biQ7v","./_export":"1Tgvm","./_is-object":"eIE5K","./_an-object":"kiL2X"}],"lSfAN":[function(require,module,exports) {
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD = require('./_object-gopd');
var $export = require('./_export');
var anObject = require('./_an-object');
$export($export.S, 'Reflect', {
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
        return gOPD.f(anObject(target), propertyKey);
    }
});

},{"./_object-gopd":"4bAUG","./_export":"1Tgvm","./_an-object":"kiL2X"}],"aO9N4":[function(require,module,exports) {
// 26.1.8 Reflect.getPrototypeOf(target)
var $export = require('./_export');
var getProto = require('./_object-gpo');
var anObject = require('./_an-object');
$export($export.S, 'Reflect', {
    getPrototypeOf: function getPrototypeOf(target) {
        return getProto(anObject(target));
    }
});

},{"./_export":"1Tgvm","./_object-gpo":"4uFAD","./_an-object":"kiL2X"}],"4HzcT":[function(require,module,exports) {
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');
$export($export.S, 'Reflect', {
    has: function has(target, propertyKey) {
        return propertyKey in target;
    }
});

},{"./_export":"1Tgvm"}],"dmYlo":[function(require,module,exports) {
// 26.1.10 Reflect.isExtensible(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $isExtensible = Object.isExtensible;
$export($export.S, 'Reflect', {
    isExtensible: function isExtensible(target) {
        anObject(target);
        return $isExtensible ? $isExtensible(target) : true;
    }
});

},{"./_export":"1Tgvm","./_an-object":"kiL2X"}],"15duj":[function(require,module,exports) {
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');
$export($export.S, 'Reflect', {
    ownKeys: require('./_own-keys')
});

},{"./_export":"1Tgvm","./_own-keys":"h4xsg"}],"h4xsg":[function(require,module,exports) {
// all object keys, includes non-enumerable and symbols
var gOPN = require('./_object-gopn');
var gOPS = require('./_object-gops');
var anObject = require('./_an-object');
var Reflect = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
    var keys = gOPN.f(anObject(it));
    var getSymbols = gOPS.f;
    return getSymbols ? keys.concat(getSymbols(it)) : keys;
};

},{"./_object-gopn":"jK0Om","./_object-gops":"5oH2C","./_an-object":"kiL2X","./_global":"8xCse"}],"cC4pR":[function(require,module,exports) {
// 26.1.12 Reflect.preventExtensions(target)
var $export = require('./_export');
var anObject = require('./_an-object');
var $preventExtensions = Object.preventExtensions;
$export($export.S, 'Reflect', {
    preventExtensions: function preventExtensions(target) {
        anObject(target);
        try {
            if ($preventExtensions) $preventExtensions(target);
            return true;
        } catch (e) {
            return false;
        }
    }
});

},{"./_export":"1Tgvm","./_an-object":"kiL2X"}],"dl5fS":[function(require,module,exports) {
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP = require('./_object-dp');
var gOPD = require('./_object-gopd');
var getPrototypeOf = require('./_object-gpo');
var has = require('./_has');
var $export = require('./_export');
var createDesc = require('./_property-desc');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
function set(target, propertyKey, V /* , receiver */ ) {
    var receiver = arguments.length < 4 ? target : arguments[3];
    var ownDesc = gOPD.f(anObject(target), propertyKey);
    var existingDescriptor, proto;
    if (!ownDesc) {
        if (isObject(proto = getPrototypeOf(target))) return set(proto, propertyKey, V, receiver);
        ownDesc = createDesc(0);
    }
    if (has(ownDesc, 'value')) {
        if (ownDesc.writable === false || !isObject(receiver)) return false;
        if (existingDescriptor = gOPD.f(receiver, propertyKey)) {
            if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
            existingDescriptor.value = V;
            dP.f(receiver, propertyKey, existingDescriptor);
        } else dP.f(receiver, propertyKey, createDesc(0, V));
        return true;
    }
    return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}
$export($export.S, 'Reflect', {
    set: set
});

},{"./_object-dp":"cLcWd","./_object-gopd":"4bAUG","./_object-gpo":"4uFAD","./_has":"biQ7v","./_export":"1Tgvm","./_property-desc":"825qY","./_an-object":"kiL2X","./_is-object":"eIE5K"}],"jH9nI":[function(require,module,exports) {
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export = require('./_export');
var setProto = require('./_set-proto');
if (setProto) $export($export.S, 'Reflect', {
    setPrototypeOf: function setPrototypeOf(target, proto) {
        setProto.check(target, proto);
        try {
            setProto.set(target, proto);
            return true;
        } catch (e) {
            return false;
        }
    }
});

},{"./_export":"1Tgvm","./_set-proto":"ltEMf"}],"9KPxe":[function(require,module,exports) {
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export = require('./_export');
var $includes = require('./_array-includes')(true);
$export($export.P, 'Array', {
    includes: function includes(el /* , fromIndex = 0 */ ) {
        return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
    }
});
require('./_add-to-unscopables')('includes');

},{"./_export":"1Tgvm","./_array-includes":"1Ebaw","./_add-to-unscopables":"ltQTG"}],"lKIEm":[function(require,module,exports) {
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap
var $export = require('./_export');
var flattenIntoArray = require('./_flatten-into-array');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var aFunction = require('./_a-function');
var arraySpeciesCreate = require('./_array-species-create');
$export($export.P, 'Array', {
    flatMap: function flatMap(callbackfn /* , thisArg */ ) {
        var O = toObject(this);
        var sourceLen, A;
        aFunction(callbackfn);
        sourceLen = toLength(O.length);
        A = arraySpeciesCreate(O, 0);
        flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);
        return A;
    }
});
require('./_add-to-unscopables')('flatMap');

},{"./_export":"1Tgvm","./_flatten-into-array":"1UpmY","./_to-object":"7HHXi","./_to-length":"irYfS","./_a-function":"55L9l","./_array-species-create":"93xs6","./_add-to-unscopables":"ltQTG"}],"1UpmY":[function(require,module,exports) {
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray
var isArray = require('./_is-array');
var isObject = require('./_is-object');
var toLength = require('./_to-length');
var ctx = require('./_ctx');
var IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');
function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
    var targetIndex = start;
    var sourceIndex = 0;
    var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;
    var element, spreadable;
    while(sourceIndex < sourceLen){
        if (sourceIndex in source) {
            element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];
            spreadable = false;
            if (isObject(element)) {
                spreadable = element[IS_CONCAT_SPREADABLE];
                spreadable = spreadable !== undefined ? !!spreadable : isArray(element);
            }
            if (spreadable && depth > 0) targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
            else {
                if (targetIndex >= 9007199254740991) throw TypeError();
                target[targetIndex] = element;
            }
            targetIndex++;
        }
        sourceIndex++;
    }
    return targetIndex;
}
module.exports = flattenIntoArray;

},{"./_is-array":"dTLRt","./_is-object":"eIE5K","./_to-length":"irYfS","./_ctx":"4rQSm","./_wks":"eaoKZ"}],"lpb4z":[function(require,module,exports) {
'use strict';
// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten
var $export = require('./_export');
var flattenIntoArray = require('./_flatten-into-array');
var toObject = require('./_to-object');
var toLength = require('./_to-length');
var toInteger = require('./_to-integer');
var arraySpeciesCreate = require('./_array-species-create');
$export($export.P, 'Array', {
    flatten: function flatten() {
        var depthArg = arguments[0];
        var O = toObject(this);
        var sourceLen = toLength(O.length);
        var A = arraySpeciesCreate(O, 0);
        flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
        return A;
    }
});
require('./_add-to-unscopables')('flatten');

},{"./_export":"1Tgvm","./_flatten-into-array":"1UpmY","./_to-object":"7HHXi","./_to-length":"irYfS","./_to-integer":"cb0GT","./_array-species-create":"93xs6","./_add-to-unscopables":"ltQTG"}],"eVq5h":[function(require,module,exports) {
'use strict';
// https://github.com/mathiasbynens/String.prototype.at
var $export = require('./_export');
var $at = require('./_string-at')(true);
var $fails = require('./_fails');
var FORCED = $fails(function() {
    return '𠮷'.at(0) !== '𠮷';
});
$export($export.P + $export.F * FORCED, 'String', {
    at: function at(pos) {
        return $at(this, pos);
    }
});

},{"./_export":"1Tgvm","./_string-at":"rbgP0","./_fails":"iAFH1"}],"kxeDX":[function(require,module,exports) {
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');
// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);
$export($export.P + $export.F * WEBKIT_BUG, 'String', {
    padStart: function padStart(maxLength /* , fillString = ' ' */ ) {
        return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
    }
});

},{"./_export":"1Tgvm","./_string-pad":"7gHpZ","./_user-agent":"9eCfU"}],"7gHpZ":[function(require,module,exports) {
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length');
var repeat = require('./_string-repeat');
var defined = require('./_defined');
module.exports = function(that, maxLength, fillString, left) {
    var S = String(defined(that));
    var stringLength = S.length;
    var fillStr = fillString === undefined ? ' ' : String(fillString);
    var intMaxLength = toLength(maxLength);
    if (intMaxLength <= stringLength || fillStr == '') return S;
    var fillLen = intMaxLength - stringLength;
    var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
    return left ? stringFiller + S : S + stringFiller;
};

},{"./_to-length":"irYfS","./_string-repeat":"2JEgf","./_defined":"4Lj5U"}],"6j6XE":[function(require,module,exports) {
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export');
var $pad = require('./_string-pad');
var userAgent = require('./_user-agent');
// https://github.com/zloirock/core-js/issues/280
var WEBKIT_BUG = /Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(userAgent);
$export($export.P + $export.F * WEBKIT_BUG, 'String', {
    padEnd: function padEnd(maxLength /* , fillString = ' ' */ ) {
        return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
    }
});

},{"./_export":"1Tgvm","./_string-pad":"7gHpZ","./_user-agent":"9eCfU"}],"4dYUb":[function(require,module,exports) {
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimLeft', function($trim) {
    return function trimLeft() {
        return $trim(this, 1);
    };
}, 'trimStart');

},{"./_string-trim":"9YCA9"}],"5yndh":[function(require,module,exports) {
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimRight', function($trim) {
    return function trimRight() {
        return $trim(this, 2);
    };
}, 'trimEnd');

},{"./_string-trim":"9YCA9"}],"cZhYH":[function(require,module,exports) {
'use strict';
// https://tc39.github.io/String.prototype.matchAll/
var $export = require('./_export');
var defined = require('./_defined');
var toLength = require('./_to-length');
var isRegExp = require('./_is-regexp');
var getFlags = require('./_flags');
var RegExpProto = RegExp.prototype;
var $RegExpStringIterator = function(regexp, string) {
    this._r = regexp;
    this._s = string;
};
require('./_iter-create')($RegExpStringIterator, 'RegExp String', function next() {
    var match = this._r.exec(this._s);
    return {
        value: match,
        done: match === null
    };
});
$export($export.P, 'String', {
    matchAll: function matchAll(regexp) {
        defined(this);
        if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
        var S = String(this);
        var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);
        var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
        rx.lastIndex = toLength(regexp.lastIndex);
        return new $RegExpStringIterator(rx, S);
    }
});

},{"./_export":"1Tgvm","./_defined":"4Lj5U","./_to-length":"irYfS","./_is-regexp":"aGcfF","./_flags":"KuZtV","./_iter-create":"eTcx3"}],"8vHXs":[function(require,module,exports) {
require('./_wks-define')('asyncIterator');

},{"./_wks-define":"28rGc"}],"jDpxk":[function(require,module,exports) {
require('./_wks-define')('observable');

},{"./_wks-define":"28rGc"}],"k5woh":[function(require,module,exports) {
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export = require('./_export');
var ownKeys = require('./_own-keys');
var toIObject = require('./_to-iobject');
var gOPD = require('./_object-gopd');
var createProperty = require('./_create-property');
$export($export.S, 'Object', {
    getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
        var O = toIObject(object);
        var getDesc = gOPD.f;
        var keys = ownKeys(O);
        var result = {
        };
        var i = 0;
        var key, desc;
        while(keys.length > i){
            desc = getDesc(O, key = keys[i++]);
            if (desc !== undefined) createProperty(result, key, desc);
        }
        return result;
    }
});

},{"./_export":"1Tgvm","./_own-keys":"h4xsg","./_to-iobject":"f9RCz","./_object-gopd":"4bAUG","./_create-property":"8UZLF"}],"kQJLQ":[function(require,module,exports) {
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $values = require('./_object-to-array')(false);
$export($export.S, 'Object', {
    values: function values(it) {
        return $values(it);
    }
});

},{"./_export":"1Tgvm","./_object-to-array":"1U0IC"}],"1U0IC":[function(require,module,exports) {
var DESCRIPTORS = require('./_descriptors');
var getKeys = require('./_object-keys');
var toIObject = require('./_to-iobject');
var isEnum = require('./_object-pie').f;
module.exports = function(isEntries) {
    return function(it) {
        var O = toIObject(it);
        var keys = getKeys(O);
        var length = keys.length;
        var i = 0;
        var result = [];
        var key;
        while(length > i){
            key = keys[i++];
            if (!DESCRIPTORS || isEnum.call(O, key)) result.push(isEntries ? [
                key,
                O[key]
            ] : O[key]);
        }
        return result;
    };
};

},{"./_descriptors":"dr2tY","./_object-keys":"98CC0","./_to-iobject":"f9RCz","./_object-pie":"2aUxV"}],"7zW9M":[function(require,module,exports) {
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export');
var $entries = require('./_object-to-array')(true);
$export($export.S, 'Object', {
    entries: function entries(it) {
        return $entries(it);
    }
});

},{"./_export":"1Tgvm","./_object-to-array":"1U0IC"}],"92ysW":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');
// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
    __defineGetter__: function __defineGetter__(P, getter) {
        $defineProperty.f(toObject(this), P, {
            get: aFunction(getter),
            enumerable: true,
            configurable: true
        });
    }
});

},{"./_export":"1Tgvm","./_to-object":"7HHXi","./_a-function":"55L9l","./_object-dp":"cLcWd","./_descriptors":"dr2tY","./_object-forced-pam":"9kndE"}],"9kndE":[function(require,module,exports) {
'use strict';
// Forced replacement prototype accessors methods
module.exports = require('./_library') || !require('./_fails')(function() {
    var K = Math.random();
    // In FF throws only define methods
    // eslint-disable-next-line no-undef, no-useless-call
    __defineSetter__.call(null, K, function() {
    });
    delete require('./_global')[K];
});

},{"./_library":"lmtqY","./_fails":"iAFH1","./_global":"8xCse"}],"emt8A":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var aFunction = require('./_a-function');
var $defineProperty = require('./_object-dp');
// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
    __defineSetter__: function __defineSetter__(P, setter) {
        $defineProperty.f(toObject(this), P, {
            set: aFunction(setter),
            enumerable: true,
            configurable: true
        });
    }
});

},{"./_export":"1Tgvm","./_to-object":"7HHXi","./_a-function":"55L9l","./_object-dp":"cLcWd","./_descriptors":"dr2tY","./_object-forced-pam":"9kndE"}],"9LH3Q":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;
// B.2.2.4 Object.prototype.__lookupGetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
    __lookupGetter__: function __lookupGetter__(P) {
        var O = toObject(this);
        var K = toPrimitive(P, true);
        var D;
        do {
            if (D = getOwnPropertyDescriptor(O, K)) return D.get;
        }while (O = getPrototypeOf(O))
    }
});

},{"./_export":"1Tgvm","./_to-object":"7HHXi","./_to-primitive":"4Oubb","./_object-gpo":"4uFAD","./_object-gopd":"4bAUG","./_descriptors":"dr2tY","./_object-forced-pam":"9kndE"}],"kEN8G":[function(require,module,exports) {
'use strict';
var $export = require('./_export');
var toObject = require('./_to-object');
var toPrimitive = require('./_to-primitive');
var getPrototypeOf = require('./_object-gpo');
var getOwnPropertyDescriptor = require('./_object-gopd').f;
// B.2.2.5 Object.prototype.__lookupSetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
    __lookupSetter__: function __lookupSetter__(P) {
        var O = toObject(this);
        var K = toPrimitive(P, true);
        var D;
        do {
            if (D = getOwnPropertyDescriptor(O, K)) return D.set;
        }while (O = getPrototypeOf(O))
    }
});

},{"./_export":"1Tgvm","./_to-object":"7HHXi","./_to-primitive":"4Oubb","./_object-gpo":"4uFAD","./_object-gopd":"4bAUG","./_descriptors":"dr2tY","./_object-forced-pam":"9kndE"}],"7iBxS":[function(require,module,exports) {
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = require('./_export');
$export($export.P + $export.R, 'Map', {
    toJSON: require('./_collection-to-json')('Map')
});

},{"./_export":"1Tgvm","./_collection-to-json":"jHAmP"}],"jHAmP":[function(require,module,exports) {
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = require('./_classof');
var from = require('./_array-from-iterable');
module.exports = function(NAME) {
    return function toJSON() {
        if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
        return from(this);
    };
};

},{"./_classof":"5TIen","./_array-from-iterable":"dANMj"}],"dANMj":[function(require,module,exports) {
var forOf = require('./_for-of');
module.exports = function(iter, ITERATOR) {
    var result = [];
    forOf(iter, false, result.push, result, ITERATOR);
    return result;
};

},{"./_for-of":"9a8I8"}],"exanP":[function(require,module,exports) {
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export = require('./_export');
$export($export.P + $export.R, 'Set', {
    toJSON: require('./_collection-to-json')('Set')
});

},{"./_export":"1Tgvm","./_collection-to-json":"jHAmP"}],"dT1Dc":[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of
require('./_set-collection-of')('Map');

},{"./_set-collection-of":"dCQc8"}],"dCQc8":[function(require,module,exports) {
'use strict';
// https://tc39.github.io/proposal-setmap-offrom/
var $export = require('./_export');
module.exports = function(COLLECTION) {
    $export($export.S, COLLECTION, {
        of: function of() {
            var length = arguments.length;
            var A = new Array(length);
            while(length--)A[length] = arguments[length];
            return new this(A);
        }
    });
};

},{"./_export":"1Tgvm"}],"jSRTa":[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of
require('./_set-collection-of')('Set');

},{"./_set-collection-of":"dCQc8"}],"39wfA":[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of
require('./_set-collection-of')('WeakMap');

},{"./_set-collection-of":"dCQc8"}],"ikieO":[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of
require('./_set-collection-of')('WeakSet');

},{"./_set-collection-of":"dCQc8"}],"2MGKl":[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from
require('./_set-collection-from')('Map');

},{"./_set-collection-from":"5uH1y"}],"5uH1y":[function(require,module,exports) {
'use strict';
// https://tc39.github.io/proposal-setmap-offrom/
var $export = require('./_export');
var aFunction = require('./_a-function');
var ctx = require('./_ctx');
var forOf = require('./_for-of');
module.exports = function(COLLECTION) {
    $export($export.S, COLLECTION, {
        from: function from(source /* , mapFn, thisArg */ ) {
            var mapFn = arguments[1];
            var mapping, A, n, cb;
            aFunction(this);
            mapping = mapFn !== undefined;
            if (mapping) aFunction(mapFn);
            if (source == undefined) return new this();
            A = [];
            if (mapping) {
                n = 0;
                cb = ctx(mapFn, arguments[2], 2);
                forOf(source, false, function(nextItem) {
                    A.push(cb(nextItem, n++));
                });
            } else forOf(source, false, A.push, A);
            return new this(A);
        }
    });
};

},{"./_export":"1Tgvm","./_a-function":"55L9l","./_ctx":"4rQSm","./_for-of":"9a8I8"}],"3AF6v":[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from
require('./_set-collection-from')('Set');

},{"./_set-collection-from":"5uH1y"}],"23jtR":[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from
require('./_set-collection-from')('WeakMap');

},{"./_set-collection-from":"5uH1y"}],"hJc4O":[function(require,module,exports) {
// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from
require('./_set-collection-from')('WeakSet');

},{"./_set-collection-from":"5uH1y"}],"lshq0":[function(require,module,exports) {
// https://github.com/tc39/proposal-global
var $export = require('./_export');
$export($export.G, {
    global: require('./_global')
});

},{"./_export":"1Tgvm","./_global":"8xCse"}],"aLRNx":[function(require,module,exports) {
// https://github.com/tc39/proposal-global
var $export = require('./_export');
$export($export.S, 'System', {
    global: require('./_global')
});

},{"./_export":"1Tgvm","./_global":"8xCse"}],"3xhVh":[function(require,module,exports) {
// https://github.com/ljharb/proposal-is-error
var $export = require('./_export');
var cof = require('./_cof');
$export($export.S, 'Error', {
    isError: function isError(it) {
        return cof(it) === 'Error';
    }
});

},{"./_export":"1Tgvm","./_cof":"frIbo"}],"bZ0NA":[function(require,module,exports) {
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
$export($export.S, 'Math', {
    clamp: function clamp(x, lower, upper) {
        return Math.min(upper, Math.max(lower, x));
    }
});

},{"./_export":"1Tgvm"}],"gOGEZ":[function(require,module,exports) {
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
$export($export.S, 'Math', {
    DEG_PER_RAD: Math.PI / 180
});

},{"./_export":"1Tgvm"}],"cdQDY":[function(require,module,exports) {
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var RAD_PER_DEG = 180 / Math.PI;
$export($export.S, 'Math', {
    degrees: function degrees(radians) {
        return radians * RAD_PER_DEG;
    }
});

},{"./_export":"1Tgvm"}],"fR5LK":[function(require,module,exports) {
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var scale = require('./_math-scale');
var fround = require('./_math-fround');
$export($export.S, 'Math', {
    fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
        return fround(scale(x, inLow, inHigh, outLow, outHigh));
    }
});

},{"./_export":"1Tgvm","./_math-scale":"6rAjD","./_math-fround":"9TbbN"}],"6rAjD":[function(require,module,exports) {
// https://rwaldron.github.io/proposal-math-extensions/
module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
    if (arguments.length === 0 || x != x || inLow != inLow || inHigh != inHigh || outLow != outLow || outHigh != outHigh) return NaN;
    if (x === Infinity || x === -Infinity) return x;
    return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
};

},{}],"5Jbi2":[function(require,module,exports) {
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');
$export($export.S, 'Math', {
    iaddh: function iaddh(x0, x1, y0, y1) {
        var $x0 = x0 >>> 0;
        var $x1 = x1 >>> 0;
        var $y0 = y0 >>> 0;
        return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
    }
});

},{"./_export":"1Tgvm"}],"hrxFs":[function(require,module,exports) {
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');
$export($export.S, 'Math', {
    isubh: function isubh(x0, x1, y0, y1) {
        var $x0 = x0 >>> 0;
        var $x1 = x1 >>> 0;
        var $y0 = y0 >>> 0;
        return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
    }
});

},{"./_export":"1Tgvm"}],"i4YiT":[function(require,module,exports) {
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');
$export($export.S, 'Math', {
    imulh: function imulh(u, v) {
        var UINT16 = 65535;
        var $u = +u;
        var $v = +v;
        var u0 = $u & UINT16;
        var v0 = $v & UINT16;
        var u1 = $u >> 16;
        var v1 = $v >> 16;
        var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
        return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
    }
});

},{"./_export":"1Tgvm"}],"il4w2":[function(require,module,exports) {
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
$export($export.S, 'Math', {
    RAD_PER_DEG: 180 / Math.PI
});

},{"./_export":"1Tgvm"}],"7RQmX":[function(require,module,exports) {
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
var DEG_PER_RAD = Math.PI / 180;
$export($export.S, 'Math', {
    radians: function radians(degrees) {
        return degrees * DEG_PER_RAD;
    }
});

},{"./_export":"1Tgvm"}],"jOPwg":[function(require,module,exports) {
// https://rwaldron.github.io/proposal-math-extensions/
var $export = require('./_export');
$export($export.S, 'Math', {
    scale: require('./_math-scale')
});

},{"./_export":"1Tgvm","./_math-scale":"6rAjD"}],"8NRee":[function(require,module,exports) {
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');
$export($export.S, 'Math', {
    umulh: function umulh(u, v) {
        var UINT16 = 65535;
        var $u = +u;
        var $v = +v;
        var u0 = $u & UINT16;
        var v0 = $v & UINT16;
        var u1 = $u >>> 16;
        var v1 = $v >>> 16;
        var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
        return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
    }
});

},{"./_export":"1Tgvm"}],"ePksm":[function(require,module,exports) {
// http://jfbastien.github.io/papers/Math.signbit.html
var $export = require('./_export');
$export($export.S, 'Math', {
    signbit: function signbit(x) {
        // eslint-disable-next-line no-self-compare
        return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;
    }
});

},{"./_export":"1Tgvm"}],"2JMTL":[function(require,module,exports) {
// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');
$export($export.P + $export.R, 'Promise', {
    'finally': function(onFinally) {
        var C = speciesConstructor(this, core.Promise || global.Promise);
        var isFunction = typeof onFinally == 'function';
        return this.then(isFunction ? function(x) {
            return promiseResolve(C, onFinally()).then(function() {
                return x;
            });
        } : onFinally, isFunction ? function(e) {
            return promiseResolve(C, onFinally()).then(function() {
                throw e;
            });
        } : onFinally);
    }
});

},{"./_export":"1Tgvm","./_core":"4o9Ko","./_global":"8xCse","./_species-constructor":"8Vo8d","./_promise-resolve":"58Dua"}],"2RsT8":[function(require,module,exports) {
'use strict';
// https://github.com/tc39/proposal-promise-try
var $export = require('./_export');
var newPromiseCapability = require('./_new-promise-capability');
var perform = require('./_perform');
$export($export.S, 'Promise', {
    'try': function(callbackfn) {
        var promiseCapability = newPromiseCapability.f(this);
        var result = perform(callbackfn);
        (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
        return promiseCapability.promise;
    }
});

},{"./_export":"1Tgvm","./_new-promise-capability":"clM6P","./_perform":"7Nx5Z"}],"iQ9qT":[function(require,module,exports) {
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var toMetaKey = metadata.key;
var ordinaryDefineOwnMetadata = metadata.set;
metadata.exp({
    defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
        ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
    }
});

},{"./_metadata":"gajc8","./_an-object":"kiL2X"}],"gajc8":[function(require,module,exports) {
var Map = require('./es6.map');
var $export = require('./_export');
var shared = require('./_shared')('metadata');
var store = shared.store || (shared.store = new (require('./es6.weak-map'))());
var getOrCreateMetadataMap = function(target, targetKey, create) {
    var targetMetadata = store.get(target);
    if (!targetMetadata) {
        if (!create) return undefined;
        store.set(target, targetMetadata = new Map());
    }
    var keyMetadata = targetMetadata.get(targetKey);
    if (!keyMetadata) {
        if (!create) return undefined;
        targetMetadata.set(targetKey, keyMetadata = new Map());
    }
    return keyMetadata;
};
var ordinaryHasOwnMetadata = function(MetadataKey, O, P) {
    var metadataMap = getOrCreateMetadataMap(O, P, false);
    return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function(MetadataKey, O, P) {
    var metadataMap = getOrCreateMetadataMap(O, P, false);
    return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P) {
    getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function(target, targetKey) {
    var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
    var keys = [];
    if (metadataMap) metadataMap.forEach(function(_, key) {
        keys.push(key);
    });
    return keys;
};
var toMetaKey = function(it) {
    return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function(O) {
    $export($export.S, 'Reflect', O);
};
module.exports = {
    store: store,
    map: getOrCreateMetadataMap,
    has: ordinaryHasOwnMetadata,
    get: ordinaryGetOwnMetadata,
    set: ordinaryDefineOwnMetadata,
    keys: ordinaryOwnMetadataKeys,
    key: toMetaKey,
    exp: exp
};

},{"./es6.map":"1kXi9","./_export":"1Tgvm","./_shared":"9XC5J","./es6.weak-map":"dAOwL"}],"4glRb":[function(require,module,exports) {
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var toMetaKey = metadata.key;
var getOrCreateMetadataMap = metadata.map;
var store = metadata.store;
metadata.exp({
    deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */ ) {
        var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);
        var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
        if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
        if (metadataMap.size) return true;
        var targetMetadata = store.get(target);
        targetMetadata['delete'](targetKey);
        return !!targetMetadata.size || store['delete'](target);
    }
});

},{"./_metadata":"gajc8","./_an-object":"kiL2X"}],"kmvi8":[function(require,module,exports) {
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryHasOwnMetadata = metadata.has;
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;
var ordinaryGetMetadata = function(MetadataKey, O, P) {
    var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
    if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
    var parent = getPrototypeOf(O);
    return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};
metadata.exp({
    getMetadata: function getMetadata(metadataKey, target /* , targetKey */ ) {
        return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    }
});

},{"./_metadata":"gajc8","./_an-object":"kiL2X","./_object-gpo":"4uFAD"}],"6bA9p":[function(require,module,exports) {
var Set = require('./es6.set');
var from = require('./_array-from-iterable');
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;
var ordinaryMetadataKeys = function(O, P) {
    var oKeys = ordinaryOwnMetadataKeys(O, P);
    var parent = getPrototypeOf(O);
    if (parent === null) return oKeys;
    var pKeys = ordinaryMetadataKeys(parent, P);
    return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};
metadata.exp({
    getMetadataKeys: function getMetadataKeys(target /* , targetKey */ ) {
        return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
    }
});

},{"./es6.set":"61Y2Y","./_array-from-iterable":"dANMj","./_metadata":"gajc8","./_an-object":"kiL2X","./_object-gpo":"4uFAD"}],"jebxh":[function(require,module,exports) {
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryGetOwnMetadata = metadata.get;
var toMetaKey = metadata.key;
metadata.exp({
    getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */ ) {
        return ordinaryGetOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    }
});

},{"./_metadata":"gajc8","./_an-object":"kiL2X"}],"jGnWP":[function(require,module,exports) {
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryOwnMetadataKeys = metadata.keys;
var toMetaKey = metadata.key;
metadata.exp({
    getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */ ) {
        return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
    }
});

},{"./_metadata":"gajc8","./_an-object":"kiL2X"}],"bZiK8":[function(require,module,exports) {
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var getPrototypeOf = require('./_object-gpo');
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;
var ordinaryHasMetadata = function(MetadataKey, O, P) {
    var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
    if (hasOwn) return true;
    var parent = getPrototypeOf(O);
    return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};
metadata.exp({
    hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */ ) {
        return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    }
});

},{"./_metadata":"gajc8","./_an-object":"kiL2X","./_object-gpo":"4uFAD"}],"khZMr":[function(require,module,exports) {
var metadata = require('./_metadata');
var anObject = require('./_an-object');
var ordinaryHasOwnMetadata = metadata.has;
var toMetaKey = metadata.key;
metadata.exp({
    hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */ ) {
        return ordinaryHasOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    }
});

},{"./_metadata":"gajc8","./_an-object":"kiL2X"}],"dQNHX":[function(require,module,exports) {
var $metadata = require('./_metadata');
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var toMetaKey = $metadata.key;
var ordinaryDefineOwnMetadata = $metadata.set;
$metadata.exp({
    metadata: function metadata(metadataKey, metadataValue) {
        return function decorator(target, targetKey) {
            ordinaryDefineOwnMetadata(metadataKey, metadataValue, (targetKey !== undefined ? anObject : aFunction)(target), toMetaKey(targetKey));
        };
    }
});

},{"./_metadata":"gajc8","./_an-object":"kiL2X","./_a-function":"55L9l"}],"eXG8y":[function(require,module,exports) {
// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export = require('./_export');
var microtask = require('./_microtask')();
var process = require('./_global').process;
var isNode = require('./_cof')(process) == 'process';
$export($export.G, {
    asap: function asap(fn) {
        var domain = isNode && process.domain;
        microtask(domain ? domain.bind(fn) : fn);
    }
});

},{"./_export":"1Tgvm","./_microtask":"8lwWF","./_global":"8xCse","./_cof":"frIbo"}],"dqE8O":[function(require,module,exports) {
'use strict';
// https://github.com/zenparsing/es-observable
var $export = require('./_export');
var global = require('./_global');
var core = require('./_core');
var microtask = require('./_microtask')();
var OBSERVABLE = require('./_wks')('observable');
var aFunction = require('./_a-function');
var anObject = require('./_an-object');
var anInstance = require('./_an-instance');
var redefineAll = require('./_redefine-all');
var hide = require('./_hide');
var forOf = require('./_for-of');
var RETURN = forOf.RETURN;
var getMethod = function(fn) {
    return fn == null ? undefined : aFunction(fn);
};
var cleanupSubscription = function(subscription) {
    var cleanup = subscription._c;
    if (cleanup) {
        subscription._c = undefined;
        cleanup();
    }
};
var subscriptionClosed = function(subscription) {
    return subscription._o === undefined;
};
var closeSubscription = function(subscription) {
    if (!subscriptionClosed(subscription)) {
        subscription._o = undefined;
        cleanupSubscription(subscription);
    }
};
var Subscription = function(observer, subscriber) {
    anObject(observer);
    this._c = undefined;
    this._o = observer;
    observer = new SubscriptionObserver(this);
    try {
        var cleanup = subscriber(observer);
        var subscription = cleanup;
        if (cleanup != null) {
            if (typeof cleanup.unsubscribe === 'function') cleanup = function() {
                subscription.unsubscribe();
            };
            else aFunction(cleanup);
            this._c = cleanup;
        }
    } catch (e) {
        observer.error(e);
        return;
    }
    if (subscriptionClosed(this)) cleanupSubscription(this);
};
Subscription.prototype = redefineAll({
}, {
    unsubscribe: function unsubscribe() {
        closeSubscription(this);
    }
});
var SubscriptionObserver = function(subscription) {
    this._s = subscription;
};
SubscriptionObserver.prototype = redefineAll({
}, {
    next: function next(value) {
        var subscription = this._s;
        if (!subscriptionClosed(subscription)) {
            var observer = subscription._o;
            try {
                var m = getMethod(observer.next);
                if (m) return m.call(observer, value);
            } catch (e) {
                try {
                    closeSubscription(subscription);
                } finally{
                    throw e;
                }
            }
        }
    },
    error: function error(value) {
        var subscription = this._s;
        if (subscriptionClosed(subscription)) throw value;
        var observer = subscription._o;
        subscription._o = undefined;
        try {
            var m = getMethod(observer.error);
            if (!m) throw value;
            value = m.call(observer, value);
        } catch (e) {
            try {
                cleanupSubscription(subscription);
            } finally{
                throw e;
            }
        }
        cleanupSubscription(subscription);
        return value;
    },
    complete: function complete(value) {
        var subscription = this._s;
        if (!subscriptionClosed(subscription)) {
            var observer = subscription._o;
            subscription._o = undefined;
            try {
                var m = getMethod(observer.complete);
                value = m ? m.call(observer, value) : undefined;
            } catch (e) {
                try {
                    cleanupSubscription(subscription);
                } finally{
                    throw e;
                }
            }
            cleanupSubscription(subscription);
            return value;
        }
    }
});
var $Observable = function Observable(subscriber) {
    anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};
redefineAll($Observable.prototype, {
    subscribe: function subscribe(observer) {
        return new Subscription(observer, this._f);
    },
    forEach: function forEach(fn) {
        var that = this;
        return new (core.Promise || global.Promise)(function(resolve, reject) {
            aFunction(fn);
            var subscription = that.subscribe({
                next: function(value) {
                    try {
                        return fn(value);
                    } catch (e) {
                        reject(e);
                        subscription.unsubscribe();
                    }
                },
                error: reject,
                complete: resolve
            });
        });
    }
});
redefineAll($Observable, {
    from: function from(x) {
        var C = typeof this === 'function' ? this : $Observable;
        var method = getMethod(anObject(x)[OBSERVABLE]);
        if (method) {
            var observable = anObject(method.call(x));
            return observable.constructor === C ? observable : new C(function(observer) {
                return observable.subscribe(observer);
            });
        }
        return new C(function(observer) {
            var done = false;
            microtask(function() {
                if (!done) {
                    try {
                        if (forOf(x, false, function(it) {
                            observer.next(it);
                            if (done) return RETURN;
                        }) === RETURN) return;
                    } catch (e) {
                        if (done) throw e;
                        observer.error(e);
                        return;
                    }
                    observer.complete();
                }
            });
            return function() {
                done = true;
            };
        });
    },
    of: function of() {
        for(var i = 0, l = arguments.length, items = new Array(l); i < l;)items[i] = arguments[i++];
        return new (typeof this === 'function' ? this : $Observable)(function(observer) {
            var done = false;
            microtask(function() {
                if (!done) {
                    for(var j = 0; j < items.length; ++j){
                        observer.next(items[j]);
                        if (done) return;
                    }
                    observer.complete();
                }
            });
            return function() {
                done = true;
            };
        });
    }
});
hide($Observable.prototype, OBSERVABLE, function() {
    return this;
});
$export($export.G, {
    Observable: $Observable
});
require('./_set-species')('Observable');

},{"./_export":"1Tgvm","./_global":"8xCse","./_core":"4o9Ko","./_microtask":"8lwWF","./_wks":"eaoKZ","./_a-function":"55L9l","./_an-object":"kiL2X","./_an-instance":"ivm35","./_redefine-all":"6Mnp5","./_hide":"ddpVq","./_for-of":"9a8I8","./_set-species":"1qQNM"}],"dl3SO":[function(require,module,exports) {
// ie9- setTimeout & setInterval additional parameters fix
var global = require('./_global');
var $export = require('./_export');
var userAgent = require('./_user-agent');
var slice = [].slice;
var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check
var wrap = function(set) {
    return function(fn, time /* , ...args */ ) {
        var boundArgs = arguments.length > 2;
        var args = boundArgs ? slice.call(arguments, 2) : false;
        return set(boundArgs ? function() {
            // eslint-disable-next-line no-new-func
            (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);
        } : fn, time);
    };
};
$export($export.G + $export.B + $export.F * MSIE, {
    setTimeout: wrap(global.setTimeout),
    setInterval: wrap(global.setInterval)
});

},{"./_global":"8xCse","./_export":"1Tgvm","./_user-agent":"9eCfU"}],"49tUX":[function(require,module,exports) {
var $export = require('./_export');
var $task = require('./_task');
$export($export.G + $export.B, {
    setImmediate: $task.set,
    clearImmediate: $task.clear
});

},{"./_export":"1Tgvm","./_task":"bPiT9"}],"iv8Qo":[function(require,module,exports) {
var $iterators = require('./es6.array.iterator');
var getKeys = require('./_object-keys');
var redefine = require('./_redefine');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var wks = require('./_wks');
var ITERATOR = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators.Array;
var DOMIterables = {
    CSSRuleList: true,
    CSSStyleDeclaration: false,
    CSSValueList: false,
    ClientRectList: false,
    DOMRectList: false,
    DOMStringList: false,
    DOMTokenList: true,
    DataTransferItemList: false,
    FileList: false,
    HTMLAllCollection: false,
    HTMLCollection: false,
    HTMLFormElement: false,
    HTMLSelectElement: false,
    MediaList: true,
    MimeTypeArray: false,
    NamedNodeMap: false,
    NodeList: true,
    PaintRequestList: false,
    Plugin: false,
    PluginArray: false,
    SVGLengthList: false,
    SVGNumberList: false,
    SVGPathSegList: false,
    SVGPointList: false,
    SVGStringList: false,
    SVGTransformList: false,
    SourceBufferList: false,
    StyleSheetList: true,
    TextTrackCueList: false,
    TextTrackList: false,
    TouchList: false
};
for(var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++){
    var NAME = collections[i];
    var explicit = DOMIterables[NAME];
    var Collection = global[NAME];
    var proto = Collection && Collection.prototype;
    var key;
    if (proto) {
        if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
        if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
        Iterators[NAME] = ArrayValues;
        if (explicit) {
            for(key in $iterators)if (!proto[key]) redefine(proto, key, $iterators[key], true);
        }
    }
}

},{"./es6.array.iterator":"1xhrt","./_object-keys":"98CC0","./_redefine":"9vAu7","./_global":"8xCse","./_hide":"ddpVq","./_iterators":"dITQr","./_wks":"eaoKZ"}],"cmH2j":[function(require,module,exports) {
var global = arguments[3];
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */ !function(global1) {
    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {
    };
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    var inModule = typeof module === "object";
    var runtime = global1.regeneratorRuntime;
    if (runtime) {
        if (inModule) // If regeneratorRuntime is defined globally and we're in a module,
        // make the exports object identical to regeneratorRuntime.
        module.exports = runtime;
        // Don't bother evaluating the rest of this file if the runtime was
        // already defined globally.
        return;
    }
    // Define the runtime globally (as expected by generated code) as either
    // module.exports (if we're in a module) or a new, empty object.
    runtime = global1.regeneratorRuntime = inModule ? module.exports : {
    };
    function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);
        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
    }
    runtime.wrap = wrap;
    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
        try {
            return {
                type: "normal",
                arg: fn.call(obj, arg)
            };
        } catch (err) {
            return {
                type: "throw",
                arg: err
            };
        }
    }
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {
    };
    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {
    }
    function GeneratorFunction() {
    }
    function GeneratorFunctionPrototype() {
    }
    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {
    };
    IteratorPrototype[iteratorSymbol] = function() {
        return this;
    };
    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";
    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
        [
            "next",
            "throw",
            "return"
        ].forEach(function(method) {
            prototype[method] = function(arg) {
                return this._invoke(method, arg);
            };
        });
    }
    runtime.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };
    runtime.mark = function(genFun) {
        if (Object.setPrototypeOf) Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        else {
            genFun.__proto__ = GeneratorFunctionPrototype;
            if (!(toStringTagSymbol in genFun)) genFun[toStringTagSymbol] = "GeneratorFunction";
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
    };
    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    runtime.awrap = function(arg) {
        return {
            __await: arg
        };
    };
    function AsyncIterator(generator) {
        function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if (record.type === "throw") reject(record.arg);
            else {
                var result = record.arg;
                var value1 = result.value;
                if (value1 && typeof value1 === "object" && hasOwn.call(value1, "__await")) return Promise.resolve(value1.__await).then(function(value) {
                    invoke("next", value, resolve, reject);
                }, function(err) {
                    invoke("throw", err, resolve, reject);
                });
                return Promise.resolve(value1).then(function(unwrapped) {
                    // When a yielded Promise is resolved, its final value becomes
                    // the .value of the Promise<{value,done}> result for the
                    // current iteration. If the Promise is rejected, however, the
                    // result for this iteration will be rejected with the same
                    // reason. Note that rejections of yielded Promises are not
                    // thrown back into the generator function, as is the case
                    // when an awaited Promise is rejected. This difference in
                    // behavior between yield and await is important, because it
                    // allows the consumer to decide what to do with the yielded
                    // rejection (swallow it and continue, manually .throw it back
                    // into the generator, abandon iteration, whatever). With
                    // await, by contrast, there is no opportunity to examine the
                    // rejection reason outside the generator function, so the
                    // only option is to throw it from the await expression, and
                    // let the generator function handle the exception.
                    result.value = unwrapped;
                    resolve(result);
                }, reject);
            }
        }
        if (typeof global1.process === "object" && global1.process.domain) invoke = global1.process.domain.bind(invoke);
        var previousPromise;
        function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
                return new Promise(function(resolve, reject) {
                    invoke(method, arg, resolve, reject);
                });
            }
            return previousPromise = // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        this._invoke = enqueue;
    }
    defineIteratorMethods(AsyncIterator.prototype);
    AsyncIterator.prototype[asyncIteratorSymbol] = function() {
        return this;
    };
    runtime.AsyncIterator = AsyncIterator;
    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    runtime.async = function(innerFn, outerFn, self, tryLocsList) {
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
        return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
         : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
        });
    };
    function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
            if (state === GenStateExecuting) throw new Error("Generator is already running");
            if (state === GenStateCompleted) {
                if (method === "throw") throw arg;
                // Be forgiving, per 25.3.3.3.3 of the spec:
                // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                return doneResult();
            }
            context.method = method;
            context.arg = arg;
            while(true){
                var delegate = context.delegate;
                if (delegate) {
                    var delegateResult = maybeInvokeDelegate(delegate, context);
                    if (delegateResult) {
                        if (delegateResult === ContinueSentinel) continue;
                        return delegateResult;
                    }
                }
                if (context.method === "next") // Setting context._sent for legacy support of Babel's
                // function.sent implementation.
                context.sent = context._sent = context.arg;
                else if (context.method === "throw") {
                    if (state === GenStateSuspendedStart) {
                        state = GenStateCompleted;
                        throw context.arg;
                    }
                    context.dispatchException(context.arg);
                } else if (context.method === "return") context.abrupt("return", context.arg);
                state = GenStateExecuting;
                var record = tryCatch(innerFn, self, context);
                if (record.type === "normal") {
                    // If an exception is thrown from innerFn, we leave state ===
                    // GenStateExecuting and loop back for another invocation.
                    state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                    if (record.arg === ContinueSentinel) continue;
                    return {
                        value: record.arg,
                        done: context.done
                    };
                } else if (record.type === "throw") {
                    state = GenStateCompleted;
                    // Dispatch the exception by looping back around to the
                    // context.dispatchException(context.arg) call above.
                    context.method = "throw";
                    context.arg = record.arg;
                }
            }
        };
    }
    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (method === undefined) {
            // A .throw or .return when the delegate iterator has no .throw
            // method always terminates the yield* loop.
            context.delegate = null;
            if (context.method === "throw") {
                if (delegate.iterator.return) {
                    // If the delegate iterator has a return method, give it a
                    // chance to clean up.
                    context.method = "return";
                    context.arg = undefined;
                    maybeInvokeDelegate(delegate, context);
                    if (context.method === "throw") // If maybeInvokeDelegate(context) changed context.method from
                    // "return" to "throw", let that override the TypeError below.
                    return ContinueSentinel;
                }
                context.method = "throw";
                context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if (record.type === "throw") {
            context.method = "throw";
            context.arg = record.arg;
            context.delegate = null;
            return ContinueSentinel;
        }
        var info = record.arg;
        if (!info) {
            context.method = "throw";
            context.arg = new TypeError("iterator result is not an object");
            context.delegate = null;
            return ContinueSentinel;
        }
        if (info.done) {
            // Assign the result of the finished delegate to the temporary
            // variable specified by delegate.resultName (see delegateYield).
            context[delegate.resultName] = info.value;
            // Resume execution at the desired location (see delegateYield).
            context.next = delegate.nextLoc;
            // If context.method was "throw" but the delegate handled the
            // exception, let the outer generator proceed normally. If
            // context.method was "next", forget context.arg since it has been
            // "consumed" by the delegate iterator. If context.method was
            // "return", allow the original .return call to continue in the
            // outer generator.
            if (context.method !== "return") {
                context.method = "next";
                context.arg = undefined;
            }
        } else // Re-yield the result returned by the delegate method.
        return info;
        // The delegate iterator is finished, so forget it and continue with
        // the outer generator.
        context.delegate = null;
        return ContinueSentinel;
    }
    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator";
    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    Gp[iteratorSymbol] = function() {
        return this;
    };
    Gp.toString = function() {
        return "[object Generator]";
    };
    function pushTryEntry(locs) {
        var entry = {
            tryLoc: locs[0]
        };
        if (1 in locs) entry.catchLoc = locs[1];
        if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
        }
        this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
        var record = entry.completion || {
        };
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
    }
    function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [
            {
                tryLoc: "root"
            }
        ];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
    }
    runtime.keys = function(object) {
        var keys = [];
        for(var key1 in object)keys.push(key1);
        keys.reverse();
        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
            while(keys.length){
                var key = keys.pop();
                if (key in object) {
                    next.value = key;
                    next.done = false;
                    return next;
                }
            }
            // To avoid creating an additional object, we just hang the .value
            // and .done properties off the next function object itself. This
            // also ensures that the minifier will not anonymize the function.
            next.done = true;
            return next;
        };
    };
    function values(iterable) {
        if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) return iteratorMethod.call(iterable);
            if (typeof iterable.next === "function") return iterable;
            if (!isNaN(iterable.length)) {
                var i = -1, next1 = function next() {
                    while(++i < iterable.length)if (hasOwn.call(iterable, i)) {
                        next.value = iterable[i];
                        next.done = false;
                        return next;
                    }
                    next.value = undefined;
                    next.done = true;
                    return next;
                };
                return next1.next = next1;
            }
        }
        // Return an iterator with no values.
        return {
            next: doneResult
        };
    }
    runtime.values = values;
    function doneResult() {
        return {
            value: undefined,
            done: true
        };
    }
    Context.prototype = {
        constructor: Context,
        reset: function(skipTempReset) {
            this.prev = 0;
            this.next = 0;
            // Resetting context._sent for legacy support of Babel's
            // function.sent implementation.
            this.sent = this._sent = undefined;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined;
            this.tryEntries.forEach(resetTryEntry);
            if (!skipTempReset) {
                for(var name in this)// Not sure about the optimal order of these conditions:
                if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) this[name] = undefined;
            }
        },
        stop: function() {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;
            if (rootRecord.type === "throw") throw rootRecord.arg;
            return this.rval;
        },
        dispatchException: function(exception) {
            if (this.done) throw exception;
            var context = this;
            function handle(loc, caught) {
                record.type = "throw";
                record.arg = exception;
                context.next = loc;
                if (caught) {
                    // If the dispatched exception was caught by a catch block,
                    // then let that catch block handle the exception normally.
                    context.method = "next";
                    context.arg = undefined;
                }
                return !!caught;
            }
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                var record = entry.completion;
                if (entry.tryLoc === "root") // Exception thrown outside of any try block that could handle
                // it, so set the completion value of the entire function to
                // throw the exception.
                return handle("end");
                if (entry.tryLoc <= this.prev) {
                    var hasCatch = hasOwn.call(entry, "catchLoc");
                    var hasFinally = hasOwn.call(entry, "finallyLoc");
                    if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                        else if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                    } else if (hasFinally) {
                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    } else throw new Error("try statement without catch or finally");
                }
            }
        },
        abrupt: function(type, arg) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                    var finallyEntry = entry;
                    break;
                }
            }
            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
            var record = finallyEntry ? finallyEntry.completion : {
            };
            record.type = type;
            record.arg = arg;
            if (finallyEntry) {
                this.method = "next";
                this.next = finallyEntry.finallyLoc;
                return ContinueSentinel;
            }
            return this.complete(record);
        },
        complete: function(record, afterLoc) {
            if (record.type === "throw") throw record.arg;
            if (record.type === "break" || record.type === "continue") this.next = record.arg;
            else if (record.type === "return") {
                this.rval = this.arg = record.arg;
                this.method = "return";
                this.next = "end";
            } else if (record.type === "normal" && afterLoc) this.next = afterLoc;
            return ContinueSentinel;
        },
        finish: function(finallyLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.finallyLoc === finallyLoc) {
                    this.complete(entry.completion, entry.afterLoc);
                    resetTryEntry(entry);
                    return ContinueSentinel;
                }
            }
        },
        "catch": function(tryLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc === tryLoc) {
                    var record = entry.completion;
                    if (record.type === "throw") {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                    }
                    return thrown;
                }
            }
            // The context.catch method must only be called with a location
            // argument that corresponds to a known catch block.
            throw new Error("illegal catch attempt");
        },
        delegateYield: function(iterable, resultName, nextLoc) {
            this.delegate = {
                iterator: values(iterable),
                resultName: resultName,
                nextLoc: nextLoc
            };
            if (this.method === "next") // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined;
            return ContinueSentinel;
        }
    };
}(// Among the various tricks for obtaining a reference to the global
// object, this seems to be the most reliable technique that does not
// use indirect eval (which violates Content Security Policy).
typeof global === "object" ? global : typeof window === "object" ? window : typeof self === "object" ? self : this);

},{}],"4Rfsd":[function(require,module,exports) {
require('../../modules/core.regexp.escape');
module.exports = require('../../modules/_core').RegExp.escape;

},{"../../modules/core.regexp.escape":"kwUMR","../../modules/_core":"4o9Ko"}],"kwUMR":[function(require,module,exports) {
// https://github.com/benjamingr/RexExp.escape
var $export = require('./_export');
var $re = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');
$export($export.S, 'RegExp', {
    escape: function escape(it) {
        return $re(it);
    }
});

},{"./_export":"1Tgvm","./_replacer":"gaojh"}],"gaojh":[function(require,module,exports) {
module.exports = function(regExp, replace) {
    var replacer = replace === Object(replace) ? function(part) {
        return replace[part];
    } : replace;
    return function(it) {
        return String(it).replace(regExp, replacer);
    };
};

},{}],"2Nmqy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "data", ()=>_tfjsData
);
parcelHelpers.export(exports, "version", ()=>version$1
);
// @tensorflow/tfjs Copyright 2019 Google
var _tfjsCore = require("@tensorflow/tfjs-core");
var _tfjsLayers = require("@tensorflow/tfjs-layers");
var _tfjsConverter = require("@tensorflow/tfjs-converter");
var _tfjsData = require("@tensorflow/tfjs-data");
parcelHelpers.exportAll(_tfjsCore, exports);
parcelHelpers.exportAll(_tfjsLayers, exports);
parcelHelpers.exportAll(_tfjsConverter, exports);
var version = "0.15.3", version$1 = {
    "tfjs-core": _tfjsCore.version_core,
    "tfjs-data": _tfjsData.version_data,
    "tfjs-layers": _tfjsLayers.version_layers,
    "tfjs-converter": _tfjsConverter.version_converter,
    tfjs: version
};

},{"@tensorflow/tfjs-core":"djGzH","@tensorflow/tfjs-layers":"lRvbi","@tensorflow/tfjs-converter":"h4Rqn","@tensorflow/tfjs-data":"847Hn","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"djGzH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setBackend", ()=>setBackend
);
parcelHelpers.export(exports, "getBackend", ()=>getBackend
);
parcelHelpers.export(exports, "disposeVariables", ()=>disposeVariables
);
parcelHelpers.export(exports, "memory", ()=>memory
);
parcelHelpers.export(exports, "version_core", ()=>version
);
parcelHelpers.export(exports, "nextFrame", ()=>nextFrame
);
parcelHelpers.export(exports, "enableProdMode", ()=>enableProdMode
);
parcelHelpers.export(exports, "disableDeprecationWarnings", ()=>disableDeprecationWarnings
);
parcelHelpers.export(exports, "deprecationWarn", ()=>deprecationWarn
);
parcelHelpers.export(exports, "browser", ()=>browser
);
parcelHelpers.export(exports, "environment", ()=>environment
);
parcelHelpers.export(exports, "io", ()=>io
);
parcelHelpers.export(exports, "math", ()=>math
);
parcelHelpers.export(exports, "serialization", ()=>serialization
);
parcelHelpers.export(exports, "test_util", ()=>test_util
);
parcelHelpers.export(exports, "util", ()=>util
);
parcelHelpers.export(exports, "webgl", ()=>webgl
);
parcelHelpers.export(exports, "AdadeltaOptimizer", ()=>AdadeltaOptimizer
);
parcelHelpers.export(exports, "AdagradOptimizer", ()=>AdagradOptimizer
);
parcelHelpers.export(exports, "AdamOptimizer", ()=>AdamOptimizer
);
parcelHelpers.export(exports, "AdamaxOptimizer", ()=>AdamaxOptimizer
);
parcelHelpers.export(exports, "MomentumOptimizer", ()=>MomentumOptimizer
);
parcelHelpers.export(exports, "Optimizer", ()=>Optimizer
);
parcelHelpers.export(exports, "RMSPropOptimizer", ()=>RMSPropOptimizer
);
parcelHelpers.export(exports, "SGDOptimizer", ()=>SGDOptimizer
);
parcelHelpers.export(exports, "Tensor", ()=>Tensor
);
parcelHelpers.export(exports, "TensorBuffer", ()=>TensorBuffer
);
parcelHelpers.export(exports, "variable", ()=>variable
);
parcelHelpers.export(exports, "Variable", ()=>Variable
);
parcelHelpers.export(exports, "Rank", ()=>Rank
);
parcelHelpers.export(exports, "Reduction", ()=>Reduction
);
parcelHelpers.export(exports, "ENV", ()=>ENV
);
parcelHelpers.export(exports, "Environment", ()=>Environment
);
parcelHelpers.export(exports, "KernelBackend", ()=>KernelBackend
);
parcelHelpers.export(exports, "DataStorage", ()=>DataStorage
);
parcelHelpers.export(exports, "image", ()=>image_ops
);
parcelHelpers.export(exports, "linalg", ()=>linalg_ops
);
parcelHelpers.export(exports, "losses", ()=>loss_ops
);
parcelHelpers.export(exports, "spectral", ()=>spectral_ops
);
parcelHelpers.export(exports, "fused", ()=>fused_ops
);
parcelHelpers.export(exports, "op", ()=>op
);
parcelHelpers.export(exports, "batchNormalization2d", ()=>batchNormalization2d
);
parcelHelpers.export(exports, "batchNormalization3d", ()=>batchNormalization3d
);
parcelHelpers.export(exports, "batchNormalization4d", ()=>batchNormalization4d
);
parcelHelpers.export(exports, "batchNormalization", ()=>batchNormalization
);
parcelHelpers.export(exports, "batchNorm", ()=>batchNorm
);
parcelHelpers.export(exports, "batchNorm2d", ()=>batchNorm2d
);
parcelHelpers.export(exports, "batchNorm3d", ()=>batchNorm3d
);
parcelHelpers.export(exports, "batchNorm4d", ()=>batchNorm4d
);
parcelHelpers.export(exports, "complex", ()=>complex
);
parcelHelpers.export(exports, "real", ()=>real
);
parcelHelpers.export(exports, "imag", ()=>imag
);
parcelHelpers.export(exports, "concat", ()=>concat
);
parcelHelpers.export(exports, "concat1d", ()=>concat1d
);
parcelHelpers.export(exports, "concat2d", ()=>concat2d
);
parcelHelpers.export(exports, "concat3d", ()=>concat3d
);
parcelHelpers.export(exports, "concat4d", ()=>concat4d
);
parcelHelpers.export(exports, "split", ()=>split$1
);
parcelHelpers.export(exports, "conv1d", ()=>conv1d
);
parcelHelpers.export(exports, "conv2d", ()=>conv2d
);
parcelHelpers.export(exports, "conv3d", ()=>conv3d
);
parcelHelpers.export(exports, "conv2dDerFilter", ()=>conv2dDerFilter
);
parcelHelpers.export(exports, "depthwiseConv2d", ()=>depthwiseConv2d
);
parcelHelpers.export(exports, "separableConv2d", ()=>separableConv2d
);
parcelHelpers.export(exports, "conv2dTranspose", ()=>conv2dTranspose
);
parcelHelpers.export(exports, "matMul", ()=>matMul
);
parcelHelpers.export(exports, "dot", ()=>dot
);
parcelHelpers.export(exports, "outerProduct", ()=>outerProduct
);
parcelHelpers.export(exports, "reverse", ()=>reverse
);
parcelHelpers.export(exports, "reverse1d", ()=>reverse1d
);
parcelHelpers.export(exports, "reverse2d", ()=>reverse2d
);
parcelHelpers.export(exports, "reverse3d", ()=>reverse3d
);
parcelHelpers.export(exports, "reverse4d", ()=>reverse4d
);
parcelHelpers.export(exports, "maxPool", ()=>maxPool
);
parcelHelpers.export(exports, "avgPool", ()=>avgPool
);
parcelHelpers.export(exports, "pool", ()=>pool
);
parcelHelpers.export(exports, "slice", ()=>slice
);
parcelHelpers.export(exports, "slice1d", ()=>slice1d
);
parcelHelpers.export(exports, "slice2d", ()=>slice2d
);
parcelHelpers.export(exports, "slice3d", ()=>slice3d
);
parcelHelpers.export(exports, "slice4d", ()=>slice4d
);
parcelHelpers.export(exports, "abs", ()=>abs
);
parcelHelpers.export(exports, "acos", ()=>acos
);
parcelHelpers.export(exports, "acosh", ()=>acosh
);
parcelHelpers.export(exports, "asin", ()=>asin
);
parcelHelpers.export(exports, "asinh", ()=>asinh
);
parcelHelpers.export(exports, "atan", ()=>atan
);
parcelHelpers.export(exports, "atanh", ()=>atanh
);
parcelHelpers.export(exports, "ceil", ()=>ceil
);
parcelHelpers.export(exports, "clipByValue", ()=>clipByValue
);
parcelHelpers.export(exports, "cos", ()=>cos
);
parcelHelpers.export(exports, "cosh", ()=>cosh
);
parcelHelpers.export(exports, "erf", ()=>erf
);
parcelHelpers.export(exports, "exp", ()=>exp
);
parcelHelpers.export(exports, "expm1", ()=>expm1
);
parcelHelpers.export(exports, "floor", ()=>floor
);
parcelHelpers.export(exports, "log", ()=>log$1
);
parcelHelpers.export(exports, "log1p", ()=>log1p
);
parcelHelpers.export(exports, "logSigmoid", ()=>logSigmoid
);
parcelHelpers.export(exports, "neg", ()=>neg
);
parcelHelpers.export(exports, "reciprocal", ()=>reciprocal
);
parcelHelpers.export(exports, "round", ()=>round
);
parcelHelpers.export(exports, "rsqrt", ()=>rsqrt
);
parcelHelpers.export(exports, "sigmoid", ()=>sigmoid
);
parcelHelpers.export(exports, "sign", ()=>sign
);
parcelHelpers.export(exports, "sin", ()=>sin
);
parcelHelpers.export(exports, "sinh", ()=>sinh
);
parcelHelpers.export(exports, "softplus", ()=>softplus
);
parcelHelpers.export(exports, "sqrt", ()=>sqrt
);
parcelHelpers.export(exports, "square", ()=>square
);
parcelHelpers.export(exports, "step", ()=>step
);
parcelHelpers.export(exports, "tan", ()=>tan
);
parcelHelpers.export(exports, "tanh", ()=>tanh$1
);
parcelHelpers.export(exports, "all", ()=>all
);
parcelHelpers.export(exports, "any", ()=>any
);
parcelHelpers.export(exports, "argMax", ()=>argMax
);
parcelHelpers.export(exports, "argMin", ()=>argMin
);
parcelHelpers.export(exports, "logSumExp", ()=>logSumExp
);
parcelHelpers.export(exports, "max", ()=>max
);
parcelHelpers.export(exports, "mean", ()=>mean
);
parcelHelpers.export(exports, "min", ()=>min
);
parcelHelpers.export(exports, "moments", ()=>moments
);
parcelHelpers.export(exports, "sum", ()=>sum$1
);
parcelHelpers.export(exports, "prod", ()=>prod
);
parcelHelpers.export(exports, "equal", ()=>equal
);
parcelHelpers.export(exports, "equalStrict", ()=>equalStrict
);
parcelHelpers.export(exports, "greater", ()=>greater
);
parcelHelpers.export(exports, "greaterEqual", ()=>greaterEqual
);
parcelHelpers.export(exports, "greaterEqualStrict", ()=>greaterEqualStrict
);
parcelHelpers.export(exports, "greaterStrict", ()=>greaterStrict
);
parcelHelpers.export(exports, "less", ()=>less
);
parcelHelpers.export(exports, "lessEqual", ()=>lessEqual
);
parcelHelpers.export(exports, "lessEqualStrict", ()=>lessEqualStrict
);
parcelHelpers.export(exports, "lessStrict", ()=>lessStrict
);
parcelHelpers.export(exports, "notEqual", ()=>notEqual
);
parcelHelpers.export(exports, "notEqualStrict", ()=>notEqualStrict
);
parcelHelpers.export(exports, "add", ()=>add
);
parcelHelpers.export(exports, "addN", ()=>addN
);
parcelHelpers.export(exports, "addStrict", ()=>addStrict
);
parcelHelpers.export(exports, "atan2", ()=>atan2
);
parcelHelpers.export(exports, "div", ()=>div
);
parcelHelpers.export(exports, "divStrict", ()=>divStrict
);
parcelHelpers.export(exports, "floorDiv", ()=>floorDiv
);
parcelHelpers.export(exports, "maximum", ()=>maximum
);
parcelHelpers.export(exports, "maximumStrict", ()=>maximumStrict
);
parcelHelpers.export(exports, "minimum", ()=>minimum
);
parcelHelpers.export(exports, "minimumStrict", ()=>minimumStrict
);
parcelHelpers.export(exports, "mod", ()=>mod
);
parcelHelpers.export(exports, "modStrict", ()=>modStrict
);
parcelHelpers.export(exports, "mul", ()=>mul
);
parcelHelpers.export(exports, "mulStrict", ()=>mulStrict
);
parcelHelpers.export(exports, "pow", ()=>pow
);
parcelHelpers.export(exports, "powStrict", ()=>powStrict
);
parcelHelpers.export(exports, "squaredDifference", ()=>squaredDifference
);
parcelHelpers.export(exports, "squaredDifferenceStrict", ()=>squaredDifferenceStrict
);
parcelHelpers.export(exports, "sub", ()=>sub
);
parcelHelpers.export(exports, "subStrict", ()=>subStrict
);
parcelHelpers.export(exports, "elu", ()=>elu
);
parcelHelpers.export(exports, "leakyRelu", ()=>leakyRelu
);
parcelHelpers.export(exports, "prelu", ()=>prelu
);
parcelHelpers.export(exports, "relu", ()=>relu
);
parcelHelpers.export(exports, "selu", ()=>selu
);
parcelHelpers.export(exports, "logicalAnd", ()=>logicalAnd
);
parcelHelpers.export(exports, "logicalNot", ()=>logicalNot
);
parcelHelpers.export(exports, "logicalOr", ()=>logicalOr
);
parcelHelpers.export(exports, "logicalXor", ()=>logicalXor
);
parcelHelpers.export(exports, "where", ()=>where
);
parcelHelpers.export(exports, "whereAsync", ()=>whereAsync
);
parcelHelpers.export(exports, "buffer", ()=>buffer
);
parcelHelpers.export(exports, "toPixels", ()=>toPixels$1
);
parcelHelpers.export(exports, "print", ()=>print
);
parcelHelpers.export(exports, "batchToSpaceND", ()=>batchToSpaceND
);
parcelHelpers.export(exports, "cast", ()=>cast
);
parcelHelpers.export(exports, "clone", ()=>clone
);
parcelHelpers.export(exports, "cumsum", ()=>cumsum
);
parcelHelpers.export(exports, "depthToSpace", ()=>depthToSpace
);
parcelHelpers.export(exports, "expandDims", ()=>expandDims
);
parcelHelpers.export(exports, "eye", ()=>eye
);
parcelHelpers.export(exports, "fromPixels", ()=>fromPixels$1
);
parcelHelpers.export(exports, "multinomial", ()=>multinomial
);
parcelHelpers.export(exports, "oneHot", ()=>oneHot
);
parcelHelpers.export(exports, "pad", ()=>pad
);
parcelHelpers.export(exports, "pad1d", ()=>pad1d
);
parcelHelpers.export(exports, "pad2d", ()=>pad2d
);
parcelHelpers.export(exports, "pad3d", ()=>pad3d
);
parcelHelpers.export(exports, "pad4d", ()=>pad4d
);
parcelHelpers.export(exports, "rand", ()=>rand
);
parcelHelpers.export(exports, "randomNormal", ()=>randomNormal
);
parcelHelpers.export(exports, "randomUniform", ()=>randomUniform
);
parcelHelpers.export(exports, "reshape", ()=>reshape
);
parcelHelpers.export(exports, "spaceToBatchND", ()=>spaceToBatchND
);
parcelHelpers.export(exports, "squeeze", ()=>squeeze
);
parcelHelpers.export(exports, "stack", ()=>stack
);
parcelHelpers.export(exports, "tile", ()=>tile
);
parcelHelpers.export(exports, "truncatedNormal", ()=>truncatedNormal
);
parcelHelpers.export(exports, "unstack", ()=>unstack
);
parcelHelpers.export(exports, "setdiff1dAsync", ()=>setdiff1dAsync
);
parcelHelpers.export(exports, "fill", ()=>fill
);
parcelHelpers.export(exports, "linspace", ()=>linspace
);
parcelHelpers.export(exports, "ones", ()=>ones$1
);
parcelHelpers.export(exports, "range", ()=>range
);
parcelHelpers.export(exports, "scalar", ()=>scalar
);
parcelHelpers.export(exports, "tensor", ()=>tensor
);
parcelHelpers.export(exports, "tensor1d", ()=>tensor1d
);
parcelHelpers.export(exports, "tensor2d", ()=>tensor2d
);
parcelHelpers.export(exports, "tensor3d", ()=>tensor3d
);
parcelHelpers.export(exports, "tensor4d", ()=>tensor4d
);
parcelHelpers.export(exports, "tensor5d", ()=>tensor5d
);
parcelHelpers.export(exports, "tensor6d", ()=>tensor6d
);
parcelHelpers.export(exports, "zeros", ()=>zeros
);
parcelHelpers.export(exports, "onesLike", ()=>onesLike
);
parcelHelpers.export(exports, "zerosLike", ()=>zerosLike
);
parcelHelpers.export(exports, "transpose", ()=>transpose
);
parcelHelpers.export(exports, "softmax", ()=>softmax
);
parcelHelpers.export(exports, "logSoftmax", ()=>logSoftmax
);
parcelHelpers.export(exports, "localResponseNormalization", ()=>localResponseNormalization
);
parcelHelpers.export(exports, "norm", ()=>norm
);
parcelHelpers.export(exports, "gather", ()=>gather
);
parcelHelpers.export(exports, "unsortedSegmentSum", ()=>unsortedSegmentSum
);
parcelHelpers.export(exports, "basicLSTMCell", ()=>basicLSTMCell
);
parcelHelpers.export(exports, "multiRNNCell", ()=>multiRNNCell
);
parcelHelpers.export(exports, "movingAverage", ()=>movingAverage
);
parcelHelpers.export(exports, "stridedSlice", ()=>stridedSlice
);
parcelHelpers.export(exports, "topk", ()=>topk
);
parcelHelpers.export(exports, "scatterND", ()=>scatterND
);
parcelHelpers.export(exports, "fft", ()=>fft
);
parcelHelpers.export(exports, "ifft", ()=>ifft
);
parcelHelpers.export(exports, "rfft", ()=>rfft
);
parcelHelpers.export(exports, "irfft", ()=>irfft
);
parcelHelpers.export(exports, "sparseToDense", ()=>sparseToDense
);
parcelHelpers.export(exports, "gatherND", ()=>gatherND
);
parcelHelpers.export(exports, "train", ()=>train
);
parcelHelpers.export(exports, "tidy", ()=>tidy
);
parcelHelpers.export(exports, "keep", ()=>keep
);
parcelHelpers.export(exports, "dispose", ()=>dispose
);
parcelHelpers.export(exports, "time", ()=>time
);
parcelHelpers.export(exports, "profile", ()=>profile
);
parcelHelpers.export(exports, "customGrad", ()=>customGrad
);
parcelHelpers.export(exports, "grad", ()=>grad
);
parcelHelpers.export(exports, "grads", ()=>grads
);
parcelHelpers.export(exports, "valueAndGrad", ()=>valueAndGrad
);
parcelHelpers.export(exports, "valueAndGrads", ()=>valueAndGrads
);
parcelHelpers.export(exports, "variableGrads", ()=>variableGrads
);
var process = require("process");
var global = arguments[3];
var Buffer = require("buffer").Buffer;
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var extendStatics = function(e1, t1) {
    return (extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(e, t) {
        e.__proto__ = t;
    } || function(e, t) {
        for(var n in t)t.hasOwnProperty(n) && (e[n] = t[n]);
    })(e1, t1);
};
function __extends(e, t) {
    function n() {
        this.constructor = e;
    }
    extendStatics(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n);
}
var __assign = function() {
    return (__assign = Object.assign || function(e) {
        for(var t, n = 1, r = arguments.length; n < r; n++)for(var o in t = arguments[n])Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
        return e;
    }).apply(this, arguments);
};
function __awaiter(e2, t2, n, r) {
    return new (n || (n = Promise))(function(o, a) {
        function i(e) {
            try {
                u(r.next(e));
            } catch (e3) {
                a(e3);
            }
        }
        function s(e) {
            try {
                u(r.throw(e));
            } catch (e4) {
                a(e4);
            }
        }
        function u(e) {
            e.done ? o(e.value) : new n(function(t) {
                t(e.value);
            }).then(i, s);
        }
        u((r = r.apply(e2, t2 || [])).next());
    });
}
function __generator(e5, t) {
    var n, r, o, a1, i = {
        label: 0,
        sent: function() {
            if (1 & o[0]) throw o[1];
            return o[1];
        },
        trys: [],
        ops: []
    };
    function s1(a2) {
        return function(s) {
            return (function(a) {
                if (n) throw new TypeError("Generator is already executing.");
                for(; i;)try {
                    if (n = 1, r && (o = 2 & a[0] ? r.return : a[0] ? r.throw || ((o = r.return) && o.call(r), 0) : r.next) && !(o = o.call(r, a[1])).done) return o;
                    switch(r = 0, o && (a = [
                        2 & a[0],
                        o.value
                    ]), a[0]){
                        case 0:
                        case 1:
                            o = a;
                            break;
                        case 4:
                            return i.label++, {
                                value: a[1],
                                done: !1
                            };
                        case 5:
                            i.label++, r = a[1], a = [
                                0
                            ];
                            continue;
                        case 7:
                            a = i.ops.pop(), i.trys.pop();
                            continue;
                        default:
                            if (!(o = (o = i.trys).length > 0 && o[o.length - 1]) && (6 === a[0] || 2 === a[0])) {
                                i = 0;
                                continue;
                            }
                            if (3 === a[0] && (!o || a[1] > o[0] && a[1] < o[3])) {
                                i.label = a[1];
                                break;
                            }
                            if (6 === a[0] && i.label < o[1]) {
                                i.label = o[1], o = a;
                                break;
                            }
                            if (o && i.label < o[2]) {
                                i.label = o[2], i.ops.push(a);
                                break;
                            }
                            o[2] && i.ops.pop(), i.trys.pop();
                            continue;
                    }
                    a = t.call(e5, i);
                } catch (e) {
                    a = [
                        6,
                        e
                    ], r = 0;
                } finally{
                    n = o = 0;
                }
                if (5 & a[0]) throw a[1];
                return {
                    value: a[0] ? a[1] : void 0,
                    done: !0
                };
            })([
                a2,
                s
            ]);
        };
    }
    return a1 = {
        next: s1(0),
        throw: s1(1),
        return: s1(2)
    }, "function" == typeof Symbol && (a1[Symbol.iterator] = function() {
        return this;
    }), a1;
}
var contexts = {
}, WEBGL_ATTRIBUTES = {
    alpha: !1,
    antialias: !1,
    premultipliedAlpha: !1,
    preserveDrawingBuffer: !1,
    depth: !1,
    stencil: !1,
    failIfMajorPerformanceCaveat: !0
};
function getWebGLContext(e) {
    e in contexts || (document.createElement("canvas").addEventListener("webglcontextlost", function(t) {
        t.preventDefault(), delete contexts[e];
    }, !1), contexts[e] = getWebGLRenderingContext(e));
    var t3 = contexts[e];
    return t3.isContextLost() ? (delete contexts[e], getWebGLContext(e)) : (t3.disable(t3.DEPTH_TEST), t3.disable(t3.STENCIL_TEST), t3.disable(t3.BLEND), t3.disable(t3.DITHER), t3.disable(t3.POLYGON_OFFSET_FILL), t3.disable(t3.SAMPLE_COVERAGE), t3.enable(t3.SCISSOR_TEST), t3.enable(t3.CULL_FACE), t3.cullFace(t3.BACK), contexts[e]);
}
function getWebGLRenderingContext(e) {
    if (1 !== e && 2 !== e) throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
    var t = document.createElement("canvas");
    return 1 === e ? t.getContext("webgl", WEBGL_ATTRIBUTES) || t.getContext("experimental-webgl", WEBGL_ATTRIBUTES) : t.getContext("webgl2", WEBGL_ATTRIBUTES);
}
function isMobile() {
    var e = navigator.userAgent || navigator.vendor || window.opera;
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0, 4));
}
function shuffle(e) {
    for(var t = e.length, n = 0, r = 0; t > 0;)r = Math.random() * t | 0, n = e[--t], e[t] = e[r], e[r] = n;
}
function clamp(e, t, n) {
    return Math.max(e, Math.min(t, n));
}
function nearestLargerEven(e) {
    return e % 2 == 0 ? e : e + 1;
}
function sum(e) {
    for(var t = 0, n = 0; n < e.length; n++)t += e[n];
    return t;
}
function randUniform(e, t) {
    var n = Math.random();
    return t * n + (1 - n) * e;
}
function distSquared(e, t) {
    for(var n = 0, r = 0; r < e.length; r++){
        var o = Number(e[r]) - Number(t[r]);
        n += o * o;
    }
    return n;
}
function assert(e, t) {
    if (!e) throw new Error("string" == typeof t ? t : t());
}
function assertShapesMatch(e, t, n) {
    void 0 === n && (n = ""), assert(arraysEqual(e, t), n + " Shapes " + e + " and " + t + " must match");
}
function assertNonNull(e) {
    assert(null != e, "The input to the tensor constructor must be a non-null value.");
}
function flatten(e, t) {
    if (void 0 === t && (t = []), Array.isArray(e) || isTypedArray(e)) for(var n = 0; n < e.length; ++n)flatten(e[n], t);
    else t.push(e);
    return t;
}
function sizeFromShape(e) {
    if (0 === e.length) return 1;
    for(var t = e[0], n = 1; n < e.length; n++)t *= e[n];
    return t;
}
function isScalarShape(e) {
    return 0 === e.length;
}
function arraysEqual(e, t) {
    if (e === t) return !0;
    if (null == e || null == t) return !1;
    if (e.length !== t.length) return !1;
    for(var n = 0; n < e.length; n++)if (e[n] !== t[n]) return !1;
    return !0;
}
function isInt(e) {
    return e % 1 == 0;
}
function tanh(e) {
    if (null != Math.tanh) return Math.tanh(e);
    if (e === 1 / 0) return 1;
    if (e === -1 / 0) return -1;
    var t = Math.exp(2 * e);
    return (t - 1) / (t + 1);
}
function sizeToSquarishShape(e) {
    var t = Math.ceil(Math.sqrt(e));
    return [
        t,
        Math.ceil(e / t)
    ];
}
function createShuffledIndices(e) {
    for(var t = new Uint32Array(e), n = 0; n < e; ++n)t[n] = n;
    return shuffle(t), t;
}
function rightPad(e, t) {
    return t <= e.length ? e : e + " ".repeat(t - e.length);
}
function repeatedTry(e, t, n) {
    return void 0 === t && (t = function(e) {
        return 0;
    }), new Promise(function(r, o) {
        var a = 0, i = function() {
            if (e()) r();
            else {
                var s = t(++a);
                null != n && a >= n ? o() : setTimeout(i, s);
            }
        };
        i();
    });
}
function inferFromImplicitShape(e, t) {
    for(var n = 1, r = -1, o = 0; o < e.length; ++o)if (e[o] >= 0) n *= e[o];
    else if (-1 === e[o]) {
        if (-1 !== r) throw Error("Shapes can only have 1 implicit size. Found -1 at dim " + r + " and dim " + o);
        r = o;
    } else if (e[o] < 0) throw Error("Shapes can not be < 0. Found " + e[o] + " at dim " + o);
    if (-1 === r) {
        if (t > 0 && t !== n) throw Error("Size(" + t + ") must match the product of shape " + e);
        return e;
    }
    if (0 === n) throw Error("Cannot infer the missing size in [" + e + "] when there are 0 elements");
    if (t % n != 0) throw Error("The implicit shape can't be a fractional number. Got " + t + " / " + n);
    var a = e.slice();
    return a[r] = t / n, a;
}
function parseAxisParam(e6, t4) {
    var n = t4.length;
    return assert((e6 = null == e6 ? t4.map(function(e, t) {
        return t;
    }) : [].concat(e6)).every(function(e) {
        return e >= -n && e < n;
    }), "All values in axis param must be in range [-" + n + ", " + n + ") but got axis " + e6), assert(e6.every(function(e) {
        return isInt(e);
    }), "All values in axis param must be integers but got axis " + e6), e6.map(function(e) {
        return e < 0 ? n + e : e;
    });
}
function squeezeShape(e, t) {
    for(var n = [], r = [], o = null == t ? null : parseAxisParam(t, e).sort(), a = 0, i = 0; i < e.length; ++i){
        if (null != o) {
            if (o[a] === i && 1 !== e[i]) throw new Error("Can't squeeze axis " + i + " since its dim '" + e[i] + "' is not 1");
            (null == o[a] || o[a] > i) && 1 === e[i] && (n.push(e[i]), r.push(i)), o[a] <= i && a++;
        }
        1 !== e[i] && (n.push(e[i]), r.push(i));
    }
    return {
        newShape: n,
        keptDims: r
    };
}
function getTypedArrayFromDType(e, t) {
    var n = null;
    if (null == e || "float32" === e) n = new Float32Array(t);
    else if ("int32" === e) n = new Int32Array(t);
    else {
        if ("bool" !== e) throw new Error("Unknown data type " + e);
        n = new Uint8Array(t);
    }
    return n;
}
function getArrayFromDType(e, t) {
    var n = null;
    if (null == e || "float32" === e) n = new Float32Array(t);
    else if ("int32" === e) n = new Int32Array(t);
    else if ("bool" === e) n = new Uint8Array(t);
    else {
        if ("string" !== e) throw new Error("Unknown data type " + e);
        n = new Array(t);
    }
    return n;
}
function checkComputationForErrors(e, t, n) {
    if ("float32" === t) for(var r = 0; r < e.length; r++){
        var o = e[r];
        if (isNaN(o) || !isFinite(o)) throw Error("The result of the '" + n + "' is " + o + ".");
    }
}
function checkConversionForErrors(e, t) {
    for(var n = 0; n < e.length; n++){
        var r = e[n];
        if (isNaN(r) || !isFinite(r)) throw Error("A tensor of type " + t + " being uploaded contains " + r + ".");
    }
}
function hasEncodingLoss(e, t) {
    return "complex64" !== t && ("float32" !== t || "complex64" === e) && ("int32" !== t || "float32" === e || "complex64" === e) && ("bool" !== t || "bool" !== e);
}
function isTypedArray(e) {
    return e instanceof Float32Array || e instanceof Int32Array || e instanceof Uint8Array;
}
function bytesPerElement(e) {
    if ("float32" === e || "int32" === e) return 4;
    if ("complex64" === e) return 8;
    if ("bool" === e) return 1;
    throw new Error("Unknown dtype " + e);
}
function bytesFromStringArray(e7) {
    if (null == e7) return 0;
    var t = 0;
    return e7.forEach(function(e) {
        return t += 2 * e.length;
    }), t;
}
function isString(e) {
    return "string" == typeof e || e instanceof String;
}
function isBoolean(e) {
    return "boolean" == typeof e;
}
function isNumber(e) {
    return "number" == typeof e;
}
function inferDtype(e) {
    return Array.isArray(e) ? inferDtype(e[0]) : e instanceof Float32Array ? "float32" : e instanceof Int32Array || e instanceof Uint8Array ? "int32" : isNumber(e) ? "float32" : isString(e) ? "string" : isBoolean(e) ? "bool" : "float32";
}
function isFunction(e) {
    return !!(e && e.constructor && e.call && e.apply);
}
function nearestDivisor(e, t) {
    for(var n = t; n < e; ++n)if (e % n == 0) return n;
    return e;
}
function computeStrides(e) {
    var t = e.length;
    if (t < 2) return [];
    var n = new Array(t - 1);
    n[t - 2] = e[t - 1];
    for(var r = t - 3; r >= 0; --r)n[r] = n[r + 1] * e[r + 1];
    return n;
}
function toTypedArray(e, t, n) {
    if ("string" === t) throw new Error("Cannot convert a string[] to a TypedArray");
    if (Array.isArray(e) && (e = flatten(e)), n && checkConversionForErrors(e, t), noConversionNeeded(e, t)) return e;
    if (null == t || "float32" === t || "complex64" === t) return new Float32Array(e);
    if ("int32" === t) return new Int32Array(e);
    if ("bool" === t) {
        for(var r = new Uint8Array(e.length), o = 0; o < r.length; ++o)0 !== Math.round(e[o]) && (r[o] = 1);
        return r;
    }
    throw new Error("Unknown data type " + t);
}
function createNestedArray(e8, t5, n) {
    var r = new Array;
    if (1 === t5.length) for(var o = t5[0], a = 0; a < o; a++)r[a] = n[e8 + a];
    else {
        o = t5[0];
        var i = t5.slice(1), s = i.reduce(function(e, t) {
            return e * t;
        });
        for(a = 0; a < o; a++)r[a] = createNestedArray(e8 + a * s, i, n);
    }
    return r;
}
function toNestedArray(e9, t6) {
    if (0 === e9.length) return t6[0];
    var n = e9.reduce(function(e, t) {
        return e * t;
    });
    if (0 === n) return [];
    if (n !== t6.length) throw new Error("[" + e9 + "] does not match the input size.");
    return createNestedArray(0, e9, t6);
}
function noConversionNeeded(e, t) {
    return e instanceof Float32Array && "float32" === t || e instanceof Int32Array && "int32" === t || e instanceof Uint8Array && "bool" === t;
}
function makeOnesTypedArray(e, t) {
    for(var n = makeZerosTypedArray(e, t), r = 0; r < n.length; r++)n[r] = 1;
    return n;
}
function makeZerosTypedArray(e, t) {
    if (null == t || "float32" === t || "complex64" === t) return new Float32Array(e);
    if ("int32" === t) return new Int32Array(e);
    if ("bool" === t) return new Uint8Array(e);
    throw new Error("Unknown data type " + t);
}
function now() {
    if ("undefined" != typeof performance) return performance.now();
    if ("undefined" != typeof process) {
        var e = process.hrtime();
        return 1000 * e[0] + e[1] / 1000000;
    }
    throw new Error("Cannot measure time in this environment. You should run tf.js in the browser or in Node.js");
}
function monitorPromisesProgress(e10, t7, n, r) {
    !function(e) {
        assert(null != e && Array.isArray(e) && e.length > 0, "promises must be a none empty array");
    }(e10), (function(e, t) {
        assert(e >= 0 && e <= 1, "Progress fraction must be in range [0, 1], but got startFraction " + e), assert(t >= 0 && t <= 1, "Progress fraction must be in range [0, 1], but got endFraction " + t), assert(t >= e, "startFraction must be no more than endFraction, but got startFraction " + e + " and endFraction " + t);
    })(n = null == n ? 0 : n, r = null == r ? 1 : r);
    var o = 0;
    return Promise.all(e10.map(function(a3) {
        return a3.then(function(a) {
            var i = n + ++o / e10.length * (r - n);
            return t7(i), a;
        }), a3;
    }));
}
var util = Object.freeze({
    shuffle: shuffle,
    clamp: clamp,
    nearestLargerEven: nearestLargerEven,
    sum: sum,
    randUniform: randUniform,
    distSquared: distSquared,
    assert: assert,
    assertShapesMatch: assertShapesMatch,
    assertNonNull: assertNonNull,
    flatten: flatten,
    sizeFromShape: sizeFromShape,
    isScalarShape: isScalarShape,
    arraysEqual: arraysEqual,
    isInt: isInt,
    tanh: tanh,
    sizeToSquarishShape: sizeToSquarishShape,
    createShuffledIndices: createShuffledIndices,
    rightPad: rightPad,
    repeatedTry: repeatedTry,
    inferFromImplicitShape: inferFromImplicitShape,
    parseAxisParam: parseAxisParam,
    squeezeShape: squeezeShape,
    getTypedArrayFromDType: getTypedArrayFromDType,
    getArrayFromDType: getArrayFromDType,
    checkComputationForErrors: checkComputationForErrors,
    checkConversionForErrors: checkConversionForErrors,
    hasEncodingLoss: hasEncodingLoss,
    isTypedArray: isTypedArray,
    bytesPerElement: bytesPerElement,
    bytesFromStringArray: bytesFromStringArray,
    isString: isString,
    isBoolean: isBoolean,
    isNumber: isNumber,
    inferDtype: inferDtype,
    isFunction: isFunction,
    nearestDivisor: nearestDivisor,
    computeStrides: computeStrides,
    toTypedArray: toTypedArray,
    toNestedArray: toNestedArray,
    makeOnesTypedArray: makeOnesTypedArray,
    makeZerosTypedArray: makeZerosTypedArray,
    now: now,
    monitorPromisesProgress: monitorPromisesProgress
}), Profiler = function() {
    function e11(e, t) {
        this.backendTimer = e, this.logger = t, null == t && (this.logger = new Logger);
    }
    return e11.prototype.profileKernel = function(e, t8) {
        var n1, r = this, o1 = this.backendTimer.time(function() {
            n1 = t8();
        });
        return (Array.isArray(n1) ? n1 : [
            n1
        ]).forEach(function(t) {
            var n = t.dataSync();
            checkComputationForErrors(n, t.dtype, e), o1.then(function(o) {
                var a = "";
                null != o.getExtraProfileInfo && (a = o.getExtraProfileInfo()), r.logger.logKernelProfile(e, t, n, o.kernelMs, a);
            });
        }), n1;
    }, e11;
}(), Logger = function() {
    function e12() {
    }
    return e12.prototype.logKernelProfile = function(e, t, n, r, o) {
        var a = rightPad(r + "ms", 9), i = rightPad(e, 25), s = t.rank, u = t.size, l = rightPad(t.shape.toString(), 14);
        console.log("%c" + i + "\t%c" + a + "\t%c" + s + "D " + l + "\t%c" + u + "\t%c" + o, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green");
    }, e12;
}(), FORMAT_LIMIT_NUM_VALS = 20, FORMAT_NUM_FIRST_LAST_VALS = 3, FORMAT_NUM_SIG_DIGITS = 7;
function tensorToString(e13, t, n, r) {
    var o = computeStrides(t), a = computeMaxSizePerColumn(e13, t, n, o), i = t.length, s = subTensorToString(e13, t, n, o, a), u = [
        "Tensor"
    ];
    return r && (u.push("  dtype: " + n), u.push("  rank: " + i), u.push("  shape: [" + t + "]"), u.push("  values:")), u.push(s.map(function(e) {
        return "    " + e;
    }).join("\n")), u.join("\n");
}
function computeMaxSizePerColumn(e, t, n, r) {
    var o = sizeFromShape(t), a = r[r.length - 1], i = new Array(a).fill(0), s = t.length, u = "complex64" === n ? createComplexTuples(e) : e;
    if (s > 1) for(var l = 0; l < o / a; l++)for(var c = l * a, p = 0; p < a; p++)i[p] = Math.max(i[p], valToString(u[c + p], 0).length);
    return i;
}
function valToString(e, t) {
    return rightPad(Array.isArray(e) ? parseFloat(e[0].toFixed(FORMAT_NUM_SIG_DIGITS)) + " + " + parseFloat(e[1].toFixed(FORMAT_NUM_SIG_DIGITS)) + "j" : isString(e) ? "'" + e + "'" : parseFloat(e.toFixed(FORMAT_NUM_SIG_DIGITS)).toString(), t);
}
function subTensorToString(e14, t, n, r, o, a) {
    void 0 === a && (a = !0);
    var i = "complex64" === n ? 2 : 1, s = t[0], u = t.length;
    if (0 === u) return "complex64" === n ? [
        valToString(createComplexTuples(e14)[0], 0)
    ] : [
        e14[0].toString()
    ];
    if (1 === u) {
        if (s > FORMAT_LIMIT_NUM_VALS) {
            var l = FORMAT_NUM_FIRST_LAST_VALS * i, c = Array.from(e14.slice(0, l)), p = Array.from(e14.slice(s - FORMAT_NUM_FIRST_LAST_VALS * i, s));
            return "complex64" === n && (c = createComplexTuples(c), p = createComplexTuples(p)), [
                "[" + c.map(function(e, t) {
                    return valToString(e, o[t]);
                }).join(", ") + ", ..., " + p.map(function(e, t) {
                    return valToString(e, o[s - FORMAT_NUM_FIRST_LAST_VALS + t]);
                }).join(", ") + "]"
            ];
        }
        return [
            "[" + ("complex64" === n ? createComplexTuples(e14) : Array.from(e14)).map(function(e, t) {
                return valToString(e, o[t]);
            }).join(", ") + "]"
        ];
    }
    var d = t.slice(1), h = r.slice(1), f = r[0] * i, m = [];
    if (s > FORMAT_LIMIT_NUM_VALS) {
        for(var g = 0; g < FORMAT_NUM_FIRST_LAST_VALS; g++){
            var v = (y = g * f) + f;
            m.push.apply(m, subTensorToString(e14.slice(y, v), d, n, h, o, !1));
        }
        m.push("...");
        for(g = s - FORMAT_NUM_FIRST_LAST_VALS; g < s; g++){
            v = (y = g * f) + f;
            m.push.apply(m, subTensorToString(e14.slice(y, v), d, n, h, o, g === s - 1));
        }
    } else for(g = 0; g < s; g++){
        var y;
        v = (y = g * f) + f;
        m.push.apply(m, subTensorToString(e14.slice(y, v), d, n, h, o, g === s - 1));
    }
    var x = 2 === u ? "," : "";
    m[0] = "[" + m[0] + x;
    for(g = 1; g < m.length - 1; g++)m[g] = " " + m[g] + x;
    var T = ",\n";
    for(g = 2; g < u; g++)T += "\n";
    return m[m.length - 1] = " " + m[m.length - 1] + "]" + (a ? "" : T), m;
}
function createComplexTuples(e) {
    for(var t = [], n = 0; n < e.length; n += 2)t.push([
        e[n],
        e[n + 1]
    ]);
    return t;
}
var TensorBuffer = function() {
    function e15(e, t, n) {
        if (this.dtype = t, this.shape = e.slice(), this.size = sizeFromShape(e), null != n) {
            var r = n.length;
            assert(r === this.size, "Length of values '" + r + "' does not match the size inferred by the shape '" + this.size + "'.");
        }
        if ("complex64" === t) throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
        this.values = n || getArrayFromDType(t, sizeFromShape(this.shape)), this.strides = computeStrides(e);
    }
    return e15.prototype.set = function(e) {
        for(var t = [], n = 1; n < arguments.length; n++)t[n - 1] = arguments[n];
        0 === t.length && (t = [
            0
        ]), assert(t.length === this.rank, "The number of provided coordinates (" + t.length + ") must match the rank (" + this.rank + ")");
        var r = this.locToIndex(t);
        this.values[r] = e;
    }, e15.prototype.get = function() {
        for(var e = [], t = 0; t < arguments.length; t++)e[t] = arguments[t];
        0 === e.length && (e = [
            0
        ]);
        for(var n = e[e.length - 1], r = 0; r < e.length - 1; ++r)n += this.strides[r] * e[r];
        return this.values[n];
    }, e15.prototype.locToIndex = function(e) {
        if (0 === this.rank) return 0;
        if (1 === this.rank) return e[0];
        for(var t = e[e.length - 1], n = 0; n < e.length - 1; ++n)t += this.strides[n] * e[n];
        return t;
    }, e15.prototype.indexToLoc = function(e) {
        if (0 === this.rank) return [];
        if (1 === this.rank) return [
            e
        ];
        for(var t = new Array(this.shape.length), n = 0; n < t.length - 1; ++n)t[n] = Math.floor(e / this.strides[n]), e -= t[n] * this.strides[n];
        return t[t.length - 1] = e, t;
    }, Object.defineProperty(e15.prototype, "rank", {
        get: function() {
            return this.shape.length;
        },
        enumerable: !0,
        configurable: !0
    }), e15.prototype.toTensor = function() {
        return Tensor.make(this.shape, {
            values: this.values
        }, this.dtype);
    }, e15;
}(), trackerFn = null, opHandler = null, deprecationWarningFn = null;
function setTensorTracker(e) {
    trackerFn = e;
}
function setOpHandler(e) {
    opHandler = e;
}
function setDeprecationWarningFn(e) {
    deprecationWarningFn = e;
}
var Tensor = function() {
    function e16(e, t, n, r) {
        this.isDisposedInternal = !1, this.shape = e.slice(), this.dtype = t || "float32", this.size = sizeFromShape(e), this.strides = computeStrides(e), this.dataId = null != r ? r : {
        }, this.id = trackerFn().nextTensorId(), this.rankType = this.rank < 5 ? this.rank.toString() : "higher", trackerFn().registerTensor(this), null != n && trackerFn().write(this.dataId, n);
    }
    return e16.make = function(t, n, r) {
        return new e16(t, r, n.values, n.dataId);
    }, e16.prototype.flatten = function() {
        return this.throwIfDisposed(), this.as1D();
    }, e16.prototype.asScalar = function() {
        return this.throwIfDisposed(), assert(1 === this.size, "The array must have only 1 element."), this.reshape([]);
    }, e16.prototype.as1D = function() {
        return this.throwIfDisposed(), this.reshape([
            this.size
        ]);
    }, e16.prototype.as2D = function(e, t) {
        return this.throwIfDisposed(), this.reshape([
            e,
            t
        ]);
    }, e16.prototype.as3D = function(e, t, n) {
        return this.throwIfDisposed(), this.reshape([
            e,
            t,
            n
        ]);
    }, e16.prototype.as4D = function(e, t, n, r) {
        return this.throwIfDisposed(), this.reshape([
            e,
            t,
            n,
            r
        ]);
    }, e16.prototype.as5D = function(e, t, n, r, o) {
        return this.throwIfDisposed(), this.reshape([
            e,
            t,
            n,
            r,
            o
        ]);
    }, e16.prototype.asType = function(e) {
        return this.throwIfDisposed(), opHandler.cast(this, e);
    }, Object.defineProperty(e16.prototype, "rank", {
        get: function() {
            return this.shape.length;
        },
        enumerable: !0,
        configurable: !0
    }), e16.prototype.get = function() {
        for(var e = [], t = 0; t < arguments.length; t++)e[t] = arguments[t];
        deprecationWarningFn("Tensor.get() is deprecated. Use Tensor.array() and native array indexing instead."), assert(e.length === this.rank, "Number of coordinates in get() must match the rank of the tensor"), assert("complex64" !== this.dtype, "Tensor.get() is not supported for complex64 tensors yet."), this.throwIfDisposed(), 0 === e.length && (e = [
            0
        ]);
        for(var n = e[e.length - 1], r = 0; r < e.length - 1; ++r)n += this.strides[r] * e[r];
        return this.dataSync()[n];
    }, e16.prototype.buffer = function() {
        return deprecationWarningFn("Tensor.buffer() is renamed to Tensor.bufferSync() in TensorFlow.js 1.0 and Tensor.buffer() will become an async function."), opHandler.buffer(this.shape, this.dtype, this.dataSync());
    }, e16.prototype.bufferSync = function() {
        return opHandler.buffer(this.shape, this.dtype, this.dataSync());
    }, e16.prototype.array = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e, t;
            return __generator(this, function(n) {
                switch(n.label){
                    case 0:
                        return e = toNestedArray, t = [
                            this.shape
                        ], [
                            4,
                            this.data()
                        ];
                    case 1:
                        return [
                            2,
                            e.apply(void 0, t.concat([
                                n.sent()
                            ]))
                        ];
                }
            });
        });
    }, e16.prototype.arraySync = function() {
        return toNestedArray(this.shape, this.dataSync());
    }, e16.prototype.data = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                return this.throwIfDisposed(), [
                    2,
                    trackerFn().read(this.dataId)
                ];
            });
        });
    }, e16.prototype.dataSync = function() {
        return this.throwIfDisposed(), trackerFn().readSync(this.dataId);
    }, e16.prototype.dispose = function() {
        this.isDisposed || (trackerFn().disposeTensor(this), this.isDisposedInternal = !0);
    }, Object.defineProperty(e16.prototype, "isDisposed", {
        get: function() {
            return this.isDisposedInternal;
        },
        enumerable: !0,
        configurable: !0
    }), e16.prototype.throwIfDisposed = function() {
        if (this.isDisposed) throw new Error("Tensor is disposed.");
    }, e16.prototype.toFloat = function() {
        return this.asType("float32");
    }, e16.prototype.toInt = function() {
        return this.asType("int32");
    }, e16.prototype.toBool = function() {
        return this.asType("bool");
    }, e16.prototype.print = function(e) {
        return void 0 === e && (e = !1), opHandler.print(this, e);
    }, e16.prototype.reshape = function(e) {
        return this.throwIfDisposed(), opHandler.reshape(this, e);
    }, e16.prototype.reshapeAs = function(e) {
        return this.throwIfDisposed(), this.reshape(e.shape);
    }, e16.prototype.expandDims = function(e) {
        return void 0 === e && (e = 0), opHandler.expandDims(this, e);
    }, e16.prototype.cumsum = function(e, t, n) {
        return void 0 === e && (e = 0), void 0 === t && (t = !1), void 0 === n && (n = !1), opHandler.cumsum(this, e, t, n);
    }, e16.prototype.squeeze = function(e) {
        return this.throwIfDisposed(), opHandler.squeeze(this, e);
    }, e16.prototype.clone = function() {
        return this.throwIfDisposed(), opHandler.clone(this);
    }, e16.prototype.oneHot = function(e, t, n) {
        return this.throwIfDisposed(), opHandler.oneHot(this, e, t, n);
    }, e16.prototype.toString = function(e) {
        return void 0 === e && (e = !1), tensorToString(this.dataSync(), this.shape, this.dtype, e);
    }, e16.prototype.tile = function(e) {
        return this.throwIfDisposed(), opHandler.tile(this, e);
    }, e16.prototype.gather = function(e, t) {
        return void 0 === t && (t = 0), this.throwIfDisposed(), opHandler.gather(this, e, t);
    }, e16.prototype.matMul = function(e, t, n) {
        return void 0 === t && (t = !1), void 0 === n && (n = !1), this.throwIfDisposed(), opHandler.matMul(this, e, t, n);
    }, e16.prototype.dot = function(e) {
        return this.throwIfDisposed(), opHandler.dot(this, e);
    }, e16.prototype.norm = function(e, t, n) {
        return void 0 === e && (e = "euclidean"), void 0 === t && (t = null), void 0 === n && (n = !1), this.throwIfDisposed(), opHandler.norm(this, e, t, n);
    }, e16.prototype.slice = function(e, t) {
        return this.throwIfDisposed(), opHandler.slice(this, e, t);
    }, e16.prototype.reverse = function(e) {
        return this.throwIfDisposed(), opHandler.reverse(this, e);
    }, e16.prototype.concat = function(t, n) {
        return void 0 === n && (n = 0), this.throwIfDisposed(), t instanceof e16 && (t = [
            t
        ]), opHandler.concat([
            this
        ].concat(t), n);
    }, e16.prototype.split = function(e, t) {
        return void 0 === t && (t = 0), this.throwIfDisposed(), opHandler.split(this, e, t);
    }, e16.prototype.stack = function(e, t) {
        return void 0 === t && (t = 0), opHandler.stack([
            this,
            e
        ], t);
    }, e16.prototype.unstack = function(e) {
        return void 0 === e && (e = 0), opHandler.unstack(this, e);
    }, e16.prototype.pad = function(e, t) {
        return void 0 === t && (t = 0), opHandler.pad(this, e, t);
    }, e16.prototype.batchNormalization = function(e, t, n, r, o) {
        return void 0 === n && (n = 0.001), deprecationWarningFn("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"), this.batchNorm(e, t, o, r, n);
    }, e16.prototype.batchNorm = function(e, t, n, r, o) {
        return void 0 === o && (o = 0.001), this.throwIfDisposed(), opHandler.batchNorm(this, e, t, n, r, o);
    }, e16.prototype.all = function(e, t) {
        return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.all(this, e, t);
    }, e16.prototype.any = function(e, t) {
        return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.any(this, e, t);
    }, e16.prototype.logSumExp = function(e, t) {
        return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.logSumExp(this, e, t);
    }, e16.prototype.sum = function(e, t) {
        return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.sum(this, e, t);
    }, e16.prototype.prod = function(e, t) {
        return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.prod(this, e, t);
    }, e16.prototype.mean = function(e, t) {
        return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.mean(this, e, t);
    }, e16.prototype.min = function(e, t) {
        return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.min(this, e, t);
    }, e16.prototype.max = function(e, t) {
        return void 0 === e && (e = null), void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.max(this, e, t);
    }, e16.prototype.argMin = function(e) {
        return void 0 === e && (e = null), this.throwIfDisposed(), opHandler.argMin(this, e);
    }, e16.prototype.argMax = function(e) {
        return void 0 === e && (e = null), this.throwIfDisposed(), opHandler.argMax(this, e);
    }, e16.prototype.cast = function(e) {
        return this.throwIfDisposed(), opHandler.cast(this, e);
    }, e16.prototype.add = function(e) {
        return this.throwIfDisposed(), opHandler.add(this, e);
    }, e16.prototype.addStrict = function(e) {
        return this.throwIfDisposed(), opHandler.addStrict(this, e);
    }, e16.prototype.atan2 = function(e) {
        return this.throwIfDisposed(), opHandler.atan2(this, e);
    }, e16.prototype.sub = function(e) {
        return this.throwIfDisposed(), opHandler.sub(this, e);
    }, e16.prototype.subStrict = function(e) {
        return this.throwIfDisposed(), opHandler.subStrict(this, e);
    }, e16.prototype.pow = function(e) {
        return this.throwIfDisposed(), opHandler.pow(this, e);
    }, e16.prototype.powStrict = function(e) {
        return this.throwIfDisposed(), opHandler.powStrict(this, e);
    }, e16.prototype.mul = function(e) {
        return this.throwIfDisposed(), opHandler.mul(this, e);
    }, e16.prototype.mulStrict = function(e) {
        return this.throwIfDisposed(), opHandler.mulStrict(this, e);
    }, e16.prototype.div = function(e) {
        return this.throwIfDisposed(), opHandler.div(this, e);
    }, e16.prototype.floorDiv = function(e) {
        return this.throwIfDisposed(), opHandler.floorDiv(this, e);
    }, e16.prototype.divStrict = function(e) {
        return this.throwIfDisposed(), opHandler.divStrict(this, e);
    }, e16.prototype.minimum = function(e) {
        return this.throwIfDisposed(), opHandler.minimum(this, e);
    }, e16.prototype.minimumStrict = function(e) {
        return this.throwIfDisposed(), opHandler.minimumStrict(this, e);
    }, e16.prototype.maximum = function(e) {
        return this.throwIfDisposed(), opHandler.maximum(this, e);
    }, e16.prototype.maximumStrict = function(e) {
        return this.throwIfDisposed(), opHandler.maximumStrict(this, e);
    }, e16.prototype.mod = function(e) {
        return this.throwIfDisposed(), opHandler.mod(this, e);
    }, e16.prototype.modStrict = function(e) {
        return this.throwIfDisposed(), opHandler.modStrict(this, e);
    }, e16.prototype.squaredDifference = function(e) {
        return this.throwIfDisposed(), opHandler.squaredDifference(this, e);
    }, e16.prototype.squaredDifferenceStrict = function(e) {
        return this.throwIfDisposed(), opHandler.squaredDifferenceStrict(this, e);
    }, e16.prototype.transpose = function(e) {
        return this.throwIfDisposed(), opHandler.transpose(this, e);
    }, e16.prototype.notEqual = function(e) {
        return this.throwIfDisposed(), opHandler.notEqual(this, e);
    }, e16.prototype.notEqualStrict = function(e) {
        return this.throwIfDisposed(), opHandler.notEqualStrict(this, e);
    }, e16.prototype.less = function(e) {
        return this.throwIfDisposed(), opHandler.less(this, e);
    }, e16.prototype.lessStrict = function(e) {
        return this.throwIfDisposed(), opHandler.lessStrict(this, e);
    }, e16.prototype.equal = function(e) {
        return this.throwIfDisposed(), opHandler.equal(this, e);
    }, e16.prototype.equalStrict = function(e) {
        return this.throwIfDisposed(), opHandler.equalStrict(this, e);
    }, e16.prototype.lessEqual = function(e) {
        return this.throwIfDisposed(), opHandler.lessEqual(this, e);
    }, e16.prototype.lessEqualStrict = function(e) {
        return this.throwIfDisposed(), opHandler.lessEqualStrict(this, e);
    }, e16.prototype.greater = function(e) {
        return this.throwIfDisposed(), opHandler.greater(this, e);
    }, e16.prototype.greaterStrict = function(e) {
        return this.throwIfDisposed(), opHandler.greaterStrict(this, e);
    }, e16.prototype.greaterEqual = function(e) {
        return this.throwIfDisposed(), opHandler.greaterEqual(this, e);
    }, e16.prototype.greaterEqualStrict = function(e) {
        return this.throwIfDisposed(), opHandler.greaterEqualStrict(this, e);
    }, e16.prototype.logicalAnd = function(e) {
        return this.throwIfDisposed(), opHandler.logicalAnd(this, e);
    }, e16.prototype.logicalOr = function(e) {
        return this.throwIfDisposed(), opHandler.logicalOr(this, e);
    }, e16.prototype.logicalNot = function() {
        return this.throwIfDisposed(), opHandler.logicalNot(this);
    }, e16.prototype.logicalXor = function(e) {
        return this.throwIfDisposed(), opHandler.logicalXor(this, e);
    }, e16.prototype.where = function(e, t) {
        return this.throwIfDisposed(), opHandler.where(e, this, t);
    }, e16.prototype.neg = function() {
        return this.throwIfDisposed(), opHandler.neg(this);
    }, e16.prototype.ceil = function() {
        return this.throwIfDisposed(), opHandler.ceil(this);
    }, e16.prototype.floor = function() {
        return this.throwIfDisposed(), opHandler.floor(this);
    }, e16.prototype.sign = function() {
        return this.throwIfDisposed(), opHandler.sign(this);
    }, e16.prototype.exp = function() {
        return this.throwIfDisposed(), opHandler.exp(this);
    }, e16.prototype.expm1 = function() {
        return this.throwIfDisposed(), opHandler.expm1(this);
    }, e16.prototype.log = function() {
        return this.throwIfDisposed(), opHandler.log(this);
    }, e16.prototype.log1p = function() {
        return this.throwIfDisposed(), opHandler.log1p(this);
    }, e16.prototype.sqrt = function() {
        return this.throwIfDisposed(), opHandler.sqrt(this);
    }, e16.prototype.rsqrt = function() {
        return this.throwIfDisposed(), opHandler.rsqrt(this);
    }, e16.prototype.square = function() {
        return this.throwIfDisposed(), opHandler.square(this);
    }, e16.prototype.reciprocal = function() {
        return this.throwIfDisposed(), opHandler.reciprocal(this);
    }, e16.prototype.abs = function() {
        return this.throwIfDisposed(), opHandler.abs(this);
    }, e16.prototype.clipByValue = function(e, t) {
        return this.throwIfDisposed(), opHandler.clipByValue(this, e, t);
    }, e16.prototype.relu = function() {
        return this.throwIfDisposed(), opHandler.relu(this);
    }, e16.prototype.elu = function() {
        return this.throwIfDisposed(), opHandler.elu(this);
    }, e16.prototype.selu = function() {
        return this.throwIfDisposed(), opHandler.selu(this);
    }, e16.prototype.leakyRelu = function(e) {
        return void 0 === e && (e = 0.2), this.throwIfDisposed(), opHandler.leakyRelu(this, e);
    }, e16.prototype.prelu = function(e) {
        return this.throwIfDisposed(), opHandler.prelu(this, e);
    }, e16.prototype.sigmoid = function() {
        return this.throwIfDisposed(), opHandler.sigmoid(this);
    }, e16.prototype.logSigmoid = function() {
        return this.throwIfDisposed(), opHandler.logSigmoid(this);
    }, e16.prototype.softplus = function() {
        return this.throwIfDisposed(), opHandler.softplus(this);
    }, e16.prototype.zerosLike = function() {
        return this.throwIfDisposed(), opHandler.zerosLike(this);
    }, e16.prototype.onesLike = function() {
        return this.throwIfDisposed(), opHandler.onesLike(this);
    }, e16.prototype.sin = function() {
        return this.throwIfDisposed(), opHandler.sin(this);
    }, e16.prototype.cos = function() {
        return this.throwIfDisposed(), opHandler.cos(this);
    }, e16.prototype.tan = function() {
        return this.throwIfDisposed(), opHandler.tan(this);
    }, e16.prototype.asin = function() {
        return this.throwIfDisposed(), opHandler.asin(this);
    }, e16.prototype.acos = function() {
        return this.throwIfDisposed(), opHandler.acos(this);
    }, e16.prototype.atan = function() {
        return this.throwIfDisposed(), opHandler.atan(this);
    }, e16.prototype.sinh = function() {
        return this.throwIfDisposed(), opHandler.sinh(this);
    }, e16.prototype.cosh = function() {
        return this.throwIfDisposed(), opHandler.cosh(this);
    }, e16.prototype.tanh = function() {
        return this.throwIfDisposed(), opHandler.tanh(this);
    }, e16.prototype.asinh = function() {
        return this.throwIfDisposed(), opHandler.asinh(this);
    }, e16.prototype.acosh = function() {
        return this.throwIfDisposed(), opHandler.acosh(this);
    }, e16.prototype.atanh = function() {
        return this.throwIfDisposed(), opHandler.atanh(this);
    }, e16.prototype.erf = function() {
        return this.throwIfDisposed(), opHandler.erf(this);
    }, e16.prototype.round = function() {
        return this.throwIfDisposed(), opHandler.round(this);
    }, e16.prototype.step = function(e) {
        return void 0 === e && (e = 0), this.throwIfDisposed(), opHandler.step(this, e);
    }, e16.prototype.softmax = function(e) {
        return void 0 === e && (e = -1), this.throwIfDisposed(), opHandler.softmax(this, e);
    }, e16.prototype.logSoftmax = function(e) {
        return void 0 === e && (e = -1), this.throwIfDisposed(), opHandler.logSoftmax(this, e);
    }, e16.prototype.resizeBilinear = function(e, t) {
        return void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.image.resizeBilinear(this, e, t);
    }, e16.prototype.resizeNearestNeighbor = function(e, t) {
        return void 0 === t && (t = !1), this.throwIfDisposed(), opHandler.image.resizeNearestNeighbor(this, e, t);
    }, e16.prototype.conv1d = function(e, t, n, r, o, a) {
        return void 0 === r && (r = "NWC"), void 0 === o && (o = 1), this.throwIfDisposed(), opHandler.conv1d(this, e, t, n, r, o, a);
    }, e16.prototype.conv2d = function(e, t, n, r, o, a) {
        return void 0 === r && (r = "NHWC"), void 0 === o && (o = [
            1,
            1
        ]), this.throwIfDisposed(), opHandler.conv2d(this, e, t, n, r, o, a);
    }, e16.prototype.conv2dTranspose = function(e, t, n, r, o) {
        return this.throwIfDisposed(), opHandler.conv2dTranspose(this, e, t, n, r, o);
    }, e16.prototype.depthwiseConv2D = function(e, t, n, r, o, a) {
        return void 0 === r && (r = "NHWC"), void 0 === o && (o = [
            1,
            1
        ]), this.throwIfDisposed(), opHandler.depthwiseConv2d(this, e, t, n, r, o, a);
    }, e16.prototype.separableConv2d = function(e, t, n, r, o, a) {
        return void 0 === o && (o = [
            1,
            1
        ]), void 0 === a && (a = "NHWC"), this.throwIfDisposed(), opHandler.separableConv2d(this, e, t, n, r, o, a);
    }, e16.prototype.avgPool = function(e, t, n, r) {
        return this.throwIfDisposed(), opHandler.avgPool(this, e, t, n, r);
    }, e16.prototype.maxPool = function(e, t, n, r) {
        return this.throwIfDisposed(), opHandler.maxPool(this, e, t, n, r);
    }, e16.prototype.localResponseNormalization = function(e, t, n, r) {
        return void 0 === e && (e = 5), void 0 === t && (t = 1), void 0 === n && (n = 1), void 0 === r && (r = 0.5), opHandler.localResponseNormalization(this, e, t, n, r);
    }, e16.prototype.pool = function(e, t, n, r, o) {
        return this.throwIfDisposed(), opHandler.pool(this, e, t, n, r, o);
    }, e16.prototype.variable = function(e, t, n) {
        return void 0 === e && (e = !0), this.throwIfDisposed(), Variable.variable(this, e, t, n);
    }, e16.prototype.unsortedSegmentSum = function(e, t) {
        return this.throwIfDisposed(), opHandler.unsortedSegmentSum(this, e, t);
    }, e16.prototype.batchToSpaceND = function(e, t) {
        return this.throwIfDisposed(), opHandler.batchToSpaceND(this, e, t);
    }, e16.prototype.spaceToBatchND = function(e, t) {
        return this.throwIfDisposed(), opHandler.spaceToBatchND(this, e, t);
    }, e16.prototype.topk = function(e, t) {
        return void 0 === e && (e = 1), void 0 === t && (t = !0), this.throwIfDisposed(), opHandler.topk(this, e, t);
    }, e16.prototype.stridedSlice = function(e, t, n, r, o, a, i, s) {
        return void 0 === r && (r = 0), void 0 === o && (o = 0), void 0 === a && (a = 0), void 0 === i && (i = 0), void 0 === s && (s = 0), this.throwIfDisposed(), opHandler.stridedSlice(this, e, t, n, r, o, a, i, s);
    }, e16.prototype.depthToSpace = function(e, t) {
        return this.throwIfDisposed(), opHandler.depthToSpace(this, e, t);
    }, e16.prototype.fft = function() {
        return this.throwIfDisposed(), opHandler.spectral.fft(this);
    }, e16.prototype.ifft = function() {
        return this.throwIfDisposed(), opHandler.spectral.ifft(this);
    }, e16.prototype.rfft = function() {
        return this.throwIfDisposed(), opHandler.spectral.rfft(this);
    }, e16.prototype.irfft = function() {
        return this.throwIfDisposed(), opHandler.spectral.irfft(this);
    }, e16;
}();
Object.defineProperty(Tensor, Symbol.hasInstance, {
    value: function(e) {
        return !!e && null != e.dataId && null != e.shape && null != e.dtype;
    }
});
var Variable = function(e17) {
    function t9(t, n, r) {
        void 0 === n && (n = !0);
        var o = e17.call(this, t.shape, t.dtype, null, t.dataId) || this;
        o.trainable = n, o.name = r, null == o.name && (o.name = trackerFn().nextVariableId().toString());
        try {
            trackerFn().registerVariable(o);
        } catch (e) {
            throw trackerFn().disposeTensor(o), e;
        }
        return o;
    }
    return __extends(t9, e17), t9.variable = function(e, n, r, o) {
        return void 0 === n && (n = !0), null != o && o !== e.dtype && (e = e.asType(o)), new t9(e, n, r);
    }, t9.prototype.assign = function(e) {
        if (e.dtype !== this.dtype) throw new Error("dtype of the new value (" + e.dtype + ") and previous value (" + this.dtype + ") must match");
        if (!arraysEqual(e.shape, this.shape)) throw new Error("shape of the new value (" + e.shape + ") and previous value (" + this.shape + ") must match");
        trackerFn().disposeTensor(this), this.dataId = e.dataId, trackerFn().registerTensor(this);
    }, t9;
}(Tensor);
Object.defineProperty(Variable, Symbol.hasInstance, {
    value: function(e) {
        return e instanceof Tensor && null != e.assign && e.assign instanceof Function;
    }
});
var Rank, UpcastInt32AndMap, UpcastBoolAndMap, UpcastFloat32AndMap, UpcastComplex64AndMap, variable = Variable.variable;
function getFilteredNodesXToY(e, t, n) {
    for(var r = {
    }, o = {
    }, a = 0; a < t.length; a++)r[t[a].id] = !0;
    for(a = 0; a < e.length; a++){
        var i = (f = e[a]).inputs;
        for(var s in i){
            for(var u = i[s], l = !1, c = 0; c < t.length; c++)if (r[u.id]) {
                f.outputs.forEach(function(e) {
                    return r[e.id] = !0;
                }), l = !0, o[f.id] = !0;
                break;
            }
            if (l) break;
        }
    }
    var p = {
    };
    p[n.id] = !0;
    var d = {
    };
    for(a = e.length - 1; a >= 0; a--)for(i = (f = e[a]).inputs, c = 0; c < f.outputs.length; c++)if (p[f.outputs[c].id]) {
        for(var s in i)p[i[s].id] = !0, d[f.id] = !0;
        break;
    }
    var h = [];
    for(a = 0; a < e.length; a++){
        var f;
        if (o[(f = e[a]).id] && d[f.id]) {
            var m = {
            };
            for(var s in f.inputs){
                var g = f.inputs[s];
                r[g.id] && (m[s] = g);
            }
            var v = Object.assign({
            }, f);
            v.inputs = m, v.outputs = f.outputs, h.push(v);
        }
    }
    return h;
}
function backpropagateGradients(e, t10) {
    for(var n2 = function(n3) {
        var r2 = t10[n3], o = [];
        if (r2.outputs.forEach(function(t) {
            var n = e[t.id];
            if (null != n) o.push(n);
            else {
                var r = Tensor.make(t.shape, {
                    values: makeZerosTypedArray(t.size, t.dtype)
                }, t.dtype);
                o.push(r);
            }
        }), null == r2.gradient) throw new Error("Cannot compute gradient: gradient function not found for " + r2.name + ".");
        var a = r2.gradient(1 === r2.outputs.length ? o[0] : o);
        for(var i in r2.inputs){
            if (!(i in a)) throw new Error("Cannot backprop through input " + i + ". Available gradients found: " + Object.keys(a) + ".");
            var s = a[i]();
            if ("float32" !== s.dtype) throw new Error("Error in gradient for op " + r2.name + ". The gradient of input " + i + " must have 'float32' dtype, but has '" + s.dtype + "'");
            var u = r2.inputs[i];
            if (!arraysEqual(s.shape, u.shape)) throw new Error("Error in gradient for op " + r2.name + ". The gradient of input '" + i + "' has shape '" + s.shape + "', which does not match the shape of the input '" + u.shape + "'");
            if (null == e[u.id]) e[u.id] = s;
            else {
                var l = e[u.id];
                e[u.id] = l.add(s), l.dispose();
            }
        }
    }, r1 = t10.length - 1; r1 >= 0; r1--)n2(r1);
}
!function(e) {
    e.R0 = "R0", e.R1 = "R1", e.R2 = "R2", e.R3 = "R3", e.R4 = "R4", e.R5 = "R5", e.R6 = "R6";
}(Rank || (Rank = {
})), (function(e) {
    e.float32 = "float32", e.int32 = "int32", e.bool = "int32", e.complex64 = "complex64";
})(UpcastInt32AndMap || (UpcastInt32AndMap = {
})), (function(e) {
    e.float32 = "float32", e.int32 = "int32", e.bool = "bool", e.complex64 = "complex64";
})(UpcastBoolAndMap || (UpcastBoolAndMap = {
})), (function(e) {
    e.float32 = "float32", e.int32 = "float32", e.bool = "float32", e.complex64 = "complex64";
})(UpcastFloat32AndMap || (UpcastFloat32AndMap = {
})), (function(e) {
    e.float32 = "complex64", e.int32 = "complex64", e.bool = "complex64", e.complex64 = "complex64";
})(UpcastComplex64AndMap || (UpcastComplex64AndMap = {
}));
var upcastTypeMap = {
    float32: UpcastFloat32AndMap,
    int32: UpcastInt32AndMap,
    bool: UpcastBoolAndMap,
    complex64: UpcastComplex64AndMap
};
function upcastType(e, t) {
    if ("string" === e || "string" === t) {
        if ("string" === e && "string" === t) return "string";
        throw new Error("Can not upcast " + e + " with " + t);
    }
    return upcastTypeMap[e][t];
}
function sumOutType(e) {
    return upcastType(e, "int32");
}
function makeTypesMatch(e, t) {
    if (e.dtype === t.dtype) return [
        e,
        t
    ];
    var n = upcastType(e.dtype, t.dtype);
    return [
        e.cast(n),
        t.cast(n)
    ];
}
function assertTypesMatch(e, t) {
    assert(e.dtype === t.dtype, "The dtypes of the first(" + e.dtype + ") and second(" + t.dtype + ") input must match");
}
function isTensorInList(e, t) {
    for(var n = 0; n < t.length; n++)if (t[n].id === e.id) return !0;
    return !1;
}
function getTensorsInContainer(e) {
    var t = [];
    return walkTensorContainer(e, t, new Set), t;
}
function walkTensorContainer(e, t, n) {
    if (null != e) {
        if (e instanceof Tensor) t.push(e);
        else if (isIterable(e)) {
            var r = e;
            for(var o in r){
                var a = r[o];
                n.has(a) || (n.add(a), walkTensorContainer(a, t, n));
            }
        }
    }
}
function isIterable(e) {
    return Array.isArray(e) || "object" == typeof e;
}
var Type, Engine = function() {
    function e18(e, t, n) {
        this.backend = e, this.safeMode = t, this.debugMode = n, this.registeredVariables = {
        }, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.profiling = !1, this.gradientScopeCount = 0, this.customGradientDepth = 0, this.scopeStack = [], this.keepTensors = new Set, this.tensorInfo = new WeakMap, this.profiler = new Profiler(e), this.activeProfile = {
            newBytes: 0,
            newTensors: 0,
            peakBytes: 0,
            kernels: [],
            result: null
        };
    }
    return e18.prototype.moveData = function(e) {
        this.write(e, this.readSync(e));
    }, e18.prototype.tidy = function(e, t, n) {
        var r = this;
        void 0 === n && (n = !1);
        var o, a = null;
        if (null == t) {
            if ("function" != typeof e) throw new Error("Please provide a function to tidy()");
            t = e;
        } else {
            if ("string" != typeof e && !(e instanceof String)) throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
            if ("function" != typeof t) throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
            a = e;
        }
        return this.scopedRun(function() {
            return r.startScope(a, n);
        }, function() {
            return r.endScope(o, n);
        }, function() {
            return (o = t()) instanceof Promise && console.error("Cannot return a Promise inside of tidy."), o;
        });
    }, e18.prototype.scopedRun = function(e, t, n) {
        e();
        try {
            var r = n();
            return t(), r;
        } catch (e19) {
            throw t(), e19;
        }
    }, e18.prototype.nextTensorId = function() {
        return e18.nextTensorId++;
    }, e18.prototype.nextVariableId = function() {
        return e18.nextVariableId++;
    }, e18.prototype.runKernel = function(e20, t, n) {
        var r, o = this, a = [], i = function(e) {
            return a.push(e), e;
        }, s = null != this.activeScope ? this.activeScope.name : "", u = this.numBytes, l = this.numTensors;
        if (this.scopedRun(function() {
            return o.customGradientDepth++;
        }, function() {
            return o.customGradientDepth--;
        }, function() {
            r = o.debugMode() ? o.profiler.profileKernel(s, function() {
                return e20(o.backend, i);
            }) : e20(o.backend, i);
        }), this.shouldRecord()) {
            var c = {
                id: this.nextTapeNodeId++,
                name: s,
                inputs: t,
                outputs: Array.isArray(r) ? r : [
                    r
                ]
            };
            null != n && (c.gradient = function(e) {
                return n(e, a);
            }), this.activeTape.push(c);
        }
        return this.profiling && this.activeProfile.kernels.push({
            name: s,
            bytesAdded: this.numBytes - u,
            totalBytesSnapshot: this.numBytes,
            tensorsAdded: this.numTensors - l,
            totalTensorsSnapshot: this.numTensors,
            inputShapes: Object.keys(t).map(function(e) {
                return t[e].shape;
            }),
            outputShape: Array.isArray(r) ? r.map(function(e) {
                return e.shape;
            }) : r.shape
        }), r;
    }, e18.prototype.registerTensor = function(e) {
        var t = this.tensorInfo.has(e.dataId) ? this.tensorInfo.get(e.dataId).refCount : 0;
        if (this.numTensors++, "string" === e.dtype && this.numStringTensors++, 0 === t) {
            this.numDataBuffers++;
            var n = 0;
            "complex64" !== e.dtype && "string" !== e.dtype && (n = sizeFromShape(e.shape) * bytesPerElement(e.dtype)), this.tensorInfo.set(e.dataId, {
                backend: this.backend,
                dtype: e.dtype,
                shape: e.shape,
                bytes: n,
                refCount: 0
            }), this.numBytes += n, this.backend.register(e.dataId, e.shape, e.dtype);
        }
        this.tensorInfo.get(e.dataId).refCount++, e instanceof Variable || this.track(e);
    }, e18.prototype.registerVariable = function(e) {
        if (null != this.registeredVariables[e.name]) throw new Error("Variable with name " + e.name + " was already registered");
        this.registeredVariables[e.name] = e;
    }, e18.prototype.disposeTensor = function(e) {
        if (this.tensorInfo.has(e.dataId)) {
            this.keepTensors.has(e.id) && this.keepTensors.delete(e.id), this.numTensors--, "string" === e.dtype && this.numStringTensors--;
            var t = this.tensorInfo.get(e.dataId);
            t.refCount <= 1 ? ("complex64" !== e.dtype && (this.numBytes -= t.bytes), this.numDataBuffers--, t.backend.disposeData(e.dataId), this.tensorInfo.delete(e.dataId)) : this.tensorInfo.get(e.dataId).refCount--;
        }
    }, e18.prototype.disposeVariables = function() {
        for(var e in this.registeredVariables){
            var t = this.registeredVariables[e];
            this.disposeTensor(t), delete this.registeredVariables[e];
        }
    }, e18.prototype.memory = function() {
        var e = this.backend.memory();
        return e.numTensors = this.numTensors, e.numDataBuffers = this.numDataBuffers, e.numBytes = this.numBytes, this.numStringTensors > 0 && (e.unreliable = !0, null == e.reasons && (e.reasons = []), e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), e;
    }, e18.prototype.profile = function(e21) {
        return __awaiter(this, void 0, void 0, function() {
            var t, n;
            return __generator(this, function(r) {
                return this.profiling = !0, t = this.numBytes, n = this.numTensors, this.activeProfile.kernels = [], this.activeProfile.result = e21(), this.profiling = !1, this.activeProfile.peakBytes = Math.max.apply(Math, this.activeProfile.kernels.map(function(e) {
                    return e.totalBytesSnapshot;
                })), this.activeProfile.newBytes = this.numBytes - t, this.activeProfile.newTensors = this.numTensors - n, [
                    2,
                    this.activeProfile
                ];
            });
        });
    }, e18.prototype.shouldRecord = function() {
        return null != this.activeTape && 0 === this.customGradientDepth;
    }, e18.prototype.addTapeNode = function(e22, t11, n) {
        var r = {
        };
        e22.forEach(function(e, t) {
            r[t] = e;
        });
        var o = {
            id: this.nextTapeNodeId++,
            name: this.activeScope.name,
            inputs: r,
            outputs: [
                t11
            ],
            gradient: function(e23) {
                var t = {
                };
                return n(e23).forEach(function(e, n) {
                    t[n] = function() {
                        return e;
                    };
                }), t;
            }
        };
        this.activeTape.push(o);
    }, e18.prototype.keep = function(e) {
        if (1 === this.scopeStack.length && this.safeMode) throw new Error("Safe mode is ON. Enclose all tensor operations inside tf.tidy(): tf.tidy(() => {...}) to avoid memory leaks.");
        return this.keepTensors.add(e.id), e;
    }, e18.prototype.startScope = function(e, t) {
        void 0 === t && (t = !1), t && 0 === this.gradientScopeCount && (this.activeTape = []), t && this.gradientScopeCount++;
        var n = {
            track: [],
            name: "unnamed scope"
        };
        e && (n.name = e), this.scopeStack.push(n), this.activeScope = n;
    }, e18.prototype.endScope = function(e24, t) {
        var n = this;
        void 0 === t && (t = !1), t && (this.gradientScopeCount--, 0 === this.gradientScopeCount && (this.activeTape = null));
        var r = new Set(this.keepTensors), o = getTensorsInContainer(e24);
        o.forEach(function(e) {
            return r.add(e.id);
        });
        for(var a = 0; a < this.activeScope.track.length; a++){
            var i = this.activeScope.track[a];
            r.has(i.id) || (null != this.activeTape ? o.push(i) : i.dispose());
        }
        var s = this.scopeStack.pop();
        this.activeScope = 0 === this.scopeStack.length ? null : this.scopeStack[this.scopeStack.length - 1], o.forEach(function(e) {
            !n.keepTensors.has(e.id) && isTensorInList(e, s.track) && n.track(e);
        });
    }, e18.prototype.gradients = function(e, t, n, r) {
        var o = this;
        if (void 0 === r && (r = !1), assert(t.length > 0, "gradients() received an empty list of xs."), null != n && "float32" !== n.dtype) throw new Error("dy must have 'float32' dtype, but has '" + n.dtype + "'");
        return this.tidy("gradients", function() {
            var a = e();
            assert(a instanceof Tensor, "The result y returned by f() must be a tensor.");
            var i = getFilteredNodesXToY(o.activeTape, t, a);
            if (!r && 0 === i.length && t.length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
            var s = {
            };
            return s[a.id] = null == n ? ones(a.shape) : n, backpropagateGradients(s, i), {
                value: a,
                grads: t.map(function(e) {
                    return s[e.id];
                })
            };
        }, !0);
    }, e18.prototype.customGrad = function(e25) {
        var t12 = this;
        return assert(isFunction(e25), "The f passed in customGrad(f) must be a function."), function() {
            for(var n, r3, o = [], a4 = 0; a4 < arguments.length; a4++)o[a4] = arguments[a4];
            if (assert(o.every(function(e) {
                return e instanceof Tensor;
            }), "The args passed in customGrad(f)(x1, x2,...) must all be tensors"), t12.scopedRun(function() {
                return t12.customGradientDepth++;
            }, function() {
                return t12.customGradientDepth--;
            }, function() {
                r3 = t12.tidy(e25.name, function() {
                    var t = e25.apply(void 0, o), r = t.value, a = t.gradFunc;
                    return assert(r instanceof Tensor, "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"), assert(isFunction(a), "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."), n = a, r;
                }, !0);
            }), t12.shouldRecord()) t12.addTapeNode(o, r3, function(e26) {
                var t = n(e26), r = Array.isArray(t) ? t : [
                    t
                ];
                return assert(r.length === o.length, "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."), assert(r.every(function(e) {
                    return e instanceof Tensor;
                }), "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."), r;
            });
            return r3;
        };
    }, e18.prototype.write = function(e, t) {
        var n = this.tensorInfo.get(e);
        if ("string" === n.dtype) {
            var r = bytesFromStringArray(t);
            this.numBytes += r - n.bytes, n.bytes = r;
        }
        this.backend !== n.backend && (n.backend.disposeData(e), n.backend = this.backend, this.backend.register(e, n.shape, n.dtype)), this.backend.write(e, t);
    }, e18.prototype.readSync = function(e) {
        return this.tensorInfo.get(e).backend.readSync(e);
    }, e18.prototype.read = function(e) {
        return this.tensorInfo.get(e).backend.read(e);
    }, e18.prototype.fromPixels = function(e, t) {
        return this.backend.fromPixels(e, t);
    }, e18.prototype.time = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            var t, n;
            return __generator(this, function(r) {
                switch(r.label){
                    case 0:
                        return t = now(), [
                            4,
                            this.backend.time(e)
                        ];
                    case 1:
                        return (n = r.sent()).wallMs = now() - t, [
                            2,
                            n
                        ];
                }
            });
        });
    }, e18.prototype.track = function(e) {
        if (1 === this.scopeStack.length && this.safeMode) throw new Error("Safe mode is ON. Enclose all tensor operations inside tf.tidy(): tf.tidy(() => {op();...}); to avoid memory leaks.");
        return null != this.activeScope && this.activeScope.track.push(e), e;
    }, e18.nextTensorId = 0, e18.nextVariableId = 0, e18;
}();
function ones(e) {
    var t = makeOnesTypedArray(sizeFromShape(e), "float32");
    return Tensor.make(e, {
        values: t
    });
}
!function(e) {
    e[e.NUMBER = 0] = "NUMBER", e[e.BOOLEAN = 1] = "BOOLEAN", e[e.STRING = 2] = "STRING";
}(Type || (Type = {
}));
var MAX_TEXTURE_SIZE, MAX_TEXTURES_IN_SHADER, URL_PROPERTIES = [
    {
        name: "DEBUG",
        type: Type.BOOLEAN
    },
    {
        name: "IS_BROWSER",
        type: Type.BOOLEAN
    },
    {
        name: "WEBGL_LAZILY_UNPACK",
        type: Type.BOOLEAN
    },
    {
        name: "WEBGL_CPU_FORWARD",
        type: Type.BOOLEAN
    },
    {
        name: "WEBGL_PACK",
        type: Type.BOOLEAN
    },
    {
        name: "WEBGL_PACK_BATCHNORMALIZATION",
        type: Type.BOOLEAN
    },
    {
        name: "WEBGL_PACK_CLIP",
        type: Type.BOOLEAN
    },
    {
        name: "WEBGL_PACK_DEPTHWISECONV",
        type: Type.BOOLEAN
    },
    {
        name: "WEBGL_PACK_BINARY_OPERATIONS",
        type: Type.BOOLEAN
    },
    {
        name: "WEBGL_PACK_ARRAY_OPERATIONS",
        type: Type.BOOLEAN
    },
    {
        name: "WEBGL_CONV_IM2COL",
        type: Type.BOOLEAN
    },
    {
        name: "WEBGL_MAX_TEXTURE_SIZE",
        type: Type.NUMBER
    },
    {
        name: "WEBGL_NUM_MB_BEFORE_PAGING",
        type: Type.NUMBER
    },
    {
        name: "WEBGL_MAX_TEXTURES_IN_SHADER",
        type: Type.NUMBER
    },
    {
        name: "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",
        type: Type.NUMBER
    },
    {
        name: "WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",
        type: Type.BOOLEAN
    },
    {
        name: "WEBGL_VERSION",
        type: Type.NUMBER
    },
    {
        name: "WEBGL_RENDER_FLOAT32_ENABLED",
        type: Type.BOOLEAN
    },
    {
        name: "WEBGL_DOWNLOAD_FLOAT_ENABLED",
        type: Type.BOOLEAN
    },
    {
        name: "WEBGL_FENCE_API_ENABLED",
        type: Type.BOOLEAN
    },
    {
        name: "WEBGL_SIZE_UPLOAD_UNIFORM",
        type: Type.NUMBER
    },
    {
        name: "BACKEND",
        type: Type.STRING
    },
    {
        name: "EPSILON",
        type: Type.NUMBER
    },
    {
        name: "PROD",
        type: Type.BOOLEAN
    },
    {
        name: "TENSORLIKE_CHECK_SHAPE_CONSISTENCY",
        type: Type.BOOLEAN
    },
    {
        name: "DEPRECATION_WARNINGS_ENABLED",
        type: Type.BOOLEAN
    }
];
function isWebGLVersionEnabled(e) {
    try {
        if (null != getWebGLContext(e)) return !0;
    } catch (e27) {
        return !1;
    }
    return !1;
}
function getWebGLMaxTextureSize(e) {
    if (null == MAX_TEXTURE_SIZE) {
        var t = getWebGLContext(e);
        MAX_TEXTURE_SIZE = t.getParameter(t.MAX_TEXTURE_SIZE);
    }
    return MAX_TEXTURE_SIZE;
}
function getMaxTexturesInShader(e) {
    if (null == MAX_TEXTURES_IN_SHADER) {
        var t = getWebGLContext(e);
        MAX_TEXTURES_IN_SHADER = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS);
    }
    return Math.min(16, MAX_TEXTURES_IN_SHADER);
}
function getWebGLDisjointQueryTimerVersion(e) {
    if (0 === e) return 0;
    var t = getWebGLContext(e);
    return hasExtension(t, "EXT_disjoint_timer_query_webgl2") && 2 === e ? 2 : hasExtension(t, "EXT_disjoint_timer_query") ? 1 : 0;
}
function isRenderToFloatTextureEnabled(e) {
    if (0 === e) return !1;
    var t = getWebGLContext(e);
    if (1 === e) {
        if (!hasExtension(t, "OES_texture_float")) return !1;
    } else if (!hasExtension(t, "EXT_color_buffer_float")) return !1;
    return createFloatTextureAndBindToFramebuffer(t, e);
}
function isDownloadFloatTextureEnabled(e) {
    if (0 === e) return !1;
    var t = getWebGLContext(e);
    if (1 === e) {
        if (!hasExtension(t, "OES_texture_float")) return !1;
        if (!hasExtension(t, "WEBGL_color_buffer_float")) return !1;
    } else if (!hasExtension(t, "EXT_color_buffer_float")) return !1;
    return createFloatTextureAndBindToFramebuffer(t, e);
}
function isWebGLFenceEnabled(e) {
    return 2 === e && null != getWebGLContext(e).fenceSync;
}
function isChrome() {
    return "undefined" != typeof navigator && null != navigator && null != navigator.userAgent && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
}
var TENSORFLOWJS_FLAGS_PREFIX = "tfjsflags";
function getFeaturesFromURL() {
    var e28 = {
    };
    if ("undefined" == typeof window || void 0 === window.location || void 0 === window.location.search) return e28;
    var t13 = getQueryParams(window.location.search);
    if (TENSORFLOWJS_FLAGS_PREFIX in t13) {
        var n = {
        };
        t13[TENSORFLOWJS_FLAGS_PREFIX].split(",").forEach(function(e) {
            var t = e.split(":"), r = t[0], o = t[1];
            n[r] = o;
        }), URL_PROPERTIES.forEach(function(t) {
            t.name in n && (console.log("Setting feature override from URL " + t.name + ": " + n[t.name]), t.type === Type.NUMBER ? e28[t.name] = +n[t.name] : t.type === Type.BOOLEAN ? e28[t.name] = "true" === n[t.name] : t.type === Type.STRING ? e28[t.name] = n[t.name] : console.warn("Unknown URL param: " + t.name + "."));
        });
    }
    return e28;
}
function hasExtension(e, t) {
    return null != e.getExtension(t);
}
function createFloatTextureAndBindToFramebuffer(e, t) {
    var n = e.createFramebuffer(), r = e.createTexture();
    e.bindTexture(e.TEXTURE_2D, r);
    var o = 2 === t ? e.RGBA32F : e.RGBA;
    e.texImage2D(e.TEXTURE_2D, 0, o, 1, 1, 0, e.RGBA, e.FLOAT, null), e.bindFramebuffer(e.FRAMEBUFFER, n), e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, r, 0);
    var a = e.checkFramebufferStatus(e.FRAMEBUFFER) === e.FRAMEBUFFER_COMPLETE;
    return e.bindTexture(e.TEXTURE_2D, null), e.bindFramebuffer(e.FRAMEBUFFER, null), e.deleteTexture(r), e.deleteFramebuffer(n), a;
}
function getQueryParams(e) {
    var t = {
    };
    return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function(e) {
        for(var n = [], r = 1; r < arguments.length; r++)n[r - 1] = arguments[r];
        return decodeParam(t, n[0], n[1]), n.join("=");
    }), t;
}
function decodeParam(e, t, n) {
    e[decodeURIComponent(t)] = decodeURIComponent(n || "");
}
var BEFORE_PAGING_CONSTANT = 600;
function getNumMBBeforePaging() {
    return window.screen.height * window.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024;
}
var EPSILON_FLOAT16 = 0.0001, TEST_EPSILON_FLOAT16 = 0.1, EPSILON_FLOAT32 = 0.0000001, TEST_EPSILON_FLOAT32 = 0.001, Environment = function() {
    function e29(e) {
        this.features = {
        }, this.registry = {
        }, null != e && (this.features = e), this.get("DEBUG") && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
    }
    return e29.setBackend = function(e, t) {
        if (void 0 === t && (t = !1), !(e in ENV.registry)) throw new Error("Backend name '" + e + "' not found in registry");
        ENV.engine.backend = ENV.findBackend(e), ENV.backendName = e;
    }, e29.getBackend = function() {
        return ENV.initEngine(), ENV.backendName;
    }, e29.disposeVariables = function() {
        ENV.engine.disposeVariables();
    }, e29.memory = function() {
        return ENV.engine.memory();
    }, e29.profile = function(e) {
        return ENV.engine.profile(e);
    }, e29.tidy = function(e, t) {
        return ENV.engine.tidy(e, t);
    }, e29.dispose = function(e30) {
        getTensorsInContainer(e30).forEach(function(e) {
            return e.dispose();
        });
    }, e29.keep = function(e) {
        return ENV.engine.keep(e);
    }, e29.time = function(e) {
        return ENV.engine.time(e);
    }, e29.prototype.get = function(e) {
        return e in this.features ? this.features[e] : (this.features[e] = this.evaluateFeature(e), this.features[e]);
    }, e29.prototype.getFeatures = function() {
        return this.features;
    }, e29.prototype.set = function(e, t) {
        this.features[e] = t;
    }, e29.prototype.getBestBackendName = function() {
        var e31 = this;
        if (0 === Object.keys(this.registry).length) throw new Error("No backend found in registry.");
        return Object.keys(this.registry).map(function(t) {
            return {
                name: t,
                entry: e31.registry[t]
            };
        }).sort(function(e, t) {
            return t.entry.priority - e.entry.priority;
        })[0].name;
    }, e29.prototype.evaluateFeature = function(e) {
        if ("DEBUG" === e) return !1;
        if ("IS_BROWSER" === e) return "undefined" != typeof window;
        if ("IS_NODE" === e) return "undefined" != typeof process && void 0 !== process.versions && void 0 !== process.versions.node;
        if ("IS_CHROME" === e) return isChrome();
        if ("WEBGL_CPU_FORWARD" === e) return !0;
        if ("WEBGL_PACK" === e) return !1;
        if ("WEBGL_PACK_BATCHNORMALIZATION" === e) return this.get("WEBGL_PACK");
        if ("WEBGL_PACK_CLIP" === e) return this.get("WEBGL_PACK");
        if ("WEBGL_PACK_DEPTHWISECONV" === e) return this.get("WEBGL_PACK");
        if ("WEBGL_PACK_BINARY_OPERATIONS" === e) return this.get("WEBGL_PACK");
        if ("WEBGL_PACK_ARRAY_OPERATIONS" === e) return this.get("WEBGL_PACK");
        if ("WEBGL_LAZILY_UNPACK" === e) return this.get("WEBGL_PACK");
        if ("WEBGL_CONV_IM2COL" === e) return this.get("WEBGL_PACK");
        if ("WEBGL_NUM_MB_BEFORE_PAGING" === e) return this.get("PROD") || !this.get("IS_BROWSER") ? Number.POSITIVE_INFINITY : getNumMBBeforePaging();
        if ("WEBGL_MAX_TEXTURE_SIZE" === e) return getWebGLMaxTextureSize(this.get("WEBGL_VERSION"));
        if ("WEBGL_MAX_TEXTURES_IN_SHADER" === e) return getMaxTexturesInShader(this.get("WEBGL_VERSION"));
        if ("IS_TEST" === e) return !1;
        if ("BACKEND" === e) return this.getBestBackendName();
        if ("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION" === e) {
            var t = this.get("WEBGL_VERSION");
            return 0 === t ? 0 : getWebGLDisjointQueryTimerVersion(t);
        }
        if ("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE" === e) return this.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !isMobile();
        if ("HAS_WEBGL" === e) return this.get("WEBGL_VERSION") > 0;
        if ("WEBGL_VERSION" === e) return isWebGLVersionEnabled(2) ? 2 : isWebGLVersionEnabled(1) ? 1 : 0;
        if ("WEBGL_RENDER_FLOAT32_ENABLED" === e) return isRenderToFloatTextureEnabled(this.get("WEBGL_VERSION"));
        if ("WEBGL_DOWNLOAD_FLOAT_ENABLED" === e) return isDownloadFloatTextureEnabled(this.get("WEBGL_VERSION"));
        if ("WEBGL_FENCE_API_ENABLED" === e) return isWebGLFenceEnabled(this.get("WEBGL_VERSION"));
        if ("WEBGL_SIZE_UPLOAD_UNIFORM" === e) return this.get("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0;
        if ("TEST_EPSILON" === e) return 32 === this.backend.floatPrecision() ? TEST_EPSILON_FLOAT32 : TEST_EPSILON_FLOAT16;
        if ("EPSILON" === e) return 32 === this.backend.floatPrecision() ? EPSILON_FLOAT32 : EPSILON_FLOAT16;
        if ("PROD" === e) return !1;
        if ("TENSORLIKE_CHECK_SHAPE_CONSISTENCY" === e) return !this.get("PROD");
        if ("DEPRECATION_WARNINGS_ENABLED" === e) return !0;
        throw new Error("Unknown feature " + e + ".");
    }, e29.prototype.setFeatures = function(e) {
        this.features = Object.assign({
        }, e);
    }, e29.prototype.reset = function() {
        this.features = getFeaturesFromURL(), null != this.globalEngine && (this.globalEngine = null);
    }, Object.defineProperty(e29.prototype, "backend", {
        get: function() {
            return this.engine.backend;
        },
        enumerable: !0,
        configurable: !0
    }), e29.prototype.findBackend = function(e) {
        return e in this.registry ? this.registry[e].backend : null;
    }, e29.prototype.registerBackend = function(e32, t, n, r) {
        var o = this;
        if (void 0 === n && (n = 1), e32 in this.registry) return console.warn(e32 + " backend was already registered. Reusing existing backend"), null != r && r(function() {
            return o.engine;
        }), !1;
        try {
            var a = t();
            return a.setDataMover({
                moveData: function(e) {
                    return o.engine.moveData(e);
                }
            }), this.registry[e32] = {
                backend: a,
                priority: n
            }, !0;
        } catch (t14) {
            return console.warn("Registration of backend " + e32 + " failed"), console.warn(t14.stack || t14.message), !1;
        }
    }, e29.prototype.removeBackend = function(e) {
        if (!(e in this.registry)) throw new Error(e + " backend not found in registry");
        this.registry[e].backend.dispose(), delete this.registry[e];
    }, Object.defineProperty(e29.prototype, "engine", {
        get: function() {
            return this.initEngine(), this.globalEngine;
        },
        enumerable: !0,
        configurable: !0
    }), e29.prototype.initEngine = function() {
        var e = this;
        if (null == this.globalEngine) {
            this.backendName = this.get("BACKEND");
            var t = this.findBackend(this.backendName);
            this.globalEngine = new Engine(t, !1, function() {
                return e.get("DEBUG");
            });
        }
    }, e29;
}();
function getGlobalNamespace() {
    var e;
    if ("undefined" != typeof window) e = window;
    else {
        if ("undefined" == typeof process) throw new Error("Could not find a global object");
        e = process;
    }
    return e;
}
function getOrMakeEnvironment() {
    var e = getGlobalNamespace();
    return null == e.ENV && (e.ENV = new Environment(getFeaturesFromURL()), setTensorTracker(function() {
        return e.ENV.engine;
    })), e.ENV;
}
function enableProdMode() {
    ENV.set("PROD", !0);
}
function disableDeprecationWarnings() {
    ENV.set("DEPRECATION_WARNINGS_ENABLED", !1), console.warn("TensorFlow.js deprecation warnings have been disabled.");
}
function deprecationWarn(e) {
    ENV.get("DEPRECATION_WARNINGS_ENABLED") && console.warn(e + " You can disable deprecation warnings with tf.disableDeprecationWarnings().");
}
setDeprecationWarningFn(deprecationWarn);
var ENV = getOrMakeEnvironment(), environment = Object.freeze({
    EPSILON_FLOAT16: EPSILON_FLOAT16,
    EPSILON_FLOAT32: EPSILON_FLOAT32,
    Environment: Environment,
    enableProdMode: enableProdMode,
    disableDeprecationWarnings: disableDeprecationWarnings,
    deprecationWarn: deprecationWarn,
    ENV: ENV
});
function grad(e) {
    return assert(isFunction(e), "The f passed in grad(f) must be a function"), function(t, n) {
        return assert(t instanceof Tensor, "The x passed in grad(f)(x) must be a tensor"), assert(null == n || n instanceof Tensor, "The dy passed in grad(f)(x, dy) must be a tensor"), ENV.engine.tidy(function() {
            var r = ENV.engine.gradients(function() {
                return e(t);
            }, [
                t
            ], n), o = r.value, a = r.grads;
            return null != n && assertShapesMatch(o.shape, n.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), checkGrads(a), a[0];
        });
    };
}
function grads(e33) {
    return assert(isFunction(e33), "The f passed in grads(f) must be a function"), function(t, n) {
        return assert(Array.isArray(t) && t.every(function(e) {
            return e instanceof Tensor;
        }), "The args passed in grads(f)(args) must be an array of tensors"), assert(null == n || n instanceof Tensor, "The dy passed in grads(f)(args, dy) must be a tensor"), ENV.engine.tidy(function() {
            var r = ENV.engine.gradients(function() {
                return e33.apply(void 0, t);
            }, t, n), o = r.value, a = r.grads;
            return null != n && assertShapesMatch(o.shape, n.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), checkGrads(a), a;
        });
    };
}
function valueAndGrad(e) {
    return assert(isFunction(e), "The f passed in valueAndGrad(f) must be a function"), function(t, n) {
        assert(t instanceof Tensor, "The x passed in valueAndGrad(f)(x) must be a tensor"), assert(null == n || n instanceof Tensor, "The dy passed in valueAndGrad(f)(x, dy) must be a tensor");
        var r = ENV.engine.gradients(function() {
            return e(t);
        }, [
            t
        ], n), o = r.grads, a = r.value;
        return checkGrads(o), {
            grad: o[0],
            value: a
        };
    };
}
function valueAndGrads(e34) {
    return assert(isFunction(e34), "The f passed in valueAndGrads(f) must be a function"), function(t, n) {
        assert(Array.isArray(t) && t.every(function(e) {
            return e instanceof Tensor;
        }), "The args passed in valueAndGrads(f)(args) must be array of tensors"), assert(null == n || n instanceof Tensor, "The dy passed in valueAndGrads(f)(args, dy) must be a tensor");
        var r = ENV.engine.gradients(function() {
            return e34.apply(void 0, t);
        }, t, n);
        return null != n && assertShapesMatch(r.value.shape, n.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), checkGrads(r.grads), r;
    };
}
function variableGrads(e35, t) {
    if (assert(isFunction(e35), "The f passed in variableGrads(f) must be a function"), assert(null == t || Array.isArray(t) && t.every(function(e) {
        return e instanceof Variable;
    }), "The varList passed in variableGrads(f, varList) must be an array of variables"), null == t) for(var n in t = [], ENV.engine.registeredVariables)t.push(ENV.engine.registeredVariables[n]);
    var r = t.length;
    assert((t = t.filter(function(e) {
        return e.trainable;
    })).length > 0, "variableGrads() expects at least one of the input variables to be trainable, but none of the " + r + " variables is trainable.");
    var o = ENV.engine.gradients(e35, t, null, !0), a = o.value, i = o.grads;
    assert(i.some(function(e) {
        return null != e;
    }), "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."), assert(0 === a.rank, "The f passed in variableGrads(f) must return a scalar, but it returned a rank-" + a.rank + " tensor");
    var s = {
    };
    return t.forEach(function(e, t) {
        null != i[t] && (s[e.name] = i[t]);
    }), {
        value: a,
        grads: s
    };
}
function customGrad(e) {
    return ENV.engine.customGrad(e);
}
function checkGrads(e36) {
    if (e36.filter(function(e) {
        return null == e;
    }).length > 0) throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.");
}
var tidy = Environment.tidy, keep = Environment.keep, dispose = Environment.dispose, time = Environment.time, profile = Environment.profile;
function warn() {
    for(var e = [], t = 0; t < arguments.length; t++)e[t] = arguments[t];
    ENV.get("IS_TEST") || console.warn.apply(console, e);
}
function getReshaped(e, t, n, r) {
    void 0 === r && (r = !0);
    var o = [];
    if (r) (o = o.concat(t.slice(0))).push(e[0] / n), o = o.concat(e.slice(1));
    else {
        o = o.concat(e[0]);
        for(var a = t.length, i = 0; i < a; ++i)o = o.concat([
            e[i + 1] / t[i],
            t[i]
        ]);
        o = o.concat(e.slice(a + 1));
    }
    return o;
}
function getPermuted(e, t, n) {
    void 0 === n && (n = !0);
    var r = [];
    if (n) {
        r.push(t);
        for(var o = t + 1; o < e; ++o)o <= 2 * t ? (r.push(o), r.push(o - (t + 1))) : r.push(o);
    } else {
        var a = [], i = [];
        for(o = 1; o < e; ++o)o >= 2 * t + 1 || o % 2 == 1 ? i.push(o) : a.push(o);
        r.push.apply(r, a), r.push(0), r.push.apply(r, i);
    }
    return r;
}
function getReshapedPermuted(e, t, n, r) {
    void 0 === r && (r = !0);
    var o = [];
    r ? o.push(e[0] / n) : o.push(e[0] * n);
    for(var a = 1; a < e.length; ++a)a <= t.length ? r ? o.push(t[a - 1] * e[a]) : o.push(e[a] / t[a - 1]) : o.push(e[a]);
    return o;
}
function getSliceBeginCoords(e, t) {
    for(var n = [
        0
    ], r = 0; r < t; ++r)n.push(e[r][0]);
    return n;
}
function getSliceSize(e, t, n) {
    for(var r = e.slice(0, 1), o = 0; o < n; ++o)r.push(e[o + 1] - t[o][0] - t[o][1]);
    return r;
}
function axesAreInnerMostDims(e, t) {
    for(var n = 0; n < e.length; ++n)if (e[e.length - n - 1] !== t - 1 - n) return !1;
    return !0;
}
function combineLocations(e, t, n) {
    for(var r = e.length + t.length, o = [], a = 0, i = 0, s = 0; s < r; s++)-1 === n.indexOf(s) ? o.push(e[a++]) : o.push(t[i++]);
    return o;
}
function computeOutAndReduceShapes(e, t) {
    for(var n = [], r = e.length, o = 0; o < r; o++)-1 === t.indexOf(o) && n.push(e[o]);
    return [
        n,
        t.map(function(t) {
            return e[t];
        })
    ];
}
function expandShapeToKeepDim(e, t) {
    return combineLocations(e, t.map(function(e) {
        return 1;
    }), t);
}
function assertAxesAreInnerMostDims(e, t, n) {
    assert(axesAreInnerMostDims(t, n), e + " supports only inner-most axes for now. Got axes " + t + " and rank-" + n + " input.");
}
function getAxesPermutation(e37, t) {
    if (axesAreInnerMostDims(e37, t)) return null;
    for(var n = [], r = 0; r < t; ++r)-1 === e37.indexOf(r) && n.push(r);
    return e37.forEach(function(e) {
        return n.push(e);
    }), n;
}
function getUndoAxesPermutation(e38) {
    return e38.map(function(e, t) {
        return [
            t,
            e
        ];
    }).sort(function(e, t) {
        return e[1] - t[1];
    }).map(function(e) {
        return e[0];
    });
}
function getInnerMostAxes(e, t) {
    for(var n = [], r = t - e; r < t; ++r)n.push(r);
    return n;
}
function assertParamsConsistent(e39, t15) {
    var n = e39[0].length;
    e39.forEach(function(e, t) {
        assert(e.length === n, "Error in concat" + n + "D: rank of tensors[" + t + "] must be the same as the rank of the rest (" + n + ")");
    }), assert(t15 >= 0 && t15 < n, "Error in concat" + n + "D: axis must be between 0 and " + (n - 1) + ".");
    var r = e39[0];
    e39.forEach(function(e, o) {
        for(var a = 0; a < n; a++)assert(a === t15 || e[a] === r[a], "Error in concat" + n + "D: Shape of tensors[" + o + "] (" + e + ") does not match the shape of the rest (" + r + ") along the non-concatenated axis " + o + ".");
    });
}
function computeOutShape(e, t) {
    for(var n = e[0].slice(), r = 1; r < e.length; r++)n[t] += e[r][t];
    return n;
}
function prepareAndValidate(e40, t) {
    if (e40.rank < 1) throw new Error("tf.gatherND() expects the input to be rank 1 or higher, but the rank was " + e40.rank + ".");
    if (t.rank < 1) throw new Error("tf.gatherND() expects the indices to be rank 1 or higher, but the rank was " + t.rank + ".");
    if ("int32" !== t.dtype) throw new Error("tf.gatherND() expects the indices to be int32 type, but the dtype was " + t.dtype + ".");
    if (t.shape[t.rank - 1] > e40.rank) throw new Error("index innermost dimension length must be <= tensor rank; saw: " + t.shape[t.rank - 1] + " vs. " + e40.rank);
    if (0 === e40.size) throw new Error("Requested more than 0 entries, but input is empty. Input shape: " + e40.shape + ".");
    for(var n = t.shape, r = n[n.length - 1], o = 1, a = 0; a < n.length - 1; ++a)o *= n[a];
    var i = e40.shape, s = n.slice();
    s.pop();
    var u = 1;
    for(a = r; a < e40.rank; ++a)u *= i[a], s.push(i[a]);
    var l = computeStrides(e40.shape).map(function(e) {
        return e / u;
    }).concat([
        1
    ]).slice(0, r);
    return [
        s,
        o,
        u,
        l
    ];
}
var PARALLELIZE_THRESHOLD = 30;
function computeOptimalWindowSize(e) {
    return e <= PARALLELIZE_THRESHOLD ? e : nearestDivisor(e, Math.floor(Math.sqrt(e)));
}
function validateUpdateShape(e, t, n) {
    var r = t.rank > 1 ? t.shape[t.rank - 1] : 1, o = t.rank > 1 ? t.rank - 1 : 1, a = "Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: " + n.shape + ", indices.shape: " + t.shape + ", shape: " + e + ", sliceDim: " + r + ", and batchDim: " + o + ".";
    if (n.rank < o) throw new Error(a + " update.rank < " + o + ". ");
    if (e.length < r + (n.rank - o)) throw new Error(a + " Output shape length < " + (r + (n.rank - o)));
    if (n.rank !== o + e.length - r) throw new Error(a + " update.rank != " + (o + e.length - r));
    for(var i = 0; i < o; ++i)if (n.shape[i] !== t.shape[i]) throw new Error(a + " updates.shape[" + i + "] (" + n.shape[i] + ") != indices.shape[" + i + "] (" + t.shape[i] + ").");
    for(i = 0; i < n.rank - o; ++i)if (n.shape[i + o] !== e[i + r]) throw new Error(a + " updates.shape[" + (i + o) + "] (" + n.shape[i + o] + ") != shape[" + (i + o) + "] (" + e[i + o] + ")");
}
function validateInput(e, t, n) {
    if (t.rank < 1) throw new Error("tf.scatterND() expects the indices to be rank 1 or higher, but the rank was " + t.rank + ".");
    if (e.rank < 1) throw new Error("tf.scatterND() expects the updates to be rank 1 or higher, but the rank was " + e.rank + ".");
    if ("int32" !== t.dtype) throw new Error("The dtype of 'indices' should be int32, but got dtype: " + t.dtype);
    if (n.length < 1) throw new Error("Output rank must be greater or equal to 1, but got shape: " + n);
    if (0 === n.length) {
        if (0 === t.size) throw new Error("Indices specified for empty output. indices shape: " + t.shape);
        if (0 === e.size) throw new Error("Updates specified for empty output. updates shape: " + e.shape);
    }
    validateUpdateShape(n, t, e);
}
function calculateShapes(e, t, n) {
    for(var r = t.rank > 1 ? t.shape[t.rank - 1] : 1, o = n.length, a = 1, i = r; i < o; ++i)a *= n[i];
    var s = r < 1 ? 1 : r;
    return {
        sliceRank: r,
        numUpdates: t.size / s,
        sliceSize: a,
        strides: computeStrides(n.slice(0, r)).concat([
            1
        ]),
        outputSize: sizeFromShape(n)
    };
}
function segOpComputeOptimalWindowSize(e, t) {
    var n, r = !1;
    for(e <= PARALLELIZE_THRESHOLD ? (n = e, r = !0) : n = nearestDivisor(e, Math.floor(Math.sqrt(e))); !r;){
        if (n > t || n === e) {
            r = !0;
            break;
        }
        n = nearestDivisor(e, n + 1);
    }
    return n;
}
function computeOutShape$1(e, t, n) {
    for(var r = [], o = e.length, a = 0; a < o; a++)a !== t ? r.push(e[a]) : r.push(n);
    return r;
}
function collectGatherOpShapeInfo(e, t, n) {
    for(var r = e.shape[n], o = [], a = 1, i = 1, s = 0; s < n; s++)o.push(e.shape[s]), a *= e.shape[s];
    for(s = 0; s < t.rank; s++)o.push(t.shape[s]);
    for(s = n + 1; s < e.rank; s++)o.push(e.shape[s]), i *= e.shape[s];
    return {
        batchSize: a,
        sliceSize: i,
        dimSize: r,
        outputShape: o
    };
}
function assertParamsValid(e, t, n) {
    assert(e.rank === t.length, "Error in slice" + e.rank + "D: Length of begin " + t + " must match the rank of the array (" + e.rank + ")."), assert(e.rank === n.length, "Error in slice" + e.rank + "D: Length of size " + n + " must match the rank of the array (" + e.rank + ").");
    for(var r = 0; r < e.rank; ++r)assert(t[r] + n[r] <= e.shape[r], "Error in slice" + e.rank + "D: begin[" + r + "] + size[" + r + "] (" + (t[r] + n[r]) + ") would overflow input.shape[" + r + "] (" + e.shape[r] + ")");
}
function getStridedSlicedInfo(e, t, n4, r, o2, a, i, s, u) {
    if (void 0 === o2 && (o2 = 0), void 0 === a && (a = 0), void 0 === i && (i = 0), void 0 === s && (s = 0), void 0 === u && (u = 0), 0 !== i) throw new Error("ellipsis mask is not yet supported");
    if (0 !== s) throw new Error("new axis mask is not yet supported");
    for(var l = [], c = [], p = [], d = 0; d < e.length; d++)l[d] = startForAxis(o2, t, r, e, d), c[d] = stopForAxis(a, n4, r, e, d), u & 1 << d && (c[d] = l[d] + 1, p.push(d));
    var h = new Array(e.length).fill(0);
    return h = h.map(function(e, t) {
        for(var n = 0, o = l[t]; !(r[t] > 0 ? o >= c[t] : o <= c[t]); o += r[t])n += 1;
        return n;
    }), [
        l,
        h,
        p
    ];
}
function startForAxis(e, t, n, r, o) {
    var a = t[o];
    e & 1 << o && (a = n[o] > 0 ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER);
    var i = r[o];
    return a < 0 && (a += i), a = clamp(0, a, i - 1);
}
function stopForAxis(e, t, n, r, o) {
    var a = t[o];
    e & 1 << o && (a = n[o] > 0 ? Number.MAX_SAFE_INTEGER : Number.MIN_SAFE_INTEGER);
    var i = r[o];
    return a < 0 && (a += i), a = n[o] > 0 ? clamp(0, a, i) : clamp(-1, a, i - 1);
}
function isSliceContinous(e, t, n) {
    for(var r = n.length, o = 0; o < n.length; o++)if (n[o] > 1) {
        r = o;
        break;
    }
    for(o = r + 1; o < n.length; o++)if (t[o] > 0 || n[o] !== e[o]) return !1;
    return !0;
}
function computeFlatOffset(e, t) {
    for(var n = e.length > 0 ? e[e.length - 1] : 1, r = 0; r < e.length - 1; r++)n += e[r] * t[r];
    return n;
}
function inferShape(e) {
    var t = e;
    if (isTypedArray(e)) return [
        e.length
    ];
    if (!Array.isArray(e)) return [];
    for(var n = []; Array.isArray(t) || isTypedArray(t);)n.push(t.length), t = t[0];
    return Array.isArray(e) && ENV.get("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && deepAssertShapeConsistency(e, n, []), n;
}
function deepAssertShapeConsistency(e, t, n) {
    if (n = n || [], Array.isArray(e) || isTypedArray(e)) {
        assert(t.length > 0, function() {
            return "Element arr[" + n.join("][") + "] should be a primitive, but is an array of " + e.length + " elements";
        }), assert(e.length === t[0], function() {
            return "Element arr[" + n.join("][") + "] should have " + t[0] + " elements, but has " + e.length + " elements";
        });
        for(var r = t.slice(1), o = 0; o < e.length; ++o)deepAssertShapeConsistency(e[o], r, n.concat(o));
    } else assert(0 === t.length, function() {
        return "Element arr[" + n.join("][") + "] is a primitive, but should be an array/TypedArray of " + t[0] + " elements";
    });
}
function assertDtype(e, t, n, r) {
    if (null != e && ("numeric" !== e && e !== t || "numeric" === e && "string" === t)) throw new Error("Argument '" + n + "' passed to '" + r + "' must be " + e + " tensor, but got " + t + " tensor");
}
function convertToTensor(e, t, n, r) {
    if (void 0 === r && (r = "numeric"), e instanceof Tensor) return assertDtype(r, e.dtype, t, n), e;
    var o = inferDtype(e);
    if ("string" !== o && [
        "bool",
        "int32",
        "float32"
    ].indexOf(r) >= 0 && (o = r), assertDtype(r, o, t, n), !isTypedArray(e) && !Array.isArray(e) && "number" != typeof e && "boolean" != typeof e && "string" != typeof e) throw new Error("Argument '" + t + "' passed to '" + n + "' must be a Tensor or TensorLike, but got '" + e.constructor.name + "'");
    var a = inferShape(e);
    isTypedArray(e) || Array.isArray(e) || (e = [
        e
    ]);
    var i = "string" !== o ? toTypedArray(e, o, ENV.get("DEBUG")) : flatten(e);
    return Tensor.make(a, {
        values: i
    }, o);
}
function convertToTensorArray(e41, t, n) {
    if (!Array.isArray(e41)) throw new Error("Argument " + t + " passed to " + n + " must be a `Tensor[]` or `TensorLike[]`");
    return e41.map(function(e, r) {
        return convertToTensor(e, t + "[" + r + "]", n);
    });
}
function op(e42) {
    var t16 = Object.keys(e42);
    if (1 !== t16.length) throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with " + t16.length + " keys.");
    var n = t16[0], r = e42[n];
    n.endsWith("_") && (n = n.substring(0, n.length - 1));
    var o3 = function() {
        for(var e = [], t = 0; t < arguments.length; t++)e[t] = arguments[t];
        ENV.engine.startScope(n);
        try {
            var o = r.apply(void 0, e);
            return o instanceof Promise && console.error("Cannot return a Promise inside of tidy."), ENV.engine.endScope(o), o;
        } catch (e43) {
            throw ENV.engine.endScope(null), e43;
        }
    };
    return Object.defineProperty(o3, "name", {
        value: n,
        configurable: !0
    }), o3;
}
function softmax_(e44, t) {
    void 0 === t && (t = -1);
    var n5 = convertToTensor(e44, "logits", "softmax");
    if (-1 === t && (t = n5.rank - 1), t !== n5.rank - 1) throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank " + n5.rank + " and dim was " + t);
    return customGrad(function(e45) {
        var n6 = e45.logSumExp([
            t
        ], !0), r = e45.toFloat().sub(n6).exp();
        return {
            value: r,
            gradFunc: function(e) {
                var n = e.mul(r);
                return n.sub(n.sum([
                    t
                ], !0).mul(r));
            }
        };
    })(n5);
}
function logSoftmax_(e46, t) {
    void 0 === t && (t = -1);
    var n7 = convertToTensor(e46, "logits", "logSoftmax");
    if (-1 === t && (t = n7.rank - 1), t !== n7.rank - 1) throw Error("Log Softmax along a non-last dimension is not yet supported. Logits was rank " + n7.rank + " and axis was " + t);
    return customGrad(function(e47) {
        var n8 = e47.max(t, !0), r = e47.sub(n8), o = r.toFloat().sub(r.exp().sum(t, !0).log());
        return {
            value: o,
            gradFunc: function(e) {
                var n = o.exp();
                return e.sub(e.sum(t, !0).mul(n));
            }
        };
    })(n7);
}
var softmax = op({
    softmax_: softmax_
}), logSoftmax = op({
    logSoftmax_: logSoftmax_
});
function complex_(e48, t) {
    var n = convertToTensor(e48, "real", "complex"), r = convertToTensor(t, "imag", "complex");
    return assertShapesMatch(n.shape, r.shape, "real and imag shapes, " + n.shape + " and " + r.shape + ", must match in call to tf.complex()."), ENV.engine.runKernel(function(e) {
        return e.complex(n, r);
    }, {
        $real: n,
        $imag: r
    });
}
function real_(e49) {
    var t = convertToTensor(e49, "input", "real");
    return ENV.engine.runKernel(function(e) {
        return e.real(t);
    }, {
        $input: t
    });
}
function imag_(e50) {
    var t = convertToTensor(e50, "input", "imag");
    return ENV.engine.runKernel(function(e) {
        return e.imag(t);
    }, {
        $input: t
    });
}
var complex = op({
    complex_: complex_
}), real = op({
    real_: real_
}), imag = op({
    imag_: imag_
});
function tensor(e, t, n) {
    if (null == n && (n = inferDtype(e)), "complex64" === n) throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
    if (!isTypedArray(e) && !Array.isArray(e) && "number" != typeof e && "boolean" != typeof e && "string" != typeof e) throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
    var r = inferShape(e);
    if (null != t) {
        var o = sizeFromShape(t), a = sizeFromShape(r);
        assert(o === a, function() {
            return "Based on the provided shape, [" + t + "], the tensor should have " + o + " values but has " + a;
        });
        for(var i = 0; i < r.length; ++i){
            var s = r[i], u = i !== r.length - 1 || s !== sizeFromShape(t.slice(i));
            assert(r[i] === t[i] || !u, function() {
                return "Error creating a new Tensor. Inferred shape (" + r + ") does not match the provided shape (" + t + "). ";
            });
        }
    }
    return isTypedArray(e) || Array.isArray(e) || (e = [
        e
    ]), t = t || r, e = "string" !== n ? toTypedArray(e, n, ENV.get("DEBUG")) : flatten(e), Tensor.make(t, {
        values: e
    }, n);
}
function scalar(e, t) {
    if ((isTypedArray(e) || Array.isArray(e)) && "complex64" !== t) throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
    return tensor(e, [], t);
}
function tensor1d(e, t) {
    assertNonNull(e);
    var n = inferShape(e);
    if (1 !== n.length) throw new Error("tensor1d() requires values to be a flat/TypedArray");
    return tensor(e, n, t);
}
function tensor2d(e, t, n) {
    if (assertNonNull(e), null != t && 2 !== t.length) throw new Error("tensor2d() requires shape to have two numbers");
    var r = inferShape(e);
    if (2 !== r.length && 1 !== r.length) throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
    if (1 === r.length && null == t) throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
    return tensor(e, t = t || r, n);
}
function tensor3d(e, t, n) {
    if (assertNonNull(e), null != t && 3 !== t.length) throw new Error("tensor3d() requires shape to have three numbers");
    var r = inferShape(e);
    if (3 !== r.length && 1 !== r.length) throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
    if (1 === r.length && null == t) throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
    return tensor(e, t = t || r, n);
}
function tensor4d(e, t, n) {
    if (assertNonNull(e), null != t && 4 !== t.length) throw new Error("tensor4d() requires shape to have four numbers");
    var r = inferShape(e);
    if (4 !== r.length && 1 !== r.length) throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
    if (1 === r.length && null == t) throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
    return tensor(e, t = t || r, n);
}
function tensor5d(e, t, n) {
    if (assertNonNull(e), null != t && 5 !== t.length) throw new Error("tensor5d() requires shape to have five numbers");
    var r = inferShape(e);
    if (5 !== r.length && 1 !== r.length) throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
    if (1 === r.length && null == t) throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
    return tensor(e, t = t || r, n);
}
function tensor6d(e, t, n) {
    if (assertNonNull(e), null != t && 6 !== t.length) throw new Error("tensor6d() requires shape to have six numbers");
    var r = inferShape(e);
    if (6 !== r.length && 1 !== r.length) throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
    if (1 === r.length && null == t) throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
    return tensor(e, t = t || r, n);
}
function ones$1(e, t) {
    if (void 0 === t && (t = "float32"), "complex64" === t) {
        var n = ones$1(e, "float32"), r = ones$1(e, "float32");
        return complex(n, r);
    }
    var o = makeOnesTypedArray(sizeFromShape(e), t);
    return Tensor.make(e, {
        values: o
    }, t);
}
function zeros(e, t) {
    if (void 0 === t && (t = "float32"), "complex64" === t) {
        var n = zeros(e, "float32"), r = zeros(e, "float32");
        return complex(n, r);
    }
    var o = makeZerosTypedArray(sizeFromShape(e), t);
    return Tensor.make(e, {
        values: o
    }, t);
}
function fill(e, t, n) {
    var r = getArrayFromDType(n = n || inferDtype(t), sizeFromShape(e));
    return r.fill(t), Tensor.make(e, {
        values: r
    }, n);
}
function onesLike_(e) {
    var t = convertToTensor(e, "x", "onesLike");
    return ones$1(t.shape, t.dtype);
}
function zerosLike_(e) {
    var t = convertToTensor(e, "x", "zerosLike");
    return zeros(t.shape, t.dtype);
}
function linspace(e, t, n) {
    if (0 === n) throw new Error("Cannot request zero samples");
    var r = (t - e) / (n - 1), o = makeZerosTypedArray(n, "float32");
    o[0] = e;
    for(var a = 1; a < o.length; a++)o[a] = o[a - 1] + r;
    return tensor1d(o, "float32");
}
function range(e, t, n, r) {
    if (void 0 === n && (n = 1), void 0 === r && (r = "float32"), 0 === n) throw new Error("Cannot have a step of zero");
    if (e === t || e < t && n < 0 || t < e && n > 1) return zeros([
        0
    ], r);
    var o = makeZerosTypedArray(Math.abs(Math.ceil((t - e) / n)), r);
    t < e && 1 === n && (n = -1), o[0] = e;
    for(var a = 1; a < o.length; a++)o[a] = o[a - 1] + n;
    return tensor1d(o, r);
}
var onesLike = op({
    onesLike_: onesLike_
}), zerosLike = op({
    zerosLike_: zerosLike_
}), DataStorage = function() {
    function e51(e) {
        this.dataMover = e, this.data = new WeakMap;
    }
    return e51.prototype.get = function(e) {
        return this.data.has(e) || this.dataMover.moveData(e), this.data.get(e);
    }, e51.prototype.set = function(e, t) {
        this.data.set(e, t);
    }, e51.prototype.has = function(e) {
        return this.data.has(e);
    }, e51.prototype.delete = function(e) {
        return this.data.delete(e);
    }, e51;
}(), KernelBackend = function() {
    function e() {
    }
    return e.prototype.time = function(e) {
        throw new Error("Not yet implemented.");
    }, e.prototype.read = function(e) {
        throw new Error("Not yet implemented.");
    }, e.prototype.readSync = function(e) {
        throw new Error("Not yet implemented.");
    }, e.prototype.disposeData = function(e) {
        throw new Error("Not yet implemented.");
    }, e.prototype.write = function(e, t) {
        throw new Error("Not yet implemented.");
    }, e.prototype.fromPixels = function(e, t) {
        throw new Error("Not yet implemented.");
    }, e.prototype.register = function(e, t, n) {
        throw new Error("Not yet implemented.");
    }, e.prototype.memory = function() {
        throw new Error("Not yet implemented.");
    }, e.prototype.floatPrecision = function() {
        throw new Error("Not yet implemented");
    }, e.prototype.batchMatMul = function(e, t, n, r) {
        throw new Error("Not yet implemented");
    }, e.prototype.fusedBatchMatMul = function(e, t, n, r, o, a) {
        throw new Error("Not yet implemented");
    }, e.prototype.slice = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.stridedSlice = function(e, t, n, r, o, a, i, s, u) {
        throw new Error("Not yet implemented");
    }, e.prototype.unstack = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.reverse = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.concat = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.neg = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.add = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.addN = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.subtract = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.multiply = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.realDivide = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.floorDiv = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.sum = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.prod = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.unsortedSegmentSum = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.argMin = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.argMax = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.equal = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.notEqual = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.less = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.lessEqual = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.greater = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.greaterEqual = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.logicalNot = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.logicalAnd = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.logicalOr = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.where = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.select = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.topk = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.min = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.minimum = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.mod = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.max = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.maximum = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.all = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.any = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.squaredDifference = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.ceil = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.floor = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.round = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.sign = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.pow = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.exp = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.expm1 = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.log = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.log1p = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.sqrt = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.rsqrt = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.square = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.reciprocal = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.relu = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.prelu = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.elu = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.eluDer = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.selu = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.int = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.clip = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.abs = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.complexAbs = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.sigmoid = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.softplus = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.sin = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.cos = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.tan = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.asin = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.acos = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.atan = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.atan2 = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.sinh = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.cosh = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.tanh = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.asinh = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.acosh = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.atanh = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.erf = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.step = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.conv2d = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.conv2dDerInput = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.conv2dDerFilter = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.depthwiseConv2D = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.depthwiseConv2DDerInput = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.depthwiseConv2DDerFilter = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.conv3d = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.conv3dDerInput = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.conv3dDerFilter = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.maxPool = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.maxPoolBackprop = function(e, t, n, r) {
        throw new Error("Not yet implemented");
    }, e.prototype.avgPool = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.avgPoolBackprop = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.reshape = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.cast = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.tile = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.pad = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.transpose = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.gather = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.gatherND = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.scatterND = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.batchToSpaceND = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.spaceToBatchND = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.resizeBilinear = function(e, t, n, r) {
        throw new Error("Not yet implemented");
    }, e.prototype.resizeBilinearBackprop = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.resizeNearestNeighbor = function(e, t, n, r) {
        throw new Error("Not yet implemented");
    }, e.prototype.resizeNearestNeighborBackprop = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.batchNormalization = function(e, t, n, r, o, a) {
        throw new Error("Not yet implemented");
    }, e.prototype.localResponseNormalization4D = function(e, t, n, r, o) {
        throw new Error("Not yet implemented");
    }, e.prototype.LRNGrad = function(e, t, n, r, o, a, i) {
        throw new Error("Not yet implemented");
    }, e.prototype.multinomial = function(e, t, n, r) {
        throw new Error("Not yet implemented");
    }, e.prototype.oneHot = function(e, t, n, r) {
        throw new Error("Not yet implemented");
    }, e.prototype.cumsum = function(e, t, n, r) {
        throw new Error("Not yet implemented");
    }, e.prototype.nonMaxSuppression = function(e, t, n, r, o) {
        throw new Error("Not yet implemented");
    }, e.prototype.fft = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.ifft = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.complex = function(e, t) {
        throw new Error("Not yet implemented");
    }, e.prototype.real = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.imag = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.cropAndResize = function(e, t, n, r, o, a) {
        throw new Error("Not yet implemented");
    }, e.prototype.depthToSpace = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.split = function(e, t, n) {
        throw new Error("Not yet implemented");
    }, e.prototype.sparseToDense = function(e, t, n, r) {
        throw new Error("Not yet implemented");
    }, e.prototype.setDataMover = function(e) {
        throw new Error("Not yet implemented");
    }, e.prototype.dispose = function() {
        throw new Error("Not yet implemented");
    }, e;
}();
function castTensor(e, t, n) {
    if ("complex64" === t) {
        if ("complex64" === e.dtype) return e.clone();
        var r = zeros(e.shape), o = e.toFloat(), a = n.complex(o, r);
        return r.dispose(), o.dispose(), a;
    }
    if (!hasEncodingLoss(e.dtype, t)) return Tensor.make(e.shape, {
        dataId: e.dataId
    }, t);
    if ("complex64" === e.dtype) {
        var i = n.real(e);
        a = i.cast(t);
        return i.dispose(), a;
    }
    if ("int32" === t) return n.int(e);
    if ("bool" === t) {
        var s = scalar(0, e.dtype);
        a = n.notEqual(e, s);
        return s.dispose(), a;
    }
    throw new Error("Error in Cast: unknown dtype argument (" + t + ")");
}
function reshapeTensor(e, t) {
    return Tensor.make(t, {
        dataId: e.dataId
    }, e.dtype);
}
function mergeRealAndImagArrays(e, t) {
    if (e.length !== t.length) throw new Error("Cannot merge real and imag arrays of different lengths. real:" + e.length + ", imag: " + t.length + ".");
    for(var n = new Float32Array(2 * e.length), r = 0; r < n.length; r += 2)n[r] = e[r / 2], n[r + 1] = t[r / 2];
    return n;
}
function splitRealAndImagArrays(e) {
    for(var t = new Float32Array(e.length / 2), n = new Float32Array(e.length / 2), r = 0; r < e.length; r += 2)t[r / 2] = e[r], n[r / 2] = e[r + 1];
    return {
        real: t,
        imag: n
    };
}
function complexWithEvenIndex(e) {
    for(var t = Math.ceil(e.length / 4), n = new Float32Array(t), r = new Float32Array(t), o = 0; o < e.length; o += 4)n[Math.floor(o / 4)] = e[o], r[Math.floor(o / 4)] = e[o + 1];
    return {
        real: n,
        imag: r
    };
}
function complexWithOddIndex(e) {
    for(var t = Math.floor(e.length / 4), n = new Float32Array(t), r = new Float32Array(t), o = 2; o < e.length; o += 4)n[Math.floor(o / 4)] = e[o], r[Math.floor(o / 4)] = e[o + 1];
    return {
        real: n,
        imag: r
    };
}
function getComplexWithIndex(e, t) {
    return {
        real: e[2 * t],
        imag: e[2 * t + 1]
    };
}
function assignToTypedArray(e, t, n, r) {
    e[2 * r] = t, e[2 * r + 1] = n;
}
function exponents(e, t) {
    for(var n = new Float32Array(e / 2), r = new Float32Array(e / 2), o = 0; o < Math.ceil(e / 2); o++){
        var a = (t ? 2 : -2) * Math.PI * (o / e);
        n[o] = Math.cos(a), r[o] = Math.sin(a);
    }
    return {
        real: n,
        imag: r
    };
}
function exponent(e, t, n) {
    var r = (n ? 2 : -2) * Math.PI * (e / t);
    return {
        real: Math.cos(r),
        imag: Math.sin(r)
    };
}
function nonMaxSuppressionImpl(e52, t17, n, r, o) {
    for(var a = Array.from(t17).map(function(e, t) {
        return {
            score: e,
            boxIndex: t
        };
    }).filter(function(e) {
        return e.score > o;
    }).sort(function(e, t) {
        return t.score - e.score;
    }), i = [], s = 0; s < a.length; s++){
        var u = a[s], l = u.score, c = u.boxIndex;
        if (l < o) break;
        for(var p = !1, d = i.length - 1; d >= 0; --d)if (intersectionOverUnion(e52, c, i[d]) >= r) {
            p = !0;
            break;
        }
        if (!p && (i.push(c), i.length >= n)) break;
    }
    return tensor1d(i, "int32");
}
function intersectionOverUnion(e, t, n) {
    var r = e.subarray(4 * t, 4 * t + 4), o = e.subarray(4 * n, 4 * n + 4), a = Math.min(r[0], r[2]), i = Math.min(r[1], r[3]), s = Math.max(r[0], r[2]), u = Math.max(r[1], r[3]), l = Math.min(o[0], o[2]), c = Math.min(o[1], o[3]), p = Math.max(o[0], o[2]), d = Math.max(o[1], o[3]), h = (s - a) * (u - i), f = (p - l) * (d - c);
    if (h <= 0 || f <= 0) return 0;
    var m = Math.max(a, l), g = Math.max(i, c), v = Math.min(s, p), y = Math.min(u, d), x = Math.max(v - m, 0) * Math.max(y - g, 0);
    return x / (h + f - x);
}
function split(e, t18, n) {
    var r = new Array(e.rank).fill(0), o = e.shape.slice();
    return t18.map(function(t) {
        o[n] = t;
        var a = e.slice(r, o);
        return r[n] += t, a;
    });
}
function topkImpl(e53, t19, n, r, o) {
    for(var a = t19[t19.length - 1], i = [
        e53.length / a,
        a
    ], s = i[0], u = i[1], l = getTypedArrayFromDType(n, s * r), c = getTypedArrayFromDType("int32", s * r), p = 0; p < s; p++){
        for(var d = p * u, h = e53.subarray(d, d + u), f = [], m = 0; m < h.length; m++)f.push({
            value: h[m],
            index: m
        });
        f.sort(function(e, t) {
            return t.value - e.value;
        });
        var g = p * r, v = l.subarray(g, g + r), y = c.subarray(g, g + r);
        for(m = 0; m < r; m++)v[m] = f[m].value, y[m] = f[m].index;
    }
    var x = t19.slice();
    return x[x.length - 1] = r, [
        tensor(l, x, n),
        tensor(c, x, "int32")
    ];
}
var ArgMinMaxProgram = function() {
    return function(e, t, n) {
        this.variableNames = [
            "A"
        ];
        var r = e.windowSize, o = e.batchSize, a = e.inSize, i = Math.ceil(a / r);
        n || this.variableNames.push("bestIndicesA"), this.outputShape = [
            o,
            i
        ];
        var s = "max" === t ? ">" : "<", u = n ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
        this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + r + ";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < " + r + "; i++) {\n          int inIdx = " + u + ";\n          float candidate = getA(batch, inIdx);\n          if (candidate " + s + " bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    ";
    };
}(), AvgPool2DBackpropProgram = function() {
    return function(e) {
        this.variableNames = [
            "dy"
        ], this.outputShape = e.inShape;
        var t = e.filterHeight, n = e.filterWidth, r = e.strideHeight, o = e.strideWidth, a = e.dilationHeight, i = e.dilationWidth, s = e.effectiveFilterHeight, u = e.effectiveFilterWidth, l = s - 1 - e.padInfo.top, c = u - 1 - e.padInfo.left, p = 1 / (t * n);
        this.userCode = "\n      const ivec2 pads = ivec2(" + l + ", " + c + ");\n      const float avgMultiplier = float(" + p + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + s + ";\n            wR += " + a + ") {\n          float dyR = float(dyRCorner + wR) / " + r + ".0;\n\n          if (dyR < 0.0 || dyR >= " + e.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + u + ";\n            wC+= " + i + ") {\n            float dyC = float(dyCCorner + wC) / " + o + ".0;\n\n            if (dyC < 0.0 || dyC >= " + e.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    };
}();
function getBroadcastDims(e, t) {
    for(var n = e.length, r = [], o = 0; o < n; o++){
        var a = n - 1 - o, i = e[a] || 1;
        (t[t.length - 1 - o] || 1) > 1 && 1 === i && r.unshift(a);
    }
    return r;
}
function getReductionAxes(e, t) {
    for(var n = [], r = 0; r < t.length; r++){
        var o = e[e.length - r - 1], a = t.length - r - 1, i = t[a];
        (null == o || 1 === o && i > 1) && n.unshift(a);
    }
    return n;
}
function assertAndGetBroadcastShape(e, t) {
    for(var n = [], r = Math.max(e.length, t.length), o = 0; o < r; o++){
        var a = e[e.length - o - 1];
        null == a && (a = 1);
        var i = t[t.length - o - 1];
        if (null == i && (i = 1), 1 === a) n.unshift(i);
        else if (1 === i) n.unshift(a);
        else {
            if (a !== i) throw Error("Operands could not be broadcast together with shapes " + e + " and " + t + ".");
            n.unshift(a);
        }
    }
    return n;
}
var BatchNormProgram = function() {
    return function(e, t, n, r, o, a) {
        this.outputShape = [], this.variableNames = [
            "x",
            "mean",
            "variance"
        ], assertAndGetBroadcastShape(e, t), assertAndGetBroadcastShape(e, n);
        var i = "0.0";
        null != r && (assertAndGetBroadcastShape(e, r), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
        var s = "1.0";
        null != o && (assertAndGetBroadcastShape(e, o), this.variableNames.push("scale"), s = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = "\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = " + i + ";\n        float scale = " + s + ";\n        float inv = scale * inversesqrt(variance + float(" + a + "));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    ";
    };
}(), BatchNormPackedProgram = function() {
    return function(e, t, n, r, o, a) {
        this.usesPackedTextures = !0, this.variableNames = [
            "x",
            "mean",
            "variance"
        ], assertAndGetBroadcastShape(e, t), assertAndGetBroadcastShape(e, n);
        var i = "vec4(0.0)";
        null != r && (assertAndGetBroadcastShape(e, r), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
        var s = "vec4(1.0)";
        null != o && (assertAndGetBroadcastShape(e, o), this.variableNames.push("scale"), s = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = "\n      void main() {\n        vec4 offset = " + i + ";\n        vec4 scale = " + s + ";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(" + a + "));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    ";
    };
}(), COMPLEX_MULTIPLY = {
    REAL: "return areal * breal - aimag * bimag;",
    IMAG: "return areal * bimag + aimag * breal;"
}, BinaryOpComplexProgram = function() {
    return function(e, t, n) {
        this.variableNames = [
            "AReal",
            "AImag",
            "BReal",
            "BImag"
        ], this.outputShape = assertAndGetBroadcastShape(t, n), this.userCode = "\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        " + e + "\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    ";
    };
}(), CHECK_NAN_SNIPPET = "\n  if (isNaN(a)) return a;\n  if (isNaN(b)) return b;\n", ADD = "return a + b;", SUB = "return a - b;", MUL = "return a * b;", DIV = "if (a == b) return 1.0;\n  return a / b;", INT_DIV = "\n  float resultSign = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  int result = ia / ib;\n  int amodb = ia - ib * result;\n\n  if (resultSign < 0.0 && amodb != 0) {\n    result -= 1;\n  }\n  return float(result);\n", POW = "\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n", SQUARED_DIFFERENCE = "return (a - b) * (a - b);", EQUAL = "return float(a == b);", NOT_EQUAL = "return float(a != b);", LESS = "return float(a < b);", LESS_EQUAL = "return float(a <= b);", GREATER = "return float(a > b);", GREATER_EQUAL = "return float(a >= b);", LOGICAL_AND = "return float(a >= 1.0 && b >= 1.0);", LOGICAL_OR = "return float(a >= 1.0 || b >= 1.0);", MAX = CHECK_NAN_SNIPPET + "\n  return max(a, b);\n", MIN = CHECK_NAN_SNIPPET + "\n  return min(a, b);\n", MOD = "if (b == 0.0) return NAN;\n  return mod(a, b);", ATAN2 = CHECK_NAN_SNIPPET + "\n  return atan(a, b);\n", ELU_DER = "return (b >= 1.0) ? a : a * (b + 1.0);", PRELU = "return (a < 0.) ? b * a : a;", BinaryOpProgram = function() {
    function e54(e, t, n) {
        this.variableNames = [
            "A",
            "B"
        ], this.outputShape = assertAndGetBroadcastShape(t, n), this.userCode = "\n      uniform float NAN;\n      float binaryOperation(float a, float b) {\n        " + e + "\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    ";
    }
    return e54.prototype.getCustomSetupFunc = function() {
        var e = this;
        return function(t, n) {
            null == e.startLoc && (e.startLoc = t.getUniformLocationNoThrow(n, "NAN"), null == e.startLoc) || t.gl.uniform1f(e.startLoc, NaN);
        };
    }, e54;
}(), PACKED_DIV = "\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  result.x = a.x == b.x ? 1. : result.x;\n  result.y = a.y == b.y ? 1. : result.y;\n  result.z = a.z == b.z ? 1. : result.z;\n  result.w = a.w == b.w ? 1. : result.w;\n  return result;\n", PACKED_INT_DIV = "\n  vec4 resultSign = sign(a) * sign(b);\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  ivec4 result = ia / ib;\n  ivec4 amodb = ia - ib * result;\n\n  // Vectorize INT_DIV\n  // if (resultSign < 0.0 && amodb != 0) result -= 1;\n  // return float(result);\n  return vec4(result -\n     ivec4(lessThan(resultSign, vec4(0.0))) * ivec4(notEqual(amodb, ivec4(0))));\n", PACKED_POW = "\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n", BinaryOpPackedProgram = function() {
    function e55(e, t, n) {
        this.variableNames = [
            "A",
            "B"
        ], this.supportsBroadcasting = !0, this.usesPackedTextures = !0, this.outputShape = assertAndGetBroadcastShape(t, n), this.userCode = "\n      uniform float NAN;\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        " + e + "\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    ";
    }
    return e55.prototype.getCustomSetupFunc = function() {
        var e = this;
        return function(t, n) {
            null == e.startLoc && (e.startLoc = t.getUniformLocationNoThrow(n, "NAN"), null == e.startLoc) || t.gl.uniform1f(e.startLoc, NaN);
        };
    }, e55;
}(), ClipProgram = function() {
    function e56(e) {
        this.variableNames = [
            "A"
        ], this.outputShape = e, this.userCode = "\n      uniform float min;\n      uniform float max;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isNaN(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, min, max));\n      }\n    ";
    }
    return e56.prototype.getCustomSetupFunc = function(e, t) {
        var n = this;
        return function(r, o) {
            null == n.minLoc && (n.minLoc = r.getUniformLocationNoThrow(o, "min"), n.maxLoc = r.getUniformLocationNoThrow(o, "max")), r.gl.uniform1f(n.minLoc, e), r.gl.uniform1f(n.maxLoc, t);
        };
    }, e56;
}(), ClipPackedProgram = function() {
    function e57(e) {
        this.variableNames = [
            "A"
        ], this.usesPackedTextures = !0, this.outputShape = e, this.userCode = "\n      uniform float min;\n      uniform float max;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (hasNaN(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(min), vec4(max)));\n      }\n    ";
    }
    return e57.prototype.getCustomSetupFunc = function(e, t) {
        var n = this;
        return function(r, o) {
            null == n.minLoc && (n.minLoc = r.getUniformLocationNoThrow(o, "min"), n.maxLoc = r.getUniformLocationNoThrow(o, "max")), r.gl.uniform1f(n.minLoc, e), r.gl.uniform1f(n.maxLoc, t);
        };
    }, e57;
}(), ComplexAbsProgram = function() {
    return function(e) {
        this.variableNames = [
            "real",
            "imag"
        ], this.outputShape = e, this.userCode = "\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    ";
    };
}(), ConcatProgram = function() {
    return function(e) {
        this.outputShape = [], this.outputShape = computeOutShape(e, 1), this.variableNames = e.map(function(e, t) {
            return "T" + t;
        });
        var t20 = new Array(e.length - 1);
        t20[0] = e[0][1];
        for(var n = 1; n < t20.length; n++)t20[n] = t20[n - 1] + e[n][1];
        var r = [
            "if (yC < " + t20[0] + ") setOutput(getT0(yR, yC));"
        ];
        for(n = 1; n < t20.length; n++){
            var o = t20[n - 1];
            r.push("else if (yC < " + t20[n] + ") setOutput(getT" + n + "(yR, yC-" + o + "));");
        }
        var a = t20.length, i = t20[t20.length - 1];
        r.push("else setOutput(getT" + a + "(yR, yC-" + i + "));"), this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        " + r.join("\n        ") + "\n      }\n    ";
    };
}(), Conv2DDerFilterProgram = function() {
    return function(e) {
        this.variableNames = [
            "x",
            "dy"
        ], this.outputShape = e.filterShape;
        var t = e.strideHeight, n = e.strideWidth, r = e.padInfo.top, o = e.padInfo.left;
        this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " + e.batchSize + "; b++) {\n          for (int yR = 0; yR < " + e.outHeight + "; yR++) {\n            int xR = wR + yR * " + t + " - " + r + ";\n\n            if (xR < 0 || xR >= " + e.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + e.outWidth + "; yC++) {\n              int xC = wC + yC * " + n + " - " + o + ";\n\n              if (xC < 0 || xC >= " + e.inWidth + ") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    };
}(), Conv2DDerInputProgram = function() {
    return function(e) {
        this.variableNames = [
            "dy",
            "W"
        ], this.outputShape = e.inShape;
        var t = e.filterHeight, n = e.filterWidth, r = e.strideHeight, o = e.strideWidth, a = t - 1 - e.padInfo.top, i = n - 1 - e.padInfo.left;
        this.userCode = "\n      const ivec2 pads = ivec2(" + a + ", " + i + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + t + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + r + ".0;\n\n          if (dyR < 0.0 || dyR >= " + e.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + t + " - 1 - wR;\n\n          for (int wC = 0; wC < " + n + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + o + ".0;\n\n            if (dyC < 0.0 || dyC >= " + e.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + n + " - 1 - wC;\n\n            for (int d2 = 0; d2 < " + e.outChannels + "; d2++) {\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, d2);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    };
}(), Conv3DDerFilterProgram = function() {
    return function(e) {
        this.variableNames = [
            "x",
            "dy"
        ], this.outputShape = e.filterShape;
        var t = e.strideDepth, n = e.strideHeight, r = e.strideWidth, o = e.padInfo.front, a = e.padInfo.top, i = e.padInfo.left;
        this.userCode = "\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < " + e.batchSize + "; b++) {\n          for (int yF = 0; yF < " + e.outDepth + "; yF++) {\n            int xF = wF + yF * " + t + " - " + o + ";\n\n            if (xF < 0 || xF >= " + e.inDepth + ") {\n              continue;\n            }\n\n            for (int yR = 0; yR < " + e.outHeight + "; yR++) {\n              int xR = wR + yR * " + n + " - " + a + ";\n\n              if (xR < 0 || xR >= " + e.inHeight + ") {\n                continue;\n              }\n\n              for (int yC = 0; yC < " + e.outWidth + "; yC++) {\n                int xC = wC + yC * " + r + " - " + i + ";\n\n                if (xC < 0 || xC >= " + e.inWidth + ") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    };
}(), Conv3DDerInputProgram = function() {
    return function(e) {
        this.variableNames = [
            "dy",
            "W"
        ], this.outputShape = e.inShape;
        var t = e.filterDepth, n = e.filterHeight, r = e.filterWidth, o = e.strideDepth, a = e.strideHeight, i = e.strideWidth, s = t - 1 - e.padInfo.front, u = n - 1 - e.padInfo.top, l = r - 1 - e.padInfo.left;
        this.userCode = "\n      const ivec3 pads = ivec3(" + s + ", " + u + ", " + l + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < " + t + "; wF++) {\n          float dyF = float(dyFCorner + wF) / " + o + ".0;\n\n          if (dyF < 0.0 || dyF >= " + e.outDepth + ".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = " + t + " - 1 - wF;\n\n          for (int wR = 0; wR < " + n + "; wR++) {\n            float dyR = float(dyRCorner + wR) / " + a + ".0;\n\n            if (dyR < 0.0 || dyR >= " + e.outHeight + ".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = " + n + " - 1 - wR;\n\n            for (int wC = 0; wC < " + r + "; wC++) {\n              float dyC = float(dyCCorner + wC) / " + i + ".0;\n\n              if (dyC < 0.0 || dyC >= " + e.outWidth + ".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = " + r + " - 1 - wC;\n\n              for (int d2 = 0; d2 < " + e.outChannels + "; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    };
}(), DepthwiseConv2DDerFilterProgram = function() {
    return function(e) {
        this.variableNames = [
            "x",
            "dy"
        ], this.outputShape = e.filterShape;
        var t = e.strideHeight, n = e.strideWidth, r = e.padInfo.top, o = e.padInfo.left, a = e.outChannels / e.inChannels;
        this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * " + a + " + dm;\n\n        float dotProd = 0.0;\n\n        // TODO: Vec4 over the batch size\n        for (int b = 0; b < " + e.batchSize + "; b++) {\n          for (int yR = 0; yR < " + e.outHeight + "; yR++) {\n            int xR = wR + yR * " + t + " - " + r + ";\n\n            if (xR < 0 || xR >= " + e.inHeight + ") {\n              continue;\n            }\n\n            for (int yC = 0; yC < " + e.outWidth + "; yC++) {\n              int xC = wC + yC * " + n + " - " + o + ";\n\n              if (xC < 0 || xC >= " + e.inWidth + ") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    };
}(), DepthwiseConv2DDerInputProgram = function() {
    return function(e) {
        this.variableNames = [
            "dy",
            "W"
        ], this.outputShape = e.inShape;
        var t = e.filterHeight, n = e.filterWidth, r = e.strideHeight, o = e.strideWidth, a = t - 1 - e.padInfo.top, i = n - 1 - e.padInfo.left, s = e.outChannels / e.inChannels;
        this.userCode = "\n      const ivec2 pads = ivec2(" + a + ", " + i + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < " + t + "; wR++) {\n          float dyR = float(dyRCorner + wR) / " + r + ".0;\n\n          if (dyR < 0.0 || dyR >= " + e.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = " + t + " - 1 - wR;\n\n          for (int wC = 0; wC < " + n + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + o + ".0;\n\n            if (dyC < 0.0 || dyC >= " + e.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = " + n + " - 1 - wC;\n\n            // TODO: Vec4 over the channelMul\n            for (int dm = 0; dm < " + s + "; dm++) {\n              int d2 = d1 * " + s + " + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    };
}(), Conv2DProgram = function() {
    return function(e) {
        this.variableNames = [
            "x",
            "W"
        ], this.outputShape = e.outShape;
        var t = e.padInfo.top, n = e.padInfo.left, r = e.strideHeight, o = e.strideWidth, a = e.dilationHeight, i = e.dilationWidth, s = e.filterHeight, u = e.filterWidth, l = 4 * Math.floor(e.inChannels / 4), c = e.inChannels % 4;
        this.userCode = "\n      const ivec2 strides = ivec2(" + r + ", " + o + ");\n      const ivec2 pads = ivec2(" + t + ", " + n + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + s + "; wR++) {\n          int xR = xRCorner + wR * " + a + ";\n\n          if (xR < 0 || xR >= " + e.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + u + "; wC++) {\n            int xC = xCCorner + wC * " + i + ";\n\n            if (xC < 0 || xC >= " + e.inWidth + ") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < " + l + "; d1 += 4) {\n              vec4 xValues = vec4(\n                getX(batch, xR, xC, d1),\n                getX(batch, xR, xC, d1 + 1),\n                getX(batch, xR, xC, d1 + 2),\n                getX(batch, xR, xC, d1 + 3)\n              );\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              dotProd += dot(xValues, wValues);\n            }\n\n            if (" + (1 === c) + ") {\n              dotProd +=\n                getX(batch, xR, xC, " + l + ") *\n                getW(wR, wC, " + l + ", d2);\n            } else if (" + (2 === c) + ") {\n              vec2 xValues = vec2(\n                getX(batch, xR, xC, " + l + "),\n                getX(batch, xR, xC, " + l + " + 1)\n              );\n              vec2 wValues = vec2(\n                getW(wR, wC, " + l + ", d2),\n                getW(wR, wC, " + l + " + 1, d2)\n              );\n              dotProd += dot(xValues, wValues);\n            } else if (" + (3 === c) + ") {\n              vec3 xValues = vec3(\n                getX(batch, xR, xC, " + l + "),\n                getX(batch, xR, xC, " + l + " + 1),\n                getX(batch, xR, xC, " + l + " + 2)\n              );\n              vec3 wValues = vec3(\n                getW(wR, wC, " + l + ", d2),\n                getW(wR, wC, " + l + " + 1, d2),\n                getW(wR, wC, " + l + " + 2, d2)\n              );\n              dotProd += dot(xValues, wValues);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    };
}(), Conv3DProgram = function() {
    return function(e) {
        this.variableNames = [
            "x",
            "W"
        ], this.outputShape = e.outShape;
        var t = e.padInfo.front, n = e.padInfo.top, r = e.padInfo.left, o = e.strideDepth, a = e.strideHeight, i = e.strideWidth, s = e.dilationDepth, u = e.dilationHeight, l = e.dilationWidth, c = e.filterDepth, p = e.filterHeight, d = e.filterWidth, h = 4 * Math.floor(e.inChannels / 4), f = e.inChannels % 4;
        this.userCode = "\n      const ivec3 strides = ivec3(" + o + ", " + a + ", " + i + ");\n      const ivec3 pads = ivec3(" + t + ", " + n + ", " + r + ");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < " + c + "; wF++) {\n          int xF = xFCorner + wF * " + s + ";\n\n          if (xF < 0 || xF >= " + e.inDepth + ") {\n            continue;\n          }\n\n          for (int wR = 0; wR < " + p + "; wR++) {\n            int xR = xRCorner + wR * " + u + ";\n\n            if (xR < 0 || xR >= " + e.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + d + "; wC++) {\n              int xC = xCCorner + wC * " + l + ";\n\n              if (xC < 0 || xC >= " + e.inWidth + ") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < " + h + "; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (" + (1 === f) + ") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, " + h + ") *\n                  getW(wF, wR, wC, " + h + ", d2);\n              } else if (" + (2 === f) + ") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, " + h + "),\n                  getX(batch, xF, xR, xC, " + h + " + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, " + h + ", d2),\n                  getW(wF, wR, wC, " + h + " + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (" + (3 === f) + ") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, " + h + "),\n                  getX(batch, xF, xR, xC, " + h + " + 1),\n                  getX(batch, xF, xR, xC, " + h + " + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, " + h + ", d2),\n                  getW(wF, wR, wC, " + h + " + 1, d2),\n                  getW(wF, wR, wC, " + h + " + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    };
}(), DepthwiseConv2DProgram = function() {
    return function(e) {
        this.variableNames = [
            "x",
            "W"
        ], this.outputShape = e.outShape;
        var t = e.inHeight, n = e.inWidth, r = e.padInfo.top, o = e.padInfo.left, a = e.strideHeight, i = e.strideWidth, s = e.dilationHeight, u = e.dilationWidth, l = e.filterHeight, c = e.filterWidth, p = e.outChannels / e.inChannels;
        this.userCode = "\n      const ivec2 strides = ivec2(" + a + ", " + i + ");\n      const ivec2 pads = ivec2(" + r + ", " + o + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / " + p + ";\n        int q = d2 - d1 * " + p + ";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TODO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < " + l + "; wR++) {\n          int xR = xRCorner + wR * " + s + ";\n\n          if (xR < 0 || xR >= " + t + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + c + "; wC++) {\n            int xC = xCCorner + wC * " + u + ";\n\n            if (xC < 0 || xC >= " + n + ") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    };
}(), DepthwiseConvPacked2DProgram = function() {
    return function(e) {
        this.variableNames = [
            "x",
            "W"
        ], this.usesPackedTextures = !0, this.outputShape = e.outShape;
        for(var t = e.inHeight, n = e.inWidth, r = e.padInfo.top, o = e.padInfo.left, a = e.strideHeight, i = e.strideWidth, s = e.dilationHeight, u = e.dilationWidth, l = e.filterHeight, c = e.filterWidth, p = c, d = "int xR; int xC; int xCOffset;", h = 0; h < l; h++)for(var f = 0; f < c; f++)d += "\n          vec4 xTexelR" + h + "C" + 2 * f + " = vec4(0.);\n          vec4 wR" + h + "C" + f + " = vec4(0.);\n          vec4 xR" + h + "C" + f + " = vec4(0.);";
        for(h = 0; h < l; h++)for(var m = 0; m < p; m++){
            if (d += "\n          xR = xRCorner + " + h * s + ";\n          xC = xCCorner + " + (f = 2 * m) * u + ";\n        ", 1 === i) {
                if (f < c && (d += o % 2 == 1 ? "\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < " + t + " && xCOffset >= 0 && xCOffset < " + n + ") {\n                  xTexelR" + h + "C" + f + " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" + h + "C" + f + " = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < " + t + " && xCOffset >= 0 && xCOffset < " + n + ") {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n                  xR" + h + "C" + f + " = vec4(previous.zw, xTexelR" + h + "C" + f + ".xy);\n                } else {\n                  xR" + h + "C" + f + " = vec4(0, 0, xTexelR" + h + "C" + f + ".xy);\n                }\n              " : "\n                if(xR >= 0 && xR < " + t + " && xC >= 0 && xC < " + n + ") {\n                  xTexelR" + h + "C" + f + " = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR" + h + "C" + f + " = vec4(0.);\n                }\n\n                xR" + h + "C" + f + " = xTexelR" + h + "C" + f + ";\n              ", f + 1 < c)) {
                    var g = o % 2 == 0 ? nearestLargerEven(u) : u;
                    u % 2 == 0 && o % 2 == 1 || u % 2 != 0 && o % 2 != 1 ? (d += "\n                  xCOffset = xC + " + o % 2 + " + " + g + ";\n\n                  if(xR >= 0 && xR < " + t + " &&\n                    xCOffset >= 0 && xCOffset < " + n + ") {\n                    xTexelR" + h + "C" + (f + 2) + " = getX(batch, xR, xCOffset, d1);\n                  }\n                ", u > 1 && (d += "\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < " + t + " &&\n                      xCOffset >= 0 && xCOffset < " + n + ") {\n                      xTexelR" + h + "C" + f + " = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR" + h + "C" + f + " = vec4(0.);\n                    }\n                  "), d += "\n                  xR" + h + "C" + (f + 1) + " = vec4(\n                    xTexelR" + h + "C" + f + ".zw, xTexelR" + h + "C" + (f + 2) + ".xy);\n                ") : d += "\n                  xCOffset = xC + " + g + ";\n\n                  if(xR >= 0 && xR < " + t + " &&\n                    xCOffset >= 0 && xCOffset < " + n + ") {\n                    xTexelR" + h + "C" + (f + 2) + " = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR" + h + "C" + (f + 1) + " = xTexelR" + h + "C" + (f + 2) + ";\n                ";
                }
            } else f < c && (d += "\n              if(xR >= 0 && xR < " + t + ") {\n            ", o % 2 == 1 ? (d += "\n                xCOffset = xC + 1 - " + i + ";\n                if(xCOffset >= 0 && xCOffset < " + n + ") {\n                  xTexelR" + h + "C" + f + " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" + h + "C" + f + " = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < " + n + ") {\n                  xTexelR" + h + "C" + (f + 2) + " = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR" + h + "C" + (f + 2) + " = vec4(0.);\n                }\n\n                xR" + h + "C" + f + " = vec4(\n                  xTexelR" + h + "C" + f + ".zw, xTexelR" + h + "C" + (f + 2) + ".zw);\n              ", f + 1 < c && (d += "\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + " + i + ";\n                  if(xCOffset >= 0 && xCOffset < " + n + ") {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR" + h + "C" + (f + 1) + " = vec4(xTexelR" + h + "C" + (f + 2) + ".xy, final.xy);\n                ")) : (d += "\n                if(xC >= 0 && xC < " + n + ") {\n                  xTexelR" + h + "C" + f + " = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR" + h + "C" + f + " = vec4(0.);\n                }\n\n                xCOffset = xC + " + i + ";\n                if(xCOffset >= 0 && xCOffset < " + n + ") {\n                  xTexelR" + h + "C" + (f + 2) + " = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR" + h + "C" + (f + 2) + " = vec4(0.);\n                }\n\n                xR" + h + "C" + f + " = vec4(\n                  xTexelR" + h + "C" + f + ".xy, xTexelR" + h + "C" + (f + 2) + ".xy);\n              ", f + 1 < c && (d += "\n                  xR" + h + "C" + (f + 1) + " = vec4(\n                    xTexelR" + h + "C" + f + ".zw, xTexelR" + h + "C" + (f + 2) + ".zw);\n                ")), d += "}");
            f < c && (d += "\n            vec4 wTexelR" + h + "C" + f + " = getW(" + h + ", " + f + ", d1, q);\n            wR" + h + "C" + f + " = vec4(wTexelR" + h + "C" + f + ".xz, wTexelR" + h + "C" + f + ".xz);\n          ", f + 1 < c && (d += "\n              vec4 wTexelR" + h + "C" + (f + 1) + " = getW(" + h + ", " + (f + 1) + ", d1, q);\n              wR" + h + "C" + (f + 1) + " =\n                vec4(wTexelR" + h + "C" + (f + 1) + ".xz, wTexelR" + h + "C" + (f + 1) + ".xz);"));
        }
        for(h = 0; h < l; h++)for(f = 0; f < c; f++)d += "result += xR" + h + "C" + f + " * wR" + h + "C" + f + ";";
        this.userCode = "\n      const ivec2 strides = ivec2(" + a + ", " + i + ");\n      const ivec2 pads = ivec2(" + r + ", " + o + ");\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 result = vec4(0.);\n\n        " + d + "\n\n        setOutput(result);\n      }\n    ";
    };
}(), CropAndResizeProgram = function() {
    return function(e, t, n, r, o) {
        this.variableNames = [
            "Image",
            "Boxes",
            "BoxInd"
        ], this.outputShape = [];
        var a = e[0], i = e[1], s = e[2], u = e[3], l = t[0], c = n[0], p = n[1];
        this.outputShape = [
            l,
            c,
            p,
            u
        ];
        var d = "bilinear" === r ? 1 : 0, h = [
            i - 1 + ".0",
            s - 1 + ".0"
        ], f = h[0], m = h[1], g = c > 1 ? [
            "" + (i - 1) / (c - 1),
            "(y2-y1) * height_ratio",
            "y1*" + f + " + float(y)*(height_scale)"
        ] : [
            "0.0",
            "0.0",
            "0.5 * (y1+y2) * " + f
        ], v = g[0], y = g[1], x = g[2], T = p > 1 ? [
            "" + (s - 1) / (p - 1),
            "(x2-x1) * width_ratio",
            "x1*" + m + " + float(x)*(width_scale)"
        ] : [
            "0.0",
            "0.0",
            "0.5 * (x1+x2) * " + m
        ], w = T[0], E = T[1], b = T[2];
        this.userCode = "\n      const float height_ratio = float(" + v + ");\n      const float width_ratio = float(" + w + ");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= " + a + ") {\n          return;\n        }\n\n        float height_scale = " + y + ";\n        float width_scale = " + E + ";\n\n        float in_y = " + x + ";\n        if( in_y < 0.0 || in_y > " + f + " ) {\n          setOutput(float(" + o + "));\n          return;\n        }\n        float in_x = " + b + ";\n        if( in_x < 0.0 || in_x > " + m + " ) {\n          setOutput(float(" + o + "));\n          return;\n        }\n\n        vec2 sourceFracIndexRC = vec2(in_y,in_x);\n        if(" + d + " == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n          ivec2 sourceCeilRC = ivec2(ceil(sourceFracIndexRC));\n\n          float topLeft = getImage(b, sourceFloorRC.x, sourceFloorRC.y, d);\n          float bottomLeft = getImage(b, sourceCeilRC.x, sourceFloorRC.y, d);\n          float topRight = getImage(b, sourceFloorRC.x, sourceCeilRC.y, d);\n          float bottomRight = getImage(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n          vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n          float top = topLeft + (topRight - topLeft) * fracRC.y;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n          float newValue = top + (bottom - top) * fracRC.x;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestRC = ivec2(floor(\n            sourceFracIndexRC + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestRC.x, sourceNearestRC.y, d);\n          setOutput(newValue);\n        }\n      }\n    ";
    };
}();
function getGlslDifferences() {
    var e, t, n, r, o, a, i, s;
    return 2 === ENV.get("WEBGL_VERSION") ? (e = "#version 300 es", t = "in", n = "out", r = "in", o = "texture", a = "outputColor", i = "out vec4 outputColor;", s = "\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    ") : (e = "", t = "attribute", n = "varying", r = "varying", o = "texture2D", a = "gl_FragColor", i = "", s = "\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "), {
        version: e,
        attribute: t,
        varyingVs: n,
        varyingFs: r,
        texture2D: o,
        output: a,
        defineOutput: i,
        defineRound: s
    };
}
function getLogicalCoordinatesFromFlatIndex(e, t21, n) {
    void 0 === n && (n = "index");
    var r = computeStrides(t21);
    return r.map(function(t, o) {
        return "int " + e[o] + " = " + n + " / " + t + "; " + (o === r.length - 1 ? "int " + e[o + 1] + " = " + n + " - " + e[o] + " * " + t : "index -= " + e[o] + " * " + t) + ";";
    }).join("");
}
function buildVec(e) {
    return 1 === e.length ? "" + e[0] : "vec" + e.length + "(" + e.join(",") + ")";
}
function dotify(e58, t) {
    if (e58.length !== t.length) throw new Error("Vectors to be dotted must be of the same length -got " + e58.length + " and " + t.length);
    for(var n = [], r = Math.floor(e58.length / 4), o = e58.length % 4, a = 0; a < r; a++){
        var i = e58.slice(4 * a, 4 * a + 4), s = t.slice(4 * a, 4 * a + 4);
        n.push(buildVec(i) + ", " + buildVec(s));
    }
    if (0 !== o) {
        i = e58.slice(4 * r), s = t.slice(4 * r);
        1 === i.length && (i = i.map(function(e) {
            return "float(" + e + ")";
        }), s = s.map(function(e) {
            return "float(" + e + ")";
        })), n.push(buildVec(i) + ", " + buildVec(s));
    }
    return n.map(function(e, t) {
        return "dot(" + e + ")";
    }).join("+");
}
function makeShader(e59, t22, n, r) {
    var o = [];
    e59.forEach(function(e) {
        var t = sizeFromShape(e.shapeInfo.logicalShape);
        e.shapeInfo.isUniform ? o.push("uniform float " + e.name + (t > 1 ? "[" + t + "]" : "") + ";") : (o.push("uniform sampler2D " + e.name + ";"), o.push("uniform int offset" + e.name + ";"));
    });
    var a, i, s = o.join("\n"), u = e59.map(function(e) {
        return getInputSamplingSnippet(e, t22, r);
    }).join("\n"), l = t22.texShape, c = getGlslDifferences(), p = getFloatTextureSampleSnippet(c), d = getShaderPrefix(c);
    return t22.isPacked ? (a = getPackedOutputSamplingSnippet(t22.logicalShape, l), i = getFloatTextureSetRGBASnippet(c)) : (a = getOutputSamplingSnippet(t22.logicalShape, l), i = getFloatTextureSetRSnippet(c)), r && (d += SHADER_PACKED_PREFIX), [
        d,
        p,
        i,
        s,
        a,
        u,
        n
    ].join("\n");
}
function getSamplerFromInInfo(e) {
    var t = e.shapeInfo.logicalShape;
    switch(t.length){
        case 0:
            return getSamplerScalar(e);
        case 1:
            return getSampler1D(e);
        case 2:
            return getSampler2D(e);
        case 3:
            return getSampler3D(e);
        case 4:
            return getSampler4D(e);
        case 5:
            return getSampler5D(e);
        case 6:
            return getSampler6D(e);
        default:
            throw new Error(t.length + "-D input sampling is not yet supported");
    }
}
function getPackedSamplerFromInInfo(e) {
    switch(e.shapeInfo.logicalShape.length){
        case 0:
            return getPackedSamplerScalar(e);
        case 1:
            return getPackedSampler1D(e);
        case 2:
            return getPackedSampler2D(e);
        case 3:
            return getPackedSampler3D(e);
        default:
            return getPackedSamplerND(e);
    }
}
function getInputSamplingSnippet(e, t, n) {
    void 0 === n && (n = !1);
    var r = "";
    r += n ? getPackedSamplerFromInInfo(e) : getSamplerFromInInfo(e);
    var o = e.shapeInfo.logicalShape, a = t.logicalShape;
    return o.length <= a.length && (r += n ? getPackedSamplerAtOutputCoords(e, t) : getSamplerAtOutputCoords(e, t)), r;
}
function getPackedOutputSamplingSnippet(e, t) {
    switch(e.length){
        case 0:
            return getOutputScalarCoords();
        case 1:
            return getOutputPacked1DCoords(e, t);
        case 2:
            return getOutputPacked2DCoords(e, t);
        case 3:
            return getOutputPacked3DCoords(e, t);
        default:
            return getOutputPackedNDCoords(e, t);
    }
}
function getOutputSamplingSnippet(e, t) {
    switch(e.length){
        case 0:
            return getOutputScalarCoords();
        case 1:
            return getOutput1DCoords(e, t);
        case 2:
            return getOutput2DCoords(e, t);
        case 3:
            return getOutput3DCoords(e, t);
        case 4:
            return getOutput4DCoords(e, t);
        case 5:
            return getOutput5DCoords(e, t);
        case 6:
            return getOutput6DCoords(e, t);
        default:
            throw new Error(e.length + "-D output sampling is not yet supported");
    }
}
function getFloatTextureSampleSnippet(e) {
    return "\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return " + e.texture2D + "(textureSampler, uv).r;\n    }\n  ";
}
function getFloatTextureSetRSnippet(e) {
    return "\n    void setOutput(float val) {\n      " + e.output + " = vec4(val, 0, 0, 0);\n    }\n  ";
}
function getFloatTextureSetRGBASnippet(e) {
    return "\n    void setOutput(vec4 val) {\n      " + e.output + " = val;\n    }\n  ";
}
function getShaderPrefix(e) {
    var t = "";
    return t = ENV.get("PROD") ? "\n      bool isNaN(float val) {\n        return false;\n      }\n\n      bool hasNaN(vec4 values) {\n        return false;\n      }\n    " : "\n      bool isNaN(float val) {\n        return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n      }\n\n      bool hasNaN(vec4 values) {\n        return any(bvec4(\n          isNaN(values.x),\n          isNaN(values.y),\n          isNaN(values.z),\n          isNaN(values.w)\n        ));\n      }\n    ", e.version + "\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    " + e.varyingFs + " vec2 resultUV;\n    " + e.defineOutput + "\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    " + t + "\n\n    float getNaN(vec4 values) {\n      return dot(vec4(1), values);\n    }\n\n    " + e.defineRound + "\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    " + SAMPLE_1D_SNIPPET + "\n    " + SAMPLE_2D_SNIPPET + "\n    " + SAMPLE_3D_SNIPPET + "\n    " + SAMPLE_5D_SNIPPET + "\n    " + SAMPLE_6D_SNIPPET + "\n  ";
}
var SAMPLE_1D_SNIPPET = "\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n", SAMPLE_2D_SNIPPET = "\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n", SAMPLE_3D_SNIPPET = "\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n", SAMPLE_5D_SNIPPET = "\nvec2 UVfrom5D(int texNumR, int texNumC, int stride0,\n    int stride1, int stride2, int stride3, int row, int col, int depth,\n    int depth2, int depth3) {\n  // Explicitly use integer operations as dot() only works on floats.\n  int index = row * stride0 + col * stride1 +\n              depth * stride2 + depth2 * stride3 + depth3;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n", SAMPLE_6D_SNIPPET = "\nvec2 UVfrom6D(int texNumR, int texNumC, int stride0,\n    int stride1, int stride2, int stride3, int stride4,\n    int row, int col, int depth, int depth2, int depth3, int depth4) {\n  // Explicitly use integer operations as dot() only works on floats.\n  int index = row * stride0 + col * stride1 + depth * stride2 + depth2 *\n    stride3 + depth3 * stride4 + depth4;\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n", SHADER_PACKED_PREFIX = "\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";
function getOutputScalarCoords() {
    return "\n    int getOutputCoords() {\n      return 0;\n    }\n  ";
}
function getOutputPacked1DCoords(e, t) {
    var n = [
        Math.ceil(t[0] / 2),
        Math.ceil(t[1] / 2)
    ];
    return 1 === n[0] ? "\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * " + n[1] + ".0);\n      }\n    " : 1 === n[1] ? "\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * " + n[0] + ".0);\n      }\n    " : "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n[0] + ", " + n[1] + "));\n      return resTexRC.x * " + n[1] + " + resTexRC.y;\n    }\n  ";
}
function getOutput1DCoords(e, t) {
    return 1 === t[0] ? "\n      int getOutputCoords() {\n        return int(resultUV.x * " + t[1] + ".0);\n      }\n    " : 1 === t[1] ? "\n      int getOutputCoords() {\n        return int(resultUV.y * " + t[0] + ".0);\n      }\n    " : "\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + t[0] + ", " + t[1] + "));\n      return resTexRC.x * " + t[1] + " + resTexRC.y;\n    }\n  ";
}
function getOutputPacked3DCoords(e, t) {
    var n = [
        Math.ceil(t[0] / 2),
        Math.ceil(t[1] / 2)
    ], r = Math.ceil(e[2] / 2), o = r * Math.ceil(e[1] / 2);
    return "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n[0] + ", " + n[1] + "));\n      int index = resTexRC.x * " + n[1] + " + resTexRC.y;\n\n      int b = index / " + o + ";\n      index -= b * " + o + ";\n\n      int r = 2 * (index / " + r + ");\n      int c = imod(index, " + r + ") * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";
}
function getOutput3DCoords(e, t) {
    var n = getLogicalCoordinatesFromFlatIndex([
        "r",
        "c",
        "d"
    ], e);
    return "\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + t[0] + ", " + t[1] + "));\n      int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n      " + n + "\n      return ivec3(r, c, d);\n    }\n  ";
}
function getOutputPackedNDCoords(e, t) {
    for(var n = [
        Math.ceil(t[0] / 2),
        Math.ceil(t[1] / 2)
    ], r = Math.ceil(e[e.length - 1] / 2), o = r * Math.ceil(e[e.length - 2] / 2), a = o, i = "", s = "b, r, c", u = 2; u < e.length - 1; u++)i = "\n      int b" + u + " = index / " + (a *= e[e.length - u - 1]) + ";\n      index -= b" + u + " * " + a + ";\n    " + i, s = "b" + u + ", " + s;
    return "\n    ivec" + e.length + " getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n[0] + ", " + n[1] + "));\n      int index = resTexRC.x * " + n[1] + " + resTexRC.y;\n\n      " + i + "\n\n      int b = index / " + o + ";\n      index -= b * " + o + ";\n\n      int r = 2 * (index / " + r + ");\n      int c = imod(index, " + r + ") * 2;\n\n      return ivec" + e.length + "(" + s + ");\n    }\n  ";
}
function getOutput4DCoords(e, t) {
    var n = getLogicalCoordinatesFromFlatIndex([
        "r",
        "c",
        "d",
        "d2"
    ], e);
    return "\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" + t[0] + ", " + t[1] + "));\n      int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n      " + n + "\n      return ivec4(r, c, d, d2);\n    }\n  ";
}
function getOutput5DCoords(e, t) {
    var n = getLogicalCoordinatesFromFlatIndex([
        "r",
        "c",
        "d",
        "d2",
        "d3"
    ], e);
    return "\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(" + t[0] + ",\n                             " + t[1] + "));\n\n      int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n\n      " + n + "\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  ";
}
function getOutput6DCoords(e, t) {
    var n = getLogicalCoordinatesFromFlatIndex([
        "r",
        "c",
        "d",
        "d2",
        "d3",
        "d4"
    ], e);
    return "\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(" + t[0] + ", " + t[1] + "));\n      int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n\n      " + n + "\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  ";
}
function getOutputPacked2DCoords(e, t) {
    var n = [
        Math.ceil(t[0] / 2),
        Math.ceil(t[1] / 2)
    ];
    if (arraysEqual(e, t)) return "\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(" + n[0] + ", " + n[1] + "));\n      }\n    ";
    var r = Math.ceil(e[1] / 2);
    return "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + n[0] + ", " + n[1] + "));\n\n      int index = resTexRC.x * " + n[1] + " + resTexRC.y;\n      int r = 2 * (index / " + r + ");\n      int c = imod(index, " + r + ") * 2;\n\n      return ivec2(r, c);\n    }\n  ";
}
function getOutput2DCoords(e, t) {
    return arraysEqual(e, t) ? "\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(" + t[0] + ", " + t[1] + "));\n      }\n    " : 1 === e[1] ? "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + t[0] + ", " + t[1] + "));\n        int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    " : 1 === e[0] ? "\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(" + t[0] + ", " + t[1] + "));\n        int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n        return ivec2(0, index);\n      }\n    " : "\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(" + t[0] + ", " + t[1] + "));\n      int index = resTexRC.x * " + t[1] + " + resTexRC.y;\n      int r = index / " + e[1] + ";\n      int c = index - r * " + e[1] + ";\n      return ivec2(r, c);\n    }\n  ";
}
function getFlatOffsetUniformName(e) {
    return "offset" + e;
}
function getPackedSamplerScalar(e) {
    var t = e.name;
    return "\n    vec4 " + ("get" + t.charAt(0).toUpperCase() + t.slice(1)) + "() {\n      return " + getGlslDifferences().texture2D + "(" + t + ", halfCR);\n    }\n  ";
}
function getSamplerScalar(e) {
    var t = e.name, n = "get" + t.charAt(0).toUpperCase() + t.slice(1);
    if (e.shapeInfo.isUniform) return "float " + n + "() {return " + t + ";}";
    var r = e.shapeInfo.texShape, o = r[0], a = r[1];
    if (1 === o && 1 === a) return "\n      float " + n + "() {\n        return sampleTexture(" + t + ", halfCR);\n      }\n    ";
    var i = e.shapeInfo.texShape;
    return "\n    float " + n + "() {\n      vec2 uv = uvFromFlat(" + i[0] + ", " + i[1] + ", " + getFlatOffsetUniformName(t) + ");\n      return sampleTexture(" + t + ", uv);\n    }\n  ";
}
function getPackedSampler1D(e) {
    var t = e.name, n = "get" + t.charAt(0).toUpperCase() + t.slice(1), r = e.shapeInfo.texShape, o = [
        Math.ceil(r[0] / 2),
        Math.ceil(r[1] / 2)
    ], a = getGlslDifferences();
    return "\n    vec4 " + n + "(int index) {\n      vec2 uv = packedUVfrom1D(\n        " + o[0] + ", " + o[1] + ", index);\n      return " + a.texture2D + "(" + t + ", uv);\n    }\n  ";
}
function getSampler1D(e) {
    var t = e.name, n = "get" + t.charAt(0).toUpperCase() + t.slice(1);
    if (e.shapeInfo.isUniform) return "\n      float " + n + "(int index) {\n        " + getUniformSampler(e) + "\n      }\n    ";
    var r = e.shapeInfo.texShape, o = r[0], a = r[1];
    if (1 === a && 1 === o) return "\n      float " + n + "(int index) {\n        return sampleTexture(" + t + ", halfCR);\n      }\n    ";
    var i = getFlatOffsetUniformName(t);
    return 1 === a ? "\n      float " + n + "(int index) {\n        vec2 uv = vec2(0.5, (float(index + " + i + ") + 0.5) / " + o + ".0);\n        return sampleTexture(" + t + ", uv);\n      }\n    " : 1 === o ? "\n      float " + n + "(int index) {\n        vec2 uv = vec2((float(index + " + i + ") + 0.5) / " + a + ".0, 0.5);\n        return sampleTexture(" + t + ", uv);\n      }\n    " : "\n    float " + n + "(int index) {\n      vec2 uv = uvFromFlat(" + o + ", " + a + ", index + " + i + ");\n      return sampleTexture(" + t + ", uv);\n    }\n  ";
}
function getPackedSampler2D(e) {
    var t = e.shapeInfo.logicalShape, n = e.name, r = "get" + n.charAt(0).toUpperCase() + n.slice(1), o = e.shapeInfo.texShape, a = o[0], i = o[1], s = getGlslDifferences();
    if (null != o && arraysEqual(t, o)) return "\n      vec4 " + r + "(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(" + i + ".0, " + a + ".0);\n\n        return " + s.texture2D + "(" + n + ", uv);\n      }\n    ";
    var u = [
        Math.ceil(o[0] / 2),
        Math.ceil(o[1] / 2)
    ];
    return "\n    vec4 " + r + "(int row, int col) {\n      vec2 uv = packedUVfrom2D(" + Math.ceil(t[1] / 2) + ", " + u[0] + ", " + u[1] + ", row, col);\n      return " + s.texture2D + "(" + n + ", uv);\n    }\n  ";
}
function getSampler2D(e) {
    var t = e.shapeInfo.logicalShape, n = e.name, r = "get" + n.charAt(0).toUpperCase() + n.slice(1), o = e.shapeInfo.texShape;
    if (null != o && arraysEqual(t, o)) {
        var a = o[0];
        return "\n    float " + r + "(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(" + o[1] + ".0, " + a + ".0);\n      return sampleTexture(" + n + ", uv);\n    }\n  ";
    }
    var i = squeezeShape(t), s = i.newShape, u = i.keptDims, l = s;
    if (l.length < t.length) return "\n      " + getSamplerFromInInfo(squeezeInputInfo(e, l)) + "\n      float " + r + "(int row, int col) {\n        return " + r + "(" + getSqueezedParams([
        "row",
        "col"
    ], u) + ");\n      }\n    ";
    if (e.shapeInfo.isUniform) return "\n      float " + r + "(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(" + t[1] + ", 1)));\n        " + getUniformSampler(e) + "\n      }\n    ";
    var c = o[0], p = o[1], d = getFlatOffsetUniformName(n);
    return 1 === p ? "\n    float " + r + "(int row, int col) {\n      float index = dot(vec3(row, col, " + d + "), vec3(" + t[1] + ", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / " + c + ".0);\n      return sampleTexture(" + n + ", uv);\n    }\n  " : 1 === c ? "\n    float " + r + "(int row, int col) {\n      float index = dot(vec3(row, col, " + d + "), vec3(" + t[1] + ", 1, 1));\n      vec2 uv = vec2((index + 0.5) / " + p + ".0, 0.5);\n      return sampleTexture(" + n + ", uv);\n    }\n  " : "\n  float " + r + "(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * " + t[1] + " + col + " + d + ";\n    vec2 uv = uvFromFlat(" + c + ", " + p + ", index);\n    return sampleTexture(" + n + ", uv);\n  }\n";
}
function getPackedSampler3D(e) {
    var t = e.shapeInfo.logicalShape, n = e.name, r = "get" + n.charAt(0).toUpperCase() + n.slice(1), o = e.shapeInfo.texShape, a = [
        Math.ceil(o[0] / 2),
        Math.ceil(o[1] / 2)
    ];
    if (1 === t[0]) return "\n        " + getPackedSamplerFromInInfo(squeezeInputInfo(e, t.slice(1))) + "\n        vec4 " + r + "(int b, int row, int col) {\n          return " + r + "(" + getSqueezedParams([
        "b",
        "row",
        "col"
    ], [
        1,
        2
    ]) + ");\n        }\n      ";
    var i = a[0], s = a[1], u = Math.ceil(t[2] / 2);
    return "\n    vec4 " + r + "(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        " + i + ", " + s + ", " + u * Math.ceil(t[1] / 2) + ", " + u + ", b, row, col);\n      return " + getGlslDifferences().texture2D + "(" + n + ", uv);\n    }\n  ";
}
function getSampler3D(e) {
    var t = e.shapeInfo.logicalShape, n = e.name, r = "get" + n.charAt(0).toUpperCase() + n.slice(1), o = t[1] * t[2], a = t[2], i = squeezeShape(t), s = i.newShape, u = i.keptDims, l = s;
    if (l.length < t.length) return "\n        " + getSamplerFromInInfo(squeezeInputInfo(e, l)) + "\n        float " + r + "(int row, int col, int depth) {\n          return " + r + "(" + getSqueezedParams([
        "row",
        "col",
        "depth"
    ], u) + ");\n        }\n      ";
    if (e.shapeInfo.isUniform) return "\n      float " + r + "(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(" + o + ", " + a + ", 1)));\n        " + getUniformSampler(e) + "\n      }\n    ";
    var c = e.shapeInfo.texShape, p = c[0], d = c[1], h = e.shapeInfo.flatOffset;
    return d === o && null == h ? "\n        float " + r + "(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(" + a + ", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(" + d + ".0, " + p + ".0);\n          return sampleTexture(" + n + ", uv);\n        }\n      " : d === a && null == h ? "\n    float " + r + "(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(" + t[1] + ", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + d + ".0, " + p + ".0);\n      return sampleTexture(" + n + ", uv);\n    }\n  " : "\n      float " + r + "(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * " + o + " + col * " + a + " + depth + " + getFlatOffsetUniformName(n) + ";\n        vec2 uv = uvFromFlat(" + p + ", " + d + ", index);\n        return sampleTexture(" + n + ", uv);\n      }\n  ";
}
function getPackedSamplerND(e) {
    for(var t = e.shapeInfo.logicalShape, n = t.length, r = e.name, o = "get" + r.charAt(0).toUpperCase() + r.slice(1), a = e.shapeInfo.texShape, i = [
        Math.ceil(a[0] / 2),
        Math.ceil(a[1] / 2)
    ], s = i[0], u = i[1], l = Math.ceil(t[n - 1] / 2), c = l * Math.ceil(t[n - 2] / 2), p = "int b, int row, int col", d = "b * " + c + " + (row / 2) * " + l + " + (col / 2)", h = 2; h < n - 1; h++)p = "int b" + h + ", " + p, d = "b" + h + " * " + (c *= t[n - h - 1]) + " + " + d;
    return "\n    vec4 " + o + "(" + p + ") {\n      int index = " + d + ";\n      int texR = index / " + u + ";\n      int texC = index - texR * " + u + ";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + u + ", " + s + ");\n      return " + getGlslDifferences().texture2D + "(" + r + ", uv);\n    }\n  ";
}
function getSampler4D(e) {
    var t = e.shapeInfo.logicalShape, n = e.name, r = "get" + n.charAt(0).toUpperCase() + n.slice(1), o = t[3], a = t[2] * o, i = t[1] * a, s = squeezeShape(t), u = s.newShape, l = s.keptDims;
    if (u.length < t.length) return "\n      " + getSamplerFromInInfo(squeezeInputInfo(e, u)) + "\n      float " + r + "(int row, int col, int depth, int depth2) {\n        return " + r + "(" + getSqueezedParams([
        "row",
        "col",
        "depth",
        "depth2"
    ], l) + ");\n      }\n    ";
    if (e.shapeInfo.isUniform) return "\n      float " + r + "(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(" + i + ", " + a + ", " + o + ", 1)));\n        " + getUniformSampler(e) + "\n      }\n    ";
    var c = e.shapeInfo.flatOffset, p = e.shapeInfo.texShape, d = p[0], h = p[1];
    return h === i && null == c ? "\n      float " + r + "(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(" + a + ", " + o + ", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + h + ".0, " + d + ".0);\n        return sampleTexture(" + n + ", uv);\n      }\n    " : h === o && null == c ? "\n      float " + r + "(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(" + t[1] * t[2] + ", " + t[2] + ", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + h + ".0, " + d + ".0);\n        return sampleTexture(" + n + ", uv);\n      }\n    " : "\n    float " + r + "(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + i + " + col * " + a + " +\n          depth * " + o + " + depth2;\n      vec2 uv = uvFromFlat(" + d + ", " + h + ", index + " + getFlatOffsetUniformName(n) + ");\n      return sampleTexture(" + n + ", uv);\n    }\n  ";
}
function getSampler5D(e) {
    var t = e.shapeInfo.logicalShape, n = e.name, r = "get" + n.charAt(0).toUpperCase() + n.slice(1), o = t[4], a = t[3] * o, i = t[2] * a, s = t[1] * i, u = squeezeShape(t), l = u.newShape, c = u.keptDims;
    if (l.length < t.length) return "\n      " + getSamplerFromInInfo(squeezeInputInfo(e, l)) + "\n      float " + r + "(int row, int col, int depth, int depth2, int depth3) {\n        return " + r + "(" + getSqueezedParams([
        "row",
        "col",
        "depth",
        "depth2",
        "depth3"
    ], c) + ");\n      }\n    ";
    if (e.shapeInfo.isUniform) return "\n      float " + r + "(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + s + ", " + i + ", " + a + ", " + o + ")) +\n          depth3;\n        " + getUniformSampler(e) + "\n      }\n    ";
    var p = e.shapeInfo.flatOffset, d = e.shapeInfo.texShape, h = d[0], f = d[1];
    return f === s && null == p ? "\n      float " + r + "(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(" + i + ", " + a + ", " + o + ", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + f + ".0, " + h + ".0);\n        return sampleTexture(" + n + ", uv);\n      }\n    " : f === o && null == p ? "\n      float " + r + "(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + t[1] * t[2] * t[3] + ",\n               " + t[2] * t[3] + ", " + t[3] + ", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + f + ".0, " + h + ".0);\n        return sampleTexture(" + n + ", uv);\n      }\n    " : "\n    float " + r + "(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + s + " + col * " + i + " + depth * " + a + " +\n          depth2 * " + o + " + depth3 + " + getFlatOffsetUniformName(n) + ";\n      vec2 uv = uvFromFlat(" + h + ", " + f + ", index);\n      return sampleTexture(" + n + ", uv);\n    }\n  ";
}
function getSampler6D(e) {
    var t = e.shapeInfo.logicalShape, n = e.name, r = "get" + n.charAt(0).toUpperCase() + n.slice(1), o = squeezeShape(t), a = o.newShape, i = o.keptDims;
    if (a.length < t.length) return "\n      " + getSamplerFromInInfo(squeezeInputInfo(e, a)) + "\n      float " + r + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return " + r + "(" + getSqueezedParams([
        "row",
        "col",
        "depth",
        "depth2",
        "depth3",
        "depth4"
    ], i) + ");\n      }\n    ";
    var s = t[5], u = t[4] * s, l = t[3] * u, c = t[2] * l, p = t[1] * c;
    if (e.shapeInfo.isUniform) return "\n      float " + r + "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(" + p + ", " + c + ", " + l + ", " + u + ")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(" + s + ", 1)));\n        " + getUniformSampler(e) + "\n      }\n    ";
    var d = e.shapeInfo.flatOffset, h = e.shapeInfo.texShape, f = h[0], m = h[1];
    return m === p && null == d ? "\n      float " + r + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(" + c + ", " + l + ", " + u + ", " + s + ")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(" + m + ".0, " + f + ".0);\n        return sampleTexture(" + n + ", uv);\n      }\n    " : m === s && null == d ? "\n      float " + r + "(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(" + t[1] * t[2] * t[3] * t[4] + ",\n               " + t[2] * t[3] * t[4] + ",\n               " + t[3] * t[4] + ",\n               " + t[4] + ")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(" + m + ".0, " + f + ".0);\n        return sampleTexture(" + n + ", uv);\n      }\n    " : "\n    float " + r + "(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * " + p + " + col * " + c + " + depth * " + l + " +\n          depth2 * " + u + " + depth3 * " + s + " + depth4 + " + getFlatOffsetUniformName(n) + ";\n      vec2 uv = uvFromFlat(" + f + ", " + m + ", index);\n      return sampleTexture(" + n + ", uv);\n    }\n  ";
}
function getUniformSampler(e) {
    var t = e.name, n = sizeFromShape(e.shapeInfo.logicalShape);
    return 1 === n ? "return " + t + ";" : "\n    for (int i = 0; i < " + n + "; i++) {\n      if (i == index) {\n        return " + t + "[i];\n      }\n    }\n  ";
}
function getPackedSamplerAtOutputCoords(e, t) {
    var n, r = e.name, o = r.charAt(0).toUpperCase() + r.slice(1), a = "get" + o + "AtOutCoords", i = e.shapeInfo.logicalShape.length, s = t.logicalShape.length, u = getBroadcastDims(e.shapeInfo.logicalShape, t.logicalShape), l = getCoordsDataType(s), c = s - i, p = [
        "x",
        "y",
        "z",
        "w",
        "u",
        "v"
    ];
    n = 0 === i ? "" : s < 2 && u.length >= 1 ? "coords = 0;" : u.map(function(e) {
        return "coords." + p[e + c] + " = 0;";
    }).join("\n");
    var d = "";
    d = s < 2 && i > 0 ? "coords" : e.shapeInfo.logicalShape.map(function(e, t) {
        return "coords." + p[t + c];
    }).join(", ");
    var h = "return outputValue;";
    if (1 === i && s > 1) h = "\n      return vec4(outputValue.xy, outputValue.xy);\n    ";
    else if (0 === i && s > 0) h = 1 === s ? "\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      " : "\n        return vec4(outputValue.x);\n      ";
    else if (u.length) {
        var f = i - 2, m = i - 1;
        u.indexOf(f) > -1 && u.indexOf(m) > -1 ? h = "return vec4(outputValue.x);" : u.indexOf(f) > -1 ? h = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : u.indexOf(m) > -1 && (h = "return vec4(outputValue.xx, outputValue.zz);");
    }
    return "\n    vec4 " + a + "() {\n      " + l + " coords = getOutputCoords();\n      " + n + "\n      vec4 outputValue = get" + o + "(" + d + ");\n      " + h + "\n    }\n  ";
}
function getSamplerAtOutputCoords(e, t) {
    var n = e.name, r = n.charAt(0).toUpperCase() + n.slice(1), o = "get" + r + "AtOutCoords", a = t.texShape, i = e.shapeInfo.texShape, s = e.shapeInfo.logicalShape.length, u = t.logicalShape.length;
    if (!e.shapeInfo.isUniform && s === u && null == e.shapeInfo.flatOffset && arraysEqual(i, a)) return "\n      float " + o + "() {\n        return sampleTexture(" + n + ", resultUV);\n      }\n    ";
    var l = getCoordsDataType(u), c = getBroadcastDims(e.shapeInfo.logicalShape, t.logicalShape), p = u - s, d = [
        "x",
        "y",
        "z",
        "w",
        "u",
        "v"
    ];
    return "\n    float " + o + "() {\n      " + l + " coords = getOutputCoords();\n      " + (0 === s ? "" : u < 2 && c.length >= 1 ? "coords = 0;" : c.map(function(e) {
        return "coords." + d[e + p] + " = 0;";
    }).join("\n")) + "\n      return get" + r + "(" + (u < 2 && s > 0 ? "coords" : e.shapeInfo.logicalShape.map(function(e, t) {
        return "coords." + d[t + p];
    }).join(", ")) + ");\n    }\n  ";
}
function getCoordsDataType(e) {
    if (e <= 1) return "int";
    if (2 === e) return "ivec2";
    if (3 === e) return "ivec3";
    if (4 === e) return "ivec4";
    if (5 === e) return "ivec5";
    if (6 === e) return "ivec6";
    throw Error("GPU for rank " + e + " is not yet supported");
}
function squeezeInputInfo(e, t) {
    var n = JSON.parse(JSON.stringify(e));
    return n.shapeInfo.logicalShape = t, n;
}
function getSqueezedParams(e, t) {
    return t.map(function(t) {
        return e[t];
    }).join(", ");
}
var CumSumProgram = function() {
    return function(e, t, n) {
        this.variableNames = [
            "x"
        ], this.outputShape = e;
        var r = e.length, o = e[e.length - 1], a = n ? "<" : ">";
        this.userCode = "\n      int getIndex(int i) {\n        " + (n ? "return " + o + " -i - 1;" : "return i;") + "\n      }\n\n      void main() {\n        " + getCoordsDataType(r) + " coords = getOutputCoords();\n        int end = " + getFinalCoord(r, "coords") + ";\n        float val = 0.0;\n        for (int i = " + o + " - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx " + a + " end) {\n            continue;\n          }\n          if (idx == end && " + t + ") {\n            continue;\n          }\n          " + getFinalCoord(r, "coords") + " = idx;\n          val += getX(" + getCoords(r, "coords") + ");\n        }\n        setOutput(val);\n      }\n    ";
    };
}();
function getCoords(e, t) {
    if (1 === e) return "" + t;
    if (2 === e) return t + ".x, " + t + ".y";
    if (3 === e) return t + ".x, " + t + ".y, " + t + ".z";
    if (4 === e) return t + ".x, " + t + ".y, " + t + ".z, " + t + ".w";
    throw Error("Cumulative sum for rank " + e + " is not yet supported");
}
function getFinalCoord(e, t) {
    if (1 === e) return "" + t;
    if (2 === e) return t + ".y";
    if (3 === e) return t + ".z";
    if (4 === e) return t + ".w";
    throw Error("Cumulative sum for rank " + e + " is not yet supported");
}
var DepthToSpaceProgram = function() {
    function e60(e, t, n) {
        this.variableNames = [
            "x"
        ], this.outputShape = [], this.outputShape = e, this.blockSize = t, this.dataFormat = n, this.userCode = "\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = " + this.getHeightCoordString() + ";\n      int w = " + this.getWidthCoordString() + ";\n      int d = " + this.getDepthCoordString() + ";\n\n      int in_h = h / " + t + ";\n      int offset_h = imod(h, " + t + ");\n      int in_w = w / " + t + ";\n      int offset_w = imod(w, " + t + ");\n      int offset_d = (offset_h * " + t + " + offset_w) *\n        " + this.getOutputDepthSize() + ";\n      int in_d = d + offset_d;\n\n      float result = " + this.getInputSamplingString() + ";\n      setOutput(result);\n    }\n  ";
    }
    return e60.prototype.getHeightCoordString = function() {
        return "NHWC" === this.dataFormat ? "coords[1]" : "coords[2]";
    }, e60.prototype.getWidthCoordString = function() {
        return "NHWC" === this.dataFormat ? "coords[2]" : "coords[3]";
    }, e60.prototype.getDepthCoordString = function() {
        return "NHWC" === this.dataFormat ? "coords[3]" : "coords[1]";
    }, e60.prototype.getOutputDepthSize = function() {
        return "NHWC" === this.dataFormat ? this.outputShape[3] : this.outputShape[1];
    }, e60.prototype.getInputSamplingString = function() {
        return "NHWC" === this.dataFormat ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
    }, e60;
}(), EncodeFloatProgram = function() {
    return function(e) {
        this.variableNames = [
            "A"
        ];
        var t = getGlslDifferences();
        this.outputShape = e, this.userCode = "\n      const float FLOAT_MAX = 1.70141184e38;\n      const float FLOAT_MIN = 1.17549435e-38;\n\n      lowp vec4 encode_float(highp float v) {\n        if (isNaN(v)) {\n          return vec4(255, 255, 255, 255);\n        }\n\n        highp float av = abs(v);\n\n        if(av < FLOAT_MIN) {\n          return vec4(0.0, 0.0, 0.0, 0.0);\n        } else if(v > FLOAT_MAX) {\n          return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n        } else if(v < -FLOAT_MAX) {\n          return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n        }\n\n        highp vec4 c = vec4(0,0,0,0);\n\n        highp float e = floor(log2(av));\n        highp float m = exp2(fract(log2(av))) - 1.0;\n\n        c[2] = floor(128.0 * m);\n        m -= c[2] / 128.0;\n        c[1] = floor(32768.0 * m);\n        m -= c[1] / 32768.0;\n        c[0] = floor(8388608.0 * m);\n\n        highp float ebias = e + 127.0;\n        c[3] = floor(ebias / 2.0);\n        ebias -= c[3] * 2.0;\n        c[2] += floor(ebias) * 128.0;\n\n        c[3] += 128.0 * step(0.0, -v);\n\n        return c / 255.0;\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        " + t.output + " = encode_float(x);\n      }\n    ";
    };
}(), COMPLEX_FFT = {
    REAL: "return real * expR - imag * expI;",
    IMAG: "return real * expI + imag * expR;"
}, FFTProgram = function() {
    return function(e, t, n) {
        this.variableNames = [
            "real",
            "imag"
        ];
        var r = t[1];
        this.outputShape = t;
        var o = n ? "2.0 * " + Math.PI : "-2.0 * " + Math.PI, a = n ? r + ".0" : "1.0";
        this.userCode = "\n      const float exponentMultiplier = " + o + ";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        " + e + "\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(" + r + ");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < " + r + "; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / " + a + ";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    ";
    };
}(), FromPixelsProgram = function() {
    return function(e) {
        this.variableNames = [
            "A"
        ];
        var t = getGlslDifferences(), n = e[0], r = e[1];
        this.outputShape = e, this.userCode = "\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(" + r + ".0, " + n + ".0);\n\n        vec4 values = " + t.texture2D + "(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    ";
    };
}(), GatherProgram = function() {
    return function(e, t, n) {
        this.variableNames = [
            "A",
            "indices"
        ];
        var r = e.slice();
        r[n] = t, this.outputShape = r, this.rank = r.length;
        var o = getCoordsDataType(this.rank), a = getSourceCoords(e, n);
        this.userCode = "\n      void main() {\n        " + o + " resRC = getOutputCoords();\n        setOutput(getA(" + a + "));\n      }\n    ";
    };
}();
function getSourceCoords(e, t) {
    var n = e.length;
    if (n > 4) throw Error("Gather for rank " + n + " is not yet supported");
    if (1 === n) return "int(getIndices(resRC))";
    for(var r = [
        "resRC.x",
        "resRC.y",
        "resRC.z",
        "resRC.w"
    ], o = [], a = 0; a < e.length; a++)a === t ? o.push("int(getIndices(" + r[a] + "))") : o.push("" + r[a]);
    return o.join();
}
var TextureUsage, PhysicalTextureType, GatherNDProgram = function() {
    return function(e, t, n) {
        this.sliceDim = e, this.strides = t, this.variableNames = [
            "x",
            "indices"
        ], this.outputShape = n;
        var r = getCoordsDataType(t.length), o = getCoordsDataType(n.length), a = this.sliceDim > 1 ? "strides[j]" : "strides";
        this.userCode = "\n        " + r + " strides = " + r + "(" + this.strides + ");\n         void main() {\n          " + o + " coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < " + this.sliceDim + "; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * " + a + ";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      ";
    };
}();
function getUnpackedMatrixTextureShapeWidthHeight(e, t) {
    return [
        t,
        e
    ];
}
function getUnpackedArraySizeFromMatrixSize(e, t) {
    return e * t;
}
function getMatrixSizeFromUnpackedArraySize(e, t) {
    if (e % t != 0) throw new Error("unpackedSize (" + e + ") must be a multiple of " + t);
    return e / t;
}
function encodeMatrixToUnpackedArray(e, t, n) {
    var r = getUnpackedArraySizeFromMatrixSize(e.length, n);
    if (t.length < r) throw new Error("unpackedArray length (" + t.length + ") must be >= " + r);
    for(var o = 0, a = 0; a < e.length; ++a)t[o] = e[a], o += n;
}
function decodeMatrixFromUnpackedArray(e, t, n) {
    var r = getMatrixSizeFromUnpackedArraySize(e.length, n);
    if (t.length < r) throw new Error("matrix length (" + t.length + ") must be >= " + r);
    for(var o = 0, a = 0; a < e.length; a += n)t[o++] = e[a];
}
function getPackedMatrixTextureShapeWidthHeight(e, t) {
    return [
        Math.max(1, Math.ceil(t / 2)),
        Math.max(1, Math.ceil(e / 2))
    ];
}
function getPackedRGBAArraySizeFromMatrixShape(e, t) {
    var n = getPackedMatrixTextureShapeWidthHeight(e, t);
    return n[0] * n[1] * 4;
}
function encodeMatrixToPackedRGBA(e, t, n, r, o) {
    for(var a = r % 2 == 1, i = n % 2 == 1, s = Math.floor(r / 2), u = Math.floor(n / 2), l = Math.ceil(r / 2), c = l * Math.ceil(n / 2), p = nearestLargerEven(n) * nearestLargerEven(r), d = 0; d < t; d++){
        for(var h = d * n * r, f = d * p, m = a ? 4 : 0, g = r, v = f, y = 0; y < u; ++y){
            for(var x = 2 * y * r, T = 0; T < s; ++T){
                var w = h + x + 2 * T;
                o[v] = e[w], o[v + 1] = e[w + 1], o[v + 2] = e[w + g], o[v + 3] = e[w + g + 1], v += 4;
            }
            v += m;
        }
        if (a) {
            w = h + r - 1, v = f + 4 * (l - 1);
            var E = 2 * r;
            for(m = 4 * l, y = 0; y < u; ++y)o[v] = e[w], o[v + 2] = e[w + r], w += E, v += m;
        }
        if (i) {
            for(w = h + (n - 1) * r, v = f + 4 * (c - l), T = 0; T < s; ++T)o[v++] = e[w++], o[v++] = e[w++], v += 2;
            a && i && (o[f + p - 4] = e[w]);
        }
    }
    return o;
}
function decodeMatrixFromPackedRGBA(e, t, n, r, o) {
    var a = n * r;
    if (o.length < a) throw new Error("matrix length (" + o.length + ") must be >= " + a);
    for(var i = r % 2 == 1, s = n % 2 == 1, u = Math.floor(r / 2), l = Math.floor(n / 2), c = Math.ceil(r / 2), p = c * Math.ceil(n / 2), d = nearestLargerEven(n) * nearestLargerEven(r), h = 0; h < t; h++){
        for(var f = h * n * r, m = h * d, g = i ? 4 : 0, v = r + (i ? 1 : 0), y = m, x = f, T = f + r, w = 0; w < l; ++w){
            for(var E = 0; E < u; ++E)o[x++] = e[y++], o[x++] = e[y++], o[T++] = e[y++], o[T++] = e[y++];
            y += g, x += v, T += v;
        }
        if (i) {
            y = m + 4 * (c - 1);
            var b = f + r - 1;
            for(g = 4 * c, v = 2 * r, w = 0; w < l; ++w)o[b] = e[y], o[b + r] = e[y + 2], y += g, b += v;
        }
        if (s) {
            for(y = m + 4 * (p - c), b = f + (n - 1) * r, E = 0; E < u; ++E)o[b++] = e[y++], o[b++] = e[y++], y += 2;
            i && (o[f + n * r - 1] = e[y]);
        }
    }
    return o;
}
function callAndCheck(e, t) {
    var n = t();
    return checkWebGLError(e), n;
}
!function(e) {
    e[e.RENDER = 0] = "RENDER", e[e.UPLOAD = 1] = "UPLOAD", e[e.PIXELS = 2] = "PIXELS", e[e.DOWNLOAD = 3] = "DOWNLOAD";
}(TextureUsage || (TextureUsage = {
})), (function(e) {
    e[e.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", e[e.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", e[e.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", e[e.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", e[e.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16";
})(PhysicalTextureType || (PhysicalTextureType = {
}));
var webGLDebugErrorCheckingEnabled = !1;
function enableDebugWebGLErrorChecking(e) {
    webGLDebugErrorCheckingEnabled = e;
}
function checkWebGLError(e) {
    if (webGLDebugErrorCheckingEnabled) {
        var t = e.getError();
        if (t !== e.NO_ERROR) throw new Error("WebGL Error: " + getWebGLErrorMessage(e, t));
    }
}
var MIN_FLOAT16 = 0.0000000596, MAX_FLOAT16 = 65504;
function canBeRepresented(e) {
    return !!(ENV.get("WEBGL_RENDER_FLOAT32_ENABLED") || 0 === e || MIN_FLOAT16 < Math.abs(e) && Math.abs(e) < MAX_FLOAT16);
}
function getWebGLErrorMessage(e, t) {
    switch(t){
        case e.NO_ERROR:
            return "NO_ERROR";
        case e.INVALID_ENUM:
            return "INVALID_ENUM";
        case e.INVALID_VALUE:
            return "INVALID_VALUE";
        case e.INVALID_OPERATION:
            return "INVALID_OPERATION";
        case e.INVALID_FRAMEBUFFER_OPERATION:
            return "INVALID_FRAMEBUFFER_OPERATION";
        case e.OUT_OF_MEMORY:
            return "OUT_OF_MEMORY";
        case e.CONTEXT_LOST_WEBGL:
            return "CONTEXT_LOST_WEBGL";
        default:
            return "Unknown error code " + t;
    }
}
function getExtensionOrThrow(e, t) {
    return throwIfNull(e, function() {
        return e.getExtension(t);
    }, 'Extension "' + t + '" not supported on this browser.');
}
function createVertexShader(e, t) {
    var n = throwIfNull(e, function() {
        return e.createShader(e.VERTEX_SHADER);
    }, "Unable to create vertex WebGLShader.");
    if (callAndCheck(e, function() {
        return e.shaderSource(n, t);
    }), callAndCheck(e, function() {
        return e.compileShader(n);
    }), !1 === e.getShaderParameter(n, e.COMPILE_STATUS)) throw console.log(e.getShaderInfoLog(n)), new Error("Failed to compile vertex shader.");
    return n;
}
function createFragmentShader(e, t) {
    var n = throwIfNull(e, function() {
        return e.createShader(e.FRAGMENT_SHADER);
    }, "Unable to create fragment WebGLShader.");
    if (callAndCheck(e, function() {
        return e.shaderSource(n, t);
    }), callAndCheck(e, function() {
        return e.compileShader(n);
    }), !1 === e.getShaderParameter(n, e.COMPILE_STATUS)) throw logShaderSourceAndInfoLog(t, e.getShaderInfoLog(n)), new Error("Failed to compile fragment shader.");
    return n;
}
var lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;
function logShaderSourceAndInfoLog(e61, t23) {
    var n = lineNumberRegex.exec(t23);
    if (null == n) return console.log("Couldn't parse line number in error: " + t23), void console.log(e61);
    for(var r = +n[1], o = e61.split("\n"), a = o.length.toString().length + 2, i = o.map(function(e, t) {
        return rightPad((t + 1).toString(), a) + e;
    }), s = 0, u = 0; u < i.length; u++)s = Math.max(i[u].length, s);
    var l = i.slice(0, r - 1), c = i.slice(r - 1, r), p = i.slice(r);
    console.log(l.join("\n")), console.log(t23.split("\n")[0]), console.log("%c " + rightPad(c[0], s), "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(p.join("\n"));
}
function createProgram(e) {
    return throwIfNull(e, function() {
        return e.createProgram();
    }, "Unable to create WebGLProgram.");
}
function linkProgram(e, t) {
    if (callAndCheck(e, function() {
        return e.linkProgram(t);
    }), !1 === e.getProgramParameter(t, e.LINK_STATUS)) throw console.log(e.getProgramInfoLog(t)), new Error("Failed to link vertex and fragment shaders.");
}
function validateProgram(e, t) {
    if (callAndCheck(e, function() {
        return e.validateProgram(t);
    }), !1 === e.getProgramParameter(t, e.VALIDATE_STATUS)) throw console.log(e.getProgramInfoLog(t)), new Error("Shader program validation failed.");
}
function createStaticVertexBuffer(e, t) {
    var n = throwIfNull(e, function() {
        return e.createBuffer();
    }, "Unable to create WebGLBuffer");
    return callAndCheck(e, function() {
        return e.bindBuffer(e.ARRAY_BUFFER, n);
    }), callAndCheck(e, function() {
        return e.bufferData(e.ARRAY_BUFFER, t, e.STATIC_DRAW);
    }), n;
}
function createStaticIndexBuffer(e, t) {
    var n = throwIfNull(e, function() {
        return e.createBuffer();
    }, "Unable to create WebGLBuffer");
    return callAndCheck(e, function() {
        return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, n);
    }), callAndCheck(e, function() {
        return e.bufferData(e.ELEMENT_ARRAY_BUFFER, t, e.STATIC_DRAW);
    }), n;
}
function getNumChannels() {
    return 2 === ENV.get("WEBGL_VERSION") ? 1 : 4;
}
function createTexture(e) {
    return throwIfNull(e, function() {
        return e.createTexture();
    }, "Unable to create WebGLTexture.");
}
function validateTextureSize(e, t) {
    var n = ENV.get("WEBGL_MAX_TEXTURE_SIZE");
    if (e <= 0 || t <= 0) {
        var r = "[" + e + "x" + t + "]";
        throw new Error("Requested texture size " + r + " is invalid.");
    }
    if (e > n || t > n) {
        r = "[" + e + "x" + t + "]";
        throw new Error("Requested texture size " + r + " greater than WebGL maximum on this browser / GPU " + ("[" + n + "x" + n + "]") + ".");
    }
}
function createFramebuffer(e) {
    return throwIfNull(e, function() {
        return e.createFramebuffer();
    }, "Unable to create WebGLFramebuffer.");
}
function bindVertexBufferToProgramAttribute(e, t, n, r, o, a, i) {
    var s = e.getAttribLocation(t, n);
    return -1 !== s && (callAndCheck(e, function() {
        return e.bindBuffer(e.ARRAY_BUFFER, r);
    }), callAndCheck(e, function() {
        return e.vertexAttribPointer(s, o, e.FLOAT, !1, a, i);
    }), callAndCheck(e, function() {
        return e.enableVertexAttribArray(s);
    }), !0);
}
function bindTextureUnit(e, t, n) {
    validateTextureUnit(e, n), callAndCheck(e, function() {
        return e.activeTexture(e.TEXTURE0 + n);
    }), callAndCheck(e, function() {
        return e.bindTexture(e.TEXTURE_2D, t);
    });
}
function unbindTextureUnit(e, t) {
    validateTextureUnit(e, t), callAndCheck(e, function() {
        return e.activeTexture(e.TEXTURE0 + t);
    }), callAndCheck(e, function() {
        return e.bindTexture(e.TEXTURE_2D, null);
    });
}
function getProgramUniformLocationOrThrow(e, t, n) {
    return throwIfNull(e, function() {
        return e.getUniformLocation(t, n);
    }, 'uniform "' + n + '" not present in program.');
}
function getProgramUniformLocation(e, t, n) {
    return e.getUniformLocation(t, n);
}
function bindTextureToProgramUniformSampler(e, t, n, r, o) {
    callAndCheck(e, function() {
        return bindTextureUnit(e, n, o);
    }), callAndCheck(e, function() {
        return e.uniform1i(r, o);
    });
}
function bindCanvasToFramebuffer(e) {
    callAndCheck(e, function() {
        return e.bindFramebuffer(e.FRAMEBUFFER, null);
    }), callAndCheck(e, function() {
        return e.viewport(0, 0, e.canvas.width, e.canvas.height);
    }), callAndCheck(e, function() {
        return e.scissor(0, 0, e.canvas.width, e.canvas.height);
    });
}
function bindColorTextureToFramebuffer(e, t, n) {
    callAndCheck(e, function() {
        return e.bindFramebuffer(e.FRAMEBUFFER, n);
    }), callAndCheck(e, function() {
        return e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, t, 0);
    });
}
function unbindColorTextureFromFramebuffer(e, t) {
    callAndCheck(e, function() {
        return e.bindFramebuffer(e.FRAMEBUFFER, t);
    }), callAndCheck(e, function() {
        return e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, null, 0);
    });
}
function validateFramebuffer(e) {
    var t = e.checkFramebufferStatus(e.FRAMEBUFFER);
    if (t !== e.FRAMEBUFFER_COMPLETE) throw new Error("Error binding framebuffer: " + getFramebufferErrorMessage(e, t));
}
function getFramebufferErrorMessage(e, t) {
    switch(t){
        case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
            return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
        case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
            return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
        case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
            return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
        case e.FRAMEBUFFER_UNSUPPORTED:
            return "FRAMEBUFFER_UNSUPPORTED";
        default:
            return "unknown error " + t;
    }
}
function throwIfNull(e, t, n) {
    var r = callAndCheck(e, function() {
        return t();
    });
    if (null == r) throw new Error(n);
    return r;
}
function validateTextureUnit(e, t) {
    var n = e.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, r = t + e.TEXTURE0;
    if (r < e.TEXTURE0 || r > n) throw new Error("textureUnit must be in " + ("[gl.TEXTURE0, gl.TEXTURE" + n + "]") + ".");
}
function getBatchDim(e, t) {
    return void 0 === t && (t = 2), sizeFromShape(e.slice(0, e.length - t));
}
function getRowsCols(e) {
    if (0 === e.length) throw Error("Cannot get rows and columns of an empty shape array.");
    return [
        e.length > 1 ? e[e.length - 2] : 1,
        e[e.length - 1]
    ];
}
function getTextureShapeFromLogicalShape(e62, t) {
    var n9;
    void 0 === t && (t = !1);
    var r = ENV.get("WEBGL_MAX_TEXTURE_SIZE");
    if (t && (r *= 2, 1 === (e62 = e62.map(function(t, n) {
        return n >= e62.length - 2 ? nearestLargerEven(e62[n]) : e62[n];
    })).length && (e62 = [
        2,
        e62[0]
    ])), 2 !== e62.length) {
        var o = squeezeShape(e62);
        e62 = o.newShape;
    }
    var a = sizeFromShape(e62);
    if (e62.length <= 1 && a <= r) return [
        1,
        a
    ];
    if (2 === e62.length && e62[0] <= r && e62[1] <= r) return e62;
    if (3 === e62.length && e62[0] * e62[1] <= r && e62[2] <= r) return [
        e62[0] * e62[1],
        e62[2]
    ];
    if (3 === e62.length && e62[0] <= r && e62[1] * e62[2] <= r) return [
        e62[0],
        e62[1] * e62[2]
    ];
    if (4 === e62.length && e62[0] * e62[1] * e62[2] <= r && e62[3] <= r) return [
        e62[0] * e62[1] * e62[2],
        e62[3]
    ];
    if (4 === e62.length && e62[0] <= r && e62[1] * e62[2] * e62[3] <= r) return [
        e62[0],
        e62[1] * e62[2] * e62[3]
    ];
    if (t) {
        var i = getBatchDim(e62), s = 2, u = 2;
        return e62.length && (s = (n9 = getRowsCols(e62))[0], u = n9[1]), sizeToSquarishShape(a = i * (s / 2) * (u / 2)).map(function(e) {
            return 2 * e;
        });
    }
    return sizeToSquarishShape(a);
}
function isEven(e) {
    return e % 2 == 0;
}
function isReshapeFree(e, t) {
    if (arraysEqual(e = e.slice(-2), t = t.slice(-2))) return !0;
    if (!e.length || !t.length) return !0;
    if (0 === e[0] || 0 === e[1] || 0 === t[0] || 0 === t[1]) return !0;
    if (e.length !== t.length) {
        var n = e.slice(-1)[0], r = t.slice(-1)[0];
        if (n === r) return !0;
        if (isEven(n) && isEven(r) && (1 === e[0] || 1 === t[0])) return !0;
    }
    return e[1] === t[1] && isEven(e[0]) && isEven(t[0]);
}
var webgl_util = Object.freeze({
    callAndCheck: callAndCheck,
    enableDebugWebGLErrorChecking: enableDebugWebGLErrorChecking,
    checkWebGLError: checkWebGLError,
    canBeRepresented: canBeRepresented,
    getWebGLErrorMessage: getWebGLErrorMessage,
    getExtensionOrThrow: getExtensionOrThrow,
    createVertexShader: createVertexShader,
    createFragmentShader: createFragmentShader,
    createProgram: createProgram,
    linkProgram: linkProgram,
    validateProgram: validateProgram,
    createStaticVertexBuffer: createStaticVertexBuffer,
    createStaticIndexBuffer: createStaticIndexBuffer,
    getNumChannels: getNumChannels,
    createTexture: createTexture,
    validateTextureSize: validateTextureSize,
    createFramebuffer: createFramebuffer,
    bindVertexBufferToProgramAttribute: bindVertexBufferToProgramAttribute,
    bindTextureUnit: bindTextureUnit,
    unbindTextureUnit: unbindTextureUnit,
    getProgramUniformLocationOrThrow: getProgramUniformLocationOrThrow,
    getProgramUniformLocation: getProgramUniformLocation,
    bindTextureToProgramUniformSampler: bindTextureToProgramUniformSampler,
    bindCanvasToFramebuffer: bindCanvasToFramebuffer,
    bindColorTextureToFramebuffer: bindColorTextureToFramebuffer,
    unbindColorTextureFromFramebuffer: unbindColorTextureFromFramebuffer,
    validateFramebuffer: validateFramebuffer,
    getFramebufferErrorMessage: getFramebufferErrorMessage,
    getBatchDim: getBatchDim,
    getRowsCols: getRowsCols,
    getTextureShapeFromLogicalShape: getTextureShapeFromLogicalShape,
    isReshapeFree: isReshapeFree
});
function createVertexShader$1(e) {
    var t = getGlslDifferences();
    return createVertexShader(e, t.version + "\n    precision highp float;\n    " + t.attribute + " vec3 clipSpacePos;\n    " + t.attribute + " vec2 uv;\n    " + t.varyingVs + " vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }");
}
function createVertexBuffer(e) {
    return createStaticVertexBuffer(e, new Float32Array([
        -1,
        1,
        0,
        0,
        1,
        -1,
        -1,
        0,
        0,
        0,
        1,
        1,
        0,
        1,
        1,
        1,
        -1,
        0,
        1,
        0
    ]));
}
function createIndexBuffer(e) {
    return createStaticIndexBuffer(e, new Uint16Array([
        0,
        1,
        2,
        2,
        1,
        3
    ]));
}
function getTextureConfig(e, t) {
    var n, r, o, a, i, s, u, l = e;
    return 2 === ENV.get("WEBGL_VERSION") ? (n = l.R32F, r = l.R16F, o = l.RGBA32F, a = l.RED, i = 4, s = 1, u = l.HALF_FLOAT) : (n = e.RGBA, r = e.RGBA, o = l.RGBA, a = e.RGBA, i = 4, s = 4, u = null != t ? t.HALF_FLOAT_OES : null), {
        internalFormatFloat: n,
        internalFormatHalfFloat: r,
        internalFormatPackedFloat: o,
        textureFormatFloat: a,
        downloadTextureFormat: e.RGBA,
        downloadUnpackNumChannels: i,
        defaultNumChannels: s,
        textureTypeHalfFloat: u
    };
}
function createAndConfigureTexture(e, t, n, r, o, a) {
    validateTextureSize(t, n);
    var i = createTexture(e), s = e.TEXTURE_2D;
    return callAndCheck(e, function() {
        return e.bindTexture(s, i);
    }), callAndCheck(e, function() {
        return e.texParameteri(s, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE);
    }), callAndCheck(e, function() {
        return e.texParameteri(s, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE);
    }), callAndCheck(e, function() {
        return e.texParameteri(s, e.TEXTURE_MIN_FILTER, e.NEAREST);
    }), callAndCheck(e, function() {
        return e.texParameteri(s, e.TEXTURE_MAG_FILTER, e.NEAREST);
    }), callAndCheck(e, function() {
        return e.texImage2D(s, 0, r, t, n, 0, o, a, null);
    }), callAndCheck(e, function() {
        return e.bindTexture(e.TEXTURE_2D, null);
    }), i;
}
function createFloat32MatrixTexture(e, t, n, r) {
    var o = getUnpackedMatrixTextureShapeWidthHeight(t, n);
    return createAndConfigureTexture(e, o[0], o[1], r.internalFormatFloat, r.textureFormatFloat, e.FLOAT);
}
function createFloat16MatrixTexture(e, t, n, r) {
    var o = getUnpackedMatrixTextureShapeWidthHeight(t, n);
    return createAndConfigureTexture(e, o[0], o[1], r.internalFormatFloat, r.textureFormatFloat, r.textureTypeHalfFloat);
}
function createUnsignedBytesMatrixTexture(e, t, n, r) {
    var o = getUnpackedMatrixTextureShapeWidthHeight(t, n);
    return createAndConfigureTexture(e, o[0], o[1], e.RGBA, e.RGBA, e.UNSIGNED_BYTE);
}
function createPackedMatrixTexture(e, t, n, r) {
    var o = getPackedMatrixTextureShapeWidthHeight(t, n);
    return createAndConfigureTexture(e, o[0], o[1], r.internalFormatPackedFloat, e.RGBA, e.FLOAT);
}
function createFloat16PackedMatrixTexture(e, t, n, r) {
    var o = getPackedMatrixTextureShapeWidthHeight(t, n);
    return createAndConfigureTexture(e, o[0], o[1], r.internalFormatHalfFloat, e.RGBA, r.textureTypeHalfFloat);
}
function bindVertexProgramAttributeStreams(e, t, n) {
    return callAndCheck(e, function() {
        return e.bindBuffer(e.ARRAY_BUFFER, n);
    }), bindVertexBufferToProgramAttribute(e, t, "clipSpacePos", n, 3, 20, 0) && bindVertexBufferToProgramAttribute(e, t, "uv", n, 2, 20, 12);
}
function uploadPixelDataToTexture(e, t, n) {
    callAndCheck(e, function() {
        return e.bindTexture(e.TEXTURE_2D, t);
    }), callAndCheck(e, function() {
        return e.texImage2D(e.TEXTURE_2D, 0, e.RGBA, e.RGBA, e.UNSIGNED_BYTE, n);
    }), callAndCheck(e, function() {
        return e.bindTexture(e.TEXTURE_2D, null);
    });
}
function uploadDataToTexture(e, t, n, r, o, a) {
    validateTextureSize(n, r), callAndCheck(e, function() {
        return e.bindTexture(e.TEXTURE_2D, t);
    }), callAndCheck(e, function() {
        return e.texSubImage2D(e.TEXTURE_2D, 0, 0, 0, n, r, a, e.FLOAT, o);
    }), callAndCheck(e, function() {
        return e.bindTexture(e.TEXTURE_2D, null);
    });
}
function uploadMatrixToTexture(e, t, n, r, o, a, i) {
    var s, u = getUnpackedMatrixTextureShapeWidthHeight(n, r), l = u[0], c = u[1], p = n * r;
    1 === i.defaultNumChannels && p === o.length ? s = o : encodeMatrixToUnpackedArray(o, s = new Float32Array(p * a), a), uploadDataToTexture(e, t, l, c, s, i.textureFormatFloat);
}
function uploadMatrixToPackedTexture(e, t, n, r, o, a, i, s, u) {
    var l = getPackedMatrixTextureShapeWidthHeight(a, i), c = l[0], p = l[1], d = new Float32Array(getPackedRGBAArraySizeFromMatrixShape(a, i));
    encodeMatrixToPackedRGBA(s, n, r, o, d), uploadDataToTexture(e, t, c, p, d, e.RGBA);
}
function maybeCreateBufferFromOutputTexture(e, t, n, r, o) {
    var a = t;
    if (2 === ENV.get("WEBGL_VERSION")) {
        var i = e, s = i.createBuffer();
        callAndCheck(e, function() {
            return e.bindBuffer(i.PIXEL_PACK_BUFFER, s);
        });
        var u = 4 * getUnpackedArraySizeFromMatrixSize(n * r, o.downloadUnpackNumChannels);
        callAndCheck(e, function() {
            return e.bufferData(i.PIXEL_PACK_BUFFER, u, i.STREAM_READ);
        }), callAndCheck(e, function() {
            return i.readPixels(0, 0, r, n, e.RGBA, e.FLOAT, 0);
        }), callAndCheck(e, function() {
            return e.bindBuffer(i.PIXEL_PACK_BUFFER, null);
        }), a = s;
    }
    return a;
}
function downloadFloat32MatrixFromBuffer(e, t, n, r, o) {
    var a = e, i = new Float32Array(getUnpackedArraySizeFromMatrixSize(n * r, o.downloadUnpackNumChannels));
    a.bindBuffer(a.PIXEL_PACK_BUFFER, t), a.getBufferSubData(a.PIXEL_PACK_BUFFER, 0, i), a.bindBuffer(a.PIXEL_PACK_BUFFER, null);
    var s = new Float32Array(n * r);
    return decodeMatrixFromUnpackedArray(i, s, o.downloadUnpackNumChannels), s;
}
function downloadFloat32MatrixFromOutputTexture(e, t, n, r) {
    var o = getUnpackedMatrixTextureShapeWidthHeight(t, n), a = o[0], i = o[1], s = new Float32Array(getUnpackedArraySizeFromMatrixSize(t * n, r.downloadUnpackNumChannels));
    callAndCheck(e, function() {
        return e.readPixels(0, 0, a, i, r.downloadTextureFormat, e.FLOAT, s);
    });
    var u = new Float32Array(t * n);
    return decodeMatrixFromUnpackedArray(s, u, r.downloadUnpackNumChannels), u;
}
function downloadByteEncodedFloatMatrixFromOutputTexture(e, t, n, r) {
    var o = getUnpackedMatrixTextureShapeWidthHeight(t, n), a = o[0], i = o[1], s = new Uint8Array(getUnpackedArraySizeFromMatrixSize(t * n, 4));
    return callAndCheck(e, function() {
        return e.readPixels(0, 0, a, i, r.downloadTextureFormat, e.UNSIGNED_BYTE, s);
    }), new Float32Array(s.buffer);
}
function downloadPackedMatrixFromBuffer(e, t, n, r, o, a, i, s) {
    var u = e, l = new Float32Array(getPackedRGBAArraySizeFromMatrixShape(a, i));
    u.bindBuffer(u.PIXEL_PACK_BUFFER, t), u.getBufferSubData(u.PIXEL_PACK_BUFFER, 0, l), u.bindBuffer(u.PIXEL_PACK_BUFFER, null);
    var c = new Float32Array(sizeFromShape([
        n,
        r,
        o
    ]));
    return decodeMatrixFromPackedRGBA(l, n, r, o, c), c;
}
function downloadMatrixFromPackedOutputTexture(e, t, n, r, o, a, i) {
    var s = getPackedMatrixTextureShapeWidthHeight(o, a), u = s[0], l = s[1], c = new Float32Array(getPackedRGBAArraySizeFromMatrixShape(o, a));
    callAndCheck(e, function() {
        return e.readPixels(0, 0, u, l, e.RGBA, e.FLOAT, c);
    });
    var p = new Float32Array(sizeFromShape([
        t,
        n,
        r
    ]));
    return decodeMatrixFromPackedRGBA(c, t, n, r, p);
}
var gpgpu_util = Object.freeze({
    createVertexShader: createVertexShader$1,
    createVertexBuffer: createVertexBuffer,
    createIndexBuffer: createIndexBuffer,
    getTextureConfig: getTextureConfig,
    createFloat32MatrixTexture: createFloat32MatrixTexture,
    createFloat16MatrixTexture: createFloat16MatrixTexture,
    createUnsignedBytesMatrixTexture: createUnsignedBytesMatrixTexture,
    createPackedMatrixTexture: createPackedMatrixTexture,
    createFloat16PackedMatrixTexture: createFloat16PackedMatrixTexture,
    bindVertexProgramAttributeStreams: bindVertexProgramAttributeStreams,
    uploadPixelDataToTexture: uploadPixelDataToTexture,
    uploadMatrixToTexture: uploadMatrixToTexture,
    uploadMatrixToPackedTexture: uploadMatrixToPackedTexture,
    maybeCreateBufferFromOutputTexture: maybeCreateBufferFromOutputTexture,
    downloadFloat32MatrixFromBuffer: downloadFloat32MatrixFromBuffer,
    downloadFloat32MatrixFromOutputTexture: downloadFloat32MatrixFromOutputTexture,
    downloadByteEncodedFloatMatrixFromOutputTexture: downloadByteEncodedFloatMatrixFromOutputTexture,
    downloadPackedMatrixFromBuffer: downloadPackedMatrixFromBuffer,
    downloadMatrixFromPackedOutputTexture: downloadMatrixFromPackedOutputTexture
}), GPGPUContext = function() {
    function e63(e) {
        this.outputTexture = null, this.program = null, this.disposed = !1, this.autoDebugValidate = !1, this.vertexAttrsAreBound = !1, this.itemsToPoll = [], this.gl = null != e ? e : getWebGLContext(ENV.get("WEBGL_VERSION")), 1 === ENV.get("WEBGL_VERSION") ? (this.textureFloatExtension = getExtensionOrThrow(this.gl, "OES_texture_float"), this.colorBufferFloatExtension = this.gl.getExtension("WEBGL_color_buffer_float"), ENV.get("WEBGL_RENDER_FLOAT32_ENABLED") || (this.textureHalfFloatExtension = getExtensionOrThrow(this.gl, "OES_texture_half_float"), this.colorBufferHalfFloatExtension = this.gl.getExtension("EXT_color_buffer_half_float"))) : this.colorBufferFloatExtension = getExtensionOrThrow(this.gl, "EXT_color_buffer_float"), this.vertexBuffer = createVertexBuffer(this.gl), this.indexBuffer = createIndexBuffer(this.gl), this.framebuffer = createFramebuffer(this.gl), this.textureConfig = getTextureConfig(this.gl, this.textureHalfFloatExtension);
    }
    return e63.prototype.dispose = function() {
        var e = this;
        if (!this.disposed) {
            null != this.program && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), null != this.outputTexture && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
            var t = this.gl;
            callAndCheck(t, function() {
                return t.finish();
            }), callAndCheck(t, function() {
                return t.bindFramebuffer(t.FRAMEBUFFER, null);
            }), callAndCheck(t, function() {
                return t.deleteFramebuffer(e.framebuffer);
            }), callAndCheck(t, function() {
                return t.bindBuffer(t.ARRAY_BUFFER, null);
            }), callAndCheck(t, function() {
                return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, null);
            }), callAndCheck(t, function() {
                return t.deleteBuffer(e.indexBuffer);
            }), this.disposed = !0;
        }
    }, e63.prototype.enableAutomaticDebugValidation = function(e) {
        this.autoDebugValidate = e, enableDebugWebGLErrorChecking(e);
    }, e63.prototype.createFloat32MatrixTexture = function(e, t) {
        return this.throwIfDisposed(), createFloat32MatrixTexture(this.gl, e, t, this.textureConfig);
    }, e63.prototype.createFloat16MatrixTexture = function(e, t) {
        return this.throwIfDisposed(), createFloat16MatrixTexture(this.gl, e, t, this.textureConfig);
    }, e63.prototype.createUnsignedBytesMatrixTexture = function(e, t) {
        return this.throwIfDisposed(), createUnsignedBytesMatrixTexture(this.gl, e, t, this.textureConfig);
    }, e63.prototype.uploadPixelDataToTexture = function(e, t) {
        this.throwIfDisposed(), uploadPixelDataToTexture(this.gl, e, t);
    }, e63.prototype.createFloat16PackedMatrixTexture = function(e, t) {
        return this.throwIfDisposed(), createFloat16PackedMatrixTexture(this.gl, e, t, this.textureConfig);
    }, e63.prototype.createPackedMatrixTexture = function(e, t) {
        return this.throwIfDisposed(), createPackedMatrixTexture(this.gl, e, t, this.textureConfig);
    }, e63.prototype.deleteMatrixTexture = function(e) {
        var t = this;
        this.throwIfDisposed(), this.outputTexture === e && (unbindColorTextureFromFramebuffer(this.gl, this.framebuffer), this.outputTexture = null), callAndCheck(this.gl, function() {
            return t.gl.deleteTexture(e);
        });
    }, e63.prototype.uploadMatrixToTexture = function(e, t, n, r) {
        this.throwIfDisposed();
        var o = getNumChannels();
        return uploadMatrixToTexture(this.gl, e, t, n, r, o, this.textureConfig);
    }, e63.prototype.uploadMatrixToPackedTexture = function(e, t, n, r, o, a, i) {
        return this.throwIfDisposed(), uploadMatrixToPackedTexture(this.gl, e, t, n, r, o, a, i, this.textureConfig);
    }, e63.prototype.downloadFloat32MatrixFromOutputTexture = function(e, t, n) {
        var r = this;
        return this.downloadMatrixDriver(e, function() {
            return downloadFloat32MatrixFromOutputTexture(r.gl, t, n, r.textureConfig);
        });
    }, e63.prototype.downloadByteEncodedFloatMatrixFromOutputTexture = function(e, t, n) {
        var r = this;
        return this.downloadMatrixDriver(e, function() {
            return downloadByteEncodedFloatMatrixFromOutputTexture(r.gl, t, n, r.textureConfig);
        });
    }, e63.prototype.downloadPackedMatrixFromBuffer = function(e, t, n, r, o, a) {
        return downloadPackedMatrixFromBuffer(this.gl, e, t, n, r, o, a, this.textureConfig);
    }, e63.prototype.downloadFloat32MatrixFromBuffer = function(e, t, n) {
        return downloadFloat32MatrixFromBuffer(this.gl, e, t, n, this.textureConfig);
    }, e63.prototype.maybeCreateBufferFromTexture = function(e, t, n) {
        this.bindTextureToFrameBuffer(e);
        var r = maybeCreateBufferFromOutputTexture(this.gl, e, t, n, this.textureConfig);
        return this.unbindTextureToFrameBuffer(), r;
    }, e63.prototype.createAndWaitForFence = function() {
        var e = this.createFence(this.gl);
        return this.pollFence(e);
    }, e63.prototype.createFence = function(e64) {
        var t, n, r = this;
        if (ENV.get("WEBGL_FENCE_API_ENABLED")) {
            var o = e64, a = o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE, 0);
            e64.flush(), n = function() {
                var e = o.clientWaitSync(a, 0, 0);
                return e === o.ALREADY_SIGNALED || e === o.CONDITION_SATISFIED;
            }, t = a;
        } else ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (t = this.beginQuery(), this.endQuery(), n = function() {
            return r.isQueryAvailable(t, ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
        }) : n = function() {
            return !0;
        };
        return {
            query: t,
            isFencePassed: n
        };
    }, e63.prototype.downloadMatrixFromPackedTexture = function(e, t, n, r, o, a) {
        var i = this;
        return this.downloadMatrixDriver(e, function() {
            return downloadMatrixFromPackedOutputTexture(i.gl, t, n, r, o, a, i.textureConfig);
        });
    }, e63.prototype.createProgram = function(e) {
        this.throwIfDisposed();
        var t = this.gl, n = createFragmentShader(t, e), r = createVertexShader$1(t), o = createProgram(t);
        return callAndCheck(t, function() {
            return t.attachShader(o, r);
        }), callAndCheck(t, function() {
            return t.attachShader(o, n);
        }), linkProgram(t, o), this.autoDebugValidate && validateProgram(t, o), this.vertexAttrsAreBound || (this.setProgram(o), this.vertexAttrsAreBound = bindVertexProgramAttributeStreams(t, this.program, this.vertexBuffer)), o;
    }, e63.prototype.deleteProgram = function(e) {
        var t = this;
        this.throwIfDisposed(), e === this.program && (this.program = null), null != e && callAndCheck(this.gl, function() {
            return t.gl.deleteProgram(e);
        });
    }, e63.prototype.setProgram = function(e) {
        var t = this;
        this.throwIfDisposed(), this.program = e, null != this.program && this.autoDebugValidate && validateProgram(this.gl, this.program), callAndCheck(this.gl, function() {
            return t.gl.useProgram(e);
        });
    }, e63.prototype.getUniformLocation = function(e, t, n) {
        return void 0 === n && (n = !0), this.throwIfDisposed(), n ? getProgramUniformLocationOrThrow(this.gl, e, t) : getProgramUniformLocation(this.gl, e, t);
    }, e63.prototype.getAttributeLocation = function(e, t) {
        var n = this;
        return this.throwIfDisposed(), callAndCheck(this.gl, function() {
            return n.gl.getAttribLocation(e, t);
        });
    }, e63.prototype.getUniformLocationNoThrow = function(e, t) {
        return this.throwIfDisposed(), this.gl.getUniformLocation(e, t);
    }, e63.prototype.setInputMatrixTexture = function(e, t, n) {
        this.throwIfDisposed(), this.throwIfNoProgram(), bindTextureToProgramUniformSampler(this.gl, this.program, e, t, n);
    }, e63.prototype.setOutputMatrixTexture = function(e, t, n) {
        this.setOutputMatrixTextureDriver(e, n, t);
    }, e63.prototype.setOutputPackedMatrixTexture = function(e, t, n) {
        this.throwIfDisposed();
        var r = getPackedMatrixTextureShapeWidthHeight(t, n), o = r[0], a = r[1];
        this.setOutputMatrixTextureDriver(e, o, a);
    }, e63.prototype.setOutputMatrixWriteRegion = function(e, t, n, r) {
        this.setOutputMatrixWriteRegionDriver(n, e, r, t);
    }, e63.prototype.setOutputPackedMatrixWriteRegion = function(e, t, n, r) {
        throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
    }, e63.prototype.debugValidate = function() {
        null != this.program && validateProgram(this.gl, this.program), validateFramebuffer(this.gl);
    }, e63.prototype.executeProgram = function() {
        this.throwIfDisposed(), this.throwIfNoProgram();
        var e = this.gl;
        this.autoDebugValidate && this.debugValidate(), callAndCheck(e, function() {
            return e.drawElements(e.TRIANGLES, 6, e.UNSIGNED_SHORT, 0);
        });
    }, e63.prototype.blockUntilAllProgramsCompleted = function() {
        var e = this;
        this.throwIfDisposed(), callAndCheck(this.gl, function() {
            return e.gl.finish();
        });
    }, e63.prototype.getQueryTimerExtension = function() {
        return null == this.disjointQueryTimerExtension && (this.disjointQueryTimerExtension = getExtensionOrThrow(this.gl, 2 === ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
    }, e63.prototype.getQueryTimerExtensionWebGL2 = function() {
        return this.getQueryTimerExtension();
    }, e63.prototype.getQueryTimerExtensionWebGL1 = function() {
        return this.getQueryTimerExtension();
    }, e63.prototype.beginQuery = function() {
        if (2 === ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")) {
            var e = this.gl, t = this.getQueryTimerExtensionWebGL2(), n = e.createQuery();
            return e.beginQuery(t.TIME_ELAPSED_EXT, n), n;
        }
        var r = this.getQueryTimerExtensionWebGL1(), o = r.createQueryEXT();
        return r.beginQueryEXT(r.TIME_ELAPSED_EXT, o), o;
    }, e63.prototype.endQuery = function() {
        if (2 !== ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")) {
            var e = this.getQueryTimerExtensionWebGL1();
            e.endQueryEXT(e.TIME_ELAPSED_EXT);
        } else {
            var t = this.gl, n = this.getQueryTimerExtensionWebGL2();
            t.endQuery(n.TIME_ELAPSED_EXT);
        }
    }, e63.prototype.waitForQueryAndGetTime = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            var t = this;
            return __generator(this, function(n) {
                switch(n.label){
                    case 0:
                        return [
                            4,
                            repeatedTry(function() {
                                return t.disposed || t.isQueryAvailable(e, ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
                            })
                        ];
                    case 1:
                        return n.sent(), [
                            2,
                            this.getQueryTime(e, ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))
                        ];
                }
            });
        });
    }, e63.prototype.getQueryTime = function(e, t) {
        if (0 === t) return null;
        if (2 === t) {
            var n = this.gl;
            return n.getQueryParameter(e, n.QUERY_RESULT) / 1000000;
        }
        var r = this.getQueryTimerExtensionWebGL1();
        return r.getQueryObjectEXT(e, r.QUERY_RESULT_EXT) / 1000000;
    }, e63.prototype.isQueryAvailable = function(e, t) {
        if (0 === t) return !0;
        if (2 === t) {
            var n = this.gl, r = this.getQueryTimerExtensionWebGL2(), o = n.getQueryParameter(e, n.QUERY_RESULT_AVAILABLE);
            return null == this.disjoint && (this.disjoint = this.gl.getParameter(r.GPU_DISJOINT_EXT)), o && !this.disjoint;
        }
        o = (r = this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(e, r.QUERY_RESULT_AVAILABLE_EXT);
        return null == this.disjoint && (this.disjoint = this.gl.getParameter(r.GPU_DISJOINT_EXT)), o && !this.disjoint;
    }, e63.prototype.pollFence = function(e) {
        var t = this;
        return new Promise(function(n) {
            t.addItemToPoll(function() {
                return e.isFencePassed();
            }, function() {
                return n();
            });
        });
    }, e63.prototype.pollItems = function() {
        for(var e65 = linearSearchLastTrue(this.itemsToPoll.map(function(e) {
            return e.isDoneFn;
        })), t = 0; t <= e65; ++t)(0, this.itemsToPoll[t].resolveFn)();
        this.itemsToPoll = this.itemsToPoll.slice(e65 + 1);
    }, e63.prototype.addItemToPoll = function(e, t) {
        var n = this;
        this.itemsToPoll.push({
            isDoneFn: e,
            resolveFn: t
        }), this.itemsToPoll.length > 1 || repeatedTry(function() {
            return n.pollItems(), 0 === n.itemsToPoll.length;
        });
    }, e63.prototype.bindTextureToFrameBuffer = function(e) {
        this.throwIfDisposed(), bindColorTextureToFramebuffer(this.gl, e, this.framebuffer), this.autoDebugValidate && validateFramebuffer(this.gl);
    }, e63.prototype.unbindTextureToFrameBuffer = function() {
        null != this.outputTexture ? (bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer), this.autoDebugValidate && validateFramebuffer(this.gl)) : unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);
    }, e63.prototype.downloadMatrixDriver = function(e, t) {
        this.bindTextureToFrameBuffer(e);
        var n = t();
        return this.unbindTextureToFrameBuffer(), n;
    }, e63.prototype.setOutputMatrixTextureDriver = function(e, t, n) {
        this.throwIfDisposed();
        var r = this.gl;
        bindColorTextureToFramebuffer(r, e, this.framebuffer), this.autoDebugValidate && validateFramebuffer(r), this.outputTexture = e, callAndCheck(r, function() {
            return r.viewport(0, 0, t, n);
        }), callAndCheck(r, function() {
            return r.scissor(0, 0, t, n);
        });
    }, e63.prototype.setOutputMatrixWriteRegionDriver = function(e, t, n, r) {
        var o = this;
        this.throwIfDisposed(), callAndCheck(this.gl, function() {
            return o.gl.scissor(e, t, n, r);
        });
    }, e63.prototype.throwIfDisposed = function() {
        if (this.disposed) throw new Error("Attempted to use disposed GPGPUContext.");
    }, e63.prototype.throwIfNoProgram = function() {
        if (null == this.program) throw new Error("No GPU program is currently set.");
    }, e63;
}();
function linearSearchLastTrue(e) {
    for(var t = 0; t < e.length; ++t){
        if (!e[t]()) break;
    }
    return t - 1;
}
function compileProgram(e66, t, n, r4) {
    for(var o = t.userCode, a = n.map(function(e, n) {
        var r = {
            logicalShape: e.shape,
            texShape: e.isUniform ? null : e.texData.texShape,
            isUniform: e.isUniform,
            isPacked: !e.isUniform && e.texData.isPacked,
            flatOffset: null
        };
        return null != e.texData && null != e.texData.slice && e.texData.slice.flatOffset > 0 && (r.flatOffset = e.texData.slice.flatOffset), {
            name: t.variableNames[n],
            shapeInfo: r
        };
    }), i = a.map(function(e) {
        return e.shapeInfo;
    }), s = {
        logicalShape: r4.shape,
        texShape: r4.texData.texShape,
        isUniform: !1,
        isPacked: r4.texData.isPacked,
        flatOffset: null
    }, u = makeShader(a, s, o, t.usesPackedTextures), l = e66.createProgram(u), c = {
    }, p = 0; p < t.variableNames.length; p++){
        var d = t.variableNames[p];
        c[d] = e66.getUniformLocation(l, d, !1), c["offset" + d] = e66.getUniformLocation(l, "offset" + d, !1);
    }
    return {
        program: t,
        source: u,
        webGLProgram: l,
        uniformLocations: c,
        gpgpu: e66,
        inShapeInfos: i,
        outShapeInfo: s
    };
}
function validateBinaryAndProgram(e67, t) {
    if (e67.length !== t.length) throw Error("Binary was compiled with " + e67.length + " inputs, but was executed with " + t.length + " inputs");
    e67.forEach(function(e, n) {
        var r = e.logicalShape, o = t[n], a = o.shape;
        if (!arraysEqual(r, a)) throw Error("Binary was compiled with different shapes than the current args. Shapes " + r + " and " + a + " must match");
        if (!e.isUniform || !o.isUniform) {
            var i = e.texShape, s = o.isUniform ? null : o.texData.texShape;
            if (!arraysEqual(i, s)) throw Error("Binary was compiled with different texture shapes than the current args. Shape " + i + " and " + s + " must match");
        }
    });
}
function runProgram(e, t24, n10, r) {
    validateBinaryAndProgram(e.inShapeInfos, t24), validateBinaryAndProgram([
        e.outShapeInfo
    ], [
        n10
    ]);
    var o4 = n10.texData.texture, a5 = n10.texData.texShape, i = e.gpgpu;
    n10.texData.isPacked ? i.setOutputPackedMatrixTexture(o4, a5[0], a5[1]) : i.setOutputMatrixTexture(o4, a5[0], a5[1]), i.setProgram(e.webGLProgram), t24.forEach(function(t, n) {
        var r = e.program.variableNames[n], o = e.uniformLocations[r], a = e.uniformLocations["offset" + r];
        if (null != o) {
            if (t.isUniform) {
                if (1 === sizeFromShape(t.shape)) i.gl.uniform1f(o, t.uniformValues[0]);
                else {
                    var s = t.uniformValues;
                    s instanceof Float32Array || (s = new Float32Array(s)), i.gl.uniform1fv(o, s);
                }
            } else null != t.texData.slice && null != a && i.gl.uniform1i(a, t.texData.slice.flatOffset), i.setInputMatrixTexture(t.texData.texture, o, n);
        }
    }), null != r && r(i, e.webGLProgram), i.executeProgram();
}
function makeShaderKey(e68, t25, n11) {
    var r = "";
    t25.concat(n11).forEach(function(e) {
        var t = null != e.texData && null != e.texData.slice && e.texData.slice.flatOffset > 0, n = e.isUniform ? "uniform" : e.texData.texShape;
        r += e.shape + "_" + n + "_" + t;
    });
    var o = e68.userCode, a = e68.constructor.name;
    return a += "_" + r + "_" + o;
}
var Im2ColProgram = function() {
    return function(e, t, n) {
        this.variableNames = [
            "A"
        ], this.outputShape = e;
        var r = n.filterWidth, o = n.inChannels, a = n.strideWidth, i = n.strideHeight, s = n.padInfo, u = n.outWidth, l = n.dilationWidth, c = n.dilationHeight, p = s.left, d = s.top, h = o * r, f = getGlslDifferences();
        this.userCode = "\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            int blockIndex = rc.y + col;\n            int pos = rc.x + row;\n\n            if(blockIndex >= " + e[1] + " || pos >= " + e[0] + ") continue;\n\n            int offsetY = int(blockIndex / (" + u + ")) * " + i + " - " + d + ";\n            int d0 = offsetY + " + c + " * (pos / " + h + ");\n\n            if(d0 >= " + t[0] + " || d0 < 0) continue;\n\n            int offsetX = int(mod(float(blockIndex), " + u + ".) * " + a + ". - " + p + ".);\n            int d1 = offsetX + " + l + " * (int(mod(float(pos), " + h + ".) / " + o + ".));\n\n            if(d1 >= " + t[1] + " || d1 < 0) continue;\n\n            result[row * 2 + col] = getA(d0, d1, int(mod(float(pos), " + o + ".)));\n          }\n        }\n\n        " + f.output + " = result;\n      }\n    ";
    };
}(), LRNProgram = function() {
    return function(e, t, n, r, o) {
        this.variableNames = [
            "x"
        ], this.outputShape = [];
        var a, i = t, s = e[3] - 1;
        this.outputShape = e;
        var u = "float(" + n + ") + float(" + r + ") * sum";
        a = 0.5 === o ? "inversesqrt(" + u + ")" : 1 === o ? "1.0/(" + u + ")" : "exp(log(" + u + ") * float(-" + o + "));", this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -" + i + "; j <= " + i + "; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  " + s + ") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * " + a + ";\n        setOutput(val);\n      }\n    ";
    };
}(), LRNGradProgram = function() {
    return function(e, t, n, r, o) {
        this.variableNames = [
            "inputImage",
            "outputImage",
            "dy"
        ], this.outputShape = [], this.outputShape = e, this.depth = e[3], this.depthRadius = t, this.bias = n, this.alpha = r, this.beta = o, this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < " + this.depth + "; ++d) {\n          int depthBegin = int(max(0.0, float(d - " + t + ")));\n          int depthEnd = int(min(float(" + this.depth + "),\n              float(d + " + t + " + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = " + this.depth + ";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(" + r + ") * norm + float(" + n + ");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(" + r + ")\n                * float(" + o + ")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * " + o + ");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    ";
    };
}(), MaxPool2DBackpropProgram = function() {
    return function(e) {
        this.variableNames = [
            "dy",
            "maxPos"
        ], this.outputShape = e.inShape;
        var t = e.strideHeight, n = e.strideWidth, r = e.dilationHeight, o = e.effectiveFilterHeight, a = e.effectiveFilterWidth, i = o - 1 - e.padInfo.top, s = a - 1 - e.padInfo.left, u = o * a - 1;
        this.userCode = "\n      const ivec2 pads = ivec2(" + i + ", " + s + ");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < " + o + ";\n          wR += " + r + ") {\n          float dyR = float(dyRCorner + wR) / " + t + ".0;\n\n          if (dyR < 0.0 || dyR >= " + e.outHeight + ".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < " + a + "; wC++) {\n            float dyC = float(dyCCorner + wC) / " + n + ".0;\n\n            if (dyC < 0.0 || dyC >= " + e.outWidth + ".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = " + u + " - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * " + a + " + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    ";
    };
}(), MatMulProgram = function() {
    return function(e69, t26, n, r, o, a) {
        void 0 === n && (n = !1), void 0 === r && (r = !1), void 0 === o && (o = !1), void 0 === a && (a = null), this.variableNames = [
            "matrixA",
            "matrixB"
        ];
        var i = e69[0], s = n ? e69[2] : e69[1], u = r ? t26[1] : t26[2], l = n ? e69[1] : e69[2];
        this.outputShape = [
            i,
            s,
            u
        ];
        var c = function(e, t) {
            return n ? "batch, " + t + " + " + e + ", aRow" : "batch, aRow, " + t + " + " + e;
        }, p = function(e, t) {
            return r ? "batch, bCol, " + t + " + " + e : "batch, " + t + " + " + e + ", bCol";
        }, d = 4 * Math.floor(l / 4), h = l % 4, f = "", m = "";
        a && (f = "float activation(float x) {\n        " + a + "\n      }", m = "result = activation(result);");
        var g = o ? "result += getBiasAtOutCoords();" : "";
        o && this.variableNames.push("bias"), this.userCode = "\n      " + f + "\n\n      float dotARowBCol(int batch, int aRow, int bCol) {\n        float result = 0.0;\n        for (int i = 0; i < " + d + "; i += 4) {\n          vec4 a = vec4(\n            getMatrixA(" + c(0, "i") + "),\n            getMatrixA(" + c(1, "i") + "),\n            getMatrixA(" + c(2, "i") + "),\n            getMatrixA(" + c(3, "i") + ")\n          );\n          vec4 b = vec4(\n            getMatrixB(" + p(0, "i") + "),\n            getMatrixB(" + p(1, "i") + "),\n            getMatrixB(" + p(2, "i") + "),\n            getMatrixB(" + p(3, "i") + ")\n          );\n\n          result += dot(a, b);\n        }\n\n        if (" + (1 === h) + ") {\n          result += getMatrixA(" + c(0, d) + ") *\n            getMatrixB(" + p(0, d) + ");\n        } else if (" + (2 === h) + ") {\n          vec2 a = vec2(\n            getMatrixA(" + c(0, d) + "),\n            getMatrixA(" + c(1, d) + ")\n          );\n          vec2 b = vec2(\n            getMatrixB(" + p(0, d) + "),\n            getMatrixB(" + p(1, d) + ")\n          );\n          result += dot(a, b);\n        } else if (" + (3 === h) + ") {\n          vec3 a = vec3(\n            getMatrixA(" + c(0, d) + "),\n            getMatrixA(" + c(1, d) + "),\n            getMatrixA(" + c(2, d) + ")\n          );\n          vec3 b = vec3(\n            getMatrixB(" + p(0, d) + "),\n            getMatrixB(" + p(1, d) + "),\n            getMatrixB(" + p(2, d) + ")\n          );\n          result += dot(a, b);\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec3 resBRC = getOutputCoords();\n        float result = dotARowBCol(resBRC.x, resBRC.y, resBRC.z);\n\n        " + g + "\n\n        " + m + "\n\n        setOutput(result);\n      }\n    ";
    };
}(), MatMulPackedProgram = function() {
    return function(e, t, n, r, o, a, i) {
        void 0 === r && (r = !1), void 0 === o && (o = !1), void 0 === a && (a = !1), void 0 === i && (i = null), this.variableNames = [
            "matrixA",
            "matrixB"
        ], this.usesPackedTextures = !0, this.outputShape = n;
        var s = r ? e[0] : e[1], u = Math.ceil(s / 2), l = r ? "i * 2, rc.x" : "rc.x, i * 2", c = o ? "rc.y, i * 2" : "i * 2, rc.y", p = r ? [
            "a.xxyy",
            "a.zzww"
        ] : [
            "a.xxzz",
            "a.yyww"
        ], d = o ? [
            "b.xzxz",
            "b.ywyw"
        ] : [
            "b.xyxy",
            "b.zwzw"
        ], h = "", f = "";
        i && (h = "vec4 activation(vec4 x) {\n        " + i + "\n      }", f = "result = activation(result);");
        var m = a ? "result += getBiasAtOutCoords();" : "";
        a && this.variableNames.push("bias"), this.userCode = "\n      " + h + "\n\n      const float sharedDimension = " + u + ".0;\n\n      vec4 dot2x2ARowBCol(ivec2 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < " + u + "; i++) {\n          vec4 a = getMatrixA(" + l + ");\n          vec4 b = getMatrixB(" + c + ");\n\n          result += (" + p[0] + " * " + d[0] + ") + (" + p[1] + " * " + d[1] + ");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        " + m + "\n\n        " + f + "\n\n        setOutput(result);\n      }\n    ";
    };
}(), MultinomialProgram = function() {
    function e70(e, t, n) {
        this.variableNames = [
            "probs"
        ], this.outputShape = [
            e,
            n
        ], this.userCode = "\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < " + (t - 1) + "; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(" + (t - 1) + "));\n      }\n    ";
    }
    return e70.prototype.getCustomSetupFunc = function(e) {
        var t = this;
        return function(n, r) {
            null == t.seedLoc && (t.seedLoc = n.getUniformLocation(r, "seed")), n.gl.uniform1f(t.seedLoc, e);
        };
    }, e70;
}(), OneHotProgram = function() {
    return function(e, t, n, r) {
        this.variableNames = [
            "indices"
        ], this.outputShape = [
            e,
            t
        ], this.userCode = "\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(" + r + "), float(" + n + "),\n                      float(index == coords.y)));\n      }\n    ";
    };
}();
function getVecChannels(e, t27) {
    return [
        "x",
        "y",
        "z",
        "w",
        "u",
        "v"
    ].slice(0, t27).map(function(t) {
        return e + "." + t;
    });
}
function getChannels(e, t) {
    return 1 === t ? [
        e
    ] : getVecChannels(e, t);
}
function getSourceCoords$1(e, t) {
    if (1 === e) return "rc";
    for(var n = "", r = 0; r < e; r++)n += t[r], r < e - 1 && (n += ",");
    return n;
}
var PackProgram = function() {
    return function(e) {
        this.variableNames = [
            "A"
        ], this.isPackShader = !0, this.outputShape = e;
        var t = e.length;
        if (0 === t) this.userCode = "\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";
        else {
            var n = getChannels("rc", t), r = getCoordsDataType(t), o = getOutOfBoundsCondition(t, e, n), a = getSetup(t, e[e.length - 1], e[e.length - 2], n), i = getOutput(e, n);
            this.userCode = "\n        void main() {\n          " + r + " rc = getOutputCoords();\n\n          if(" + o + ") {\n            setOutput(vec4(0));\n          } else {\n            " + a + "\n\n            setOutput(vec4(" + i + "));\n          }\n        }\n      ";
        }
    };
}();
function getSourceCoordsArr(e, t) {
    for(var n = [], r = 0; r <= 1; r++)for(var o = 0; o <= 1; o++){
        for(var a = (0 === r ? "r" : "rp1") + ", " + (0 === o ? "c" : "cp1"), i = 2; i < e; i++)a = t[t.length - 1 - i] + "," + a;
        n.push(a);
    }
    return n;
}
function getOutOfBoundsCondition(e, t, n) {
    if (1 === e) return "rc > " + t[0];
    for(var r = "", o = e - 2; o < e; o++)r += n[o] + " >= " + t[o], o < e - 1 && (r += "||");
    return r;
}
function getSetup(e, t, n, r) {
    if (1 === e) return "";
    var o = r.slice(-2);
    return "\n    int r = " + o[0] + ";\n    int c = " + o[1] + ";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= " + t + ";\n    bool rEdge = rp1 >= " + n + ";\n  ";
}
function getOutput(e, t) {
    var n = e.length, r = getSourceCoordsArr(n, t);
    return 1 === n ? "getA(rc),\n            rc + 1 >= " + e[0] + " ? 0. : getA(rc + 1),\n            0, 0" : "getA(" + r[0] + "),\n          cEdge ? 0. : getA(" + r[1] + "),\n          rEdge ? 0. : getA(" + r[2] + "),\n          rEdge || cEdge ? 0. : getA(" + r[3] + ")";
}
var PadProgram = function() {
    return function(e71, t28, n) {
        this.variableNames = [
            "x"
        ], this.outputShape = t28.map(function(t, n) {
            return t[0] + e71[n] + t[1];
        });
        var r = e71.length, o = getCoordsDataType(r), a = t28.map(function(e) {
            return e[0];
        }).join(","), i = t28.map(function(t, n) {
            return t[0] + e71[n];
        }).join(","), s = [
            "coords[0]",
            "coords[1]",
            "coords[2]",
            "coords[3]"
        ].slice(0, r);
        this.userCode = 1 !== r ? "\n      " + o + " start = " + o + "(" + a + ");\n      " + o + " end = " + o + "(" + i + ");\n\n      void main() {\n        " + o + " outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float(" + n + "));\n        } else {\n          " + o + " coords = outC - start;\n          setOutput(getX(" + s + "));\n        }\n      }\n    " : "\n        int start = " + a + ";\n        int end = " + i + ";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float(" + n + "));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      ";
    };
}(), PadPackedProgram = function() {
    return function(e72, t29, n) {
        this.variableNames = [
            "x"
        ], this.usesPackedTextures = !0, this.outputShape = t29.map(function(t, n) {
            return t[0] + e72[n] + t[1];
        });
        for(var r = e72.length, o = getCoordsDataType(r), a = t29.map(function(e) {
            return e[0];
        }).join(","), i = t29.map(function(t, n) {
            return t[0] + e72[n];
        }).join(","), s = getChannels("rc", r), u = getChannels("source", r), l = s[r - 1] + " < " + this.outputShape[r - 1], c = 1 === r ? "source" : "vec2(" + u.slice(-2).join() + ")", p = [
            o + " rc = outputLoc;",
            s[r - 1] + " += 1;\n       if(" + l + ") {\n      ",
            1 === r ? "" : "}\n       rc = outputLoc;\n       " + s[r - 2] + " += 1;\n       if(" + s[r - 2] + " < " + this.outputShape[r - 2] + ") {",
            1 === r ? "" : "  " + s[r - 1] + " += 1;\n         if(" + l + ") {"
        ], d = 1 === r ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))", h = "", f = 0, m = 1 === r ? 2 : 4; f < m; f++)h += "\n        " + p[f] + "\n        if (" + d + ") {\n          result[" + f + "] = float(" + n + ");\n        } else {\n          " + o + " source = rc - start;\n          result[" + f + "] = getChannel(getX(" + u.join() + "), " + c + ");\n        }\n      ";
        h += 1 === r ? "} " : "}}", this.userCode = "\n      const " + o + " start = " + o + "(" + a + ");\n      const " + o + " end = " + o + "(" + i + ");\n\n      void main() {\n        " + o + " outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        " + h + "\n        setOutput(result);\n      }\n    ";
    };
}(), Pool2DProgram = function() {
    return function(e, t, n) {
        if (this.variableNames = [
            "x"
        ], "avg" === t && n) throw new Error("Cannot compute positions for average pool.");
        var r = e.filterWidth, o = e.strideHeight, a = e.strideWidth, i = e.dilationHeight, s = e.dilationWidth, u = e.effectiveFilterHeight, l = e.effectiveFilterWidth, c = e.padInfo.top, p = e.padInfo.left;
        this.outputShape = e.outShape;
        var d = "avg" === t, h = "0.0";
        if (d || (h = "-1.0 / 1e-20"), n) this.userCode = "\n        const ivec2 strides = ivec2(" + o + ", " + a + ");\n        const ivec2 pads = ivec2(" + c + ", " + p + ");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < " + u + ";\n              wR += " + i + ") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= " + e.inHeight + ") {\n              continue;\n            }\n\n            for (int wC = 0; wC < " + l + ";\n                wC += " + s + ") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= " + e.inWidth + ") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * " + l + " + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";
        else {
            var f = t + "(" + t + "(" + t + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
            "avg" === t && (f = "avgValue / count");
            var m = 4 * Math.floor(r / 4), g = r % 4, v = "\n      if (" + d + ") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";
            this.userCode = "\n      const ivec2 strides = ivec2(" + o + ", " + a + ");\n      const ivec2 pads = ivec2(" + c + ", " + p + ");\n      const float initializationValue = " + h + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= " + e.inWidth + ") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(" + h + ");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < " + u + ";\n            wR += " + i + ") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= " + e.inHeight + ") {\n            continue;\n          }\n\n          for (int wC = 0; wC < " + m + "; wC += 4) {\n            int xC = xCCorner + wC * " + s + ";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + s + ", d),\n              getValue(batch, xR, xC + 2 * " + s + ", d),\n              getValue(batch, xR, xC + 3 * " + s + ", d)\n            );\n\n            " + v + "\n          }\n\n          int xC = xCCorner + " + m + ";\n          if (" + (1 === g) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            " + v + "\n          } else if (" + (2 === g) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + s + ", d),\n              initializationValue,\n              initializationValue\n            );\n\n            " + v + "\n          } else if (" + (3 === g) + ") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + " + s + ", d),\n              getValue(batch, xR, xC + 2 * " + s + ", d),\n              initializationValue\n            );\n\n            " + v + "\n          }\n        }\n        setOutput(" + f + ");\n      }\n    ";
        }
    };
}(), ReduceProgram = function() {
    return function(e, t) {
        this.variableNames = [
            "x"
        ];
        var n = e.windowSize, r = e.batchSize, o = e.inSize, a = Math.ceil(o / n);
        this.outputShape = [
            r,
            a
        ];
        var i = "0.0", s = "";
        "prod" === t ? i = "1.0" : "min" === t ? (i = "1.0 / 1e-20", s = "min") : "max" === t && (i = "-1.0 / 1e-20", s = "max");
        var u = t + "(" + t + "(" + t + "(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";
        "sum" === t ? u = "sumValue" : "prod" === t ? u = "prodValue" : "all" === t ? u = "allValue" : "any" === t && (u = "anyValue");
        var l = 4 * Math.floor(n / 4), c = n % 4, p = "\n      if (" + ("sum" === t) + ") {\n        sumValue += dot(values, ones);\n      } else if (" + ("prod" === t) + ") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = " + s + "(values, minMaxValue);\n      }\n    ", d = "vec4";
        "all" === t ? (i = "1.0", p = "\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ", d = "bvec4") : "any" === t && (i = "0.0", p = "\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ", d = "bvec4");
        var h = "";
        o % n > 0 && (h = "\n        if (inIdx < 0 || inIdx >= " + o + ") {\n          return initializationValue;\n        }\n      "), this.userCode = "\n      const float initializationValue = " + i + ";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        " + h + "\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * " + n + ";\n\n        vec4 minMaxValue = vec4(" + i + ");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < " + l + "; i += 4) {\n          int inIdx = inOffset + i;\n          " + d + " values = " + d + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          " + p + "\n        }\n\n        int inIdx = inOffset + " + l + ";\n        if (" + (1 === c) + ") {\n          " + d + " values = " + d + "(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          " + p + "\n        } else if (" + (2 === c) + ") {\n          " + d + " values = " + d + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          " + p + "\n        } else if (" + (3 === c) + ") {\n          " + d + " values = " + d + "(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          " + p + "\n        }\n        setOutput(" + u + ");\n      }\n    ";
    };
}(), ReshapePackedProgram = function() {
    return function(e, t) {
        this.variableNames = [
            "A"
        ], this.usesPackedTextures = !0, this.outputShape = e;
        for(var n = "", r = 0; r < 4; r++){
            var o = "thisRC = rc;";
            r % 2 == 1 && (o += "thisRC.z += 1;"), r > 1 && (o += "thisRC.y += 1;"), n += "\n        " + o + "\n        " + (r > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : "") + "\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[" + r + "] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        " + (r > 0 ? "}" : "") + "\n      ";
        }
        this.userCode = "\n      " + getReshapedInputCoords(t) + "\n      " + getFlatIndex(e) + "\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = " + e[1] + ";\n        int cols = " + e[2] + ";\n\n        " + n + "\n\n        setOutput(result);\n      }\n    ";
    };
}();
function getFlatIndex(e73) {
    return "\n    int getFlatIndex(ivec3 coords) {\n      return round(" + dotify([
        "coords.x",
        "coords.y",
        "coords.z"
    ], computeStrides(e73).map(function(e) {
        return e.toString();
    }).concat([
        "1."
    ])) + ");\n    }\n  ";
}
function getReshapedInputCoords(e) {
    return "\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      " + getLogicalCoordinatesFromFlatIndex([
        "r",
        "c",
        "d"
    ], e) + "\n      return ivec3(r, c, d);\n    }\n  ";
}
var ResizeBilinearBackpropProgram = function() {
    return function(e, t, n) {
        this.variableNames = [
            "dy"
        ], this.outputShape = [], this.outputShape = t.shape;
        var r = t.shape, o = r[1], a = r[2], i = e.shape, s = i[1], u = i[2], l = [
            n && s > 1 ? o - 1 : o,
            n && u > 1 ? a - 1 : a
        ], c = [
            n && s > 1 ? s - 1 : s,
            n && u > 1 ? u - 1 : u
        ], p = l[0] / c[0], d = l[1] / c[1], h = 1 / p, f = 1 / d, m = 2 * Math.ceil(h) + 2, g = 2 * Math.ceil(f) + 2;
        this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" + p + ");\n        const float widthScale = float(" + d + ");\n\n        const float invHeightScale = float(" + h + ");\n        const float invWidthScale = float(" + f + ");\n\n        const int winHeight = int(" + m + ");\n        const int winWidth = int(" + g + ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " + s + ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " + u + ") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), " + (o - 1) + ".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), " + (a - 1) + ".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
    };
}(), ResizeBilinearProgram = function() {
    return function(e, t, n, r) {
        this.variableNames = [
            "A"
        ], this.outputShape = [];
        var o = e[0], a = e[1], i = e[2], s = e[3];
        this.outputShape = [
            o,
            t,
            n,
            s
        ];
        var u = [
            r && t > 1 ? a - 1 : a,
            r && n > 1 ? i - 1 : i
        ], l = [
            r && t > 1 ? t - 1 : t,
            r && n > 1 ? n - 1 : n
        ];
        this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + u[0] / l[0] + ",\n          " + u[1] / l[1] + ");\n      const vec2 inputShapeRC = vec2(" + a + ".0, " + i + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    ";
    };
}(), ResizeNearestNeigborBackpropProgram = function() {
    return function(e, t, n) {
        this.variableNames = [
            "dy"
        ], this.outputShape = [], this.outputShape = t.shape;
        var r = t.shape, o = r[1], a = r[2], i = e.shape, s = i[1], u = i[2], l = [
            n && s > 1 ? o - 1 : o,
            n && u > 1 ? a - 1 : a
        ], c = [
            n && s > 1 ? s - 1 : s,
            n && u > 1 ? u - 1 : u
        ], p = l[0] / c[0], d = l[1] / c[1], h = 1 / p, f = 1 / d, m = 2 * Math.ceil(h) + 2, g = 2 * Math.ceil(f) + 2;
        this.userCode = "\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(" + p + ");\n        const float widthScale = float(" + d + ");\n\n        const float invHeightScale = float(" + h + ");\n        const float invWidthScale = float(" + f + ");\n\n        const int winHeight = int(" + m + ");\n        const int winWidth = int(" + g + ");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= " + s + ") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= " + u + ") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(" + l[0] + ") *\n                (float(dyR) / float(" + c[0] + "));\n\n            float sourceFracCol =\n                float(" + l[1] + ") *\n                  (float(dyC) / float(" + c[1] + "));\n\n            int sourceNearestRow = int(min(\n                float(int(" + o + ") - 1),\n                " + n + " ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(" + a + ") - 1),\n                " + n + " ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    ";
    };
}(), ResizeNearestNeighborProgram = function() {
    return function(e, t, n, r) {
        this.variableNames = [
            "A"
        ], this.outputShape = [];
        var o = e[0], a = e[1], i = e[2], s = e[3];
        this.outputShape = [
            o,
            t,
            n,
            s
        ];
        var u = [
            r && t > 1 ? a - 1 : a,
            r && n > 1 ? i - 1 : i
        ], l = [
            r && t > 1 ? t - 1 : t,
            r && n > 1 ? n - 1 : n
        ], c = r ? "0.5" : "0.0";
        this.userCode = "\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          " + u[0] / l[0] + ",\n          " + u[1] / l[1] + ");\n      const vec2 inputShapeRC = vec2(" + a + ".0, " + i + ".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + " + c + ")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    ";
    };
}(), ReverseProgram = function() {
    return function(e, t) {
        this.variableNames = [
            "x"
        ];
        var n12 = e.length;
        if (n12 > 4) throw new Error("WebGL backend: Reverse of rank-" + n12 + " tensor is not yet supported");
        if (this.outputShape = e, 1 !== n12) {
            var r5 = e.map(function(n13, r) {
                return (function(n) {
                    return -1 !== t.indexOf(n) && 1 !== e[n] ? e[n] + " - coords[" + n + "] - 1" : "coords[" + n + "]";
                })(r);
            }).join(","), o = getCoordsDataType(n12);
            this.userCode = "\n      void main() {\n        " + o + " coords = getOutputCoords();\n        setOutput(getX(" + r5 + "));\n      }\n    ";
        } else this.userCode = "\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(" + e[0] + " - coord - 1));\n        }\n      ";
    };
}(), ScatterProgram = function() {
    return function(e, t, n, r, o, a, i) {
        void 0 === i && (i = !0), this.variableNames = [
            "updates",
            "indices",
            "defaultValue"
        ], this.outputShape = a;
        var s = getCoordsDataType(o.length), u = getCoordsDataType(a.length), l = "";
        1 === n ? l = "i" : 2 === n && (l = "i, j");
        var c = "getIndices(" + l + ")", p = "";
        1 === r ? p = "i" : 2 === r && (p = "i, coords[1]");
        var d = "getUpdates(" + p + ")", h = t > 1 ? "strides[j]" : "strides";
        this.userCode = "\n        " + s + " strides = " + s + "(" + o + ");\n\n        void main() {\n          " + u + " coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < " + e + "; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < " + t + "; j++) {\n              int index = round(" + c + ");\n              flattenedIndex += index * " + h + ";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += " + d + ";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      ";
    };
}(), SegmentOpProgram = function() {
    return function(e, t) {
        this.variableNames = [
            "x",
            "segmentIds"
        ];
        var n = e.windowSize, r = e.batchSize, o = e.inSize, a = e.numSegments, i = a * Math.ceil(o / n);
        this.outputShape = [
            r,
            i
        ];
        var s = 4 * Math.floor(n / 4), u = n % 4, l = "\n        sumValue += dot(values, segFilter);\n    ", c = "";
        o % n > 0 && (c = "\n        if (inIdx < 0 || inIdx >= " + o + ") {\n          return initializationValue;\n        }\n      ");
        var p = "";
        o % n > 0 && (p = "\n        if (inIdx < 0 || inIdx >= " + o + ") {\n          return -1.0;\n        }\n      "), this.userCode = "\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        " + c + "\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        " + p + "\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          " + a + ")) * float(" + n + "));\n        int currentSeg = int(mod(float(outIdx), float(" + a + ")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < " + s + "; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          " + l + "\n        }\n\n        int inIdx = inOffset + " + s + ";\n        if (" + (1 === u) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          " + l + "\n        } else if (" + (2 === u) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          " + l + "\n        } else if (" + (3 === u) + ") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          " + l + "\n        }\n        setOutput(sumValue);\n      }\n    ";
    };
}(), SelectProgram = function() {
    return function(e, t, n) {
        var r, o;
        if (this.variableNames = [
            "c",
            "a",
            "b"
        ], this.outputShape = t, n > 4) throw Error("Where for rank " + n + " is not yet supported");
        if (1 === n) o = "resRC", r = "resRC";
        else {
            for(var a = [
                "resRC.x",
                "resRC.y",
                "resRC.z",
                "resRC.w"
            ], i = [], s = [], u = 0; u < t.length; u++)s.push("" + a[u]), u < e && i.push("" + a[u]);
            r = i.join(), o = s.join();
        }
        var l = getCoordsDataType(n);
        this.userCode = "\n      void main() {\n        " + l + " resRC = getOutputCoords();\n        float cVal = getC(" + r + ");\n        if (cVal >= 1.0) {\n          setOutput(getA(" + o + "));\n        } else {\n          setOutput(getB(" + o + "));\n        }\n      }\n    ";
    };
}(), SliceProgram = function() {
    function e74(e) {
        this.variableNames = [
            "source"
        ], this.outputShape = e, this.rank = e.length;
        var t30, n = getCoordsDataType(this.rank), r = "uniform int start[" + this.rank + "];", o = getCoords$1(this.rank);
        t30 = "\n        " + n + " sourceLoc;\n        " + n + " coords = getOutputCoords();\n        " + e.map(function(e, t) {
            return "sourceLoc." + coords[t] + " = start[" + t + "] + coords." + coords[t] + ";";
        }).join("\n") + "\n      ", this.userCode = "\n      " + r + "\n      void main() {\n        " + t30 + "\n        setOutput(getSource(" + o + "));\n      }\n    ";
    }
    return e74.prototype.getCustomSetupFunc = function(e) {
        var t = this;
        if (e.length !== this.rank) throw Error("The rank (" + this.rank + ") of the program must match the length of start (" + e.length + ")");
        return function(n, r) {
            null == t.startLoc && (t.startLoc = n.getUniformLocationNoThrow(r, "start"), null == t.startLoc) || n.gl.uniform1iv(t.startLoc, e);
        };
    }, e74;
}(), coords = [
    "x",
    "y",
    "z",
    "w",
    "u",
    "v"
];
function getCoords$1(e75) {
    if (1 === e75) return "sourceLoc";
    if (e75 <= 6) return coords.slice(0, e75).map(function(e) {
        return "sourceLoc." + e;
    }).join(",");
    throw Error("Slicing for rank " + e75 + " is not yet supported");
}
var StridedSliceProgram = function() {
    return function(e, t31, n, r) {
        this.variableNames = [
            "x"
        ];
        var o = n.filter(function(e, t) {
            return -1 === r.indexOf(t);
        });
        this.outputShape = o;
        var a = n.length, i = getCoordsDataType(n.length), s = getCoordsDataType(o.length), u = "";
        if (1 === a) u = "coords * strides + begin";
        else {
            var l = 0;
            u = n.map(function(e, t) {
                return -1 === r.indexOf(t) ? (l++, 1 === o.length ? "coords * strides[" + t + "] + begin[" + t + "]" : "coords[" + (l - 1) + "] * strides[" + t + "] + begin[" + t + "]") : "begin[" + t + "]";
            }).join(",");
        }
        this.userCode = "\n      " + i + " begin = " + i + "(" + e + ");\n      " + i + " strides = " + i + "(" + t31 + ");\n\n      void main() {\n        " + s + " coords = getOutputCoords();\n        setOutput(getX(" + u + "));\n      }\n    ";
    };
}(), TextureManager = function() {
    function e76(e) {
        this.gpgpu = e, this.numUsedTextures = 0, this.numFreeTextures = 0, this.freeTextures = {
        }, this.logEnabled = !1, this.usedTextures = {
        };
    }
    return e76.prototype.acquireTexture = function(e, t, n) {
        var r, o = getPhysicalFromLogicalTextureType(t, n), a = getKeyFromTextureShape(e, o, n);
        if (a in this.freeTextures || (this.freeTextures[a] = []), a in this.usedTextures || (this.usedTextures[a] = []), this.freeTextures[a].length > 0) {
            this.numFreeTextures--, this.numUsedTextures++, this.log();
            var i = this.freeTextures[a].shift();
            return this.usedTextures[a].push(i), i;
        }
        return this.numUsedTextures++, this.log(), o === PhysicalTextureType.PACKED_2X2_FLOAT32 ? r = this.gpgpu.createPackedMatrixTexture(e[0], e[1]) : o === PhysicalTextureType.PACKED_2X2_FLOAT16 ? r = this.gpgpu.createFloat16PackedMatrixTexture(e[0], e[1]) : o === PhysicalTextureType.UNPACKED_FLOAT32 ? r = this.gpgpu.createFloat32MatrixTexture(e[0], e[1]) : o === PhysicalTextureType.UNPACKED_FLOAT16 ? r = this.gpgpu.createFloat16MatrixTexture(e[0], e[1]) : o === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE && (r = this.gpgpu.createUnsignedBytesMatrixTexture(e[0], e[1])), this.usedTextures[a].push(r), r;
    }, e76.prototype.releaseTexture = function(e, t, n, r) {
        if (null != this.freeTextures) {
            var o = getKeyFromTextureShape(t, getPhysicalFromLogicalTextureType(n, r), r);
            o in this.freeTextures || (this.freeTextures[o] = []), this.freeTextures[o].push(e), this.numFreeTextures++, this.numUsedTextures--;
            var a = this.usedTextures[o], i = a.indexOf(e);
            if (i < 0) throw new Error("Cannot release a texture that was never provided by this texture manager");
            a.splice(i, 1), this.log();
        }
    }, e76.prototype.log = function() {
        if (this.logEnabled) {
            var e = this.numFreeTextures + this.numUsedTextures;
            console.log("Free/Used", this.numFreeTextures + " / " + this.numUsedTextures, "(" + e + ")");
        }
    }, e76.prototype.getNumUsedTextures = function() {
        return this.numUsedTextures;
    }, e76.prototype.getNumFreeTextures = function() {
        return this.numFreeTextures;
    }, e76.prototype.dispose = function() {
        var e = this;
        if (null != this.freeTextures) {
            for(var t32 in this.freeTextures)this.freeTextures[t32].forEach(function(t) {
                e.gpgpu.deleteMatrixTexture(t);
            });
            for(var t32 in this.usedTextures)this.usedTextures[t32].forEach(function(t) {
                e.gpgpu.deleteMatrixTexture(t);
            });
            this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0;
        }
    }, e76;
}();
function getPhysicalFromLogicalTextureType(e, t) {
    if (e === TextureUsage.UPLOAD) return t ? PhysicalTextureType.PACKED_2X2_FLOAT32 : PhysicalTextureType.UNPACKED_FLOAT32;
    if (e === TextureUsage.RENDER || null == e) return t ? ENV.get("WEBGL_RENDER_FLOAT32_ENABLED") ? PhysicalTextureType.PACKED_2X2_FLOAT32 : PhysicalTextureType.PACKED_2X2_FLOAT16 : ENV.get("WEBGL_RENDER_FLOAT32_ENABLED") ? PhysicalTextureType.UNPACKED_FLOAT32 : PhysicalTextureType.UNPACKED_FLOAT16;
    if (e === TextureUsage.DOWNLOAD || e === TextureUsage.PIXELS) return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;
    throw new Error("Unknown logical texture type " + e);
}
function getKeyFromTextureShape(e, t, n) {
    return e[0] + "_" + e[1] + "_" + t + "_" + n;
}
var TileProgram = function() {
    return function(e, t) {
        this.variableNames = [
            "A"
        ];
        for(var n = new Array(e.length), r = 0; r < n.length; r++)n[r] = e[r] * t[r];
        this.outputShape = n, this.rank = n.length;
        var o = getCoordsDataType(this.rank), a = getSourceCoords$2(e);
        this.userCode = "\n      void main() {\n        " + o + " resRC = getOutputCoords();\n        setOutput(getA(" + a + "));\n      }\n    ";
    };
}();
function getSourceCoords$2(e) {
    var t = e.length;
    if (t > 5) throw Error("Tile for rank " + t + " is not yet supported");
    if (1 === t) return "imod(resRC, " + e[0] + ")";
    for(var n = [
        "resRC.x",
        "resRC.y",
        "resRC.z",
        "resRC.w",
        "resRC.u"
    ], r = [], o = 0; o < e.length; o++)r.push("imod(" + n[o] + ", " + e[o] + ")");
    return r.join();
}
var TransposeProgram = function() {
    return function(e, t) {
        this.variableNames = [
            "A"
        ];
        for(var n = new Array(e.length), r = 0; r < n.length; r++)n[r] = e[t[r]];
        this.outputShape = n, this.rank = n.length;
        var o = getCoordsDataType(this.rank), a = getSwitchedCoords(t);
        this.userCode = "\n    void main() {\n      " + o + " resRC = getOutputCoords();\n      setOutput(getA(" + a + "));\n    }\n    ";
    };
}();
function getSwitchedCoords(e) {
    var t = e.length;
    if (t > 6) throw Error("Transpose for rank " + t + " is not yet supported");
    for(var n = [
        "resRC.x",
        "resRC.y",
        "resRC.z",
        "resRC.w",
        "resRC.u",
        "resRC.v"
    ], r = new Array(t), o = 0; o < e.length; o++)r[e[o]] = n[o];
    return r.join();
}
var ERF_P = 0.3275911, ERF_A1 = 0.254829592, ERF_A2 = -0.284496736, ERF_A3 = 1.421413741, ERF_A4 = -1.453152027, ERF_A5 = 1.061405429, SELU_SCALEALPHA = 1.7580993408473768, SELU_SCALE = 1.0507009873554805, UnaryOpProgram = function() {
    function e77(e, t) {
        this.variableNames = [
            "A"
        ], this.outputShape = e, this.userCode = "\n      uniform float NAN;\n      float unaryOperation(float x) {\n        " + t + "\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";
    }
    return e77.prototype.getCustomSetupFunc = function() {
        var e = this;
        return function(t, n) {
            null == e.startLoc && (e.startLoc = t.getUniformLocationNoThrow(n, "NAN"), null == e.startLoc) || t.gl.uniform1f(e.startLoc, NaN);
        };
    }, e77;
}(), CHECK_NAN_SNIPPET$1 = "if (isNaN(x)) return x;", LINEAR = "return x;", ABS = "return abs(x);", RELU = CHECK_NAN_SNIPPET$1 + "\n  return (x < 0.0) ? 0.0 : x;\n", ELU = "return (x >= 0.0) ? x : (exp(x) - 1.0);", SELU = "\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = " + SELU_SCALEALPHA + ";\n  float scale = " + SELU_SCALE + ";\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n";
function STEP(e) {
    return void 0 === e && (e = 0), CHECK_NAN_SNIPPET$1 + "\n    return x > 0.0 ? 1.0 : float(" + e + ");\n  ";
}
var NEG = "return -x;", CEIL = "return ceil(x);", FLOOR = "return floor(x);", SIGN = "\n  if (isNaN(x)) { return 0.0; }\n  return sign(x);\n", ROUND = "\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n", EXP = "return exp(x);", EXPM1 = "return exp(x) - 1.0;", LOG = "if (x < 0.0) return NAN;\n  return log(x);", LOG1P = "return log(1.0 + x);", SQRT = "return sqrt(x);", RSQRT = "return inversesqrt(x);", SIGMOID = "return 1.0 / (1.0 + exp(-1.0 * x));", SOFTPLUS = "\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n", SIN = CHECK_NAN_SNIPPET$1 + "\n  return sin(x);\n", COS = CHECK_NAN_SNIPPET$1 + "\n  return cos(x);\n", TAN = "return tan(x);", ASIN = "return asin(x);", ACOS = "return acos(x);", ATAN = CHECK_NAN_SNIPPET$1 + "\n  return atan(x);\n", SINH = "\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n", COSH = "\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n", TANH = "\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n", ASINH = "return log(x + sqrt(x * x + 1.0));", ACOSH = CHECK_NAN_SNIPPET$1 + "\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));", ATANH = CHECK_NAN_SNIPPET$1 + "\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;", ERF = '\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ' + ERF_P + ";\n  float a1 = " + ERF_A1 + ";\n  float a2 = " + ERF_A2 + ";\n  float a3 = " + ERF_A3 + ";\n  float a4 = " + ERF_A4 + ";\n  float a5 = " + ERF_A5 + ";\n\n  float t = 1.0 / (1.0 + p * x);\n  return 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x);\n", SQUARE = "return x * x;", RECIPROCAL = "return 1.0 / x;", LOGICAL_NOT = "return float(!(x >= 1.0));", TO_INT = "return float(int(x));", CLONE = "return x;", LINEAR$1 = "return x;", LOG$1 = "\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n", RELU$1 = "\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n\n  result.r = isNaN(x.r) ? x.r : result.r;\n  result.g = isNaN(x.g) ? x.g : result.g;\n  result.b = isNaN(x.b) ? x.b : result.b;\n  result.a = isNaN(x.a) ? x.a : result.a;\n\n  return result;\n", UnaryOpPackedProgram = function() {
    function e78(e, t) {
        this.variableNames = [
            "A"
        ], this.usesPackedTextures = !0, this.outputShape = e, this.userCode = "\n      uniform float NAN;\n      vec4 unaryOperation(vec4 x) {\n        " + t + "\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    ";
    }
    return e78.prototype.getCustomSetupFunc = function() {
        var e = this;
        return function(t, n) {
            null == e.startLoc && (e.startLoc = t.getUniformLocationNoThrow(n, "NAN"), null == e.startLoc) || t.gl.uniform1f(e.startLoc, NaN);
        };
    }, e78;
}(), UnpackProgram = function() {
    return function(e) {
        this.variableNames = [
            "A"
        ], this.usesPackedTextures = !0, this.outputShape = e;
        var t = e.length, n = getChannels("rc", t), r = getCoordsDataType(t), o = getSourceCoords$1(t, n), a = n.slice(-2), i = t <= 1 ? "rc" : "vec2(" + a.join(",") + ")";
        this.userCode = "\n      void main() {\n        " + r + " rc = getOutputCoords();\n        vec4 packedInput = getA(" + o + ");\n\n        setOutput(getChannel(packedInput, " + i + "));\n      }\n    ";
    };
}();
function fromPixels_(e, t) {
    if (void 0 === t && (t = 3), t > 4) throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
    return ENV.engine.fromPixels(e, t);
}
function toPixels(e, t) {
    return __awaiter(this, void 0, void 0, function() {
        var n, r, o, a, i, s, u, l, c, p, d, h, f, m, g, v, y, x, T, w;
        return __generator(this, function(E) {
            switch(E.label){
                case 0:
                    if (n = convertToTensor(e, "img", "toPixels"), e instanceof Tensor || (n = n.toInt()), 2 !== n.rank && 3 !== n.rank) throw new Error("toPixels only supports rank 2 or 3 tensors, got rank " + n.rank + ".");
                    if (r = n.shape.slice(0, 2), o = r[0], a = r[1], (i = 2 === n.rank ? 1 : n.shape[2]) > 4 || 2 === i) throw new Error("toPixels only supports depth of size 1, 3 or 4 but got " + i);
                    return s = n.min(), u = n.max(), [
                        4,
                        s.data()
                    ];
                case 1:
                    return l = E.sent()[0], [
                        4,
                        u.data()
                    ];
                case 2:
                    if (c = E.sent()[0], s.dispose(), u.dispose(), "float32" === n.dtype) {
                        if (l < 0 || c > 1) throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range [" + l + " - " + c + "].");
                    } else {
                        if ("int32" !== n.dtype) throw new Error("Unsupported type for toPixels: " + n.dtype + ". Please use float32 or int32 tensors.");
                        if (l < 0 || c > 255) throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range [" + l + " - " + c + "].");
                    }
                    return [
                        4,
                        n.data()
                    ];
                case 3:
                    for(p = E.sent(), d = "float32" === n.dtype ? 255 : 1, h = new Uint8ClampedArray(a * o * 4), f = 0; f < o * a; ++f)m = void 0, g = void 0, v = void 0, y = void 0, 1 === i ? (m = p[f] * d, g = p[f] * d, v = p[f] * d, y = 255) : 3 === i ? (m = p[3 * f] * d, g = p[3 * f + 1] * d, v = p[3 * f + 2] * d, y = 255) : 4 === i && (m = p[4 * f] * d, g = p[4 * f + 1] * d, v = p[4 * f + 2] * d, y = p[4 * f + 3] * d), h[(x = 4 * f) + 0] = Math.round(m), h[x + 1] = Math.round(g), h[x + 2] = Math.round(v), h[x + 3] = Math.round(y);
                    return null != t && (t.width = a, t.height = o, T = t.getContext("2d"), w = new ImageData(h, a, o), T.putImageData(w, 0, 0)), n !== e && n.dispose(), [
                        2,
                        h
                    ];
            }
        });
    });
}
var fromPixels = op({
    fromPixels_: fromPixels_
}), browser = Object.freeze({
    toPixels: toPixels,
    fromPixels: fromPixels
});
function concat1d_(e) {
    return concat(e, 0);
}
function concat2d_(e, t) {
    return concat(e, t);
}
function concat3d_(e, t) {
    return concat(e, t);
}
function concat4d_(e, t) {
    return concat(e, t);
}
function concat_(e79, t) {
    void 0 === t && (t = 0), assert(e79.length >= 1, "Pass at least one tensor to concat");
    var n14 = convertToTensorArray(e79, "tensors", "concat");
    t = parseAxisParam(t, n14[0].shape)[0];
    var r = computeOutShape(n14.map(function(e) {
        return e.shape;
    }), t);
    if (0 === sizeFromShape(r)) return tensor([], r);
    if (1 === (n14 = n14.filter(function(e) {
        return e.size > 0;
    })).length) return n14[0];
    var o = n14.map(function(e) {
        return e.shape;
    });
    assertParamsConsistent(o, t);
    var a = n14;
    return ENV.engine.runKernel(function(e) {
        return e.concat(n14, t);
    }, a, function(e80) {
        var n = o.map(function(e) {
            return e[t];
        });
        return split$1(e80, n, t).map(function(e) {
            return function() {
                return e;
            };
        });
    });
}
function split_(e81, t34, n) {
    void 0 === n && (n = 0);
    var r, o = convertToTensor(e81, "x", "split");
    n = parseAxisParam(n, o.shape)[0], "number" == typeof t34 ? (assert(o.shape[n] % t34 == 0, "Number of splits must evenly divide the axis."), r = new Array(t34).fill(o.shape[n] / t34)) : (assert(o.shape[n] === t34.reduce(function(e, t) {
        return e + t;
    }), "The sum of sizes must match the size of the axis dimension."), r = t34);
    return ENV.engine.runKernel(function(e) {
        return e.split(o, r, n);
    }, {
        $x: o
    }, function(e) {
        return {
            $x: function() {
                return concat(e, n);
            }
        };
    });
}
var concat = op({
    concat_: concat_
}), concat1d = op({
    concat1d_: concat1d_
}), concat2d = op({
    concat2d_: concat2d_
}), concat3d = op({
    concat3d_: concat3d_
}), concat4d = op({
    concat4d_: concat4d_
}), split$1 = op({
    split_: split_
}), commonjsGlobal = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {
};
function createCommonjsModule(e, t) {
    return e(t = {
        exports: {
        }
    }, t.exports), t.exports;
}
var alea = createCommonjsModule(function(e82) {
    !function(e83, t35, n15) {
        function r7(e, t) {
            return t.c = e.c, t.s0 = e.s0, t.s1 = e.s1, t.s2 = e.s2, t;
        }
        function o5(e84, t36) {
            var n16 = new function(e85) {
                var t, n17 = this, r8 = (t = 4022871197, function(e) {
                    e = e.toString();
                    for(var n = 0; n < e.length; n++){
                        var r = 0.02519603282416938 * (t += e.charCodeAt(n));
                        r -= t = r >>> 0, t = (r *= t) >>> 0, t += 4294967296 * (r -= t);
                    }
                    return 0.00000000023283064365386963 * (t >>> 0);
                });
                n17.next = function() {
                    var e = 2091639 * n17.s0 + 0.00000000023283064365386963 * n17.c;
                    return n17.s0 = n17.s1, n17.s1 = n17.s2, n17.s2 = e - (n17.c = 0 | e);
                }, n17.c = 1, n17.s0 = r8(" "), n17.s1 = r8(" "), n17.s2 = r8(" "), n17.s0 -= r8(e85), n17.s0 < 0 && (n17.s0 += 1), n17.s1 -= r8(e85), n17.s1 < 0 && (n17.s1 += 1), n17.s2 -= r8(e85), n17.s2 < 0 && (n17.s2 += 1), r8 = null;
            }(e84), o = t36 && t36.state, a = n16.next;
            return a.int32 = function() {
                return 4294967296 * n16.next() | 0;
            }, a.double = function() {
                return a() + 0.00000000000000011102230246251565 * (2097152 * a() | 0);
            }, a.quick = a, o && ("object" == typeof o && r7(o, n16), a.state = function() {
                return r7(n16, {
                });
            }), a;
        }
        t35 && t35.exports ? t35.exports = o5 : n15 && n15.amd ? n15(function() {
            return o5;
        }) : this.alea = o5;
    }(0, e82, !1);
}), xor128 = createCommonjsModule(function(e86) {
    !function(e87, t37, n18) {
        function r9(e, t) {
            return t.x = e.x, t.y = e.y, t.z = e.z, t.w = e.w, t;
        }
        function o6(e88, t38) {
            var n19 = new function(e89) {
                var t = this, n = "";
                t.x = 0, t.y = 0, t.z = 0, t.w = 0, t.next = function() {
                    var e = t.x ^ t.x << 11;
                    return t.x = t.y, t.y = t.z, t.z = t.w, t.w ^= t.w >>> 19 ^ e ^ e >>> 8;
                }, e89 === (0 | e89) ? t.x = e89 : n += e89;
                for(var r = 0; r < n.length + 64; r++)t.x ^= 0 | n.charCodeAt(r), t.next();
            }(e88), o = t38 && t38.state, a = function() {
                return (n19.next() >>> 0) / 4294967296;
            };
            return a.double = function() {
                do var e = ((n19.next() >>> 11) + (n19.next() >>> 0) / 4294967296) / 2097152;
                while (0 === e)
                return e;
            }, a.int32 = n19.next, a.quick = a, o && ("object" == typeof o && r9(o, n19), a.state = function() {
                return r9(n19, {
                });
            }), a;
        }
        t37 && t37.exports ? t37.exports = o6 : n18 && n18.amd ? n18(function() {
            return o6;
        }) : this.xor128 = o6;
    }(0, e86, !1);
}), xorwow = createCommonjsModule(function(e90) {
    !function(e91, t39, n20) {
        function r10(e, t) {
            return t.x = e.x, t.y = e.y, t.z = e.z, t.w = e.w, t.v = e.v, t.d = e.d, t;
        }
        function o7(e92, t40) {
            var n21 = new function(e93) {
                var t = this, n = "";
                t.next = function() {
                    var e = t.x ^ t.x >>> 2;
                    return t.x = t.y, t.y = t.z, t.z = t.w, t.w = t.v, (t.d = t.d + 362437 | 0) + (t.v = t.v ^ t.v << 4 ^ e ^ e << 1) | 0;
                }, t.x = 0, t.y = 0, t.z = 0, t.w = 0, t.v = 0, e93 === (0 | e93) ? t.x = e93 : n += e93;
                for(var r = 0; r < n.length + 64; r++)t.x ^= 0 | n.charCodeAt(r), r == n.length && (t.d = t.x << 10 ^ t.x >>> 4), t.next();
            }(e92), o = t40 && t40.state, a = function() {
                return (n21.next() >>> 0) / 4294967296;
            };
            return a.double = function() {
                do var e = ((n21.next() >>> 11) + (n21.next() >>> 0) / 4294967296) / 2097152;
                while (0 === e)
                return e;
            }, a.int32 = n21.next, a.quick = a, o && ("object" == typeof o && r10(o, n21), a.state = function() {
                return r10(n21, {
                });
            }), a;
        }
        t39 && t39.exports ? t39.exports = o7 : n20 && n20.amd ? n20(function() {
            return o7;
        }) : this.xorwow = o7;
    }(0, e90, !1);
}), xorshift7 = createCommonjsModule(function(e94) {
    !function(e95, t41, n22) {
        function r11(e, t) {
            return t.x = e.x.slice(), t.i = e.i, t;
        }
        function o8(e96, t42) {
            null == e96 && (e96 = +new Date);
            var n23 = new function(e97) {
                var t43 = this;
                t43.next = function() {
                    var e, n, r = t43.x, o = t43.i;
                    return e = r[o], n = (e ^= e >>> 7) ^ e << 24, n ^= (e = r[o + 1 & 7]) ^ e >>> 10, n ^= (e = r[o + 3 & 7]) ^ e >>> 3, n ^= (e = r[o + 4 & 7]) ^ e << 7, e = r[o + 7 & 7], n ^= (e ^= e << 13) ^ e << 9, r[o] = n, t43.i = o + 1 & 7, n;
                }, (function(e, t) {
                    var n, r = [];
                    if (t === (0 | t)) r[0] = t;
                    else for(t = "" + t, n = 0; n < t.length; ++n)r[7 & n] = r[7 & n] << 15 ^ t.charCodeAt(n) + r[n + 1 & 7] << 13;
                    for(; r.length < 8;)r.push(0);
                    for(n = 0; n < 8 && 0 === r[n]; ++n);
                    for(8 == n ? r[7] = -1 : r[n], e.x = r, e.i = 0, n = 256; n > 0; --n)e.next();
                })(t43, e97);
            }(e96), o9 = t42 && t42.state, a = function() {
                return (n23.next() >>> 0) / 4294967296;
            };
            return a.double = function() {
                do var e = ((n23.next() >>> 11) + (n23.next() >>> 0) / 4294967296) / 2097152;
                while (0 === e)
                return e;
            }, a.int32 = n23.next, a.quick = a, o9 && (o9.x && r11(o9, n23), a.state = function() {
                return r11(n23, {
                });
            }), a;
        }
        t41 && t41.exports ? t41.exports = o8 : n22 && n22.amd ? n22(function() {
            return o8;
        }) : this.xorshift7 = o8;
    }(0, e94, !1);
}), xor4096 = createCommonjsModule(function(e98) {
    !function(e99, t44, n24) {
        function r12(e, t) {
            return t.i = e.i, t.w = e.w, t.X = e.X.slice(), t;
        }
        function o10(e100, t45) {
            null == e100 && (e100 = +new Date);
            var n25 = new function(e101) {
                var t46 = this;
                t46.next = function() {
                    var e, n, r = t46.w, o = t46.X, a = t46.i;
                    return t46.w = r = r + 1640531527 | 0, n = o[a + 34 & 127], e = o[a = a + 1 & 127], n ^= n << 13, e ^= e << 17, n ^= n >>> 15, e ^= e >>> 12, n = o[a] = n ^ e, t46.i = a, n + (r ^ r >>> 16) | 0;
                }, (function(e, t) {
                    var n, r, o, a, i, s = [], u = 128;
                    for(t === (0 | t) ? (r = t, t = null) : (t += "\0", r = 0, u = Math.max(u, t.length)), o = 0, a = -32; a < u; ++a)t && (r ^= t.charCodeAt((a + 32) % t.length)), 0 === a && (i = r), r ^= r << 10, r ^= r >>> 15, r ^= r << 4, r ^= r >>> 13, a >= 0 && (i = i + 1640531527 | 0, o = 0 == (n = s[127 & a] ^= r + i) ? o + 1 : 0);
                    for(o >= 128 && (s[127 & (t && t.length || 0)] = -1), o = 127, a = 512; a > 0; --a)r = s[o + 34 & 127], n = s[o = o + 1 & 127], r ^= r << 13, n ^= n << 17, r ^= r >>> 15, n ^= n >>> 12, s[o] = r ^ n;
                    e.w = i, e.X = s, e.i = o;
                })(t46, e101);
            }(e100), o11 = t45 && t45.state, a6 = function() {
                return (n25.next() >>> 0) / 4294967296;
            };
            return a6.double = function() {
                do var e = ((n25.next() >>> 11) + (n25.next() >>> 0) / 4294967296) / 2097152;
                while (0 === e)
                return e;
            }, a6.int32 = n25.next, a6.quick = a6, o11 && (o11.X && r12(o11, n25), a6.state = function() {
                return r12(n25, {
                });
            }), a6;
        }
        t44 && t44.exports ? t44.exports = o10 : n24 && n24.amd ? n24(function() {
            return o10;
        }) : this.xor4096 = o10;
    }(0, e98, !1);
}), tychei = createCommonjsModule(function(e102) {
    !function(e103, t47, n26) {
        function r13(e, t) {
            return t.a = e.a, t.b = e.b, t.c = e.c, t.d = e.d, t;
        }
        function o12(e104, t48) {
            var n27 = new function(e105) {
                var t = this, n28 = "";
                t.next = function() {
                    var e = t.b, n = t.c, r = t.d, o = t.a;
                    return e = e << 25 ^ e >>> 7 ^ n, n = n - r | 0, r = r << 24 ^ r >>> 8 ^ o, o = o - e | 0, t.b = e = e << 20 ^ e >>> 12 ^ n, t.c = n = n - r | 0, t.d = r << 16 ^ n >>> 16 ^ o, t.a = o - e | 0;
                }, t.a = 0, t.b = 0, t.c = -1640531527, t.d = 1367130551, e105 === Math.floor(e105) ? (t.a = e105 / 4294967296 | 0, t.b = 0 | e105) : n28 += e105;
                for(var r14 = 0; r14 < n28.length + 20; r14++)t.b ^= 0 | n28.charCodeAt(r14), t.next();
            }(e104), o13 = t48 && t48.state, a = function() {
                return (n27.next() >>> 0) / 4294967296;
            };
            return a.double = function() {
                do var e = ((n27.next() >>> 11) + (n27.next() >>> 0) / 4294967296) / 2097152;
                while (0 === e)
                return e;
            }, a.int32 = n27.next, a.quick = a, o13 && ("object" == typeof o13 && r13(o13, n27), a.state = function() {
                return r13(n27, {
                });
            }), a;
        }
        t47 && t47.exports ? t47.exports = o12 : n26 && n26.amd ? n26(function() {
            return o12;
        }) : this.tychei = o12;
    }(0, e102, !1);
}), seedrandom = createCommonjsModule(function(e106) {
    !function(t49, n29) {
        var r15, o14 = this, a7 = 256, i1 = 6, s2 = "random", u = n29.pow(a7, i1), l = n29.pow(2, 52), c = 2 * l, p = a7 - 1;
        function d1(e107, d, g) {
            var v = [], y = f(function e(t, n) {
                var r, o = [], a = typeof t;
                if (n && "object" == a) for(r in t)try {
                    o.push(e(t[r], n - 1));
                } catch (e108) {
                }
                return o.length ? o : "string" == a ? t : t + "\0";
            }((d = 1 == d ? {
                entropy: !0
            } : d || {
            }).entropy ? [
                e107,
                m(t49)
            ] : null == e107 ? function() {
                try {
                    var e;
                    return r15 && (e = r15.randomBytes) ? e = e(a7) : (e = new Uint8Array(a7), (o14.crypto || o14.msCrypto).getRandomValues(e)), m(e);
                } catch (e) {
                    var n = o14.navigator, i = n && n.plugins;
                    return [
                        +new Date,
                        o14,
                        i,
                        o14.screen,
                        m(t49)
                    ];
                }
            }() : e107, 3), v), x = new function(e109) {
                var t50, n30 = e109.length, r = this, o15 = 0, i2 = r.i = r.j = 0, s3 = r.S = [];
                n30 || (e109 = [
                    n30++
                ]);
                for(; o15 < a7;)s3[o15] = o15++;
                for(o15 = 0; o15 < a7; o15++)s3[o15] = s3[i2 = p & i2 + e109[o15 % n30] + (t50 = s3[o15])], s3[i2] = t50;
                (r.g = function(e) {
                    for(var t, n = 0, o = r.i, i = r.j, s = r.S; e--;)t = s[o = p & o + 1], n = n * a7 + s[p & (s[o] = s[i = p & i + t]) + (s[i] = t)];
                    return r.i = o, r.j = i, n;
                })(a7);
            }(v), T = function() {
                for(var e = x.g(i1), t = u, n = 0; e < l;)e = (e + n) * a7, t *= a7, n = x.g(1);
                for(; e >= c;)e /= 2, t /= 2, n >>>= 1;
                return (e + n) / t;
            };
            return T.int32 = function() {
                return 0 | x.g(4);
            }, T.quick = function() {
                return x.g(4) / 4294967296;
            }, T.double = T, f(m(x.S), t49), (d.pass || g || function(e, t, r, o) {
                return o && (o.S && h(o, x), e.state = function() {
                    return h(x, {
                    });
                }), r ? (n29[s2] = e, t) : e;
            })(T, y, "global" in d ? d.global : this == n29, d.state);
        }
        function h(e, t) {
            return t.i = e.i, t.j = e.j, t.S = e.S.slice(), t;
        }
        function f(e, t) {
            for(var n, r = e + "", o = 0; o < r.length;)t[p & o] = p & (n ^= 19 * t[p & o]) + r.charCodeAt(o++);
            return m(t);
        }
        function m(e) {
            return String.fromCharCode.apply(0, e);
        }
        if (n29["seed" + s2] = d1, f(n29.random(), t49), e106.exports) {
            e106.exports = d1;
            try {
                r15 = require("crypto");
            } catch (e) {
            }
        }
    }([], Math);
});
seedrandom.alea = alea, seedrandom.xor128 = xor128, seedrandom.xorwow = xorwow, seedrandom.xorshift7 = xorshift7, seedrandom.xor4096 = xor4096, seedrandom.tychei = tychei;
var seedrandom$1 = seedrandom, seedrandom_1 = seedrandom$1.alea, MPRandGauss = function() {
    function e110(e, t, n, r, o) {
        this.mean = e, this.stdDev = t, this.dtype = n, this.nextVal = NaN, this.truncated = r, this.truncated && (this.upper = this.mean + 2 * this.stdDev, this.lower = this.mean - 2 * this.stdDev);
        var a = o || Math.random();
        this.random = seedrandom_1(a.toString());
    }
    return e110.prototype.nextValue = function() {
        if (!isNaN(this.nextVal)) {
            var e = this.nextVal;
            return this.nextVal = NaN, e;
        }
        for(var t, n, r = !1; !r;){
            var o = void 0, a = void 0, i = void 0;
            do i = (o = 2 * this.random() - 1) * o + (a = 2 * this.random() - 1) * a;
            while (i >= 1 || 0 === i)
            var s = Math.sqrt(-2 * Math.log(i) / i);
            t = this.mean + this.stdDev * o * s, n = this.mean + this.stdDev * a * s, this.truncated && !this.isValidTruncated(t) || (r = !0);
        }
        return this.truncated && !this.isValidTruncated(n) || (this.nextVal = this.convertValue(n)), this.convertValue(t);
    }, e110.prototype.convertValue = function(e) {
        return null == this.dtype || "float32" === this.dtype ? e : Math.round(e);
    }, e110.prototype.isValidTruncated = function(e) {
        return e <= this.upper && e >= this.lower;
    }, e110;
}();
function clone_(e111) {
    var t = convertToTensor(e111, "x", "clone", null);
    return ENV.engine.runKernel(function(e) {
        return Tensor.make(t.shape, {
            dataId: t.dataId
        }, t.dtype);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.toFloat();
            }
        };
    });
}
function eye_(e, t, n, r) {
    void 0 === r && (r = "float32"), null == t && (t = e);
    for(var o = buffer([
        e,
        t
    ], r), a = e <= t ? e : t, i = 0; i < a; ++i)o.set(1, i, i);
    var s = o.toTensor().as2D(e, t);
    if (null == n) return s;
    if (1 === n.length) return tile(expandDims(s, 0), [
        n[0],
        1,
        1
    ]);
    if (2 === n.length) return tile(expandDims(expandDims(s, 0), 0), [
        n[0],
        n[1],
        1,
        1
    ]);
    if (3 === n.length) return tile(expandDims(expandDims(expandDims(s, 0), 0), 0), [
        n[0],
        n[1],
        n[2],
        1,
        1
    ]);
    throw new Error("eye() currently supports only 1D and 2D batchShapes, but received " + n.length + "D.");
}
function randomNormal_(e, t, n, r, o) {
    if (void 0 === t && (t = 0), void 0 === n && (n = 1), null != r && "bool" === r) throw new Error("Unsupported data type " + r);
    for(var a = new MPRandGauss(t, n, r, !1, o), i = buffer(e, r), s = 0; s < i.values.length; s++)i.values[s] = a.nextValue();
    return i.toTensor();
}
function truncatedNormal_(e, t, n, r, o) {
    if (void 0 === t && (t = 0), void 0 === n && (n = 1), null != r && "bool" === r) throw new Error("Unsupported data type " + r);
    for(var a = new MPRandGauss(t, n, r, !0, o), i = buffer(e, r), s = 0; s < i.values.length; s++)i.values[s] = a.nextValue();
    return i.toTensor();
}
function randomUniform_(e, t, n, r) {
    void 0 === t && (t = 0), void 0 === n && (n = 1), void 0 === r && (r = "float32");
    for(var o = buffer(e, r), a = 0; a < o.values.length; a++)o.values[a] = randUniform(t, n);
    return o.toTensor();
}
function rand_(e, t, n) {
    var r = sizeFromShape(e), o = null;
    if (null == n || "float32" === n) o = new Float32Array(r);
    else if ("int32" === n) o = new Int32Array(r);
    else {
        if ("bool" !== n) throw new Error("Unknown data type " + n);
        o = new Uint8Array(r);
    }
    for(var a = 0; a < r; a++)o[a] = t();
    return Tensor.make(e, {
        values: o
    }, n);
}
function multinomial_(e112, t, n, r) {
    void 0 === r && (r = !1);
    var o = convertToTensor(e112, "logits", "multinomial"), a = o.size, i = o.rank;
    if (a < 2) throw new Error("Error in multinomial: you need at least 2 outcomes, but got " + a + ".");
    if (i > 2) throw new Error("Rank of probabilities must be 1 or 2, but is " + i);
    n = n || Math.random();
    var s = 1 === i ? o.as2D(1, -1) : o, u = ENV.engine.runKernel(function(e) {
        return e.multinomial(s, r, t, n);
    }, {
        logits2D: s
    });
    return 1 === i ? u.as1D() : u;
}
function oneHot_(e113, t, n, r) {
    if (void 0 === n && (n = 1), void 0 === r && (r = 0), t < 2) throw new Error("Error in oneHot: depth must be >=2, but it is " + t);
    var o = convertToTensor(e113, "indices", "oneHot", "int32"), a = o.shape.concat([
        t
    ]);
    o = o.flatten();
    return ENV.engine.runKernel(function(e) {
        return e.oneHot(o, t, n, r);
    }, {
        $indices: o
    }, function(e) {
        return {
            $indices: function() {
                return zeros(o.shape, "float32");
            }
        };
    }).reshape(a);
}
function fromPixels_$1(e, t) {
    return void 0 === t && (t = 3), deprecationWarn("tf.fromPixels() is renamed to tf.browser.fromPixels(), please switch to the new method as the old method will be removed in TensorFlow.js 1.0."), fromPixels(e, t);
}
function toPixels$1(e, t) {
    return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(n) {
            return deprecationWarn("tf.toPixels() is renamed to tf.browser.toPixels(), please switch to the new method as the old method will be removed in TensorFlow.js 1.0."), [
                2,
                toPixels(e, t)
            ];
        });
    });
}
function reshape_(e114, t) {
    var n = convertToTensor(e114, "x", "reshape", null);
    t = inferFromImplicitShape(t, n.size), assert(n.size === sizeFromShape(t), "new shape and old shape must have the same number of elements.");
    return ENV.engine.runKernel(function(e) {
        return e.reshape(n, t);
    }, {
        $x: n
    }, function(e) {
        return {
            $x: function() {
                return e.reshape(n.shape);
            }
        };
    });
}
function squeeze_(e, t) {
    var n = convertToTensor(e, "x", "squeeze");
    return reshape(n, squeezeShape(n.shape, t).newShape);
}
function cast_(e115, t) {
    var n = convertToTensor(e115, "x", "cast");
    return ENV.engine.runKernel(function(e) {
        return e.cast(n, t);
    }, {
        $x: n
    }, function(e) {
        return {
            $x: function() {
                return e.clone();
            }
        };
    });
}
function tile_(e116, t) {
    var n = convertToTensor(e116, "x", "tile");
    assert(n.rank === t.length, "Error in transpose: rank of input " + n.rank + " must match length of reps " + t + ".");
    return ENV.engine.runKernel(function(e) {
        return e.tile(n, t);
    }, {
        $x: n
    }, function(e) {
        return {
            $x: function() {
                var r = zerosLike(n);
                if (1 === n.rank) for(var o = 0; o < t[0]; ++o)r = r.add(e.slice([
                    o * n.shape[0]
                ], [
                    n.shape[0]
                ]));
                else if (2 === n.rank) for(o = 0; o < t[0]; ++o)for(var a = 0; a < t[1]; ++a)r = r.add(e.slice([
                    o * n.shape[0],
                    a * n.shape[1]
                ], [
                    n.shape[0],
                    n.shape[1]
                ]));
                else if (3 === n.rank) for(o = 0; o < t[0]; ++o)for(a = 0; a < t[1]; ++a)for(var i = 0; i < t[2]; ++i)r = r.add(e.slice([
                    o * n.shape[0],
                    a * n.shape[1],
                    i * n.shape[2]
                ], [
                    n.shape[0],
                    n.shape[1],
                    n.shape[2]
                ]));
                else {
                    if (4 !== n.rank) throw new Error("Gradient for tile operation is not implemented for rank-" + n.rank + " tensors yet.");
                    for(o = 0; o < t[0]; ++o)for(a = 0; a < t[1]; ++a)for(i = 0; i < t[2]; ++i)for(var s = 0; s < t[3]; ++s)r = r.add(e.slice([
                        o * n.shape[0],
                        a * n.shape[1],
                        i * n.shape[2],
                        s * n.shape[3]
                    ], [
                        n.shape[0],
                        n.shape[1],
                        n.shape[2],
                        n.shape[3]
                    ]));
                }
                return r;
            }
        };
    });
}
function pad1d_(e, t, n) {
    return void 0 === n && (n = 0), assert(2 === t.length, "Invalid number of paddings. Must be length of 2."), pad(e, [
        t
    ], n);
}
function pad2d_(e, t, n) {
    return void 0 === n && (n = 0), assert(2 === t.length && 2 === t[0].length && 2 === t[1].length, "Invalid number of paddings. Must be length of 2 each."), pad(e, t, n);
}
function pad3d_(e, t, n) {
    return void 0 === n && (n = 0), assert(3 === t.length && 2 === t[0].length && 2 === t[1].length && 2 === t[2].length, "Invalid number of paddings. Must be length of 2 each."), pad(e, t, n);
}
function pad4d_(e, t, n) {
    return void 0 === n && (n = 0), assert(4 === t.length && 2 === t[0].length && 2 === t[1].length && 2 === t[2].length && 2 === t[3].length, "Invalid number of paddings. Must be length of 2 each."), pad(e, t, n);
}
function pad_(e117, t, n) {
    void 0 === n && (n = 0);
    var r = convertToTensor(e117, "x", "pad");
    if (0 === r.rank) throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
    var o = t.map(function(e) {
        return e[0];
    });
    return ENV.engine.runKernel(function(e) {
        return e.pad(r, t, n);
    }, {
        $x: r
    }, function(e) {
        return {
            $x: function() {
                return e.slice(o, r.shape);
            }
        };
    });
}
function stack_(e118, t) {
    void 0 === t && (t = 0);
    var n = convertToTensorArray(e118, "tensors", "stack");
    if (assert(n.length >= 1, "Pass at least one tensor to tf.stack"), 1 === n.length) return n[0].expandDims(t);
    var r = n[0].rank, o = n[0].shape, a = n[0].dtype;
    assert(t <= r, "Axis must be <= rank of the tensor"), n.forEach(function(e) {
        assertShapesMatch(o, e.shape, "All tensors passed to stack must have matching shapes");
    }), n.forEach(function(e) {
        assert(a === e.dtype, "All tensors passed to stack must have matching dtypes");
    });
    var i = n.map(function(e) {
        return e.expandDims(t);
    });
    return concat(i, t);
}
function batchToSpaceND_(e119, t51, n) {
    var r = convertToTensor(e119, "x", "batchToSpaceND"), o = t51.reduce(function(e, t) {
        return e * t;
    });
    assert(r.rank >= 1 + t51.length, "input rank is " + r.rank + " but should be > than blockShape.length " + t51.length), assert(n.length === t51.length, "crops.length is " + n.length + " but should be equal to blockShape.length  " + t51.length), assert(r.shape[0] % o == 0, "input tensor batch is " + r.shape[0] + " but is not divisible by the product of the elements of blockShape " + t51.join(" * ") + " === " + o);
    return ENV.engine.runKernel(function(e) {
        return e.batchToSpaceND(r, t51, n);
    }, {
        $x: r
    }, function(e) {
        return {
            $x: function() {
                return e.spaceToBatchND(t51, n);
            }
        };
    });
}
function spaceToBatchND_(e120, t, n) {
    var r16 = convertToTensor(e120, "x", "spaceToBatchND");
    assert(r16.rank >= 1 + t.length, "input rank " + r16.rank + " should be > than [blockShape] " + t.length), assert(n.length === t.length, "paddings.shape[0] " + n.length + " must be equal to [blockShape] " + t.length), assert(r16.shape.reduce(function(e, r, o) {
        return o > 0 && o <= t.length ? e && (r + n[o - 1][0] + n[o - 1][1]) % t[o - 1] == 0 : e;
    }, !0), "input spatial dimensions " + r16.shape.slice(1) + " with paddings " + n.toString() + " must be divisible by blockShapes " + t.toString());
    return ENV.engine.runKernel(function(e) {
        return e.spaceToBatchND(r16, t, n);
    }, {
        $x: r16
    }, function(e) {
        return {
            $x: function() {
                return e.batchToSpaceND(t, n);
            }
        };
    });
}
function unstack_(e121, t) {
    void 0 === t && (t = 0), t = t || 0;
    var n = convertToTensor(e121, "x", "unstack");
    assert(t < n.shape.length, "Axis " + t + " is >= to tensor shape length " + n.shape.length);
    return ENV.engine.runKernel(function(e) {
        return e.unstack(n, t);
    }, {
        $x: n
    }, function(e) {
        return {
            $x: function() {
                return stack(e, t);
            }
        };
    });
}
function cumsum_(e122, t, n, r) {
    void 0 === t && (t = 0), void 0 === n && (n = !1), void 0 === r && (r = !1);
    var o = convertToTensor(e122, "x", "cumsum"), a = getAxesPermutation([
        t |= 0
    ], o.rank), i = o;
    null != a && (i = o.transpose(a));
    var s = getInnerMostAxes(1, o.rank)[0], u = ENV.engine.runKernel(function(e) {
        return e.cumsum(i, s, n, r);
    }, {
        permutedX: i
    }, function(e) {
        return {
            permutedX: function() {
                return e.cumsum(t, n, !r);
            }
        };
    });
    return null != a && (u = u.transpose(a)), u;
}
function expandDims_(e, t) {
    void 0 === t && (t = 0);
    var n = convertToTensor(e, "x", "expandDims");
    assert(t <= n.rank, "Axis must be <= rank of the tensor");
    var r = n.shape.slice();
    return t < 0 && (assert(-(n.rank + 1) <= t, "Axis must be in the interval [" + -(n.rank + 1) + ", " + n.rank + "]"), t = n.rank + t + 1), r.splice(t, 0, 1), reshape(n, r);
}
function depthToSpace_(e123, t, n) {
    void 0 === n && (n = "NHWC");
    var r = convertToTensor(e123, "x", "depthToSpace"), o = "NHWC" === n ? r.shape[1] : r.shape[2], a = "NHWC" === n ? r.shape[2] : r.shape[3], i = "NHWC" === n ? r.shape[3] : r.shape[1];
    return assert(o * t >= 0, "Negative dimension size caused by overflow when multiplying\n      " + o + " and " + t + "  for depthToSpace with input shape\n      " + r.shape), assert(a * t >= 0, "Negative dimension size caused by overflow when multiplying\n      " + a + " and " + t + " for depthToSpace with input shape\n          " + r.shape), assert(i % (t * t) == 0, "Dimension size must be evenly divisible by " + t * t + " but is " + i + " for depthToSpace with input shape " + r.shape), ENV.engine.runKernel(function(e) {
        return e.depthToSpace(r, t, n);
    }, {
        $x: r
    });
}
function setdiff1dAsync_(e, t) {
    return __awaiter(this, void 0, void 0, function() {
        var n, r, o, a, i, s, u, l, c, p;
        return __generator(this, function(d) {
            switch(d.label){
                case 0:
                    return n = convertToTensor(e, "x", "setdiff1d"), r = convertToTensor(t, "y", "setdiff1d"), assert(n.dtype === r.dtype, "x and y should have the same dtype, but got x (" + n.dtype + ") and y (" + r.dtype + ")."), assert(1 === n.rank, "x should be 1D tensor, but got x (" + n.shape + ")."), assert(1 === r.rank, "y should be 1D tensor, but got y (" + r.shape + ")."), [
                        4,
                        n.data()
                    ];
                case 1:
                    return o = d.sent(), [
                        4,
                        r.data()
                    ];
                case 2:
                    for(a = d.sent(), i = new Set(a), s = 0, c = 0; c < o.length; c++)i.has(o[c]) || s++;
                    for(u = new TensorBuffer([
                        s
                    ], n.dtype), l = new TensorBuffer([
                        s
                    ], "int32"), c = 0, p = 0; c < o.length; c++)i.has(o[c]) || (u.values[p] = o[c], l.values[p] = c, p++);
                    return [
                        2,
                        [
                            u.toTensor(),
                            l.toTensor()
                        ]
                    ];
            }
        });
    });
}
function buffer(e, t, n) {
    return void 0 === t && (t = "float32"), new TensorBuffer(e, t = t || "float32", n);
}
function print(e, t) {
    void 0 === t && (t = !1), console.log(e.toString(t));
}
var batchToSpaceND = op({
    batchToSpaceND_: batchToSpaceND_
}), cast = op({
    cast_: cast_
}), clone = op({
    clone_: clone_
}), cumsum = op({
    cumsum_: cumsum_
}), depthToSpace = op({
    depthToSpace_: depthToSpace_
}), expandDims = op({
    expandDims_: expandDims_
}), eye = op({
    eye_: eye_
}), fromPixels$1 = fromPixels_$1, multinomial = op({
    multinomial_: multinomial_
}), oneHot = op({
    oneHot_: oneHot_
}), pad = op({
    pad_: pad_
}), pad1d = op({
    pad1d_: pad1d_
}), pad2d = op({
    pad2d_: pad2d_
}), pad3d = op({
    pad3d_: pad3d_
}), pad4d = op({
    pad4d_: pad4d_
}), rand = op({
    rand_: rand_
}), randomNormal = op({
    randomNormal_: randomNormal_
}), randomUniform = op({
    randomUniform_: randomUniform_
}), reshape = op({
    reshape_: reshape_
}), spaceToBatchND = op({
    spaceToBatchND_: spaceToBatchND_
}), squeeze = op({
    squeeze_: squeeze_
}), stack = op({
    stack_: stack_
}), tile = op({
    tile_: tile_
}), truncatedNormal = op({
    truncatedNormal_: truncatedNormal_
}), unstack = op({
    unstack_: unstack_
}), setdiff1dAsync = setdiff1dAsync_;
function whereImpl(e, t) {
    for(var n = [], r = 0; r < t.length; r++)t[r] && n.push(r);
    var o = buffer(e, "int32"), a = buffer([
        n.length,
        e.length
    ], "int32");
    for(r = 0; r < n.length; r++){
        var i = o.indexToLoc(n[r]), s = r * e.length;
        a.values.set(i, s);
    }
    return a.toTensor();
}
function mapActivationToShaderProgram(e, t) {
    if (void 0 === t && (t = !1), "linear" === e) return t ? LINEAR$1 : LINEAR;
    if ("relu" === e) return t ? RELU$1 : RELU;
    throw new Error("Activation " + e + " has not been implemented for the WebGL backend.");
}
var CPU_HANDOFF_SIZE_THRESHOLD = 10, MATMUL_SHARED_DIM_THRESHOLD = 1000, MathBackendWebGL = function() {
    function e124(e, t) {
        if (void 0 === t && (t = !0), this.gpgpu = e, this.delayedStorage = t, this.pendingRead = new WeakMap, this.pendingDisposal = new WeakSet, this.dataRefCount = new WeakMap, this.lruDataGPU = [], this.numBytesInGPU = 0, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.binaryCache = {
        }, this.disposed = !1, ENV.get("WEBGL_VERSION") < 1) throw new Error("WebGL is not supported on this device");
        if (null == e) {
            var n = getWebGLContext(ENV.get("WEBGL_VERSION"));
            this.gpgpu = new GPGPUContext(n), this.canvas = n.canvas, this.gpgpuCreatedLocally = !0;
        } else this.gpgpuCreatedLocally = !1, this.canvas = e.gl.canvas;
        this.textureManager = new TextureManager(this.gpgpu);
    }
    return e124.prototype.register = function(e, t, n) {
        if (this.texData.has(e)) throw new Error("Data buffer is already registered");
        this.texData.set(e, {
            shape: t,
            dtype: n
        });
    }, e124.prototype.setDataMover = function(e) {
        this.texData = new DataStorage(e);
    }, e124.prototype.fromPixels = function(e, t) {
        if (null == e) throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
        var n = [
            e.height,
            e.width
        ], r = [
            e.height,
            e.width,
            t
        ];
        if (!(e instanceof HTMLVideoElement || e instanceof HTMLImageElement || e instanceof HTMLCanvasElement || e instanceof ImageData)) throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement or ImageData, but was " + e.constructor.name);
        if (e instanceof HTMLVideoElement) {
            if (null == this.fromPixels2DContext) {
                if (!ENV.get("IS_BROWSER")) throw new Error("Can't read pixels from HTMLImageElement outside the browser.");
                if ("complete" !== document.readyState) throw new Error("The DOM is not ready yet. Please call tf.fromPixels() once the DOM is ready. One way to do that is to add an event listener for `DOMContentLoaded` on the document object");
                this.fromPixels2DContext = document.createElement("canvas").getContext("2d");
            }
            this.fromPixels2DContext.canvas.width = e.width, this.fromPixels2DContext.canvas.height = e.height, this.fromPixels2DContext.drawImage(e, 0, 0, e.width, e.height), e = this.fromPixels2DContext.canvas;
        }
        var o = this.makeTensorHandle(n, "int32");
        this.texData.get(o.dataId).usage = TextureUsage.PIXELS, this.gpgpu.uploadPixelDataToTexture(this.getTexture(o.dataId), e);
        var a = new FromPixelsProgram(r), i = this.compileAndRun(a, [
            o
        ]);
        return this.disposeData(o.dataId), i;
    }, e124.prototype.makeTensorHandle = function(e, t) {
        var n = {
        };
        return this.register(n, e, t), {
            dataId: n,
            shape: e,
            dtype: t
        };
    }, e124.prototype.write = function(e, t) {
        if (null == t) throw new Error("MathBackendWebGL.write(): values can not be null");
        if (ENV.get("DEBUG")) for(var n = 0; n < t.length; n++){
            var r = t[n];
            if (!canBeRepresented(r)) throw Error("The value " + r + " cannot be represented on this device.");
        }
        var o = this.texData.get(e), a = o.texture, i = o.texShape, s = o.usage, u = o.dtype, l = o.isPacked;
        if ("complex64" === u) throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
        null != a && (this.releaseTexture(e, a, i, s, l), o.texture = null, o.texShape = null), o.usage = TextureUsage.UPLOAD, o.values = t, this.delayedStorage || this.uploadToGPU(e);
    }, e124.prototype.readSync = function(e) {
        var t = this.texData.get(e), n = t.values, r = t.dtype, o = t.complexTensors, a = t.slice, i = t.shape;
        if (null != a) {
            var s = new UnaryOpProgram(i, CLONE), u = this.compileAndRun(s, [
                {
                    dataId: e,
                    shape: i,
                    dtype: r
                }
            ]), l = this.readSync(u.dataId);
            return u.dispose(), l;
        }
        if (null != n) return this.convertAndCacheOnCPU(e);
        if ("string" === r) return n;
        var c, p, d = null != this.activeTimers;
        (d && (c = performance.now()), "complex64" === r) ? p = mergeRealAndImagArrays(o.real.dataSync(), o.imag.dataSync()) : p = this.getValuesFromTexture(e);
        return d && (this.downloadWaitMs += performance.now() - c), this.convertAndCacheOnCPU(e, p);
    }, e124.prototype.read = function(e125) {
        return __awaiter(this, void 0, void 0, function() {
            var t, n, r, o, a, i, s, u, l, c, p, d, h, f, m, g, v, y, x, T, w, E, b, S;
            return __generator(this, function(C) {
                switch(C.label){
                    case 0:
                        if (this.pendingRead.has(e125)) return r = this.pendingRead.get(e125), [
                            2,
                            new Promise(function(e) {
                                return r.push(e);
                            })
                        ];
                        if (o = this.texData.get(e125), a = o.texture, i = o.values, s = o.texShape, u = o.isPacked, l = o.shape, c = o.slice, p = o.dtype, null != c) return d = new UnaryOpProgram(l, CLONE), h = this.compileAndRun(d, [
                            {
                                dataId: e125,
                                shape: l,
                                dtype: p
                            }
                        ]), f = this.read(h.dataId), h.dispose(), [
                            2,
                            f
                        ];
                        if (null != i) return [
                            2,
                            this.convertAndCacheOnCPU(e125)
                        ];
                        if (this.pendingRead.set(e125, []), !ENV.get("WEBGL_DOWNLOAD_FLOAT_ENABLED") && 2 === ENV.get("WEBGL_VERSION")) throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
                        return m = s[1], g = s[0], u && (t = getPackedMatrixTextureShapeWidthHeight(s[0], s[1]), m = t[0], g = t[1]), v = this.gpgpu.maybeCreateBufferFromTexture(a, g, m), [
                            4,
                            this.gpgpu.createAndWaitForFence()
                        ];
                    case 1:
                        return C.sent(), v instanceof WebGLTexture ? y = this.getValuesFromTexture(e125) : (x = sizeFromShape(l), u ? (T = getBatchDim(l), w = 1, E = 1, l.length && (n = getRowsCols(l), w = n[0], E = n[1]), y = this.gpgpu.downloadPackedMatrixFromBuffer(v, T, w, E, s[0], s[1]).subarray(0, x)) : y = this.gpgpu.downloadFloat32MatrixFromBuffer(v, s[0], s[1]).subarray(0, x)), b = this.convertAndCacheOnCPU(e125, y), S = this.pendingRead.get(e125), this.pendingRead.delete(e125), S.forEach(function(e) {
                            return e(b);
                        }), this.pendingDisposal.has(e125) && (this.pendingDisposal.delete(e125), this.disposeData(e125)), [
                            2,
                            b
                        ];
                }
            });
        });
    }, e124.prototype.getValuesFromTexture = function(e) {
        var t, n = this.texData.get(e), r = n.shape, o = n.dtype, a = n.texture, i = n.texShape, s = sizeFromShape(r);
        if (ENV.get("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
            if (this.texData.get(e).isPacked) {
                var u = getBatchDim(r), l = 1, c = 1;
                return r.length && (l = (t = getRowsCols(r))[0], c = t[1]), this.gpgpu.downloadMatrixFromPackedTexture(a, u, l, c, i[0], i[1]).subarray(0, s);
            }
            return this.gpgpu.downloadFloat32MatrixFromOutputTexture(a, i[0], i[1]).subarray(0, s);
        }
        var p = this.makeTensorHandle(r, "float32");
        p.size = sizeFromShape(r), this.texData.get(p.dataId).usage = TextureUsage.DOWNLOAD;
        var d = new EncodeFloatProgram(r);
        this.compileAndRun(d, [
            {
                shape: r,
                dtype: o,
                dataId: e
            }
        ], p, null, !1);
        var h = this.texData.get(p.dataId), f = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(h.texture, h.texShape[0], h.texShape[1]).subarray(0, s);
        return this.disposeData(p.dataId), f;
    }, e124.prototype.time = function(e126) {
        return __awaiter(this, void 0, void 0, function() {
            var t, n, r, o, a, i, s;
            return __generator(this, function(u) {
                switch(u.label){
                    case 0:
                        return t = this.activeTimers, n = [], r = !1, null == this.programTimersStack ? (this.programTimersStack = n, r = !0) : this.activeTimers.push(n), this.activeTimers = n, e126(), o = flatten(this.activeTimers.map(function(e) {
                            return e.query;
                        })).filter(function(e) {
                            return null != e;
                        }), a = flatten(this.activeTimers.map(function(e) {
                            return e.name;
                        })).filter(function(e) {
                            return null != e;
                        }), this.activeTimers = t, r && (this.programTimersStack = null), [
                            4,
                            Promise.all(o)
                        ];
                    case 1:
                        return i = u.sent(), s = {
                            uploadWaitMs: this.uploadWaitMs,
                            downloadWaitMs: this.downloadWaitMs,
                            kernelMs: sum(i),
                            getExtraProfileInfo: function() {
                                return i.map(function(e, t) {
                                    return {
                                        name: a[t],
                                        ms: e
                                    };
                                }).map(function(e) {
                                    return e.name + ": " + e.ms;
                                }).join(", ");
                            },
                            wallMs: null
                        }, this.uploadWaitMs = 0, this.downloadWaitMs = 0, [
                            2,
                            s
                        ];
                }
            });
        });
    }, e124.prototype.memory = function() {
        return {
            unreliable: !1,
            numBytesInGPU: this.numBytesInGPU
        };
    }, e124.prototype.startTimer = function() {
        return ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? this.gpgpu.beginQuery() : {
            startMs: performance.now(),
            endMs: null
        };
    }, e124.prototype.endTimer = function(e) {
        return ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (this.gpgpu.endQuery(), e) : (e.endMs = performance.now(), e);
    }, e124.prototype.getQueryTime = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            var t;
            return __generator(this, function(n) {
                return ENV.get("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? [
                    2,
                    this.gpgpu.waitForQueryAndGetTime(e)
                ] : [
                    2,
                    (t = e).endMs - t.startMs
                ];
            });
        });
    }, e124.prototype.disposeData = function(e) {
        if (!this.pendingDisposal.has(e)) {
            if (this.pendingRead.has(e)) this.pendingDisposal.add(e);
            else if (this.texData.has(e)) {
                var t = this.texData.get(e), n = t.texture, r = t.texShape, o = t.usage, a = t.complexTensors, i = t.isPacked, s = t.slice;
                if (null != n) {
                    var u = s && s.origDataId || e, l = this.dataRefCount.get(u);
                    l > 1 ? this.dataRefCount.set(u, l - 1) : (this.dataRefCount.delete(u), this.releaseTexture(e, n, r, o, i), this.texData.delete(e));
                }
                null != a && (a.real.dispose(), a.imag.dispose());
            }
        }
    }, e124.prototype.getTexture = function(e) {
        return this.uploadToGPU(e), this.texData.get(e).texture;
    }, e124.prototype.getCPUBackend = function() {
        return ENV.get("WEBGL_CPU_FORWARD") ? (null == this.cpuBackend && (this.cpuBackend = ENV.findBackend("cpu")), this.cpuBackend) : null;
    }, e124.prototype.shouldExecuteOnCPU = function(e127, t) {
        var n = this;
        return void 0 === t && (t = CPU_HANDOFF_SIZE_THRESHOLD), null != this.getCPUBackend() && e127.every(function(e) {
            return null == n.texData.get(e.dataId).texture && e.size < t;
        });
    }, e124.prototype.getGPGPUContext = function() {
        return this.gpgpu;
    }, e124.prototype.getCanvas = function() {
        return this.canvas;
    }, e124.prototype.complex = function(e, t) {
        var n = this.makeOutputArray(e.shape, "complex64");
        return this.texData.get(n.dataId).complexTensors = {
            real: ENV.engine.keep(e.clone()),
            imag: ENV.engine.keep(t.clone())
        }, n;
    }, e124.prototype.real = function(e) {
        return this.texData.get(e.dataId).complexTensors.real.clone();
    }, e124.prototype.imag = function(e) {
        return this.texData.get(e.dataId).complexTensors.imag.clone();
    }, e124.prototype.slice = function(e, t, n) {
        if (this.shouldExecuteOnCPU([
            e
        ])) return this.cpuBackend.slice(e, t, n);
        var r = this.texData.get(e.dataId).isPacked, o = isSliceContinous(e.shape, t, n);
        if (r || !o) {
            var a = new SliceProgram(n), i = a.getCustomSetupFunc(t);
            return this.compileAndRun(a, [
                e
            ], null, i);
        }
        return this.uploadToGPU(e.dataId), this.shallowSlice(e, t, n);
    }, e124.prototype.shallowSlice = function(e, t, n) {
        var r = this.texData.get(e.dataId), o = Tensor.make(n, {
        }, e.dtype), a = this.texData.get(o.dataId);
        Object.assign(a, r), a.shape = n, a.dtype = e.dtype;
        var i = computeFlatOffset(t, e.strides);
        r.slice && (i += r.slice.flatOffset), a.slice = {
            flatOffset: i,
            origDataId: r.slice && r.slice.origDataId || e.dataId
        };
        var s = this.dataRefCount.get(a.slice.origDataId) || 1;
        return this.dataRefCount.set(a.slice.origDataId, s + 1), o;
    }, e124.prototype.stridedSlice = function(e128, t52, n, r, o, a, i, s, u) {
        if (this.shouldExecuteOnCPU([
            e128
        ])) return this.cpuBackend.stridedSlice(e128, t52, n, r, o, a, i, s, u);
        var l = getStridedSlicedInfo(e128.shape, t52, n, r, o, a, i, s, u), c = l[0], p = l[1], d = l[2], h = p.filter(function(e, t) {
            return -1 === d.indexOf(t);
        });
        if (h.some(function(e) {
            return 0 === e;
        })) return tensor([], h);
        var f = new StridedSliceProgram(c, r, p, d);
        return this.compileAndRun(f, [
            e128
        ]);
    }, e124.prototype.reverse = function(e, t) {
        var n = new ReverseProgram(e.shape, t);
        return this.compileAndRun(n, [
            e
        ]);
    }, e124.prototype.concat = function(e129, t) {
        if (this.shouldExecuteOnCPU(e129)) return this.cpuBackend.concat(e129, t);
        if (1 === e129.length) return e129[0];
        if (e129.length > ENV.get("WEBGL_MAX_TEXTURES_IN_SHADER")) {
            var n = Math.floor(e129.length / 2), r = this.concat(e129.slice(0, n), t), o = this.concat(e129.slice(n), t);
            return this.concat([
                r,
                o
            ], t);
        }
        var a = computeOutShape(e129.map(function(e) {
            return e.shape;
        }), t), i = e129.map(function(e) {
            return e.as2D(-1, sizeFromShape(e.shape.slice(t)));
        }), s = new ConcatProgram(i.map(function(e) {
            return e.shape;
        }));
        return this.compileAndRun(s, i).reshape(a);
    }, e124.prototype.neg = function(e) {
        var t = new UnaryOpProgram(e.shape, NEG);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.batchMatMul = function(e, t, n, r) {
        var o = n ? e.shape[2] : e.shape[1], a = r ? t.shape[1] : t.shape[2], i = n ? e.shape[1] : e.shape[2], s = e.shape[0];
        if ((1 === o || 1 === a) && i > MATMUL_SHARED_DIM_THRESHOLD) {
            n && (e = e.transpose([
                0,
                2,
                1
            ])), r && (t = t.transpose([
                0,
                2,
                1
            ]));
            var u = 1 === a ? e : e.as3D(s, i, 1), l = 1 === a ? 2 : 1, c = 1 === a ? t.as3D(s, 1, i) : t;
            return this.multiply(u, c).sum(l, !0);
        }
        var p = upcastType(e.dtype, t.dtype);
        if (1 === s) {
            var d = e.as2D(e.shape[1], e.shape[2]), h = t.as2D(t.shape[1], t.shape[2]), f = new MatMulPackedProgram(d.shape, h.shape, [
                o,
                a
            ], n, r), m = this.makePackedTensor(f.outputShape, p), g = this.compileAndRun(f, [
                d,
                h
            ], m);
            return g.reshape([
                1,
                g.shape[0],
                g.shape[1]
            ]);
        }
        f = new MatMulProgram(e.shape, t.shape, n, r), m = this.makeOutputArray(f.outputShape, p);
        return this.compileAndRun(f, [
            e,
            t
        ], m);
    }, e124.prototype.fusedBatchMatMul = function(e, t, n, r, o, a) {
        var i = n ? e.shape[2] : e.shape[1], s = r ? t.shape[1] : t.shape[2], u = e.shape[0], l = upcastType(e.dtype, t.dtype);
        if (1 === u) {
            var c = e.as2D(e.shape[1], e.shape[2]), p = t.as2D(t.shape[1], t.shape[2]), d = new MatMulPackedProgram(c.shape, p.shape, [
                i,
                s
            ], n, r, !!o, a ? mapActivationToShaderProgram(a, !0) : null), h = this.makePackedTensor(d.outputShape, l), f = [
                c,
                p
            ];
            o && f.push(o);
            var m = this.compileAndRun(d, f, h);
            return m.reshape([
                1,
                m.shape[0],
                m.shape[1]
            ]);
        }
        d = new MatMulProgram(e.shape, t.shape, n, r, !!o, a ? mapActivationToShaderProgram(a) : null), f = [
            e,
            t
        ];
        o && f.push(o);
        h = this.makeOutputArray(d.outputShape, l);
        return this.compileAndRun(d, f, h);
    }, e124.prototype.multiply = function(e, t) {
        if ("complex64" === e.dtype) {
            var n = this.texData.get(e.dataId), r = this.texData.get(t.dataId), o = new BinaryOpComplexProgram(COMPLEX_MULTIPLY.REAL, e.shape, t.shape), a = new BinaryOpComplexProgram(COMPLEX_MULTIPLY.IMAG, e.shape, t.shape), i = [
                this.makeComplexComponentTensorHandle(e, n.complexTensors.real),
                this.makeComplexComponentTensorHandle(e, n.complexTensors.imag),
                this.makeComplexComponentTensorHandle(t, r.complexTensors.real),
                this.makeComplexComponentTensorHandle(t, r.complexTensors.imag)
            ], s = this.compileAndRun(o, i), u = this.compileAndRun(a, i), l = this.complex(s, u);
            return s.dispose(), u.dispose(), l;
        }
        if (this.shouldExecuteOnCPU([
            e,
            t
        ])) return this.cpuBackend.multiply(e, t);
        if (ENV.get("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(e, t, MUL, e.dtype);
        var c = new BinaryOpProgram(MUL, e.shape, t.shape), p = this.makeOutputArray(c.outputShape, e.dtype);
        return this.compileAndRun(c, [
            e,
            t
        ], p);
    }, e124.prototype.batchNormalization = function(e, t, n, r, o, a) {
        var i = [
            e,
            t,
            n
        ], s = null;
        null != a && (s = a.shape, i.push(a));
        var u = null;
        if (null != o && (u = o.shape, i.push(o)), ENV.get("WEBGL_PACK_BATCHNORMALIZATION")) {
            var l = new BatchNormPackedProgram(e.shape, t.shape, n.shape, s, u, r);
            return this.compileAndRun(l, i);
        }
        var c = new BatchNormProgram(e.shape, t.shape, n.shape, s, u, r);
        return this.compileAndRun(c, i);
    }, e124.prototype.localResponseNormalization4D = function(e, t, n, r, o) {
        var a = new LRNProgram(e.shape, t, n, r, o);
        return this.compileAndRun(a, [
            e
        ]);
    }, e124.prototype.LRNGrad = function(e, t, n, r, o, a, i) {
        var s = new LRNGradProgram(t.shape, r, o, a, i);
        return this.compileAndRun(s, [
            t,
            n,
            e
        ]);
    }, e124.prototype.tile = function(e, t) {
        var n = new TileProgram(e.shape, t);
        return this.compileAndRun(n, [
            e
        ]);
    }, e124.prototype.pad = function(e, t, n) {
        var r = ENV.get("WEBGL_PACK_ARRAY_OPERATIONS") ? new PadPackedProgram(e.shape, t, n) : new PadProgram(e.shape, t, n);
        return this.compileAndRun(r, [
            e
        ]);
    }, e124.prototype.transpose = function(e, t) {
        var n = new TransposeProgram(e.shape, t);
        return this.compileAndRun(n, [
            e
        ]);
    }, e124.prototype.gather = function(e, t, n) {
        var r = new GatherProgram(e.shape, t.size, n);
        return this.compileAndRun(r, [
            e,
            t
        ]);
    }, e124.prototype.batchToSpaceND = function(e130, t53, n) {
        assert(e130.rank <= 4, "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");
        var r = t53.reduce(function(e, t) {
            return e * t;
        }), o = getReshaped(e130.shape, t53, r), a = getPermuted(o.length, t53.length), i = getReshapedPermuted(e130.shape, t53, r), s = getSliceBeginCoords(n, t53.length), u = getSliceSize(i, n, t53.length);
        return e130.reshape(o).transpose(a).reshape(i).slice(s, u);
    }, e124.prototype.spaceToBatchND = function(e131, t54, n) {
        assert(e131.rank <= 4, "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");
        var r = t54.reduce(function(e, t) {
            return e * t;
        }), o = [
            [
                0,
                0
            ]
        ];
        o.push.apply(o, n);
        for(var a = 1 + t54.length; a < e131.shape.length; ++a)o.push([
            0,
            0
        ]);
        var i = e131.pad(o), s = getReshaped(i.shape, t54, r, !1), u = getPermuted(s.length, t54.length, !1), l = getReshapedPermuted(i.shape, t54, r, !1);
        return i.reshape(s).transpose(u).reshape(l);
    }, e124.prototype.reduce = function(e, t, n) {
        var r = e.shape[0], o = e.shape[1], a = computeOptimalWindowSize(o), i = new ReduceProgram({
            windowSize: a,
            inSize: o,
            batchSize: r
        }, t), s = i.outputShape, u = s[0], l = s[1], c = this.makeOutputArray([
            u,
            l
        ], n);
        return this.compileAndRun(i, [
            e
        ], c), 1 === c.shape[1] ? c : this.reduce(c, t, n);
    }, e124.prototype.argReduce = function(e, t, n) {
        void 0 === n && (n = null);
        var r = e.shape[0], o = e.shape[1];
        null != n && (r = n.shape[0], o = n.shape[1]);
        var a = computeOptimalWindowSize(o), i = new ArgMinMaxProgram({
            windowSize: a,
            inSize: o,
            batchSize: r
        }, t, null == n), s = i.outputShape, u = s[0], l = s[1], c = this.makeOutputArray([
            u,
            l
        ], "int32"), p = [
            e
        ];
        return null != n && p.push(n), this.compileAndRun(i, p, c), 1 === c.shape[1] ? c : this.argReduce(e, t, c);
    }, e124.prototype.sum = function(e, t) {
        assertAxesAreInnerMostDims("sum", t, e.rank);
        var n = computeOutAndReduceShapes(e.shape, t), r = n[0], o = sizeFromShape(n[1]), a = e.as2D(-1, o), i = sumOutType(e.dtype);
        return this.reduce(a, "sum", i).reshape(r);
    }, e124.prototype.prod = function(e, t) {
        var n = computeOutAndReduceShapes(e.shape, t), r = n[0], o = sizeFromShape(n[1]), a = e.as2D(-1, o), i = sumOutType(e.dtype);
        return this.reduce(a, "prod", i).reshape(r);
    }, e124.prototype.unsortedSegmentSum = function(e, t, n) {
        var r = 0, o = getAxesPermutation([
            r
        ], e.rank), a = e;
        null != o && (a = e.transpose(o), r = getInnerMostAxes(1, e.rank)[0]);
        var i = computeOutShape$1(a.shape, r, n), s = sizeFromShape([
            a.shape[r]
        ]), u = a.as2D(-1, s), l = sumOutType(e.dtype), c = this.segOpCompute(u, "unsortedSegmentSum", t, l, n).reshape(i);
        return null != o && (c = c.transpose(getUndoAxesPermutation(o))), c;
    }, e124.prototype.segOpCompute = function(e, t, n, r, o) {
        var a = e.shape[0], i = e.shape[1], s = segOpComputeOptimalWindowSize(i, o), u = new SegmentOpProgram({
            windowSize: s,
            inSize: i,
            batchSize: a,
            numSegments: o
        }, t), l = u.outputShape, c = l[0], p = l[1], d = this.makeOutputArray([
            c,
            p
        ], r);
        return this.compileAndRun(u, [
            e,
            n
        ], d), d.shape[1] === o ? d : (n = range(0, o).tile([
            i / s
        ]), this.segOpCompute(d, t, n, r, o));
    }, e124.prototype.argMin = function(e, t) {
        var n = [
            t
        ];
        assertAxesAreInnerMostDims("argMin", n, e.rank);
        var r = computeOutAndReduceShapes(e.shape, n), o = r[0], a = sizeFromShape(r[1]), i = e.as2D(-1, a);
        return this.argReduce(i, "min").reshape(o);
    }, e124.prototype.argMax = function(e, t) {
        var n = [
            t
        ];
        assertAxesAreInnerMostDims("argMax", n, e.rank);
        var r = computeOutAndReduceShapes(e.shape, n), o = r[0], a = sizeFromShape(r[1]), i = e.as2D(-1, a);
        return this.argReduce(i, "max").reshape(o);
    }, e124.prototype.cumsum = function(e, t, n, r) {
        if (t !== e.rank - 1) throw new Error("WebGL cumsum shader expects an inner-most axis=" + (e.rank - 1) + " but got axis=" + t);
        var o = new CumSumProgram(e.shape, n, r);
        return this.compileAndRun(o, [
            e
        ]);
    }, e124.prototype.equal = function(e, t) {
        var n = new BinaryOpProgram(EQUAL, e.shape, t.shape), r = this.makeOutputArray(n.outputShape, "bool");
        return this.compileAndRun(n, [
            e,
            t
        ], r);
    }, e124.prototype.notEqual = function(e, t) {
        var n = new BinaryOpProgram(NOT_EQUAL, e.shape, t.shape), r = this.makeOutputArray(n.outputShape, "bool");
        return this.compileAndRun(n, [
            e,
            t
        ], r);
    }, e124.prototype.less = function(e, t) {
        if (this.shouldExecuteOnCPU([
            e,
            t
        ])) return this.cpuBackend.less(e, t);
        var n = new BinaryOpProgram(LESS, e.shape, t.shape), r = this.makeOutputArray(n.outputShape, "bool");
        return this.compileAndRun(n, [
            e,
            t
        ], r);
    }, e124.prototype.lessEqual = function(e, t) {
        var n = new BinaryOpProgram(LESS_EQUAL, e.shape, t.shape), r = this.makeOutputArray(n.outputShape, "bool");
        return this.compileAndRun(n, [
            e,
            t
        ], r);
    }, e124.prototype.greater = function(e, t) {
        if (this.shouldExecuteOnCPU([
            e,
            t
        ])) return this.cpuBackend.greater(e, t);
        var n = new BinaryOpProgram(GREATER, e.shape, t.shape), r = this.makeOutputArray(n.outputShape, "bool");
        return this.compileAndRun(n, [
            e,
            t
        ], r);
    }, e124.prototype.greaterEqual = function(e, t) {
        var n = new BinaryOpProgram(GREATER_EQUAL, e.shape, t.shape), r = this.makeOutputArray(n.outputShape, "bool");
        return this.compileAndRun(n, [
            e,
            t
        ], r);
    }, e124.prototype.logicalNot = function(e) {
        var t = new UnaryOpProgram(e.shape, LOGICAL_NOT);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.logicalAnd = function(e, t) {
        var n = new BinaryOpProgram(LOGICAL_AND, e.shape, t.shape), r = this.makeOutputArray(n.outputShape, "bool");
        return this.compileAndRun(n, [
            e,
            t
        ], r);
    }, e124.prototype.logicalOr = function(e, t) {
        var n = new BinaryOpProgram(LOGICAL_OR, e.shape, t.shape), r = this.makeOutputArray(n.outputShape, "bool");
        return this.compileAndRun(n, [
            e,
            t
        ], r);
    }, e124.prototype.select = function(e, t, n) {
        var r = new SelectProgram(e.rank, t.shape, t.rank), o = this.makeOutputArray(r.outputShape, upcastType(t.dtype, n.dtype));
        return this.compileAndRun(r, [
            e,
            t,
            n
        ], o);
    }, e124.prototype.where = function(e) {
        warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
        var t = e.dataSync();
        return whereImpl(e.shape, t);
    }, e124.prototype.topk = function(e, t, n) {
        return topkImpl(e.dataSync(), e.shape, e.dtype, t, n);
    }, e124.prototype.min = function(e, t) {
        assertAxesAreInnerMostDims("min", t, e.rank);
        var n = computeOutAndReduceShapes(e.shape, t), r = n[0], o = sizeFromShape(n[1]), a = e.as2D(-1, o);
        return this.reduce(a, "min", a.dtype).reshape(r);
    }, e124.prototype.minimum = function(e, t) {
        if (this.shouldExecuteOnCPU([
            e,
            t
        ])) return this.cpuBackend.minimum(e, t);
        var n = new BinaryOpProgram(MIN, e.shape, t.shape);
        return this.compileAndRun(n, [
            e,
            t
        ]);
    }, e124.prototype.mod = function(e, t) {
        var n = new BinaryOpProgram(MOD, e.shape, t.shape), r = n.getCustomSetupFunc();
        return this.compileAndRun(n, [
            e,
            t
        ], null, r);
    }, e124.prototype.max = function(e, t) {
        assertAxesAreInnerMostDims("max", t, e.rank);
        var n = computeOutAndReduceShapes(e.shape, t), r = n[0], o = sizeFromShape(n[1]), a = e.as2D(-1, o);
        return this.reduce(a, "max", a.dtype).reshape(r);
    }, e124.prototype.maximum = function(e, t) {
        if (this.shouldExecuteOnCPU([
            e,
            t
        ])) return this.cpuBackend.maximum(e, t);
        var n = new BinaryOpProgram(MAX, e.shape, t.shape);
        return this.compileAndRun(n, [
            e,
            t
        ]);
    }, e124.prototype.all = function(e, t) {
        assertAxesAreInnerMostDims("all", t, e.rank);
        var n = computeOutAndReduceShapes(e.shape, t), r = n[0], o = sizeFromShape(n[1]), a = e.as2D(-1, o);
        return this.reduce(a, "all", a.dtype).reshape(r);
    }, e124.prototype.any = function(e, t) {
        assertAxesAreInnerMostDims("any", t, e.rank);
        var n = computeOutAndReduceShapes(e.shape, t), r = n[0], o = sizeFromShape(n[1]), a = e.as2D(-1, o);
        return this.reduce(a, "any", a.dtype).reshape(r);
    }, e124.prototype.squaredDifference = function(e, t) {
        var n = new BinaryOpProgram(SQUARED_DIFFERENCE, e.shape, t.shape);
        return this.compileAndRun(n, [
            e,
            t
        ]);
    }, e124.prototype.realDivide = function(e, t) {
        var n = DIV;
        if (ENV.get("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(e, t, PACKED_DIV, "float32");
        var r = new BinaryOpProgram(n, e.shape, t.shape), o = this.makeOutputArray(r.outputShape, "float32");
        return this.compileAndRun(r, [
            e,
            t
        ], o);
    }, e124.prototype.floorDiv = function(e, t) {
        var n = INT_DIV;
        if (ENV.get("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(e, t, PACKED_INT_DIV, "int32");
        var r = new BinaryOpProgram(n, e.shape, t.shape), o = this.makeOutputArray(r.outputShape, "int32");
        return this.compileAndRun(r, [
            e,
            t
        ], o);
    }, e124.prototype.add = function(e, t) {
        if ("complex64" === e.dtype && "complex64" === t.dtype) return this.complexSeparableBinaryOp(e, t, ADD);
        var n = upcastType(e.dtype, t.dtype);
        if (ENV.get("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(e, t, ADD, n);
        var r = new BinaryOpProgram(ADD, e.shape, t.shape), o = this.makeOutputArray(r.outputShape, n);
        return this.compileAndRun(r, [
            e,
            t
        ], o);
    }, e124.prototype.packedBinaryOp = function(e, t, n, r) {
        var o = new BinaryOpPackedProgram(n, e.shape, t.shape), a = this.makePackedTensor(o.outputShape, r);
        return this.compileAndRun(o, [
            e,
            t
        ], a);
    }, e124.prototype.complexSeparableBinaryOp = function(e, t, n) {
        var r = this, o16 = this.texData.get(e.dataId), a8 = this.texData.get(t.dataId), i3 = [
            [
                o16.complexTensors.real,
                a8.complexTensors.real
            ],
            [
                o16.complexTensors.imag,
                a8.complexTensors.imag
            ]
        ].map(function(o) {
            var a = o[0], i = o[1], s = new BinaryOpProgram(n, e.shape, t.shape), u = r.makeOutputArray(s.outputShape, upcastType(a.dtype, i.dtype)), l = r.makeComplexComponentTensorHandle(e, a), c = r.makeComplexComponentTensorHandle(t, i);
            return r.compileAndRun(s, [
                l,
                c
            ], u);
        }), s4 = i3[0], u1 = i3[1], l1 = this.complex(s4, u1);
        return s4.dispose(), u1.dispose(), l1;
    }, e124.prototype.makeComplexComponentTensorHandle = function(e, t) {
        return {
            dataId: t.dataId,
            dtype: t.dtype,
            shape: e.shape
        };
    }, e124.prototype.addN = function(e) {
        for(var t = e[0], n = 1; n < e.length; n++)t = this.add(t, e[n]);
        return t;
    }, e124.prototype.subtract = function(e, t) {
        if ("complex64" === e.dtype && "complex64" === t.dtype) return this.complexSeparableBinaryOp(e, t, SUB);
        if (this.shouldExecuteOnCPU([
            e,
            t
        ])) return this.cpuBackend.subtract(e, t);
        var n = upcastType(e.dtype, t.dtype);
        if (ENV.get("WEBGL_PACK_BINARY_OPERATIONS")) return this.packedBinaryOp(e, t, SUB, e.dtype);
        var r = new BinaryOpProgram(SUB, e.shape, t.shape), o = this.makeOutputArray(r.outputShape, n);
        return this.compileAndRun(r, [
            e,
            t
        ], o);
    }, e124.prototype.pow = function(e, t) {
        var n = ENV.get("WEBGL_PACK_BINARY_OPERATIONS"), r = n ? new BinaryOpPackedProgram(PACKED_POW, e.shape, t.shape) : new BinaryOpProgram(POW, e.shape, t.shape), o = upcastType(e.dtype, t.dtype), a = n ? this.makePackedTensor(r.outputShape, o) : this.makeOutputArray(r.outputShape, o), i = r.getCustomSetupFunc();
        return this.compileAndRun(r, [
            e,
            t
        ], a, i);
    }, e124.prototype.ceil = function(e) {
        var t = new UnaryOpProgram(e.shape, CEIL);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.floor = function(e) {
        var t = new UnaryOpProgram(e.shape, FLOOR);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.sign = function(e) {
        var t = new UnaryOpProgram(e.shape, SIGN);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.round = function(e) {
        var t = new UnaryOpProgram(e.shape, ROUND);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.exp = function(e) {
        var t;
        return t = ENV.get("WEBGL_PACK") ? new UnaryOpPackedProgram(e.shape, EXP) : new UnaryOpProgram(e.shape, EXP), this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.expm1 = function(e) {
        var t = new UnaryOpProgram(e.shape, EXPM1);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.log = function(e) {
        var t, n = (t = ENV.get("WEBGL_PACK") ? new UnaryOpPackedProgram(e.shape, LOG$1) : new UnaryOpProgram(e.shape, LOG)).getCustomSetupFunc();
        return this.compileAndRun(t, [
            e
        ], null, n);
    }, e124.prototype.log1p = function(e) {
        var t = new UnaryOpProgram(e.shape, LOG1P);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.sqrt = function(e) {
        var t = new UnaryOpProgram(e.shape, SQRT);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.rsqrt = function(e) {
        var t = new UnaryOpProgram(e.shape, RSQRT);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.square = function(e) {
        var t = new UnaryOpProgram(e.shape, SQUARE);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.reciprocal = function(e) {
        var t = new UnaryOpProgram(e.shape, RECIPROCAL);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.relu = function(e) {
        var t;
        return t = ENV.get("WEBGL_PACK") ? new UnaryOpPackedProgram(e.shape, RELU$1) : new UnaryOpProgram(e.shape, RELU), this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.prelu = function(e, t) {
        var n = new BinaryOpProgram(PRELU, e.shape, t.shape);
        return this.compileAndRun(n, [
            e,
            t
        ]);
    }, e124.prototype.elu = function(e) {
        var t = new UnaryOpProgram(e.shape, ELU);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.eluDer = function(e, t) {
        var n = new BinaryOpProgram(ELU_DER, e.shape, t.shape);
        return this.compileAndRun(n, [
            e,
            t
        ]);
    }, e124.prototype.selu = function(e) {
        var t = new UnaryOpProgram(e.shape, SELU);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.int = function(e) {
        var t = new UnaryOpProgram(e.shape, TO_INT), n = this.makeOutputArray(t.outputShape, "int32");
        return this.compileAndRun(t, [
            e
        ], n);
    }, e124.prototype.clip = function(e, t, n) {
        var r, o = (r = ENV.get("WEBGL_PACK_CLIP") ? new ClipPackedProgram(e.shape) : new ClipProgram(e.shape)).getCustomSetupFunc(t, n);
        return this.compileAndRun(r, [
            e
        ], null, o);
    }, e124.prototype.abs = function(e) {
        var t = new UnaryOpProgram(e.shape, ABS);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.complexAbs = function(e) {
        var t = this.texData.get(e.dataId), n = new ComplexAbsProgram(e.shape), r = [
            this.makeComplexComponentTensorHandle(e, t.complexTensors.real),
            this.makeComplexComponentTensorHandle(e, t.complexTensors.imag)
        ];
        return this.compileAndRun(n, r);
    }, e124.prototype.sigmoid = function(e) {
        var t = new UnaryOpProgram(e.shape, SIGMOID);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.softplus = function(e) {
        var t = new UnaryOpProgram(e.shape, SOFTPLUS);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.sin = function(e) {
        var t = new UnaryOpProgram(e.shape, SIN);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.cos = function(e) {
        var t = new UnaryOpProgram(e.shape, COS);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.tan = function(e) {
        var t = new UnaryOpProgram(e.shape, TAN);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.asin = function(e) {
        var t = new UnaryOpProgram(e.shape, ASIN);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.acos = function(e) {
        var t = new UnaryOpProgram(e.shape, ACOS);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.atan = function(e) {
        var t = new UnaryOpProgram(e.shape, ATAN);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.atan2 = function(e, t) {
        var n = new BinaryOpProgram(ATAN2, e.shape, t.shape);
        return this.compileAndRun(n, [
            e,
            t
        ]);
    }, e124.prototype.sinh = function(e) {
        var t = new UnaryOpProgram(e.shape, SINH);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.cosh = function(e) {
        var t = new UnaryOpProgram(e.shape, COSH);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.tanh = function(e) {
        var t = new UnaryOpProgram(e.shape, TANH);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.asinh = function(e) {
        var t = new UnaryOpProgram(e.shape, ASINH);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.acosh = function(e) {
        var t = new UnaryOpProgram(e.shape, ACOSH), n = t.getCustomSetupFunc();
        return this.compileAndRun(t, [
            e
        ], null, n);
    }, e124.prototype.atanh = function(e) {
        var t = new UnaryOpProgram(e.shape, ATANH), n = t.getCustomSetupFunc();
        return this.compileAndRun(t, [
            e
        ], null, n);
    }, e124.prototype.erf = function(e) {
        var t = new UnaryOpProgram(e.shape, ERF);
        return this.compileAndRun(t, [
            e
        ]);
    }, e124.prototype.step = function(e, t) {
        var n = new UnaryOpProgram(e.shape, STEP(t));
        return this.compileAndRun(n, [
            e
        ]);
    }, e124.prototype.conv2dWithIm2Row = function(e, t, n) {
        var r = n.filterWidth, o = n.filterHeight, a = n.inChannels, i = n.outWidth, s = n.outHeight, u = r * o * a, l = s * i, c = [
            u,
            l
        ], p = e.squeeze([
            0
        ]), d = t.reshape([
            u,
            -1
        ]), h = new Im2ColProgram(c, p.shape, n), f = this.compileAndRun(h, [
            p
        ]), m = new MatMulPackedProgram(f.shape, d.shape, [
            l,
            n.outChannels
        ], !0, !1);
        return this.compileAndRun(m, [
            f,
            d
        ]).reshape([
            1,
            s,
            i,
            n.outChannels
        ]);
    }, e124.prototype.conv2d = function(e, t, n) {
        if (ENV.get("WEBGL_CONV_IM2COL") && 1 === e.shape[0]) return this.conv2dWithIm2Row(e, t, n);
        var r = new Conv2DProgram(n);
        return this.compileAndRun(r, [
            e,
            t
        ]);
    }, e124.prototype.conv2dDerInput = function(e, t, n) {
        var r = new Conv2DDerInputProgram(n);
        return this.compileAndRun(r, [
            e,
            t
        ]);
    }, e124.prototype.conv2dDerFilter = function(e, t, n) {
        var r = new Conv2DDerFilterProgram(n);
        return this.compileAndRun(r, [
            e,
            t
        ]);
    }, e124.prototype.depthwiseConv2D = function(e, t, n) {
        var r;
        return ENV.get("WEBGL_PACK_DEPTHWISECONV") && n.strideWidth <= 2 && n.outChannels / n.inChannels == 1 ? (r = new DepthwiseConvPacked2DProgram(n), this.compileAndRun(r, [
            e,
            t
        ], this.makePackedTensor(n.outShape, e.dtype))) : (r = new DepthwiseConv2DProgram(n), this.compileAndRun(r, [
            e,
            t
        ]));
    }, e124.prototype.depthwiseConv2DDerInput = function(e, t, n) {
        var r = new DepthwiseConv2DDerInputProgram(n);
        return this.compileAndRun(r, [
            e,
            t
        ]);
    }, e124.prototype.depthwiseConv2DDerFilter = function(e, t, n) {
        var r = new DepthwiseConv2DDerFilterProgram(n);
        return this.compileAndRun(r, [
            e,
            t
        ]);
    }, e124.prototype.conv3d = function(e, t, n) {
        var r = new Conv3DProgram(n);
        return this.compileAndRun(r, [
            e,
            t
        ]);
    }, e124.prototype.conv3dDerInput = function(e, t, n) {
        var r = new Conv3DDerInputProgram(n);
        return this.compileAndRun(r, [
            e,
            t
        ]);
    }, e124.prototype.conv3dDerFilter = function(e, t, n) {
        var r = new Conv3DDerFilterProgram(n);
        return this.compileAndRun(r, [
            e,
            t
        ]);
    }, e124.prototype.maxPool = function(e, t) {
        var n = new Pool2DProgram(t, "max", !1), r = this.makeOutputArray(n.outputShape, e.dtype);
        return this.compileAndRun(n, [
            e
        ], r);
    }, e124.prototype.avgPool = function(e, t) {
        var n = new Pool2DProgram(t, "avg", !1), r = this.makeOutputArray(n.outputShape, "float32");
        return this.compileAndRun(n, [
            e
        ], r);
    }, e124.prototype.maxPoolBackprop = function(e, t, n, r) {
        var o = new Pool2DProgram(r, "max", !0), a = this.compileAndRun(o, [
            t
        ]), i = new MaxPool2DBackpropProgram(r), s = this.makeOutputArray(i.outputShape, t.dtype), u = this.compileAndRun(i, [
            e,
            a
        ], s);
        return a.dispose(), u;
    }, e124.prototype.avgPoolBackprop = function(e, t, n) {
        var r = new AvgPool2DBackpropProgram(n), o = this.makeOutputArray(r.outputShape, t.dtype);
        return this.compileAndRun(r, [
            e
        ], o);
    }, e124.prototype.cast = function(e, t) {
        return castTensor(e, t, this);
    }, e124.prototype.unstack = function(e, t) {
        for(var n = e.shape[t], r = new Array(e.rank - 1), o = 0, a = 0; a < e.rank; a++)a !== t && (r[o++] = e.shape[a]);
        var i = new Array(e.rank).fill(0), s = e.shape.slice();
        s[t] = 1;
        var u = new Array(n);
        for(a = 0; a < u.length; a++)i[t] = a, u[a] = this.slice(e, i, s).reshape(r);
        return u;
    }, e124.prototype.reshape = function(e, t) {
        return this.texData.get(e.dataId).isPacked && !isReshapeFree(e.shape, t) ? this.packedReshape(e, t) : reshapeTensor(e, t);
    }, e124.prototype.resizeBilinear = function(e, t, n, r) {
        var o = new ResizeBilinearProgram(e.shape, t, n, r);
        return this.compileAndRun(o, [
            e
        ]);
    }, e124.prototype.resizeBilinearBackprop = function(e, t, n) {
        var r = new ResizeBilinearBackpropProgram(e, t, n);
        return this.compileAndRun(r, [
            e
        ]);
    }, e124.prototype.resizeNearestNeighbor = function(e, t, n, r) {
        var o = new ResizeNearestNeighborProgram(e.shape, t, n, r);
        return this.compileAndRun(o, [
            e
        ]);
    }, e124.prototype.resizeNearestNeighborBackprop = function(e, t, n) {
        var r = new ResizeNearestNeigborBackpropProgram(e, t, n);
        return this.compileAndRun(r, [
            e
        ]);
    }, e124.prototype.multinomial = function(e, t, n, r) {
        var o = t ? e : softmax(e), a = o.shape[0], i = o.shape[1], s = new MultinomialProgram(a, i, n), u = this.makeOutputArray(s.outputShape, "int32"), l = s.getCustomSetupFunc(r);
        return this.compileAndRun(s, [
            o
        ], u, l);
    }, e124.prototype.oneHot = function(e, t, n, r) {
        var o = new OneHotProgram(e.size, t, n, r);
        return this.compileAndRun(o, [
            e
        ]);
    }, e124.prototype.nonMaxSuppression = function(e, t, n, r, o) {
        return warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"), nonMaxSuppressionImpl(e.dataSync(), t.dataSync(), n, r, o);
    }, e124.prototype.cropAndResize = function(e, t, n, r, o, a) {
        var i = new CropAndResizeProgram(e.shape, t.shape, r, o, a);
        return this.compileAndRun(i, [
            e,
            t,
            n
        ]);
    }, e124.prototype.depthToSpace = function(e, t, n) {
        assert(t > 1, "blockSize should be > 1 for depthToSpace, but was: " + t);
        var r = e.shape[0], o = ("NHWC" === n ? e.shape[1] : e.shape[2]) * t, a = ("NHWC" === n ? e.shape[2] : e.shape[3]) * t, i = ("NHWC" === n ? e.shape[3] : e.shape[1]) / (t * t), s = new DepthToSpaceProgram("NHWC" === n ? [
            r,
            o,
            a,
            i
        ] : [
            r,
            i,
            o,
            a
        ], t, n);
        return this.compileAndRun(s, [
            e
        ]);
    }, e124.prototype.split = function(e, t, n) {
        return split(e, t, n);
    }, e124.prototype.scatterND = function(e, t, n) {
        var r = calculateShapes(t, e, n), o = r.sliceRank, a = r.numUpdates, i = r.sliceSize, s = r.strides, u = r.outputSize, l = [
            u / i,
            i
        ], c = e.reshape([
            a,
            o
        ]), p = t.reshape([
            a,
            i
        ]);
        if (0 === u) return reshapeTensor(tensor([]), n);
        var d = scalar(0), h = new ScatterProgram(a, o, c.rank, p.rank, s, l);
        return this.compileAndRun(h, [
            p,
            c,
            d
        ]).reshape(n);
    }, e124.prototype.sparseToDense = function(e, t, n, r) {
        var o = calculateShapes(t, e, n), a = o.sliceRank, i = o.numUpdates, s = o.strides, u = o.outputSize, l = new ScatterProgram(i, a, e.rank, t.rank, s, [
            u,
            1
        ], !1);
        return this.compileAndRun(l, [
            t,
            e,
            r
        ]).reshape(n);
    }, e124.prototype.fft = function(e) {
        return this.fftImpl(e, !1);
    }, e124.prototype.ifft = function(e) {
        return this.fftImpl(e, !0);
    }, e124.prototype.fftImpl = function(e, t) {
        var n = this.texData.get(e.dataId), r = new FFTProgram(COMPLEX_FFT.REAL, e.shape, t), o = new FFTProgram(COMPLEX_FFT.IMAG, e.shape, t), a = [
            this.makeComplexComponentTensorHandle(e, n.complexTensors.real),
            this.makeComplexComponentTensorHandle(e, n.complexTensors.imag)
        ], i = this.compileAndRun(r, a), s = this.compileAndRun(o, a), u = this.complex(i, s).as2D(e.shape[0], e.shape[1]);
        return i.dispose(), s.dispose(), u;
    }, e124.prototype.gatherND = function(e, t) {
        var n = t.shape, r = n[n.length - 1], o = prepareAndValidate(e, t), a = o[0], i = o[1], s = o[2], u = o[3], l = t.reshape([
            i,
            r
        ]), c = e.reshape([
            e.size / s,
            s
        ]), p = new GatherNDProgram(r, u, [
            i,
            s
        ]);
        return this.compileAndRun(p, [
            c,
            l
        ]).reshape(a);
    }, e124.prototype.makeOutputArray = function(e, t) {
        return Tensor.make(e, {
        }, t);
    }, e124.prototype.makePackedTensor = function(e, t) {
        var n = Tensor.make(e, {
        }, t);
        return this.texData.get(n.dataId).isPacked = !0, n;
    }, e124.prototype.unpackTensor = function(e) {
        var t = new UnpackProgram(e.shape);
        return this.compileAndRun(t, [
            e
        ], Tensor.make(t.outputShape, {
        }, e.dtype));
    }, e124.prototype.packedReshape = function(e, t) {
        var n = e.reshape([
            getBatchDim(e.shape)
        ].concat(getRowsCols(e.shape))), r = [
            getBatchDim(t)
        ].concat(getRowsCols(t)), o = new ReshapePackedProgram(r, n.shape);
        return this.compileAndRun(o, [
            n
        ]).reshape(t);
    }, e124.prototype.compileAndRun = function(e, t55, n31, r17, o17) {
        var a = this;
        if (void 0 === o17 && (o17 = !0), null == n31 && (n31 = e.usesPackedTextures ? this.makePackedTensor(e.outputShape, t55[0].dtype) : this.makeOutputArray(e.outputShape, t55[0].dtype)), 0 === n31.size) return this.texData.get(n31.dataId).values = getTypedArrayFromDType(n31.dtype, 0), n31;
        var i4 = t55.map(function(t) {
            if ("complex64" === t.dtype) throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
            var n = a.texData.get(t.dataId);
            if (null == n.texture) {
                if (!e.usesPackedTextures && sizeFromShape(t.shape) <= ENV.get("WEBGL_SIZE_UPLOAD_UNIFORM")) return {
                    shape: t.shape,
                    texData: null,
                    isUniform: !0,
                    uniformValues: a.readSync(t.dataId)
                };
                e.usesPackedTextures && (n.isPacked = !0, n.shape = t.shape);
            } else if (!!n.isPacked != !!e.usesPackedTextures) {
                var r = void 0, o = void 0;
                n.isPacked ? (r = new UnpackProgram(t.shape), o = a.compileAndRun(r, [
                    t
                ], Tensor.make(r.outputShape, {
                }, t.dtype))) : (r = new PackProgram(t.shape), o = a.compileAndRun(r, [
                    t
                ], a.makePackedTensor(t.shape, t.dtype))), n = a.texData.get(o.dataId), t = o;
            } else if (n.isPacked && !isReshapeFree(n.shape, t.shape)) {
                a.delayedStorage = !1;
                var i = t.dataSync();
                a.delayedStorage = !0, t = Tensor.make(t.shape, {
                    values: i
                }, t.dtype), (n = a.texData.get(t.dataId)).isPacked = !0;
            }
            return a.uploadToGPU(t.dataId), {
                shape: t.shape,
                texData: n,
                isUniform: !1
            };
        });
        this.uploadToGPU(n31.dataId);
        var s, u = {
            shape: n31.shape,
            texData: this.texData.get(n31.dataId),
            isUniform: !1
        }, l = makeShaderKey(e, i4, u), c = this.getAndSaveBinary(l, function() {
            return compileProgram(a.gpgpu, e, i4, u);
        }), p = null != this.activeTimers;
        p && (s = this.startTimer()), runProgram(c, i4, u, r17);
        var d = 1024 * ENV.get("WEBGL_NUM_MB_BEFORE_PAGING");
        if (o17 && this.numBytesInGPU > d) for(var h = this.numBytesInGPU - d; h > 0 && this.lruDataGPU.length > 0;){
            var f = this.lruDataGPU.shift(), m = this.texData.get(f), g = m.shape, v = m.dtype;
            h -= this.computeBytes(g, v), this.read(f);
        }
        return p && (s = this.endTimer(s), this.activeTimers.push({
            name: e.constructor.name,
            query: this.getQueryTime(s)
        })), ENV.get("WEBGL_LAZILY_UNPACK") || !this.texData.get(n31.dataId).isPacked || e.isPackShader ? n31 : this.unpackTensor(n31);
    }, e124.prototype.getAndSaveBinary = function(e, t) {
        return e in this.binaryCache || (this.binaryCache[e] = t()), this.binaryCache[e];
    }, e124.prototype.getTextureManager = function() {
        return this.textureManager;
    }, e124.prototype.dispose = function() {
        if (!this.disposed) {
            for(var e in this.binaryCache)this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram);
            this.textureManager.dispose(), this.canvas.remove(), null != this.fromPixels2DContext && this.fromPixels2DContext.canvas.remove(), this.gpgpuCreatedLocally && this.gpgpu.dispose(), this.disposed = !0;
        }
    }, e124.prototype.floatPrecision = function() {
        var e = this;
        return tidy(function() {
            var t = ENV.get("DEBUG");
            ENV.set("DEBUG", !1);
            var n = e.abs(scalar(0.00000001)).dataSync()[0];
            return ENV.set("DEBUG", t), n > 0 ? 32 : 16;
        });
    }, e124.prototype.uploadToGPU = function(e) {
        var t, n = this.texData.get(e), r = n.shape, o = n.values, a = n.texture, i = n.usage, s = n.isPacked;
        if (null == a) {
            var u, l = null != this.activeTimers;
            l && (u = performance.now());
            var c = getTextureShapeFromLogicalShape(r, s);
            n.texShape = c;
            var p = this.acquireTexture(e, c, i, s);
            if (n.texture = p, null != o) {
                if (s) {
                    var d = getBatchDim(r), h = 1, f = 1;
                    r.length && (h = (t = getRowsCols(r))[0], f = t[1]), this.gpgpu.uploadMatrixToPackedTexture(p, d, h, f, c[0], c[1], typedArrayToFloat32(o));
                } else this.gpgpu.uploadMatrixToTexture(p, c[0], c[1], typedArrayToFloat32(o));
                n.values = null, l && (this.uploadWaitMs += performance.now() - u);
            }
        } else ENV.get("WEBGL_NUM_MB_BEFORE_PAGING") < Number.POSITIVE_INFINITY && this.lruDataGPU.indexOf(e) >= 0 && (this.lruDataGPU.splice(this.lruDataGPU.indexOf(e), 1), this.lruDataGPU.push(e));
    }, e124.prototype.convertAndCacheOnCPU = function(e, t) {
        var n = this.delayedStorage, r = this.texData.get(e), o = r.texture, a = r.texShape, i = r.dtype, s = r.usage, u = r.isPacked;
        return n && null != o && (this.releaseTexture(e, o, a, s, u), r.texture = null, r.texShape = null, r.isPacked = !1), r.usage = TextureUsage.UPLOAD, null != t && (r.values = float32ToTypedArray(t, i)), r.values;
    }, e124.prototype.releaseTexture = function(e, t, n, r, o) {
        var a = this.texData.get(e), i = a.shape, s = a.dtype;
        if (ENV.get("WEBGL_NUM_MB_BEFORE_PAGING") < Number.POSITIVE_INFINITY) {
            var u = this.lruDataGPU.indexOf(e);
            u >= 0 && this.lruDataGPU.splice(u, 1);
        }
        this.numBytesInGPU -= this.computeBytes(i, s), this.textureManager.releaseTexture(t, n, r, o);
    }, e124.prototype.acquireTexture = function(e, t, n, r) {
        var o = this.texData.get(e), a = o.shape, i = o.dtype;
        return ENV.get("WEBGL_NUM_MB_BEFORE_PAGING") < Number.POSITIVE_INFINITY && this.lruDataGPU.push(e), this.numBytesInGPU += this.computeBytes(a, i), this.textureManager.acquireTexture(t, n, r);
    }, e124.prototype.computeBytes = function(e, t) {
        return sizeFromShape(e) * bytesPerElement(t);
    }, e124;
}();
function float32ToTypedArray(e, t) {
    if ("float32" === t || "complex64" === t) return e;
    if ("int32" === t || "bool" === t) {
        for(var n = "int32" === t ? new Int32Array(e.length) : new Uint8Array(e.length), r = 0; r < n.length; ++r)n[r] = Math.round(e[r]);
        return n;
    }
    throw new Error("Unknown dtype " + t);
}
function typedArrayToFloat32(e) {
    return e instanceof Float32Array ? e : new Float32Array(e);
}
function neg_(e132) {
    var t = convertToTensor(e132, "x", "neg");
    return ENV.engine.runKernel(function(e) {
        return e.neg(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.neg();
            }
        };
    });
}
function ceil_(e133) {
    var t = convertToTensor(e133, "x", "ceil");
    return ENV.engine.runKernel(function(e) {
        return e.ceil(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return zerosLike(e);
            }
        };
    });
}
function floor_(e134) {
    var t = convertToTensor(e134, "x", "floor");
    return ENV.engine.runKernel(function(e) {
        return e.floor(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return zerosLike(e);
            }
        };
    });
}
function sign_(e135) {
    var t = convertToTensor(e135, "x", "sign");
    return ENV.engine.runKernel(function(e) {
        return e.sign(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return zerosLike(e);
            }
        };
    });
}
function round_(e136) {
    var t = convertToTensor(e136, "x", "round");
    return ENV.engine.runKernel(function(e) {
        return e.round(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return zerosLike(e);
            }
        };
    });
}
function exp_(e137) {
    var t56 = convertToTensor(e137, "x", "exp");
    return ENV.engine.runKernel(function(e, n) {
        return n(e.exp(t56));
    }, {
        $x: t56
    }, function(e, t) {
        var n = t[0];
        return {
            $x: function() {
                return e.mulStrict(n);
            }
        };
    });
}
function expm1_(e138) {
    var t = convertToTensor(e138, "x", "expm1");
    return ENV.engine.runKernel(function(e) {
        return e.expm1(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.mulStrict(t.exp());
            }
        };
    });
}
function log_(e139) {
    var t = convertToTensor(e139, "x", "log");
    return ENV.engine.runKernel(function(e) {
        return e.log(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.divStrict(t.toFloat());
            }
        };
    });
}
function log1p_(e140) {
    var t = convertToTensor(e140, "x", "log1p");
    return ENV.engine.runKernel(function(e) {
        return e.log1p(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.div(t.add(1));
            }
        };
    });
}
function sqrt_(e141) {
    var t = convertToTensor(e141, "x", "sqrt");
    return ENV.engine.runKernel(function(e) {
        return e.sqrt(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.div(t.toFloat().sqrt().mul(2));
            }
        };
    });
}
function rsqrt_(e142) {
    var t = convertToTensor(e142, "x", "rsqrt");
    return ENV.engine.runKernel(function(e) {
        return e.rsqrt(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.div(t.pow(1.5).mul(2)).neg();
            }
        };
    });
}
function square_(e143) {
    var t = convertToTensor(e143, "x", "square");
    return ENV.engine.runKernel(function(e) {
        return e.square(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.mul(t.toFloat().mul(2));
            }
        };
    });
}
function reciprocal_(e144) {
    var t = convertToTensor(e144, "x", "reciprocal");
    return ENV.engine.runKernel(function(e) {
        return e.reciprocal(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.divStrict(t.square().neg());
            }
        };
    });
}
function abs_(e145) {
    var t = convertToTensor(e145, "x", "abs");
    if ("complex64" === t.dtype) return ENV.engine.runKernel(function(e) {
        return e.complexAbs(t);
    }, {
        $x: t
    });
    return ENV.engine.runKernel(function(e) {
        return e.abs(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.mulStrict(t.toFloat().step(-1));
            }
        };
    });
}
function clipByValue_(e146, t, n) {
    var r = convertToTensor(e146, "x", "clipByValue");
    assert(t <= n, "Error in clip: min (" + t + ") must be less than or equal to max (" + n + ").");
    return ENV.engine.runKernel(function(e) {
        return e.clip(r, t, n);
    }, {
        $x: r
    }, function(e) {
        return {
            $x: function() {
                return e.where(r.greaterEqual(t).logicalAnd(r.lessEqual(n)), zerosLike(e));
            }
        };
    });
}
function sigmoid_(e147) {
    var t57 = convertToTensor(e147, "x", "sigmoid");
    return ENV.engine.runKernel(function(e, n) {
        return n(e.sigmoid(t57));
    }, {
        $x: t57
    }, function(e, t) {
        var n = t[0];
        return {
            $x: function() {
                return e.mul(n.mul(scalar(1).sub(n)));
            }
        };
    });
}
function logSigmoid_(e148) {
    var t = convertToTensor(e148, "x", "logSigmoid");
    return ENV.engine.runKernel(function(e) {
        return e.softplus(t.neg()).neg();
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.mulStrict(t.neg().sigmoid());
            }
        };
    });
}
function softplus_(e149) {
    var t = convertToTensor(e149, "x", "softplus");
    return ENV.engine.runKernel(function(e) {
        return e.softplus(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.mulStrict(t.sigmoid());
            }
        };
    });
}
function sin_(e150) {
    var t = convertToTensor(e150, "x", "sin");
    return ENV.engine.runKernel(function(e) {
        return e.sin(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return t.toFloat().cos().mulStrict(e);
            }
        };
    });
}
function cos_(e151) {
    var t = convertToTensor(e151, "x", "cos");
    return ENV.engine.runKernel(function(e) {
        return e.cos(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return t.toFloat().sin().neg().mulStrict(e);
            }
        };
    });
}
function tan_(e152) {
    var t = convertToTensor(e152, "x", "tan");
    return ENV.engine.runKernel(function(e) {
        return e.tan(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.divStrict(t.cos().square());
            }
        };
    });
}
function asin_(e153) {
    var t = convertToTensor(e153, "x", "asin");
    return ENV.engine.runKernel(function(e) {
        return e.asin(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.divStrict(scalar(1).sub(t.toFloat().square()).sqrt());
            }
        };
    });
}
function acos_(e154) {
    var t = convertToTensor(e154, "x", "acos");
    return ENV.engine.runKernel(function(e) {
        return e.acos(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.divStrict(scalar(1).sub(t.toFloat().square()).sqrt()).neg();
            }
        };
    });
}
function atan_(e155) {
    var t = convertToTensor(e155, "x", "atan");
    return ENV.engine.runKernel(function(e) {
        return e.atan(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.div(t.toFloat().square().add(1));
            }
        };
    });
}
function sinh_(e156) {
    var t = convertToTensor(e156, "x", "sinh");
    return ENV.engine.runKernel(function(e) {
        return e.sinh(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return t.toFloat().cosh().mulStrict(e);
            }
        };
    });
}
function cosh_(e157) {
    var t = convertToTensor(e157, "x", "cosh");
    return ENV.engine.runKernel(function(e) {
        return e.cosh(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return t.toFloat().sinh().mulStrict(e);
            }
        };
    });
}
function tanh_(e158) {
    var t58 = convertToTensor(e158, "x", "tanh");
    return ENV.engine.runKernel(function(e, n) {
        return n(e.tanh(t58));
    }, {
        $x: t58
    }, function(e, t) {
        var n = t[0];
        return {
            $x: function() {
                return scalar(1).sub(n.square()).mulStrict(e);
            }
        };
    });
}
function asinh_(e159) {
    var t = convertToTensor(e159, "x", "asinh");
    return ENV.engine.runKernel(function(e) {
        return e.asinh(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.divStrict(scalar(1).add(t.toFloat().square()).sqrt());
            }
        };
    });
}
function acosh_(e160) {
    var t = convertToTensor(e160, "x", "acosh");
    return ENV.engine.runKernel(function(e) {
        return e.acosh(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.divStrict(t.toFloat().square().sub(1).sqrt());
            }
        };
    });
}
function atanh_(e161) {
    var t = convertToTensor(e161, "x", "atanh");
    return ENV.engine.runKernel(function(e) {
        return e.atanh(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.div(scalar(1).sub(t.toFloat().square()));
            }
        };
    });
}
function erf_(e162) {
    var t = convertToTensor(e162, "x", "erf");
    assert("int32" === t.dtype || "float32" === t.dtype, "Input dtype must be `int32` or `float32`."), "int32" === t.dtype && (t = t.toFloat());
    return ENV.engine.runKernel(function(e) {
        return e.erf(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                return e.mul(t.square().neg().exp().mul(2 / Math.sqrt(Math.PI)));
            }
        };
    });
}
function step_(e163, t) {
    void 0 === t && (t = 0);
    var n = convertToTensor(e163, "x", "step");
    return ENV.engine.runKernel(function(e) {
        return e.step(n, t);
    }, {
        $x: n
    }, function(e) {
        return {
            $x: function() {
                return zerosLike(e);
            }
        };
    });
}
ENV.get("IS_BROWSER") && ENV.registerBackend("webgl", function() {
    return new MathBackendWebGL;
}, 2, setTensorTracker);
var abs = op({
    abs_: abs_
}), acos = op({
    acos_: acos_
}), acosh = op({
    acosh_: acosh_
}), asin = op({
    asin_: asin_
}), asinh = op({
    asinh_: asinh_
}), atan = op({
    atan_: atan_
}), atanh = op({
    atanh_: atanh_
}), ceil = op({
    ceil_: ceil_
}), clipByValue = op({
    clipByValue_: clipByValue_
}), cos = op({
    cos_: cos_
}), cosh = op({
    cosh_: cosh_
}), erf = op({
    erf_: erf_
}), exp = op({
    exp_: exp_
}), expm1 = op({
    expm1_: expm1_
}), floor = op({
    floor_: floor_
}), log$1 = op({
    log_: log_
}), log1p = op({
    log1p_: log1p_
}), logSigmoid = op({
    logSigmoid_: logSigmoid_
}), neg = op({
    neg_: neg_
}), reciprocal = op({
    reciprocal_: reciprocal_
}), round = op({
    round_: round_
}), rsqrt = op({
    rsqrt_: rsqrt_
}), sigmoid = op({
    sigmoid_: sigmoid_
}), sign = op({
    sign_: sign_
}), sin = op({
    sin_: sin_
}), sinh = op({
    sinh_: sinh_
}), softplus = op({
    softplus_: softplus_
}), sqrt = op({
    sqrt_: sqrt_
}), square = op({
    square_: square_
}), step = op({
    step_: step_
}), tan = op({
    tan_: tan_
}), tanh$1 = op({
    tanh_: tanh_
});
function batchNorm2d_(e, t, n, r, o, a) {
    void 0 === a && (a = 0.001);
    var i, s, u = convertToTensor(e, "x", "batchNorm"), l = convertToTensor(t, "mean", "batchNorm"), c = convertToTensor(n, "variance", "batchNorm");
    return null != o && (i = convertToTensor(o, "scale", "batchNorm")), null != r && (s = convertToTensor(r, "offset", "batchNorm")), assert(2 === u.rank, "Error in batchNorm3D: x must be rank 3 but got rank " + u.rank + "."), assert(2 === l.rank || 1 === l.rank, "Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank " + l.rank + "."), assert(2 === c.rank || 1 === c.rank, "Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank " + c.rank + "."), null != i && assert(2 === i.rank || 1 === i.rank, "Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank " + i.rank + "."), null != s && assert(2 === s.rank || 1 === s.rank, "Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank " + s.rank + "."), batchNorm_(u, l, c, s, i, a);
}
function batchNorm3d_(e, t, n, r, o, a) {
    void 0 === a && (a = 0.001);
    var i, s, u = convertToTensor(e, "x", "batchNorm"), l = convertToTensor(t, "mean", "batchNorm"), c = convertToTensor(n, "variance", "batchNorm");
    return null != o && (i = convertToTensor(o, "scale", "batchNorm")), null != r && (s = convertToTensor(r, "offset", "batchNorm")), assert(3 === u.rank, "Error in batchNorm3D: x must be rank 3 but got rank " + u.rank + "."), assert(3 === l.rank || 1 === l.rank, "Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank " + l.rank + "."), assert(3 === c.rank || 1 === c.rank, "Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank " + c.rank + "."), null != i && assert(3 === i.rank || 1 === i.rank, "Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank " + i.rank + "."), null != s && assert(3 === s.rank || 1 === s.rank, "Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank " + s.rank + "."), batchNorm_(u, l, c, s, i, a);
}
function batchNorm4d_(e, t, n, r, o, a) {
    void 0 === a && (a = 0.001);
    var i, s, u = convertToTensor(e, "x", "batchNorm"), l = convertToTensor(t, "mean", "batchNorm"), c = convertToTensor(n, "variance", "batchNorm");
    return null != o && (i = convertToTensor(o, "scale", "batchNorm")), null != r && (s = convertToTensor(r, "offset", "batchNorm")), assert(4 === u.rank, "Error in batchNorm4D: x must be rank 4 but got rank " + u.rank + "."), assert(4 === l.rank || 1 === l.rank, "Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank " + l.rank + "."), assert(4 === c.rank || 1 === c.rank, "Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank " + c.rank + "."), null != i && assert(4 === i.rank || 1 === i.rank, "Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank " + i.rank + "."), null != s && assert(4 === s.rank || 1 === s.rank, "Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank " + s.rank + "."), batchNorm_(u, l, c, s, i, a);
}
function batchNormalization_(e, t, n, r, o, a) {
    return void 0 === r && (r = 0.001), warnDeprecation(), batchNorm_(e, t, n, a, o, r);
}
function batchNorm_(e164, t59, n32, r18, o18, a) {
    void 0 === a && (a = 0.001);
    var i, s5, u, l = convertToTensor(e164, "x", "batchNorm"), c = convertToTensor(t59, "mean", "batchNorm"), p = convertToTensor(n32, "variance", "batchNorm");
    null != o18 && (i = convertToTensor(o18, "scale", "batchNorm")), null != r18 && (s5 = convertToTensor(r18, "offset", "batchNorm")), assert(c.rank === p.rank, "Batch normalization gradient requires mean and variance to have equal ranks."), assert(null == s5 || c.rank === s5.rank, "Batch normalization gradient requires mean and offset to have equal ranks."), assert(null == i || c.rank === i.rank, "Batch normalization gradient requires mean and scale to have equal ranks."), u = 0 === l.rank || 1 === l.rank ? l.as4D(1, 1, 1, l.size) : 2 === l.rank ? l.as4D(1, 1, l.shape[0], l.shape[1]) : 3 === l.rank ? l.as4D(1, l.shape[0], l.shape[1], l.shape[2]) : l;
    return ENV.engine.runKernel(function(e) {
        return e.batchNormalization(u, batchnormReshape4D(c), batchnormReshape4D(p), a, batchnormReshape4D(i), batchnormReshape4D(s5));
    }, {
        $x: l,
        $mean: c,
        $variance: p,
        $scale: i,
        $offset: s5
    }, function(e165) {
        var t60 = null == i ? scalar(1) : i, n = getReductionAxes(c.shape, u.shape), r19 = [];
        if (1 === c.rank) {
            for(var o = 0; o < u.shape.length - 1; ++o)r19.push(u.shape[o]);
            r19.push(1);
        }
        var s = l.sub(c), d = e165.mul(t60), h = rsqrt(p.add(scalar(a))), f = h.mul(h).mul(h).mul(scalar(-0.5));
        return {
            $x: function() {
                return 1 === c.rank ? e165.mul(tile(h.as4D(1, 1, 1, c.shape[0]), r19)).mul(t60).reshape(l.shape) : e165.mul(h).mul(t60).reshape(l.shape);
            },
            $mean: function() {
                var e = h.mul(scalar(-1)).mul(d);
                return 1 === c.rank && (e = e.sum(n)), e.reshape(c.shape);
            },
            $variance: function() {
                var e = f.mul(s).mul(d);
                return 1 === c.rank && (e = e.sum(n)), e.reshape(c.shape);
            },
            $scale: function() {
                var t = s.mul(h), r = e165.mul(t);
                return 1 === c.rank && (r = r.sum(n)), r.reshape(c.shape);
            },
            $offset: function() {
                var t = e165;
                return 1 === c.rank && (t = t.sum(n)), t.reshape(c.shape);
            }
        };
    }).reshape(l.shape);
}
function batchnormReshape4D(e) {
    return null == e ? null : 0 === e.rank ? e.as1D() : 1 === e.rank ? e : 2 === e.rank ? e.as4D(1, 1, e.shape[0], e.shape[1]) : 3 === e.rank ? e.as4D(1, e.shape[0], e.shape[1], e.shape[2]) : e;
}
function batchNormalization2d_(e, t, n, r, o, a) {
    return void 0 === r && (r = 0.001), warnDeprecation(), batchNorm2d_(e, t, n, a, o, r);
}
function batchNormalization3d_(e, t, n, r, o, a) {
    return void 0 === r && (r = 0.001), warnDeprecation(), batchNorm3d_(e, t, n, a, o, r);
}
function batchNormalization4d_(e, t, n, r, o, a) {
    return void 0 === r && (r = 0.001), warnDeprecation(), batchNorm4d_(e, t, n, a, o, r);
}
function warnDeprecation() {
    deprecationWarn("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon");
}
var batchNormalization2d = op({
    batchNormalization2d_: batchNormalization2d_
}), batchNormalization3d = op({
    batchNormalization3d_: batchNormalization3d_
}), batchNormalization4d = op({
    batchNormalization4d_: batchNormalization4d_
}), batchNormalization = op({
    batchNormalization_: batchNormalization_
}), batchNorm = op({
    batchNorm_: batchNorm_
}), batchNorm2d = op({
    batchNorm2d_: batchNorm2d_
}), batchNorm3d = op({
    batchNorm3d_: batchNorm3d_
}), batchNorm4d = op({
    batchNorm4d_: batchNorm4d_
});
function computePool2DInfo(e, t, n, r, o, a, i) {
    void 0 === i && (i = "channelsLast");
    var s, u = parseTupleParam(t), l = u[0], c = u[1];
    if ("channelsLast" === i) s = [
        l,
        c,
        e[3],
        e[3]
    ];
    else {
        if ("channelsFirst" !== i) throw new Error("Unknown dataFormat " + i);
        s = [
            l,
            c,
            e[1],
            e[1]
        ];
    }
    return computeConv2DInfo(e, s, n, r, o, a, !1, i);
}
function computeConv2DInfo(e, t, n, r, o, a, i, s) {
    void 0 === i && (i = !1), void 0 === s && (s = "channelsLast");
    var u = [
        -1,
        -1,
        -1,
        -1
    ], l = u[0], c = u[1], p = u[2], d = u[3];
    if ("channelsLast" === s) l = e[0], c = e[1], p = e[2], d = e[3];
    else {
        if ("channelsFirst" !== s) throw new Error("Unknown dataFormat " + s);
        l = e[0], d = e[1], c = e[2], p = e[3];
    }
    var h, f = t[0], m = t[1], g = t[3], v = parseTupleParam(n), y = v[0], x = v[1], T = parseTupleParam(r), w = T[0], E = T[1], b = getEffectiveFilterSize(f, w), S = getEffectiveFilterSize(m, E), C = getPadAndOutInfo(o, c, p, y, x, b, S, a), A = C.padInfo, N = C.outHeight, _ = C.outWidth, R = i ? g * d : g;
    return "channelsFirst" === s ? h = [
        l,
        R,
        N,
        _
    ] : "channelsLast" === s && (h = [
        l,
        N,
        _,
        R
    ]), {
        batchSize: l,
        dataFormat: s,
        inHeight: c,
        inWidth: p,
        inChannels: d,
        outHeight: N,
        outWidth: _,
        outChannels: R,
        padInfo: A,
        strideHeight: y,
        strideWidth: x,
        filterHeight: f,
        filterWidth: m,
        effectiveFilterHeight: b,
        effectiveFilterWidth: S,
        dilationHeight: w,
        dilationWidth: E,
        inShape: e,
        outShape: h,
        filterShape: t
    };
}
function computeConv3DInfo(e, t, n, r, o, a, i) {
    void 0 === a && (a = !1), void 0 === i && (i = "channelsLast");
    var s = [
        -1,
        -1,
        -1,
        -1,
        -1
    ], u = s[0], l = s[1], c = s[2], p = s[3], d = s[4];
    if ("channelsLast" === i) u = e[0], l = e[1], c = e[2], p = e[3], d = e[4];
    else {
        if ("channelsFirst" !== i) throw new Error("Unknown dataFormat " + i);
        u = e[0], d = e[1], l = e[2], c = e[3], p = e[4];
    }
    var h, f = t[0], m = t[1], g = t[2], v = t[4], y = parse3TupleParam(n), x = y[0], T = y[1], w = y[2], E = parse3TupleParam(r), b = E[0], S = E[1], C = E[2], A = get3DPadAndOutInfo(o, l, c, p, x, T, w, getEffectiveFilterSize(f, b), getEffectiveFilterSize(m, S), getEffectiveFilterSize(g, C)), N = A.padInfo, _ = A.outDepth, R = A.outHeight, I = A.outWidth, k = a ? v * d : v;
    return "channelsFirst" === i ? h = [
        u,
        k,
        _,
        R,
        I
    ] : "channelsLast" === i && (h = [
        u,
        _,
        R,
        I,
        k
    ]), {
        batchSize: u,
        dataFormat: i,
        inDepth: l,
        inHeight: c,
        inWidth: p,
        inChannels: d,
        outDepth: _,
        outHeight: R,
        outWidth: I,
        outChannels: k,
        padInfo: N,
        strideDepth: x,
        strideHeight: T,
        strideWidth: w,
        filterDepth: f,
        filterHeight: m,
        filterWidth: g,
        dilationDepth: b,
        dilationHeight: S,
        dilationWidth: C,
        inShape: e,
        outShape: h,
        filterShape: t
    };
}
function computeOutputShape3D(e, t, n, r, o, a) {
    null == o && (o = computeDefaultPad(e, t, r));
    var i = e[0], s = e[1], u = conditionalRound((i - t + 2 * o) / r + 1, a);
    assert(isInt(u), "The output # of rows (" + u + ") must be an integer. Change the stride and/or zero pad parameters");
    var l = conditionalRound((s - t + 2 * o) / r + 1, a);
    return assert(isInt(l), "The output # of columns (" + l + ") must be an integer. Change the stride and/or zero pad parameters"), [
        u,
        l,
        n
    ];
}
function computeDefaultPad(e, t, n, r) {
    void 0 === r && (r = 1);
    var o = getEffectiveFilterSize(t, r);
    return Math.floor((e[0] * (n - 1) - n + o) / 2);
}
function parseTupleParam(e) {
    return "number" == typeof e ? [
        e,
        e
    ] : e;
}
function parse3TupleParam(e) {
    return "number" == typeof e ? [
        e,
        e,
        e
    ] : e;
}
function getEffectiveFilterSize(e, t) {
    return t <= 1 ? e : e + (e - 1) * (t - 1);
}
function getPadAndOutInfo(e, t, n, r, o, a, i, s) {
    var u, l, c;
    if ("number" == typeof e) {
        u = {
            top: e,
            bottom: e,
            left: e,
            right: e,
            type: 0 === e ? "VALID" : "NUMBER"
        };
        var p = computeOutputShape3D([
            t,
            n,
            1
        ], a, 1, r, e, s);
        l = p[0], c = p[1];
    } else if ("same" === e) {
        l = Math.ceil(t / r), c = Math.ceil(n / o);
        var d = Math.max(0, (l - 1) * r + a - t), h = Math.max(0, (c - 1) * o + i - n), f = Math.floor(d / 2), m = d - f, g = Math.floor(h / 2);
        u = {
            top: f,
            bottom: m,
            left: g,
            right: h - g,
            type: "SAME"
        };
    } else {
        if ("valid" !== e) throw Error("Unknown padding parameter: " + e);
        u = {
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            type: "VALID"
        }, l = Math.ceil((t - a + 1) / r), c = Math.ceil((n - i + 1) / o);
    }
    return {
        padInfo: u,
        outHeight: l,
        outWidth: c
    };
}
function get3DPadAndOutInfo(e, t, n, r, o, a, i, s, u, l) {
    var c, p, d, h;
    if ("same" === e) {
        var f = ((p = Math.ceil(t / o)) - 1) * o + s - t, m = ((d = Math.ceil(n / a)) - 1) * a + u - n, g = ((h = Math.ceil(r / i)) - 1) * i + l - r, v = Math.floor(f / 2), y = f - v, x = Math.floor(m / 2), T = m - x, w = Math.floor(g / 2);
        c = {
            top: x,
            bottom: T,
            left: w,
            right: g - w,
            front: v,
            back: y,
            type: "SAME"
        };
    } else {
        if ("valid" !== e) throw Error("Unknown padding parameter: " + e);
        c = {
            top: 0,
            bottom: 0,
            left: 0,
            right: 0,
            front: 0,
            back: 0,
            type: "VALID"
        }, p = Math.ceil((t - s + 1) / o), d = Math.ceil((n - u + 1) / a), h = Math.ceil((r - l + 1) / i);
    }
    return {
        padInfo: c,
        outDepth: p,
        outHeight: d,
        outWidth: h
    };
}
function conditionalRound(e, t) {
    if (!t) return e;
    switch(t){
        case "round":
            return Math.round(e);
        case "ceil":
            return Math.ceil(e);
        case "floor":
            return Math.floor(e);
        default:
            throw new Error("Unknown roundingMode " + t);
    }
}
function tupleValuesAreOne(e) {
    var t = parseTupleParam(e), n = t[0], r = t[1];
    return 1 === n && 1 === r;
}
function eitherStridesOrDilationsAreOne(e, t) {
    return tupleValuesAreOne(e) || tupleValuesAreOne(t);
}
function matMul_(e166, t, n, r) {
    var o;
    void 0 === n && (n = !1), void 0 === r && (r = !1);
    var a = convertToTensor(e166, "a", "matMul"), i = convertToTensor(t, "b", "matMul");
    a = (o = makeTypesMatch(a, i))[0], i = o[1];
    var s = n ? a.shape[a.rank - 2] : a.shape[a.rank - 1], u = r ? i.shape[i.rank - 1] : i.shape[i.rank - 2], l = n ? a.shape[a.rank - 1] : a.shape[a.rank - 2], c = r ? i.shape[i.rank - 2] : i.shape[i.rank - 1], p = a.shape.slice(0, -2), d = i.shape.slice(0, -2), h = sizeFromShape(p), f = sizeFromShape(d);
    assert(a.rank >= 2 && i.rank >= 2 && a.rank === i.rank, "Error in matMul: inputs must have the same rank of at least 2, got ranks " + a.rank + " and " + i.rank + "."), assert(arraysEqual(p, d), "Error in matMul: outer dimensions (" + p + ") and (" + d + ") of Tensors with shapes " + a.shape + " and " + i.shape + " must match."), assert(s === u, "Error in matMul: inner shapes (" + s + ") and (" + u + ") of Tensors with shapes " + a.shape + " and " + i.shape + " and transposeA=" + n + " and transposeB=" + r + " must match.");
    var m = a.shape.slice(0, -2).concat([
        l,
        c
    ]), g = n ? a.as3D(h, s, l) : a.as3D(h, l, s), v = r ? i.as3D(f, c, u) : i.as3D(f, u, c);
    return ENV.engine.runKernel(function(e) {
        return e.batchMatMul(g, v, n, r);
    }, {
        $a: g,
        $b: v
    }, function(e) {
        return n || r ? !n && r ? {
            $a: function() {
                return e.matMul(v, !1, !1);
            },
            $b: function() {
                return e.matMul(g, !0, !1);
            }
        } : n && !r ? {
            $a: function() {
                return v.matMul(e, !1, !0);
            },
            $b: function() {
                return g.matMul(e, !1, !1);
            }
        } : {
            $a: function() {
                return v.matMul(e, !0, !0);
            },
            $b: function() {
                return e.matMul(g, !0, !0);
            }
        } : {
            $a: function() {
                return e.matMul(v, !1, !0);
            },
            $b: function() {
                return g.matMul(e, !0, !1);
            }
        };
    }).reshape(m);
}
function outerProduct_(e, t) {
    var n = convertToTensor(e, "v1", "outerProduct"), r = convertToTensor(t, "v2", "outerProduct");
    return assert(1 === n.rank && 1 === r.rank, "Error in outerProduct: inputs must be rank 1, but got ranks " + n.rank + " and " + r.rank + "."), n.as2D(-1, 1).matMul(r.as2D(1, -1));
}
function dot_(e, t) {
    var n = convertToTensor(e, "t1", "dot"), r = convertToTensor(t, "t2", "dot");
    assert(!(1 !== n.rank && 2 !== n.rank || 1 !== r.rank && 2 !== r.rank), "Error in dot: inputs must all be rank 1 or 2, but got ranks " + n.rank + " and " + r.rank + ".");
    var o = 1 === n.rank ? n.size : n.shape[1], a = 1 === r.rank ? r.size : r.shape[0];
    return assert(o === a, "Error in dot: inner dimensions of inputs must match, but got " + o + " and " + a + "."), 1 === n.rank && 1 === r.rank ? n.as2D(1, -1).matMul(r.as2D(-1, 1)).asScalar() : 1 === n.rank && 2 === r.rank ? n.as2D(1, -1).matMul(r.as2D(r.shape[0], r.shape[1])).as1D() : 2 === n.rank && 1 === r.rank ? n.matMul(r.as2D(-1, 1)).as1D() : n.matMul(r.as2D(r.shape[0], r.shape[1]));
}
var matMul = op({
    matMul_: matMul_
}), dot = op({
    dot_: dot_
}), outerProduct = op({
    outerProduct_: outerProduct_
});
function conv1d_(e, t, n, r, o, a, i) {
    void 0 === o && (o = "NWC"), void 0 === a && (a = 1);
    var s = convertToTensor(e, "x", "conv1d"), u = convertToTensor(t, "filter", "conv1d"), l = s, c = !1;
    2 === s.rank && (c = !0, l = s.as3D(1, s.shape[0], s.shape[1])), assert(3 === l.rank, "Error in conv1d: input must be rank 3, but got rank " + l.rank + "."), assert(3 === u.rank, "Error in conv1d: filter must be rank 3, but got rank " + u.rank + "."), null != i && assert(isInt(r), "Error in conv1d: pad must be an integer when using, dimRoundingMode " + i + " but got pad " + r + "."), assert(l.shape[2] === u.shape[1], "Error in conv1d: depth of input (" + l.shape[2] + ") must match input depth for filter " + u.shape[1] + "."), assert(eitherStridesOrDilationsAreOne(n, a), "Error in conv1D: Either stride or dilation must be 1. Got stride " + n + " and dilation '" + a + "'"), assert("NWC" === o, "Error in conv1d: got dataFormat of " + o + " but only NWC is currently supported.");
    var p = u.as4D(1, u.shape[0], u.shape[1], u.shape[2]), d = l.as4D(l.shape[0], 1, l.shape[1], l.shape[2]), h = conv2d(d, p, [
        1,
        n
    ], r, "NHWC", [
        1,
        a
    ], i);
    return c ? h.as2D(h.shape[2], h.shape[3]) : h.as3D(h.shape[0], h.shape[2], h.shape[3]);
}
function conv2d_(e167, t, n, r, o, a, i) {
    void 0 === o && (o = "NHWC"), void 0 === a && (a = [
        1,
        1
    ]);
    var s = convertToTensor(e167, "x", "conv2d"), u = convertToTensor(t, "filter", "conv2d"), l = s, c = !1;
    3 === s.rank && (c = !0, l = s.as4D(1, s.shape[0], s.shape[1], s.shape[2])), assert(4 === l.rank, "Error in conv2d: input must be rank 4, but got rank " + l.rank + "."), assert(4 === u.rank, "Error in conv2d: filter must be rank 4, but got rank " + u.rank + "."), null != i && assert(isInt(r), "Error in conv2d: pad must be an integer when using, dimRoundingMode " + i + " but got pad " + r + "."), assert(l.shape[3] === u.shape[2], "Error in conv2d: depth of input (" + l.shape[3] + ") must match input depth for filter " + u.shape[2] + "."), assert(eitherStridesOrDilationsAreOne(n, a), "Error in conv2D: Either strides or dilations must be 1. Got strides " + n + " and dilations '" + a + "'"), assert("NHWC" === o, "Error in conv2d: got dataFormat of " + o + " but only NHWC is currently supported.");
    var p, d = computeConv2DInfo(l.shape, u.shape, n, a, r, i);
    if (1 !== d.filterHeight || 1 !== d.filterWidth || 1 !== d.dilationHeight || 1 !== d.dilationWidth || 1 !== d.strideHeight || 1 !== d.strideWidth || "SAME" !== d.padInfo.type && "VALID" !== d.padInfo.type) p = ENV.engine.runKernel(function(e) {
        return e.conv2d(l, u, d);
    }, {
        x: l,
        $filter: u
    }, function(e) {
        return assert(tupleValuesAreOne(a), "Error in gradient of conv2D: dilation rates greater than 1 are notyet supported in gradients. Got dilations '" + a + "'"), {
            x: function() {
                return conv2dDerInput_(l.shape, e, u, n, r);
            },
            $filter: function() {
                return conv2dDerFilter_(l, e, u.shape, n, r);
            }
        };
    });
    else {
        var h = l.reshape([
            -1,
            d.inChannels
        ]), f = u.reshape([
            d.inChannels,
            d.outChannels
        ]);
        p = matMul(h, f).reshape(d.outShape);
    }
    return c ? p.as3D(p.shape[1], p.shape[2], p.shape[3]) : p;
}
function conv2dDerInput_(e168, t, n, r, o, a) {
    assert(e168.length === t.rank, "Length of inShape (" + e168.length + ") and rank of dy (" + t.rank + ") must match");
    var i = e168, s = t, u = !1;
    3 === t.rank && (u = !0, s = t.as4D(1, t.shape[0], t.shape[1], t.shape[2]), i = [
        1,
        e168[0],
        e168[1],
        e168[2]
    ]);
    var l = i[3], c = s.shape[3];
    assert(4 === i.length, "Error in conv2dDerInput: inShape must be length 4, but got length " + i.length + "."), assert(4 === s.rank, "Error in conv2dDerInput: dy must be rank 4, but got rank " + s.rank), assert(4 === n.rank, "Error in conv2dDerInput: filter must be rank 4, but got rank " + n.rank), assert(l === n.shape[2], "Error in conv2dDerInput: depth of input (" + l + ") must match input depth for filter " + n.shape[2] + "."), assert(c === n.shape[3], "Error in conv2dDerInput: depth of output (" + c + ") must match output depth for filter " + n.shape[3] + "."), null != a && assert(isInt(o), "Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode " + a + " but got pad " + o + ".");
    var p = computeConv2DInfo(i, n.shape, r, 1, o, a), d = ENV.engine.runKernel(function(e) {
        return e.conv2dDerInput(s, n, p);
    }, {
        dy4D: s,
        filter: n
    }, function(e) {
        return {
            dy4D: function() {
                return conv2d(e, n, r, o, "NHWC", 1, a);
            },
            filter: function() {
                return conv2dDerFilter(e, s, n.shape, r, o, a);
            }
        };
    });
    return u ? d.as3D(d.shape[1], d.shape[2], d.shape[3]) : d;
}
function conv2dDerFilter_(e169, t, n, r, o, a) {
    var i = e169;
    3 === e169.rank && (i = e169.as4D(1, e169.shape[0], e169.shape[1], e169.shape[2]));
    var s = t;
    3 === s.rank && (s = t.as4D(1, t.shape[0], t.shape[1], t.shape[2])), assert(4 === i.rank, "Error in conv2dDerFilter: input must be rank 4, but got shape " + i.shape + "."), assert(4 === s.rank, "Error in conv2dDerFilter: dy must be rank 4, but got shape " + s.shape + "."), assert(4 === n.length, "Error in conv2dDerFilter: filterShape must be length 4, but got " + n + "."), assert(i.shape[3] === n[2], "Error in conv2dDerFilter: depth of input " + i.shape[3] + ") must match input depth in filter (" + n[2] + "."), assert(s.shape[3] === n[3], "Error in conv2dDerFilter: depth of dy (" + s.shape[3] + ") must match output depth for filter (" + n[3] + ")."), null != a && assert(isInt(o), "Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode " + a + " but got pad " + o + ".");
    var u = computeConv2DInfo(i.shape, n, r, 1, o, a);
    return ENV.engine.runKernel(function(e) {
        return e.conv2dDerFilter(i, s, u);
    }, {
        x4D: i,
        dy4D: s
    });
}
function conv2dTranspose_(e, t, n, r, o, a) {
    return conv2dDerInput_(n, convertToTensor(e, "x", "conv2dTranspose"), convertToTensor(t, "filter", "conv2dTranspose"), r, o, a);
}
function depthwiseConv2d_(e170, t, n, r, o, a, i) {
    void 0 === o && (o = "NHWC"), void 0 === a && (a = [
        1,
        1
    ]);
    var s = convertToTensor(e170, "x", "depthwiseConv2d"), u = convertToTensor(t, "filter", "depthwiseConv2d"), l = s, c = !1;
    3 === s.rank && (c = !0, l = s.as4D(1, s.shape[0], s.shape[1], s.shape[2])), assert(4 === l.rank, "Error in depthwiseConv2d: input must be rank 4, but got rank " + l.rank + "."), assert(4 === u.rank, "Error in depthwiseConv2d: filter must be rank 4, but got rank " + u.rank + "."), assert(l.shape[3] === u.shape[2], "Error in depthwiseConv2d: number of input channels (" + l.shape[3] + ") must match the inChannels dimension in filter " + u.shape[2] + "."), null == a && (a = [
        1,
        1
    ]), assert(eitherStridesOrDilationsAreOne(n, a), "Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides " + n + " and dilations '" + a + "'"), null != i && assert(isInt(r), "Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode " + i + " but got pad " + r + ".");
    var p = computeConv2DInfo(l.shape, u.shape, n, a, r, i, !0), d = ENV.engine.runKernel(function(e) {
        return e.depthwiseConv2D(l, u, p);
    }, {
        x: l,
        $filter: u
    }, function(e) {
        return assert(tupleValuesAreOne(a), "Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '" + a + "'"), {
            x: function() {
                return depthwiseConv2dDerInput(l.shape, e, u, p);
            },
            $filter: function() {
                return depthwiseConv2dDerFilter(l, e, u.shape, p);
            }
        };
    });
    return c ? d.as3D(d.shape[1], d.shape[2], d.shape[3]) : d;
}
function separableConv2d_(e, t, n, r, o, a, i) {
    void 0 === a && (a = [
        1,
        1
    ]), void 0 === i && (i = "NHWC");
    var s = convertToTensor(e, "x", "separableConv2d"), u = convertToTensor(t, "depthwiseFilter", "separableConv2d"), l = convertToTensor(n, "pointwiseFilter", "separableConv2d"), c = s, p = !1;
    if (3 === s.rank && (p = !0, c = s.as4D(1, s.shape[0], s.shape[1], s.shape[2])), "NCHW" === i) throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
    assert(4 === c.rank, "Error in separableConv2d: input must be rank 4, but got rank " + c.rank + "."), assert(4 === u.rank, "Error in separableConv2d: depthwise filter must be rank 4, but got rank " + u.rank + "."), assert(4 === l.rank, "Error in separableConv2d: pointwise filter must be rank 4, but got rank " + u.rank + "."), assert(1 === l.shape[0], "Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got " + l.shape[0] + "."), assert(1 === l.shape[1], "Error in separableConv2d: the second dimension of pointwise filter  must be 1, but got " + l.shape[1] + ".");
    var d = u.shape[2], h = u.shape[3];
    assert(l.shape[2] === d * h, "Error in separableConv2d: the third dimension of pointwise filter must be " + d * h + ", but got " + l.shape[2] + ".");
    var f = depthwiseConv2d(c, u, r, o, i, a), m = conv2d(f, l, 1, "valid", i);
    return p ? m.as3D(m.shape[1], m.shape[2], m.shape[3]) : m;
}
function parseTupleParam$1(e) {
    return "number" == typeof e ? [
        e,
        e,
        e
    ] : 2 === e.length ? [
        e[0],
        e[1],
        1
    ] : e;
}
function tupleValuesAreOne$1(e) {
    var t = parseTupleParam$1(e), n = t[0], r = t[1], o = t[2];
    return 1 === n && 1 === r && 1 === o;
}
function eitherStridesOrDilationsAreOne$1(e, t) {
    return tupleValuesAreOne$1(e) || tupleValuesAreOne$1(t);
}
function depthwiseConv2dDerInput(e171, t, n, r) {
    var o = t, a = !1;
    3 === t.rank && (a = !0, o = t.as4D(1, t.shape[0], t.shape[1], t.shape[2]));
    var i = ENV.engine.runKernel(function(e) {
        return e.depthwiseConv2DDerInput(o, n, r);
    }, {
        dy4D: o
    });
    return a ? i.as3D(i.shape[1], i.shape[2], i.shape[3]) : i;
}
function depthwiseConv2dDerFilter(e172, t, n, r) {
    var o = e172;
    3 === e172.rank && (o = e172.as4D(1, e172.shape[0], e172.shape[1], e172.shape[2]));
    var a = t;
    return 3 === a.rank && (a = t.as4D(1, t.shape[0], t.shape[1], t.shape[2])), ENV.engine.runKernel(function(e) {
        return e.depthwiseConv2DDerFilter(o, a, r);
    }, {
        x4D: o,
        dy4D: a
    });
}
function conv3d_(e173, t, n, r, o, a) {
    void 0 === o && (o = "NHWC"), void 0 === a && (a = [
        1,
        1,
        1
    ]);
    var i = convertToTensor(e173, "x", "conv3d"), s = convertToTensor(t, "filter", "conv3d"), u = i, l = !1;
    4 === i.rank && (l = !0, u = i.as5D(1, i.shape[0], i.shape[1], i.shape[2], i.shape[3])), assert(5 === u.rank, "Error in conv3d: input must be rank 5, but got rank " + u.rank + "."), assert(5 === s.rank, "Error in conv3d: filter must be rank 5, but got rank " + s.rank + "."), assert(u.shape[4] === s.shape[3], "Error in conv3d: depth of input (" + u.shape[4] + ") must match input depth for filter " + s.shape[3] + "."), assert(eitherStridesOrDilationsAreOne$1(n, a), "Error in conv3D: Either strides or dilations must be 1. Got strides " + n + " and dilations '" + a + "'"), assert("NHWC" === o, "Error in conv3d: got dataFormat of " + o + " but only NHWC is currently supported.");
    var c = computeConv3DInfo(u.shape, s.shape, n, a, r), p = ENV.engine.runKernel(function(e) {
        return e.conv3d(u, s, c);
    }, {
        x: u,
        $filter: s
    }, function(e) {
        return assert(tupleValuesAreOne$1(a), "Error in gradient of conv3D: dilation rates greater than 1 are notyet supported in gradients. Got dilations '" + a + "'"), {
            x: function() {
                return conv3dDerInput_(u.shape, e, s, n, r);
            },
            $filter: function() {
                return conv3dDerFilter_(u, e, s.shape, n, r);
            }
        };
    });
    return l ? p.as4D(p.shape[1], p.shape[2], p.shape[3], p.shape[4]) : p;
}
function conv3dDerInput_(e174, t, n, r, o) {
    assert(e174.length === t.rank, "Length of inShape (" + e174.length + ") and rank of dy (" + t.rank + ") must match");
    var a = e174, i = t, s = !1;
    4 === t.rank && (s = !0, i = t.as5D(1, t.shape[0], t.shape[1], t.shape[2], t.shape[3]), a = [
        1,
        e174[0],
        e174[1],
        e174[2],
        e174[3]
    ]);
    var u = a[4], l = i.shape[4];
    assert(5 === a.length, "Error in conv3dDerInput: inShape must be length 5, but got length " + a.length + "."), assert(5 === i.rank, "Error in conv3dDerInput: dy must be rank 5, but got rank " + i.rank), assert(5 === n.rank, "Error in conv3dDerInput: filter must be rank 5, but got rank " + n.rank), assert(u === n.shape[3], "Error in conv3dDerInput: depth of input (" + u + ") must match input depth for filter " + n.shape[3] + "."), assert(l === n.shape[4], "Error in conv3dDerInput: depth of output (" + l + ") must match output depth for filter " + n.shape[4] + ".");
    var c = computeConv3DInfo(a, n.shape, r, 1, o), p = ENV.engine.runKernel(function(e) {
        return e.conv3dDerInput(i, n, c);
    }, {
        dy5D: i
    });
    return s ? p.as4D(p.shape[1], p.shape[2], p.shape[3], p.shape[4]) : p;
}
function conv3dDerFilter_(e175, t, n, r, o) {
    var a = e175;
    4 === e175.rank && (a = e175.as5D(1, e175.shape[0], e175.shape[1], e175.shape[2], e175.shape[3]));
    var i = t;
    4 === i.rank && (i = t.as5D(1, t.shape[0], t.shape[1], t.shape[2], t.shape[3])), assert(5 === a.rank, "Error in conv3dDerFilter: input must be rank 5, but got shape " + a.shape + "."), assert(5 === i.rank, "Error in conv3dDerFilter: dy must be rank 5, but got shape " + i.shape + "."), assert(5 === n.length, "Error in conv3dDerFilter: filterShape must be length 5, but got " + n + "."), assert(a.shape[4] === n[3], "Error in conv3dDerFilter: depth of input " + a.shape[4] + ") must match input depth in filter (" + n[3] + "."), assert(i.shape[4] === n[4], "Error in conv3dDerFilter: depth of dy (" + i.shape[4] + ") must match output depth for filter (" + n[4] + ").");
    var s = computeConv3DInfo(a.shape, n, r, 1, o);
    return ENV.engine.runKernel(function(e) {
        return e.conv3dDerFilter(a, i, s);
    }, {
        x5D: a,
        dy5D: i
    });
}
var conv1d = op({
    conv1d_: conv1d_
}), conv2d = op({
    conv2d_: conv2d_
}), conv3d = op({
    conv3d_: conv3d_
}), conv2dDerFilter = op({
    conv2dDerFilter_: conv2dDerFilter_
}), depthwiseConv2d = op({
    depthwiseConv2d_: depthwiseConv2d_
}), separableConv2d = op({
    separableConv2d_: separableConv2d_
}), conv2dTranspose = op({
    conv2dTranspose_: conv2dTranspose_
});
function reverse1d_(e) {
    var t = convertToTensor(e, "x", "reverse");
    return assert(1 === t.rank, "Error in reverse1D: x must be rank 1 but got\n             rank " + t.rank + "."), reverse(t, 0);
}
function reverse2d_(e, t) {
    var n = convertToTensor(e, "x", "reverse");
    return assert(2 === n.rank, "Error in reverse2D: x must be rank 2 but got\n             rank " + n.rank + "."), reverse(n, t);
}
function reverse3d_(e, t) {
    var n = convertToTensor(e, "x", "reverse");
    return assert(3 === n.rank, "Error in reverse3D: x must be rank 3 but got\n             rank " + n.rank + "."), reverse(n, t);
}
function reverse4d_(e, t) {
    var n = convertToTensor(e, "x", "reverse");
    return assert(4 === n.rank, "Error in reverse4D: x must be rank 4 but got\n             rank " + n.rank + "."), reverse(n, t);
}
function reverse_(e176, t) {
    var n = convertToTensor(e176, "x", "reverse");
    if (0 === n.rank) return n.clone();
    var r = parseAxisParam(t, n.shape);
    return ENV.engine.runKernel(function(e) {
        return e.reverse(n, r);
    }, {
        $x: n
    }, function(e) {
        return {
            $x: function() {
                return e.reverse(r);
            }
        };
    }).reshapeAs(n);
}
var reverse = op({
    reverse_: reverse_
}), reverse1d = op({
    reverse1d_: reverse1d_
}), reverse2d = op({
    reverse2d_: reverse2d_
}), reverse3d = op({
    reverse3d_: reverse3d_
}), reverse4d = op({
    reverse4d_: reverse4d_
});
function maxPoolImpl_(e177, t61, n, r, o, a9) {
    var i5 = convertToTensor(e177, "x", "maxPool"), s = i5, u = !1;
    3 === i5.rank && (u = !0, s = i5.as4D(1, i5.shape[0], i5.shape[1], i5.shape[2])), null == r && (r = [
        1,
        1
    ]), assert(4 === s.rank, "Error in maxPool: input must be rank 4 but got rank " + s.rank + "."), assert(eitherStridesOrDilationsAreOne(n, r), "Error in maxPool: Either strides or dilations must be 1. Got strides " + n + " and dilations '" + r + "'"), null != a9 && assert(isInt(o), "Error in maxPool: pad must be an integer when using, dimRoundingMode " + a9 + " but got pad " + o + ".");
    var l = computePool2DInfo(s.shape, t61, n, r, o, a9), c = ENV.engine.runKernel(function(e, t) {
        return t(e.maxPool(s, l));
    }, {
        x: s
    }, function(e, a) {
        var i = a[0];
        return {
            x: function() {
                return maxPoolBackprop(e, s, i, t61, n, r, o);
            }
        };
    });
    return u ? c.as3D(c.shape[1], c.shape[2], c.shape[3]) : c;
}
function maxPool_(e, t, n, r, o) {
    return maxPoolImpl_(e, t, n, 1, r, o);
}
function avgPoolImpl_(e178, t, n, r, o, a) {
    var i = convertToTensor(e178, "x", "avgPool", "float32");
    null == r && (r = [
        1,
        1
    ]), assert(eitherStridesOrDilationsAreOne(n, r), "Error in avgPool: Either strides or dilations must be 1. Got strides " + n + " and dilations '" + r + "'");
    var s = i, u = !1;
    3 === i.rank && (u = !0, s = i.as4D(1, i.shape[0], i.shape[1], i.shape[2])), assert(4 === s.rank, "Error in avgPool: x must be rank 4 but got rank " + s.rank + "."), null != a && assert(isInt(o), "Error in avgPool: pad must be an integer when using, dimRoundingMode " + a + " but got pad " + o + ".");
    var l = computePool2DInfo(s.shape, t, n, r, o, a), c = ENV.engine.runKernel(function(e) {
        return e.avgPool(s, l);
    }, {
        x: s
    }, function(e) {
        return {
            x: function() {
                return avgPoolBackprop(e, s, t, n, r, o);
            }
        };
    });
    return c = c.cast(i.dtype), u ? c.as3D(c.shape[1], c.shape[2], c.shape[3]) : c;
}
function avgPool_(e, t, n, r, o) {
    return avgPoolImpl_(e, t, n, 1, r, o);
}
function pool_(e, t, n, r, o, a) {
    null == o && (o = [
        1,
        1
    ]), null == a && (a = 1), 0 === r && (r = "valid");
    var i = convertToTensor(e, "x", "maxPool"), s = i, u = !1;
    3 === i.rank && (u = !0, s = i.as4D(1, i.shape[0], i.shape[1], i.shape[2])), assert(eitherStridesOrDilationsAreOne(a, o), "Error in pool: Either strides or dilations must be 1. Got strides " + a + " and dilations '" + o + "'");
    var l, c = computePool2DInfo(s.shape, t, a, o, r), p = [
        c.dilationHeight,
        c.dilationWidth
    ];
    l = "same" === r ? withSpaceToBatchBasePaddings([
        c.filterHeight,
        c.filterWidth
    ], p) : [
        [
            0,
            0
        ],
        [
            0,
            0
        ]
    ];
    var d = 1 === p[0] && 1 === p[1], h = requiredSpaceToBatchPaddings([
        c.inHeight,
        c.inWidth
    ], p, l), f = h[0], m = h[1], g = d ? r : "valid", v = d ? s : spaceToBatchND(s, p, f), y = ("avg" === n ? function() {
        return avgPoolImpl_(v, t, a, 1, g);
    } : function() {
        return maxPoolImpl_(v, t, a, 1, g);
    })(), x = d ? y : batchToSpaceND(y, p, m);
    return u ? x.as3D(x.shape[1], x.shape[2], x.shape[3]) : x;
}
function maxPoolBackprop(e179, t, n, r, o, a, i, s) {
    var u = convertToTensor(e179, "dy", "maxPoolBackprop"), l = convertToTensor(t, "input", "maxPoolBackprop"), c = convertToTensor(n, "output", "maxPoolBackprop");
    assert(l.rank === u.rank, "Rank of input (" + l.rank + ") does not match rank of dy (" + u.rank + ")"), null == a && (a = [
        1,
        1
    ]), assert(eitherStridesOrDilationsAreOne(o, a), "Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides " + o + " and dilations '" + a + "'"), assert(4 === u.rank, "Error in maxPoolBackprop: dy must be rank 4 but got rank " + u.rank + "."), assert(4 === l.rank, "Error in maxPoolBackprop: input must be rank 4 but got rank " + l.rank + "."), null != s && assert(isInt(i), "Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode " + s + " but got pad " + i + ".");
    var p = computePool2DInfo(l.shape, r, o, a, i, s);
    return ENV.engine.runKernel(function(e) {
        return e.maxPoolBackprop(u, l, c, p);
    }, {
        $dy: u,
        $input: l
    });
}
function avgPoolBackprop(e180, t, n, r, o, a) {
    var i = convertToTensor(e180, "dy", "avgPoolBackprop"), s = convertToTensor(t, "input", "avgPoolBackprop");
    assert(s.rank === i.rank, "Rank of input (" + s.rank + ") does not match rank of dy (" + i.rank + ")"), null == o && (o = [
        1,
        1
    ]), assert(eitherStridesOrDilationsAreOne(r, o), "Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides " + r + " and dilations '" + o + "'");
    var u = s, l = i, c = !1;
    3 === s.rank && (c = !0, u = s.as4D(1, s.shape[0], s.shape[1], s.shape[2]), l = i.as4D(1, i.shape[0], i.shape[1], i.shape[2])), assert(4 === l.rank, "Error in avgPoolBackprop: dy must be rank 4 but got rank " + l.rank + "."), assert(4 === u.rank, "Error in avgPoolBackprop: input must be rank 4 but got rank " + u.rank + ".");
    var p = computePool2DInfo(u.shape, n, r, o, a), d = ENV.engine.runKernel(function(e) {
        return e.avgPoolBackprop(l, u, p);
    }, {
        dy4D: l,
        input4D: u
    });
    return c ? d.as3D(d.shape[1], d.shape[2], d.shape[3]) : d;
}
function requiredSpaceToBatchPaddings(e181, t, n) {
    var r = n.map(function(e) {
        return e[0];
    }), o = n.map(function(e) {
        return e[1];
    }), a = e181.concat(r, o), i = t.map(function(e, t) {
        return (e - a[t] % e) % e;
    }), s = o.map(function(e, t) {
        return e + i[t];
    });
    return [
        t.map(function(e, t) {
            return [
                r[t],
                s[t]
            ];
        }),
        t.map(function(e, t) {
            return [
                0,
                i[t]
            ];
        })
    ];
}
function withSpaceToBatchBasePaddings(e182, t) {
    var n = e182.map(function(e, n) {
        return e + (e - 1) * (t[n] - 1);
    }).map(function(e) {
        return e - 1;
    }), r = n.map(function(e) {
        return Math.floor(e / 2);
    }), o = n.map(function(e, t) {
        return e - r[t];
    });
    return n.map(function(e, t) {
        return [
            r[t],
            o[t]
        ];
    });
}
var maxPool = op({
    maxPool_: maxPool_
}), avgPool = op({
    avgPool_: avgPool_
}), pool = op({
    pool_: pool_
});
function slice1d_(e, t, n) {
    var r = convertToTensor(e, "x", "slice1d");
    return assert(1 === r.rank, "slice1d expects a rank-1 tensor, but got a rank-" + r.rank + " tensor"), slice(r, [
        t
    ], [
        n
    ]);
}
function slice2d_(e, t, n) {
    var r = convertToTensor(e, "x", "slice2d");
    return assert(2 === r.rank, "slice2d expects a rank-2 tensor, but got a rank-" + r.rank + " tensor"), slice(r, t, n);
}
function slice3d_(e, t, n) {
    var r = convertToTensor(e, "x", "slice3d");
    return assert(3 === r.rank, "slice3d expects a rank-3 tensor, but got a rank-" + r.rank + " tensor"), slice(r, t, n);
}
function slice4d_(e, t, n) {
    var r = convertToTensor(e, "x", "slice4d");
    return assert(4 === r.rank, "slice4d expects a rank-4 tensor, but got a rank-" + r.rank + " tensor"), slice(r, t, n);
}
function slice_(e183, t62, n33) {
    var r, o, a = convertToTensor(e183, "x", "slice");
    if (0 === a.rank) throw new Error("Slicing scalar is not possible");
    r = "number" == typeof t62 ? [
        t62
    ].concat(new Array(a.rank - 1).fill(0)) : t62.length < a.rank ? t62.concat(new Array(a.rank - t62.length).fill(0)) : t62.slice(), o = (o = null == n33 ? new Array(a.rank).fill(-1) : "number" == typeof n33 ? [
        n33
    ].concat(new Array(a.rank - 1).fill(-1)) : n33.length < a.rank ? n33.concat(new Array(a.rank - n33.length).fill(-1)) : n33).map(function(e, t) {
        return e >= 0 ? e : (assert(-1 === e, "Bad value in size"), a.shape[t] - r[t]);
    }), assertParamsValid(a, r, o);
    var i = a.shape;
    return ENV.engine.runKernel(function(e) {
        return e.slice(a, r, o);
    }, {
        $x: a
    }, function(e) {
        for(var t = [], n = 0; n < e.rank; n++)t.push([
            r[n],
            i[n] - r[n] - o[n]
        ]);
        return {
            $x: function() {
                return e.pad(t);
            }
        };
    });
}
var slice = op({
    slice_: slice_
}), slice1d = op({
    slice1d_: slice1d_
}), slice2d = op({
    slice2d_: slice2d_
}), slice3d = op({
    slice3d_: slice3d_
}), slice4d = op({
    slice4d_: slice4d_
});
function logSumExp_(e, t, n) {
    void 0 === t && (t = null), void 0 === n && (n = !1);
    var r = convertToTensor(e, "x", "logSumExp"), o = parseAxisParam(t, r.shape), a = r.max(o, !0), i = r.sub(a).exp().sum(o).log(), s = a.reshape(i.shape).add(i);
    if (n) {
        var u = expandShapeToKeepDim(s.shape, o);
        return s.reshape(u);
    }
    return s;
}
function sum_(e184, t63, n34) {
    void 0 === t63 && (t63 = null), void 0 === n34 && (n34 = !1);
    var r20 = convertToTensor(e184, "x", "sum");
    "bool" === r20.dtype && (r20 = r20.toInt());
    var o = parseAxisParam(t63, r20.shape);
    return customGrad(function(e185) {
        var t64 = getAxesPermutation(o, e185.rank), r = o, a = e185;
        null != t64 && (a = e185.transpose(t64), r = getInnerMostAxes(r.length, e185.rank));
        var i = ENV.engine.runKernel(function(e) {
            return e.sum(a, r);
        }, {
            permutedX: a
        });
        if (n34) {
            var s = expandShapeToKeepDim(i.shape, o);
            i = i.reshape(s);
        }
        return {
            value: i,
            gradFunc: function(t) {
                var n = e185.shape.slice();
                return o.forEach(function(e) {
                    n[e] = 1;
                }), t.reshape(n).mul(ones$1(e185.shape, "float32"));
            }
        };
    })(r20);
}
function prod_(e186, t, n) {
    void 0 === t && (t = null), void 0 === n && (n = !1);
    var r = convertToTensor(e186, "x", "prod");
    "bool" === r.dtype && (r = r.toInt());
    var o = parseAxisParam(t, r.shape), a = getAxesPermutation(o, r.rank), i = o, s = r;
    null != a && (s = r.transpose(a), i = getInnerMostAxes(i.length, r.rank));
    var u = ENV.engine.runKernel(function(e) {
        return e.prod(s, i);
    }, {
        permutedX: s
    });
    if (n) {
        var l = expandShapeToKeepDim(u.shape, o);
        u = u.reshape(l);
    }
    return u;
}
function mean_(e187, t65, n35) {
    void 0 === t65 && (t65 = null), void 0 === n35 && (n35 = !1);
    var r21 = convertToTensor(e187, "x", "mean"), o = parseAxisParam(t65, r21.shape), a = sizeFromShape(computeOutAndReduceShapes(r21.shape, o)[1]);
    return customGrad(function(e) {
        var r = scalar(a);
        return {
            value: (r.dtype === e.dtype ? e : e.cast(r.dtype)).div(r).sum(t65, n35),
            gradFunc: function(t) {
                var n = e.shape.slice();
                return o.forEach(function(e) {
                    n[e] = 1;
                }), t.reshape(n).mul(ones$1(e.shape, "float32")).div(r);
            }
        };
    })(r21);
}
function gradForMinAndMax(e, t66, n, r, o) {
    var a = t66[0];
    return a.rank < n.rank && (a = a.reshape(expandShapeToKeepDim(a.shape, r))), e.rank < n.rank && (e = e.reshape(expandShapeToKeepDim(e.shape, r))), {
        $x: function() {
            var t = e.mul(n.equal(a).cast(e.dtype));
            return null == o ? t : t.transpose(o);
        }
    };
}
function min_(e188, t67, n) {
    void 0 === t67 && (t67 = null), void 0 === n && (n = !1);
    var r = convertToTensor(e188, "x", "min"), o = r, a = parseAxisParam(t67, r.shape), i = a, s = getAxesPermutation(i, r.rank);
    null != s && (r = r.transpose(s), i = getInnerMostAxes(i.length, r.rank));
    var u = ENV.engine.runKernel(function(e, t) {
        return t(e.min(r, i));
    }, {
        $x: r
    }, function(e, t) {
        return gradForMinAndMax(e, t, o, a, s);
    });
    if (n) {
        var l = expandShapeToKeepDim(u.shape, a);
        u = u.reshape(l);
    }
    return u;
}
function max_(e189, t68, n) {
    void 0 === t68 && (t68 = null), void 0 === n && (n = !1);
    var r = convertToTensor(e189, "x", "max"), o = r, a = parseAxisParam(t68, r.shape), i = a, s = getAxesPermutation(i, r.rank);
    null != s && (r = r.transpose(s), i = getInnerMostAxes(i.length, r.rank));
    var u = ENV.engine.runKernel(function(e, t) {
        return t(e.max(r, i));
    }, {
        $x: r
    }, function(e, t) {
        return gradForMinAndMax(e, t, o, a, s);
    });
    if (n) {
        var l = expandShapeToKeepDim(u.shape, a);
        u = u.reshape(l);
    }
    return u;
}
function argMin_(e190, t) {
    void 0 === t && (t = 0);
    var n = convertToTensor(e190, "x", "argMin");
    null == t && (t = 0);
    var r = parseAxisParam(t, n.shape), o = getAxesPermutation(r, n.rank);
    null != o && (n = n.transpose(o), r = getInnerMostAxes(r.length, n.rank));
    return ENV.engine.runKernel(function(e) {
        return e.argMin(n, r[0]);
    }, {
        $x: n
    }, function(e) {
        return {
            $x: function() {
                return zerosLike(n);
            }
        };
    });
}
function argMax_(e191, t) {
    void 0 === t && (t = 0);
    var n = convertToTensor(e191, "x", "argMax");
    null == t && (t = 0);
    var r = parseAxisParam(t, n.shape), o = getAxesPermutation(r, n.rank);
    null != o && (n = n.transpose(o), r = getInnerMostAxes(r.length, n.rank));
    return ENV.engine.runKernel(function(e) {
        return e.argMax(n, r[0]);
    }, {
        $x: n
    }, function(e) {
        return {
            $x: function() {
                return zerosLike(n);
            }
        };
    });
}
function all_(e192, t, n) {
    void 0 === t && (t = null), void 0 === n && (n = !1);
    var r = convertToTensor(e192, "x", "all", "bool"), o = parseAxisParam(t, r.shape), a = o, i = getAxesPermutation(a, r.rank);
    null != i && (r = r.transpose(i), a = getInnerMostAxes(a.length, r.rank));
    var s = ENV.engine.runKernel(function(e) {
        return e.all(r, a);
    }, {
        $x: r
    });
    if (n) {
        var u = expandShapeToKeepDim(s.shape, o);
        return s.reshape(u);
    }
    return s;
}
function any_(e193, t, n) {
    void 0 === t && (t = null), void 0 === n && (n = !1);
    var r = convertToTensor(e193, "x", "any", "bool"), o = parseAxisParam(t, r.shape), a = o, i = getAxesPermutation(a, r.rank);
    null != i && (r = r.transpose(i), a = getInnerMostAxes(a.length, r.rank));
    var s = ENV.engine.runKernel(function(e) {
        return e.any(r, a);
    }, {
        $x: r
    });
    if (n) {
        var u = expandShapeToKeepDim(s.shape, o);
        return s.reshape(u);
    }
    return s;
}
function moments_(e, t, n) {
    void 0 === t && (t = null), void 0 === n && (n = !1);
    var r = parseAxisParam(t, (e = convertToTensor(e, "x", "moments")).shape), o = e.mean(r, n), a = o.shape;
    return n || (a = expandShapeToKeepDim(o.shape, r)), {
        mean: o,
        variance: e.toFloat().sub(o.reshape(a)).square().mean(r, n)
    };
}
var all = op({
    all_: all_
}), any = op({
    any_: any_
}), argMax = op({
    argMax_: argMax_
}), argMin = op({
    argMin_: argMin_
}), logSumExp = op({
    logSumExp_: logSumExp_
}), max = op({
    max_: max_
}), mean = op({
    mean_: mean_
}), min = op({
    min_: min_
}), moments = op({
    moments_: moments_
}), sum$1 = op({
    sum_: sum_
}), prod = op({
    prod_: prod_
});
function notEqual_(e194, t) {
    var n, r = convertToTensor(e194, "a", "notEqual"), o = convertToTensor(t, "b", "notEqual");
    return n = makeTypesMatch(r, o), r = n[0], o = n[1], assertAndGetBroadcastShape(r.shape, o.shape), ENV.engine.runKernel(function(e) {
        return e.notEqual(r, o);
    }, {
        $a: r,
        $b: o
    });
}
function notEqualStrict_(e, t) {
    var n = convertToTensor(e, "a", "notEqualStrict"), r = convertToTensor(t, "b", "notEqualStrict");
    return assertShapesMatch(n.shape, r.shape, "Error in notEqualStrict: "), n.notEqual(r);
}
function less_(e195, t) {
    var n, r = convertToTensor(e195, "a", "less"), o = convertToTensor(t, "b", "less");
    return n = makeTypesMatch(r, o), r = n[0], o = n[1], assertAndGetBroadcastShape(r.shape, o.shape), ENV.engine.runKernel(function(e) {
        return e.less(r, o);
    }, {
        $a: r,
        $b: o
    });
}
function lessStrict_(e, t) {
    var n = convertToTensor(e, "a", "lessStrict"), r = convertToTensor(t, "b", "lessStrict");
    return assertShapesMatch(n.shape, r.shape, "Error in lessStrict: "), n.less(r);
}
function equal_(e196, t) {
    var n, r = convertToTensor(e196, "a", "equal"), o = convertToTensor(t, "b", "equal");
    return n = makeTypesMatch(r, o), r = n[0], o = n[1], assertAndGetBroadcastShape(r.shape, o.shape), ENV.engine.runKernel(function(e) {
        return e.equal(r, o);
    }, {
        $a: r,
        $b: o
    });
}
function equalStrict_(e, t) {
    var n = convertToTensor(e, "a", "equalStrict"), r = convertToTensor(t, "b", "equalStrict");
    return assertShapesMatch(n.shape, r.shape, "Error in equalStrict: "), n.equal(r);
}
function lessEqual_(e197, t) {
    var n, r = convertToTensor(e197, "a", "lessEqual"), o = convertToTensor(t, "b", "lessEqual");
    return n = makeTypesMatch(r, o), r = n[0], o = n[1], assertAndGetBroadcastShape(r.shape, o.shape), ENV.engine.runKernel(function(e) {
        return e.lessEqual(r, o);
    }, {
        $a: r,
        $b: o
    });
}
function lessEqualStrict_(e, t) {
    var n = convertToTensor(e, "a", "lessEqualStrict"), r = convertToTensor(t, "b", "lessEqualStrict");
    return assertShapesMatch(n.shape, r.shape, "Error in lessEqualStrict: "), n.lessEqual(r);
}
function greater_(e198, t) {
    var n, r = convertToTensor(e198, "a", "greater"), o = convertToTensor(t, "b", "greater");
    return n = makeTypesMatch(r, o), r = n[0], o = n[1], assertAndGetBroadcastShape(r.shape, o.shape), ENV.engine.runKernel(function(e) {
        return e.greater(r, o);
    }, {
        $a: r,
        $b: o
    });
}
function greaterStrict_(e, t) {
    var n = convertToTensor(e, "a", "greaterStrict"), r = convertToTensor(t, "b", "greaterStrict");
    return assertShapesMatch(n.shape, r.shape, "Error in greaterStrict: "), n.greater(r);
}
function greaterEqual_(e199, t) {
    var n, r = convertToTensor(e199, "a", "greaterEqual"), o = convertToTensor(t, "b", "greaterEqual");
    n = makeTypesMatch(r, o), r = n[0], o = n[1], assertAndGetBroadcastShape(r.shape, o.shape);
    return ENV.engine.runKernel(function(e) {
        return e.greaterEqual(r, o);
    }, {
        $a: r,
        $b: o
    }, function(e) {
        return {
            $a: function() {
                return zerosLike(r);
            },
            $b: function() {
                return zerosLike(o);
            }
        };
    });
}
function greaterEqualStrict_(e, t) {
    var n = convertToTensor(e, "a", "greaterEqualStrict"), r = convertToTensor(t, "b", "greaterEqualStrict");
    return assertShapesMatch(n.shape, r.shape, "Error in greaterEqualStrict: "), n.greaterEqual(r);
}
var equal = op({
    equal_: equal_
}), equalStrict = op({
    equalStrict_: equalStrict_
}), greater = op({
    greater_: greater_
}), greaterEqual = op({
    greaterEqual_: greaterEqual_
}), greaterEqualStrict = op({
    greaterEqualStrict_: greaterEqualStrict_
}), greaterStrict = op({
    greaterStrict_: greaterStrict_
}), less = op({
    less_: less_
}), lessEqual = op({
    lessEqual_: lessEqual_
}), lessEqualStrict = op({
    lessEqualStrict_: lessEqualStrict_
}), lessStrict = op({
    lessStrict_: lessStrict_
}), notEqual = op({
    notEqual_: notEqual_
}), notEqualStrict = op({
    notEqualStrict_: notEqualStrict_
});
function add_(e200, t69) {
    var n36, r = convertToTensor(e200, "a", "add"), o = convertToTensor(t69, "b", "add");
    n36 = makeTypesMatch(r, o), r = n36[0], o = n36[1];
    var a = assertAndGetBroadcastShape(r.shape, o.shape);
    return ENV.engine.runKernel(function(e) {
        return e.add(r, o);
    }, {
        $a: r,
        $b: o
    }, function(e) {
        return {
            $a: function() {
                var t = e, n = getReductionAxes(r.shape, a);
                return n.length > 0 && (t = t.sum(n)), t.reshape(r.shape);
            },
            $b: function() {
                var t = e, n = getReductionAxes(o.shape, a);
                return n.length > 0 && (t = t.sum(n)), t.reshape(o.shape);
            }
        };
    });
}
function addN_(e201) {
    assert(Array.isArray(e201), function() {
        return "The argument passed to tf.addN() must be a list of tensors";
    }), assert(e201.length >= 1, function() {
        return "Must pass at least one tensor to tf.addN(), but got " + e201.length;
    });
    var t70 = e201.map(function(e, t) {
        return convertToTensor(e, "tensors" + t, "addN");
    }), n37 = t70[0];
    t70.forEach(function(e) {
        if (e.dtype !== n37.dtype) throw new Error("All tensors passed to tf.addN() must have the same dtype");
    }), t70.forEach(function(e) {
        if (!arraysEqual(e.shape, n37.shape)) throw new Error("All tensors passed to tf.addN() must have the same shape");
    });
    var r = t70;
    return ENV.engine.runKernel(function(e) {
        return e.addN(t70);
    }, r, function(e) {
        var n = {
        };
        return t70.forEach(function(t, r) {
            n[r] = function() {
                return e.clone();
            };
        }), n;
    });
}
function addStrict_(e, t) {
    var n = convertToTensor(e, "a", "addStrict"), r = convertToTensor(t, "b", "addStrict");
    return assertShapesMatch(n.shape, r.shape, "Error in addStrict: "), n.add(r);
}
function sub_(e202, t71) {
    var n38, r = convertToTensor(e202, "a", "sub"), o = convertToTensor(t71, "b", "sub");
    n38 = makeTypesMatch(r, o), r = n38[0], o = n38[1];
    var a = assertAndGetBroadcastShape(r.shape, o.shape);
    return ENV.engine.runKernel(function(e) {
        return e.subtract(r, o);
    }, {
        $a: r,
        $b: o
    }, function(e) {
        return {
            $a: function() {
                var t = e, n = getReductionAxes(r.shape, a);
                return n.length > 0 && (t = t.sum(n)), t.reshape(r.shape);
            },
            $b: function() {
                var t = e, n = getReductionAxes(o.shape, a);
                return n.length > 0 && (t = t.sum(n)), t.neg().reshape(o.shape);
            }
        };
    });
}
function subStrict_(e, t) {
    var n = convertToTensor(e, "a", "subStrict"), r = convertToTensor(t, "b", "subStrict");
    return assertShapesMatch(n.shape, r.shape, "Error in subStrict: "), n.sub(r);
}
function pow_(e203, t72) {
    var n = convertToTensor(e203, "base", "pow"), r = convertToTensor(t72, "exp", "pow"), o = assertAndGetBroadcastShape(n.shape, r.shape);
    e203 = n.cast(upcastType(n.dtype, r.dtype)), t72 = r.cast(upcastType(n.dtype, r.dtype));
    return ENV.engine.runKernel(function(e, t) {
        return t(e.pow(n, r));
    }, {
        $base: n,
        $exp: r
    }, function(e, t73) {
        var a10 = t73[0];
        return {
            $base: function() {
                var t = r.toFloat(), a = e.mul(t.mul(n.pow(t.sub(scalar(1))))), i = getReductionAxes(n.shape, o);
                return i.length > 0 && (a = a.sum(i)), a.reshape(n.shape);
            },
            $exp: function() {
                var t = n.greater(0), i = n.log().where(t, zerosLike(n)), s = e.mul(a10.mul(i)), u = getReductionAxes(r.shape, o);
                return u.length > 0 && (s = s.sum(u)), s.reshape(r.shape);
            }
        };
    });
}
function powStrict_(e, t) {
    return assertShapesMatch(e.shape, t.shape, "Error in powStrict: "), e.pow(t);
}
function mul_(e204, t74) {
    var n39, r = convertToTensor(e204, "a", "mul"), o = convertToTensor(t74, "b", "mul");
    n39 = makeTypesMatch(r, o), r = n39[0], o = n39[1];
    var a = assertAndGetBroadcastShape(r.shape, o.shape);
    return ENV.engine.runKernel(function(e) {
        return e.multiply(r, o);
    }, {
        $a: r,
        $b: o
    }, function(e) {
        return {
            $a: function() {
                var t = e.mul(o.toFloat()), n = getReductionAxes(r.shape, a);
                return n.length > 0 ? t.sum(n).reshape(r.shape) : t;
            },
            $b: function() {
                var t = e.mul(r.toFloat()), n = getReductionAxes(o.shape, a);
                return n.length > 0 ? t.sum(n).reshape(o.shape) : t;
            }
        };
    });
}
function mulStrict_(e, t) {
    var n = convertToTensor(e, "a", "mul"), r = convertToTensor(t, "b", "mul");
    return assertShapesMatch(n.shape, r.shape, "Error in multiplyStrict: "), n.mul(r);
}
function div_(e205, t75) {
    var n40, r22, o = convertToTensor(e205, "a", "div"), a = convertToTensor(t75, "b", "div");
    if (n40 = makeTypesMatch(o, a), o = n40[0], a = n40[1], "int32" === o.dtype && "int32" === a.dtype) return floorDiv(o, a);
    r22 = function(e) {
        return e.realDivide(o, a);
    };
    var i = assertAndGetBroadcastShape(o.shape, a.shape);
    return ENV.engine.runKernel(r22, {
        $a: o,
        $b: a
    }, function(e) {
        return {
            $a: function() {
                var t = e.div(a.toFloat()), n = getReductionAxes(o.shape, i);
                return n.length > 0 ? t.sum(n).reshape(o.shape) : t;
            },
            $b: function() {
                var t = e.mul(o.toFloat()), n = getReductionAxes(a.shape, i);
                n.length > 0 && (t = t.sum(n).reshape(a.shape));
                var r = a.square();
                return t.div(r.toFloat()).neg();
            }
        };
    });
}
function floorDiv_(e206, t76) {
    var n41, r = convertToTensor(e206, "a", "floorDiv"), o = convertToTensor(t76, "b", "floorDiv");
    n41 = makeTypesMatch(r, o), r = n41[0], o = n41[1];
    var a = assertAndGetBroadcastShape(r.shape, o.shape);
    return ENV.engine.runKernel(function(e) {
        return e.floorDiv(r, o);
    }, {
        $a: r,
        $b: o
    }, function(e) {
        return {
            $a: function() {
                var t = e.div(o.toFloat()), n = getReductionAxes(r.shape, a);
                return n.length > 0 ? t.sum(n).reshape(r.shape) : t;
            },
            $b: function() {
                var t = e.mul(r.toFloat()), n = getReductionAxes(o.shape, a);
                n.length > 0 && (t = t.sum(n).reshape(o.shape));
                var i = o.square();
                return t.div(i.toFloat()).neg();
            }
        };
    });
}
function divStrict_(e, t) {
    var n = convertToTensor(e, "a", "div"), r = convertToTensor(t, "b", "div");
    return assertShapesMatch(n.shape, r.shape, "Error in divideStrict: "), n.div(r);
}
function mod_(e207, t77) {
    var n42, r = convertToTensor(e207, "a", "mod"), o = convertToTensor(t77, "b", "mod");
    n42 = makeTypesMatch(r, o), r = n42[0], o = n42[1];
    var a = assertAndGetBroadcastShape(r.shape, o.shape);
    return ENV.engine.runKernel(function(e) {
        return e.mod(r, o);
    }, {
        $a: r,
        $b: o
    }, function(e) {
        return {
            $a: function() {
                var t = getReductionAxes(r.shape, a);
                return t.length > 0 ? e.sum(t).reshape(r.shape) : e;
            },
            $b: function() {
                var t = e.mul(r.div(o).floor().neg()), n = getReductionAxes(o.shape, a);
                return n.length > 0 ? t.sum(n).reshape(o.shape) : t;
            }
        };
    });
}
function modStrict_(e, t) {
    var n = convertToTensor(e, "a", "modStrict"), r = convertToTensor(t, "b", "modStrict");
    return assertShapesMatch(n.shape, r.shape, "Error in modStrict: "), n.mod(r);
}
function minimum_(e208, t) {
    var n, r = convertToTensor(e208, "a", "minimum"), o = convertToTensor(t, "b", "minimum");
    n = makeTypesMatch(r, o), r = n[0], o = n[1], "bool" === r.dtype && (r = r.toInt(), o = o.toInt()), assertAndGetBroadcastShape(r.shape, o.shape);
    return ENV.engine.runKernel(function(e) {
        return e.minimum(r, o);
    }, {
        $a: r,
        $b: o
    }, function(e) {
        return {
            $a: function() {
                return e.mul(r.lessEqual(o).toFloat());
            },
            $b: function() {
                return e.mul(r.greater(o).toFloat());
            }
        };
    });
}
function minimumStrict_(e, t) {
    var n = convertToTensor(e, "a", "minimumStrict"), r = convertToTensor(t, "b", "minimumStrict");
    return assertShapesMatch(n.shape, r.shape, "Error in minimumStrict: "), n.minimum(r);
}
function maximum_(e209, t) {
    var n, r = convertToTensor(e209, "a", "maximum"), o = convertToTensor(t, "b", "maximum");
    n = makeTypesMatch(r, o), r = n[0], o = n[1], "bool" === r.dtype && (r = r.toInt(), o = o.toInt()), assertAndGetBroadcastShape(r.shape, o.shape);
    return ENV.engine.runKernel(function(e) {
        return e.maximum(r, o);
    }, {
        $a: r,
        $b: o
    }, function(e) {
        return {
            $a: function() {
                return e.mul(r.greaterEqual(o).toFloat());
            },
            $b: function() {
                return e.mul(r.less(o).toFloat());
            }
        };
    });
}
function maximumStrict_(e, t) {
    var n = convertToTensor(e, "a", "maximumStrict"), r = convertToTensor(t, "b", "maximumStrict");
    return assertShapesMatch(n.shape, r.shape, "Error in maximumStrict: "), n.maximum(r);
}
function squaredDifference_(e210, t78) {
    var n, r = convertToTensor(e210, "a", "squaredDifference"), o = convertToTensor(t78, "b", "squaredDifference");
    n = makeTypesMatch(r, o), r = n[0], o = n[1], assertAndGetBroadcastShape(r.shape, o.shape);
    return ENV.engine.runKernel(function(e) {
        return e.squaredDifference(r, o);
    }, {
        $a: r,
        $b: o
    }, function(e) {
        var t = scalar(2);
        return {
            $a: function() {
                return e.mul(r.sub(o).mul(t));
            },
            $b: function() {
                return e.mul(o.sub(r).mul(t));
            }
        };
    });
}
function squaredDifferenceStrict_(e, t) {
    var n = convertToTensor(e, "a", "squaredDifferenceStrict"), r = convertToTensor(t, "b", "squaredDifferenceStrict");
    return assertShapesMatch(n.shape, r.shape, "Error in squaredDifferenceStrict: "), n.squaredDifference(r);
}
function atan2_(e211, t79) {
    var n43, r = convertToTensor(e211, "a", "atan2"), o = convertToTensor(t79, "b", "atan2");
    n43 = makeTypesMatch(r, o), r = n43[0], o = n43[1];
    var a = assertAndGetBroadcastShape(r.shape, o.shape);
    return ENV.engine.runKernel(function(e) {
        return e.atan2(r, o);
    }, {
        $a: r,
        $b: o
    }, function(e) {
        return {
            $a: function() {
                var t = add(r.square(), o.square()), n = e.mul(o.div(t)), i = getReductionAxes(r.shape, a);
                return i.length > 0 && (n = n.sum(i)), n.reshape(r.shape);
            },
            $b: function() {
                var t = add(r.square(), o.square()), n = neg(e.mul(r.div(t))), i = getReductionAxes(o.shape, a);
                return i.length > 0 && (n = n.sum(i)), n.reshape(o.shape);
            }
        };
    });
}
var add = op({
    add_: add_
}), addN = op({
    addN_: addN_
}), addStrict = op({
    addStrict_: addStrict_
}), atan2 = op({
    atan2_: atan2_
}), div = op({
    div_: div_
}), divStrict = op({
    divStrict_: divStrict_
}), floorDiv = op({
    floorDiv_: floorDiv_
}), maximum = op({
    maximum_: maximum_
}), maximumStrict = op({
    maximumStrict_: maximumStrict_
}), minimum = op({
    minimum_: minimum_
}), minimumStrict = op({
    minimumStrict_: minimumStrict_
}), mod = op({
    mod_: mod_
}), modStrict = op({
    modStrict_: modStrict_
}), mul = op({
    mul_: mul_
}), mulStrict = op({
    mulStrict_: mulStrict_
}), pow = op({
    pow_: pow_
}), powStrict = op({
    powStrict_: powStrict_
}), squaredDifference = op({
    squaredDifference_: squaredDifference_
}), squaredDifferenceStrict = op({
    squaredDifferenceStrict_: squaredDifferenceStrict_
}), sub = op({
    sub_: sub_
}), subStrict = op({
    subStrict_: subStrict_
});
function logicalNot_(e212) {
    var t = convertToTensor(e212, "x", "logicalNot", "bool");
    return ENV.engine.runKernel(function(e) {
        return e.logicalNot(t);
    }, {
        $x: t
    });
}
function logicalAnd_(e213, t) {
    var n = convertToTensor(e213, "a", "logicalAnd", "bool"), r = convertToTensor(t, "b", "logicalAnd", "bool");
    return assertAndGetBroadcastShape(n.shape, r.shape), ENV.engine.runKernel(function(e) {
        return e.logicalAnd(n, r);
    }, {
        $a: n,
        $b: r
    });
}
function logicalOr_(e214, t) {
    var n = convertToTensor(e214, "a", "logicalOr", "bool"), r = convertToTensor(t, "b", "logicalOr", "bool");
    return assertAndGetBroadcastShape(n.shape, r.shape), ENV.engine.runKernel(function(e) {
        return e.logicalOr(n, r);
    }, {
        $a: n,
        $b: r
    });
}
function logicalXor_(e, t) {
    var n = convertToTensor(e, "a", "logicalXor", "bool"), r = convertToTensor(t, "b", "logicalXor", "bool");
    return assertAndGetBroadcastShape(n.shape, r.shape), logicalOr(e, t).logicalAnd(logicalAnd(e, t).logicalNot());
}
function where_(e215, t, n) {
    var r = convertToTensor(t, "a", "where"), o = convertToTensor(n, "b", "where"), a = convertToTensor(e215, "condition", "where", "bool");
    assertShapesMatch(r.shape, o.shape, "Error in where: "), 1 === a.rank ? assert(a.shape[0] === r.shape[0], "The first dimension of `a` must match the size of `condition`.") : assertShapesMatch(a.shape, o.shape, "Error in where: ");
    return ENV.engine.runKernel(function(e) {
        return e.select(a, r, o);
    }, {
        $condition: a,
        $a: r,
        $b: o
    }, function(e) {
        return {
            $condition: function() {
                return zerosLike(a).toFloat();
            },
            $a: function() {
                return e.mul(a.cast(e.dtype));
            },
            $b: function() {
                return e.mul(a.logicalNot().cast(e.dtype));
            }
        };
    });
}
function whereAsync_(e) {
    return __awaiter(this, void 0, void 0, function() {
        var t, n, r;
        return __generator(this, function(o) {
            switch(o.label){
                case 0:
                    return [
                        4,
                        (t = convertToTensor(e, "condition", "whereAsync", "bool")).data()
                    ];
                case 1:
                    return n = o.sent(), r = whereImpl(t.shape, n), e !== t && t.dispose(), [
                        2,
                        r
                    ];
            }
        });
    });
}
var logicalAnd = op({
    logicalAnd_: logicalAnd_
}), logicalNot = op({
    logicalNot_: logicalNot_
}), logicalOr = op({
    logicalOr_: logicalOr_
}), logicalXor = op({
    logicalXor_: logicalXor_
}), where = op({
    where_: where_
}), whereAsync = whereAsync_;
function relu_(e216) {
    var t = convertToTensor(e216, "x", "relu");
    if ("bool" === t.dtype) return t.toInt();
    return ENV.engine.runKernel(function(e) {
        return e.relu(t);
    }, {
        $x: t
    }, function(e) {
        var n = t.step();
        return {
            $x: function() {
                return e.mulStrict(n.toFloat());
            }
        };
    });
}
function elu_(e217) {
    var t80 = convertToTensor(e217, "x", "elu");
    return ENV.engine.runKernel(function(e, n) {
        return n(e.elu(t80));
    }, {
        $x: t80
    }, function(e, t81) {
        var n = t81[0];
        return {
            $x: function() {
                return ENV.engine.runKernel(function(t) {
                    return t.eluDer(e, n);
                }, {
                    dy: e,
                    y: n
                });
            }
        };
    });
}
function selu_(e218) {
    var t = convertToTensor(e218, "x", "selu");
    return ENV.engine.runKernel(function(e) {
        return e.selu(t);
    }, {
        $x: t
    }, function(e) {
        return {
            $x: function() {
                var n = t.greater(scalar(0)), r = scalar(SELU_SCALEALPHA), o = scalar(SELU_SCALE), a = e.mul(o), i = e.mul(r).mul(t.toFloat().exp());
                return where(n, a, i);
            }
        };
    });
}
function leakyRelu_(e, t) {
    void 0 === t && (t = 0.2);
    var n = convertToTensor(e, "x", "leakyRelu");
    return maximum(scalar(t).mul(n), n);
}
function prelu_(e219, t82) {
    var n = convertToTensor(e219, "x", "prelu"), r = convertToTensor(t82, "alpha", "prelu");
    return ENV.engine.runKernel(function(e) {
        return e.prelu(n, r);
    }, {
        $x: n,
        $alpha: r
    }, function(e) {
        var t = n.greater(0);
        return {
            $x: function() {
                return where(t, e, e.mul(r));
            },
            $alpha: function() {
                var o = where(t, zerosLike(e), e.mul(n)), a = getReductionAxes(r.shape, e.shape);
                return a.length > 0 && (o = o.sum(a)), o.reshape(r.shape);
            }
        };
    });
}
var elu = op({
    elu_: elu_
}), leakyRelu = op({
    leakyRelu_: leakyRelu_
}), prelu = op({
    prelu_: prelu_
}), relu = op({
    relu_: relu_
}), selu = op({
    selu_: selu_
});
function transpose_(e220, t83) {
    var n44 = convertToTensor(e220, "x", "transpose");
    if (null == t83 && (t83 = n44.shape.map(function(e, t) {
        return t;
    }).reverse()), assert(n44.rank === t83.length, "Error in transpose: rank of input " + n44.rank + " must match length of perm " + t83 + "."), t83.forEach(function(e) {
        assert(e >= 0 && e < n44.rank, "All entries in 'perm' must be between 0 and " + (n44.rank - 1) + " but got " + t83);
    }), n44.rank <= 1) return n44.clone();
    return ENV.engine.runKernel(function(e) {
        return e.transpose(n44, t83);
    }, {
        $x: n44
    }, function(e) {
        var n = getUndoAxesPermutation(t83);
        return {
            $x: function() {
                return e.transpose(n);
            }
        };
    });
}
var transpose = op({
    transpose_: transpose_
});
function localResponseNormalization_(e221, t, n, r, o) {
    void 0 === t && (t = 5), void 0 === n && (n = 1), void 0 === r && (r = 1), void 0 === o && (o = 0.5);
    var a11 = convertToTensor(e221, "x", "localResponseNormalization");
    assert(4 === a11.rank || 3 === a11.rank, "Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank " + a11.rank + "."), assert(isInt(t), "Error in localResponseNormalization: depthRadius must be an integer\n                     but got depthRadius " + t + ".");
    var i = a11, s6 = !1;
    3 === a11.rank && (s6 = !0, i = a11.as4D(1, a11.shape[0], a11.shape[1], a11.shape[2]));
    var u = ENV.engine.runKernel(function(e, a) {
        return a(e.localResponseNormalization4D(i, t, n, r, o));
    }, {
        x4D: i
    }, function(e, a12) {
        var s = a12[0];
        return {
            x4D: function() {
                return ENV.engine.runKernel(function(a) {
                    return a.LRNGrad(e, i, s, t, n, r, o);
                }, {
                });
            }
        };
    });
    return s6 ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;
}
var localResponseNormalization = op({
    localResponseNormalization_: localResponseNormalization_
});
function norm_(e, t, n, r) {
    void 0 === t && (t = "euclidean"), void 0 === n && (n = null), void 0 === r && (r = !1);
    var o = normImpl(e = convertToTensor(e, "x", "norm"), t, n), a = o.shape;
    if (r) {
        var i = parseAxisParam(n, e.shape);
        a = expandShapeToKeepDim(o.shape, i);
    }
    return o.reshape(a);
}
function normImpl(e, t, n) {
    if (void 0 === n && (n = null), 0 === e.rank) return e.abs();
    if (1 !== e.rank && null === n) return normImpl(e.reshape([
        -1
    ]), t, n);
    if (1 === e.rank || "number" == typeof n || Array.isArray(n) && 1 === n.length) {
        if (1 === t) return e.abs().sum(n);
        if (t === 1 / 0) return e.abs().max(n);
        if (t === -1 / 0) return e.abs().min(n);
        if ("euclidean" === t || 2 === t) return e.abs().pow(scalar(2, "int32")).sum(n).sqrt();
        throw new Error("Error in norm: invalid ord value: " + t);
    }
    if (Array.isArray(n) && 2 === n.length) {
        if (1 === t) return e.abs().sum(n[0]).max(n[1] - 1);
        if (t === 1 / 0) return e.abs().sum(n[1]).max(n[0]);
        if (t === -1 / 0) return e.abs().sum(n[1]).min(n[0]);
        if ("fro" === t || "euclidean" === t) return e.square().sum(n).sqrt();
        throw new Error("Error in norm: invalid ord value: " + t);
    }
    throw new Error("Error in norm: invalid axis: " + n);
}
var norm = op({
    norm_: norm_
});
function unsortedSegmentSum_(e222, t, n) {
    var r = convertToTensor(e222, "x", "unsortedSegmentSum"), o = convertToTensor(t, "segmentIds", "unsortedSegmentSum", "int32");
    assert(isInt(n), "numSegments must be of dtype int");
    return ENV.engine.runKernel(function(e) {
        return e.unsortedSegmentSum(r, o, n);
    }, {
        $x: r
    }, function(e) {
        return {
            $x: function() {
                return gatherDropNegatives(e, o);
            }
        };
    });
}
function gather_(e223, t84, n) {
    void 0 === n && (n = 0);
    var r = convertToTensor(e223, "x", "gather"), o = convertToTensor(t84, "indices", "gather", "int32");
    n = parseAxisParam(n, r.shape)[0];
    var a13 = collectGatherOpShapeInfo(r, o, n);
    return ENV.engine.runKernel(function(e) {
        return e.gather(r, o.flatten(), n);
    }, {
        $x: r
    }, function(e) {
        return {
            $x: function() {
                var t = r.shape, a = o.size, i = t.slice(0, n), s = i.length, u = t.slice(n, t.length).slice(1), l = u.length, c = arrayRange(0, s), p = arrayRange(s + 1, s + 1 + l), d = arrayConcat([
                    i,
                    [
                        a
                    ],
                    u
                ]), h = e.reshape(d), f = o.reshape([
                    a
                ]), m = arrayConcat([
                    [
                        s
                    ],
                    c,
                    p
                ]), g = h.transpose(m), v = unsortedSegmentSum(g, f, r.shape[n]), y = getUndoAxesPermutation(m);
                return v = v.transpose(y);
            }
        };
    }).reshape(a13.outputShape);
}
function arrayRange(e, t) {
    for(var n = [], r = e; r < t; ++r)n.push(r);
    return n;
}
function arrayConcat(e) {
    for(var t = [], n = 0; n < e.length; ++n)for(var r = 0; r < e[n].length; ++r)t.push(e[n][r]);
    return t;
}
function gatherDropNegatives(e, t) {
    for(var n = maximum(t, zerosLike(t)), r = gather(e, n), o = greaterEqual(t, scalar(0, "int32")), a = r.rank - o.rank, i = 0; i < a; ++i)o = expandDims(o, i + 1);
    o = logicalAnd(o, ones$1(r.shape, "bool"));
    var s = zerosLike(r);
    return where(o, r, s);
}
var gather = op({
    gather_: gather_
}), unsortedSegmentSum = op({
    unsortedSegmentSum_: unsortedSegmentSum_
});
function multiRNNCell_(e, t, n, r) {
    for(var o = convertToTensor(t, "data", "multiRNNCell"), a = convertToTensorArray(n, "c", "multiRNNCell"), i = convertToTensorArray(r, "h", "multiRNNCell"), s = o, u = [], l = 0; l < e.length; l++){
        var c = e[l](s, a[l], i[l]);
        u.push(c[0]), u.push(c[1]), s = c[1];
    }
    var p = [], d = [];
    for(l = 0; l < u.length; l += 2)p.push(u[l]), d.push(u[l + 1]);
    return [
        p,
        d
    ];
}
function basicLSTMCell_(e, t, n, r, o, a) {
    var i = convertToTensor(e, "forgetBias", "basicLSTMCell"), s = convertToTensor(t, "lstmKernel", "basicLSTMCell"), u = convertToTensor(n, "lstmBias", "basicLSTMCell"), l = convertToTensor(r, "data", "basicLSTMCell"), c = convertToTensor(o, "c", "basicLSTMCell"), p = convertToTensor(a, "h", "basicLSTMCell"), d = l.concat(p, 1).matMul(s).add(u), h = d.shape[0], f = d.shape[1] / 4, m = [
        h,
        f
    ], g = d.slice([
        0,
        0
    ], m), v = d.slice([
        0,
        f
    ], m), y = d.slice([
        0,
        2 * f
    ], m), x = d.slice([
        0,
        3 * f
    ], m), T = g.sigmoid().mulStrict(v.tanh()).addStrict(c.mulStrict(i.add(y).sigmoid()));
    return [
        T,
        T.tanh().mulStrict(x.sigmoid())
    ];
}
var basicLSTMCell = op({
    basicLSTMCell_: basicLSTMCell_
}), multiRNNCell = op({
    multiRNNCell_: multiRNNCell_
});
function movingAverage_(e, t, n, r, o) {
    void 0 === o && (o = !0);
    var a = convertToTensor(e, "v", "movingAverage"), i = convertToTensor(t, "x", "movingAverage"), s = convertToTensor(n, "decay", "movingAverage");
    assertTypesMatch(a, i), assert(arraysEqual(a.shape, i.shape), "Shape mismatch in v and x");
    var u = scalar(1), l = u.sub(s), c = i.sub(a).mul(l);
    if (o) {
        assert(null != r, "When using zeroDebias: true, step is required.");
        var p = convertToTensor(r, "step", "movingAverage");
        c = c.div(u.sub(pow(s, p)));
    }
    return a.add(c);
}
var movingAverage = op({
    movingAverage_: movingAverage_
});
function stridedSlice_(e224, t85, n, r, o, a, i, s, u) {
    if (void 0 === o && (o = 0), void 0 === a && (a = 0), void 0 === i && (i = 0), void 0 === s && (s = 0), void 0 === u && (u = 0), 0 !== i) throw new Error("ellipsis mask is not yet supported");
    if (0 !== s) throw new Error("new axis mask is not yet supported");
    var l = convertToTensor(e224, "x", "stridedSlice");
    if (r.every(function(e) {
        return 1 === e;
    })) {
        var c = getStridedSlicedInfo(l.shape, t85, n, r, o, a, i, s, u), p = c[0], d = c[1], h = c[2], f = d.filter(function(e, t) {
            return -1 === h.indexOf(t);
        });
        return slice(l, p, d).reshape(f);
    }
    return ENV.engine.runKernel(function(e) {
        return e.stridedSlice(l, t85, n, r, o, a, i, s, u);
    }, {
        $x: l
    });
}
var stridedSlice = op({
    stridedSlice_: stridedSlice_
});
function topk_(e225, t, n) {
    void 0 === t && (t = 1), void 0 === n && (n = !0);
    var r = convertToTensor(e225, "x", "topk");
    if (0 === r.rank) throw new Error("topk() expects the input to be of rank 1 or higher");
    var o = r.shape[r.shape.length - 1];
    if (t > o) throw new Error("'k' passed to topk() must be <= the last dimension (" + o + ") but got " + t);
    var a = ENV.engine.runKernel(function(e) {
        return e.topk(r, t, n);
    }, {
        $x: r
    });
    return {
        values: a[0],
        indices: a[1]
    };
}
var topk = op({
    topk_: topk_
});
function scatterND_(e226, t, n) {
    var r = convertToTensor(e226, "indices", "scatterND", "int32"), o = convertToTensor(t, "updates", "scatterND");
    return validateInput(o, r, n), ENV.engine.runKernel(function(e) {
        return e.scatterND(r, o, n);
    }, {
        $indices: r,
        $updates: o
    });
}
var scatterND = op({
    scatterND_: scatterND_
});
function fft_(e227) {
    assert("complex64" === e227.dtype, "The dtype for tf.spectral.fft() must be complex64 but got " + e227.dtype + ".");
    var t = e227.shape[e227.shape.length - 1], n = e227.size / t, r = e227.as2D(n, t);
    return ENV.engine.runKernel(function(e) {
        return e.fft(r);
    }, {
        input: e227
    }).reshape(e227.shape);
}
function ifft_(e228) {
    assert("complex64" === e228.dtype, "The dtype for tf.spectral.ifft() must be complex64 but got " + e228.dtype + ".");
    var t = e228.shape[e228.shape.length - 1], n = e228.size / t, r = e228.as2D(n, t);
    return ENV.engine.runKernel(function(e) {
        return e.ifft(r);
    }, {
        input: e228
    }).reshape(e228.shape);
}
function rfft_(e) {
    assert("float32" === e.dtype, "The dtype for rfft() must be real value but\n    got " + e.dtype);
    var t = e.shape[e.shape.length - 1], n = e.size / t, r = e.zerosLike(), o = complex(e, r).as2D(n, t), a = fft(o), i = Math.floor(t / 2) + 1, s = real(a), u = imag(a), l = s.split([
        i,
        t - i
    ], s.shape.length - 1), c = u.split([
        i,
        t - i
    ], u.shape.length - 1), p = e.shape.slice();
    return p[e.shape.length - 1] = i, complex(l[0], c[0]).reshape(p);
}
function irfft_(e) {
    var t = e.shape[e.shape.length - 1], n = e.size / t;
    if (t <= 2) {
        var r = e.as2D(n, t), o = ifft(r);
        return real(o);
    }
    var a = [
        n,
        2 * (t - 1)
    ], i = real(e).as2D(n, t), s = imag(e).as2D(n, t), u = i.slice([
        0,
        1
    ], [
        n,
        t - 2
    ]).reverse(1), l = s.slice([
        0,
        1
    ], [
        n,
        t - 2
    ]).reverse(1).mul(scalar(-1)), c = i.concat(u, 1), p = s.concat(l, 1);
    r = complex(c, p).as2D(a[0], a[1]), o = ifft(r);
    return real(o);
}
var fft = op({
    fft_: fft_
}), ifft = op({
    ifft_: ifft_
}), rfft = op({
    rfft_: rfft_
}), irfft = op({
    irfft_: irfft_
}), spectral_ops = Object.freeze({
    fft: fft,
    ifft: ifft,
    rfft: rfft,
    irfft: irfft
});
function validateInput$1(e, t, n, r) {
    if ("int32" !== e.dtype) throw new Error("tf.sparseToDense() expects the indices to be int32 type, but the dtype was " + e.dtype + ".");
    if (e.rank > 2) throw new Error("sparseIndices should be a scalar, vector, or matrix, but got shape " + e.shape + ".");
    var o = e.rank > 0 ? e.shape[0] : 1, a = e.rank > 1 ? e.shape[1] : 1;
    if (n.length !== a) throw new Error("outputShape has incorrect number of elements:, " + n.length + ", should be: " + a + ".");
    var i = t.size;
    if (0 !== t.rank && (1 !== t.rank || i !== o)) throw new Error("sparseValues has incorrect shape " + t.shape + ", should be [] or [" + o + "]");
    if (t.dtype !== r.dtype) throw new Error("sparseValues.dtype must match defaultValues.dtype");
}
function sparseToDense_(e229, t, n, r) {
    var o = convertToTensor(e229, "sparseIndices", "sparseToDense", "int32"), a = convertToTensor(t, "sparseValues", "sparseToDense"), i = convertToTensor(r, "defaultValue", "sparseToDense", a.dtype);
    return validateInput$1(o, a, n, i), ENV.engine.runKernel(function(e) {
        return e.sparseToDense(o, a, n, i);
    }, {
        $sparseIndices: o,
        $sparseValues: a,
        $defaultValue: i
    });
}
var sparseToDense = op({
    sparseToDense_: sparseToDense_
});
function gatherND_(e230, t) {
    var n = convertToTensor(t, "indices", "gatherND", "int32"), r = convertToTensor(e230, "x", "gatherND");
    return ENV.engine.runKernel(function(e) {
        return e.gatherND(r, n);
    }, {
        $x: r,
        $indices: n
    });
}
var Reduction, gatherND = op({
    gatherND_: gatherND_
});
function computeWeightedLoss_(e, t, n) {
    void 0 === n && (n = Reduction.SUM_BY_NONZERO_WEIGHTS);
    var r = convertToTensor(e, "losses", "computeWeightedLoss"), o = null;
    null != t && (o = convertToTensor(t, "weights", "computeWeightedLoss"));
    var a = null == o ? r : r.mul(o);
    if (n === Reduction.NONE) return a;
    if (n === Reduction.SUM) return a.sum();
    if (n === Reduction.MEAN) {
        if (null == o) return a.mean();
        var i = sizeFromShape(r.shape) / sizeFromShape(o.shape), s = a.sum().div(o.sum());
        return i > 1 ? s.div(scalar(i)) : s;
    }
    if (n === Reduction.SUM_BY_NONZERO_WEIGHTS) {
        if (null == o) return a.sum().div(scalar(r.size));
        var u = o.mul(ones$1(r.shape)).notEqual(scalar(0)).sum().toFloat();
        return a.sum().div(u);
    }
    throw Error("Unknown reduction: " + n);
}
function absoluteDifference_(e, t, n, r) {
    void 0 === r && (r = Reduction.SUM_BY_NONZERO_WEIGHTS);
    var o = convertToTensor(e, "labels", "absoluteDifference"), a = convertToTensor(t, "predictions", "absoluteDifference"), i = null;
    null != n && (i = convertToTensor(n, "weights", "absoluteDifference")), assertShapesMatch(o.shape, a.shape, "Error in absoluteDifference: ");
    var s = o.sub(a).abs();
    return computeWeightedLoss(s, i, r);
}
function meanSquaredError_(e, t, n, r) {
    void 0 === r && (r = Reduction.SUM_BY_NONZERO_WEIGHTS);
    var o = convertToTensor(e, "labels", "meanSquaredError"), a = convertToTensor(t, "predictions", "meanSquaredError"), i = null;
    null != n && (i = convertToTensor(n, "weights", "meanSquaredError")), assertShapesMatch(o.shape, a.shape, "Error in meanSquaredError: ");
    var s = o.squaredDifference(a);
    return computeWeightedLoss(s, i, r);
}
function cosineDistance_(e, t, n, r, o) {
    void 0 === o && (o = Reduction.SUM_BY_NONZERO_WEIGHTS);
    var a = convertToTensor(e, "labels", "cosineDistance"), i = convertToTensor(t, "predictions", "cosineDistance"), s = null;
    null != r && (s = convertToTensor(r, "weights", "cosineDistance")), assertShapesMatch(a.shape, i.shape, "Error in cosineDistance: ");
    var u = scalar(1).sub(a.mul(i).sum(n, !0));
    return computeWeightedLoss(u, s, o);
}
function hingeLoss_(e, t, n, r) {
    void 0 === r && (r = Reduction.SUM_BY_NONZERO_WEIGHTS);
    var o = convertToTensor(e, "labels", "hingeLoss"), a = convertToTensor(t, "predictions", "hingeLoss"), i = null;
    null != n && (i = convertToTensor(n, "weights", "hingeLoss")), assertShapesMatch(o.shape, a.shape, "Error in hingeLoss: ");
    var s = scalar(1);
    o = scalar(2).mul(o).sub(s);
    var u = s.sub(o.mul(a)).relu();
    return computeWeightedLoss(u, i, r);
}
function logLoss_(e, t, n, r, o) {
    void 0 === r && (r = 0.0000001), void 0 === o && (o = Reduction.SUM_BY_NONZERO_WEIGHTS);
    var a = convertToTensor(e, "labels", "logLoss"), i = convertToTensor(t, "predictions", "logLoss"), s = null;
    null != n && (s = convertToTensor(n, "weights", "logLoss")), assertShapesMatch(a.shape, i.shape, "Error in logLoss: ");
    var u = scalar(1), l = scalar(r), c = a.mul(i.add(l).log()).neg().sub(u.sub(a).mul(u.sub(i).add(l).log()));
    return computeWeightedLoss(c, s, o);
}
function sigmoidCrossEntropyWithLogits_(e, t) {
    var n = convertToTensor(e, "labels", "sigmoidCrossEntropyWithLogits"), r = convertToTensor(t, "logits", "sigmoidCrossEntropyWithLogits");
    assertShapesMatch(n.shape, r.shape, "Error in sigmoidCrossEntropyWithLogits: ");
    var o = r.relu(), a = r.mul(n), i = r.abs().neg().exp().log1p();
    return o.sub(a).add(i);
}
function sigmoidCrossEntropy_(e, t, n, r, o) {
    void 0 === r && (r = 0), void 0 === o && (o = Reduction.SUM_BY_NONZERO_WEIGHTS);
    var a = convertToTensor(e, "multiClassLabels", "sigmoidCrossEntropy"), i = convertToTensor(t, "logits", "sigmoidCrossEntropy"), s = null;
    if (null != n && (s = convertToTensor(n, "weights", "sigmoidCrossEntropy")), assertShapesMatch(a.shape, i.shape, "Error in sigmoidCrossEntropy: "), r > 0) {
        var u = scalar(r), l = scalar(1), c = scalar(0.5);
        a = a.mul(l.sub(u)).add(c.mul(u));
    }
    var p = sigmoidCrossEntropyWithLogits_(a, i);
    return computeWeightedLoss(p, s, o);
}
function huberLoss_(e, t, n, r, o) {
    void 0 === r && (r = 1), void 0 === o && (o = Reduction.SUM_BY_NONZERO_WEIGHTS);
    var a = convertToTensor(e, "labels", "huberLoss"), i = convertToTensor(t, "predictions", "huberLoss"), s = null;
    null != n && (s = convertToTensor(n, "weights", "huberLoss")), assertShapesMatch(a.shape, i.shape, "Error in huberLoss: ");
    var u = scalar(r), l = i.sub(a).abs(), c = minimum(l, u), p = l.sub(c), d = scalar(0.5).mul(c.square()).add(u.mul(p));
    return computeWeightedLoss(d, s, o);
}
function softmaxCrossEntropyWithLogits_(e231, t86, n) {
    if (void 0 === n && (n = -1), -1 === n && (n = t86.rank - 1), n !== t86.rank - 1) throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank " + t86.rank + " and dim was " + n);
    return customGrad(function(e, t87) {
        var r23 = t87.logSumExp([
            n
        ], !0), o = t87.toFloat().sub(r23);
        return {
            value: o.mul(e).neg().sum([
                n
            ]),
            gradFunc: function(t) {
                var r = expandShapeToKeepDim(t.shape, [
                    n
                ]);
                return [
                    t.reshape(r).mul(e.toFloat().sub(o.exp())),
                    t.reshape(r).mul(o.exp().sub(e.toFloat()))
                ];
            }
        };
    })(e231, t86);
}
function softmaxCrossEntropy_(e, t, n, r, o) {
    void 0 === r && (r = 0), void 0 === o && (o = Reduction.SUM_BY_NONZERO_WEIGHTS);
    var a = convertToTensor(e, "onehotLabels", "softmaxCrossEntropy"), i = convertToTensor(t, "logits", "softmaxCrossEntropy"), s = null;
    if (null != n && (s = convertToTensor(n, "weights", "softmaxCrossEntropy")), assertShapesMatch(a.shape, i.shape, "Error in softmaxCrossEntropy: "), r > 0) {
        var u = scalar(r), l = scalar(1), c = scalar(a.shape[1]);
        a = a.mul(l.sub(u)).add(u.div(c));
    }
    var p = softmaxCrossEntropyWithLogits_(a, i);
    return computeWeightedLoss(p, s, o);
}
!function(e) {
    e[e.NONE = 0] = "NONE", e[e.MEAN = 1] = "MEAN", e[e.SUM = 2] = "SUM", e[e.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
}(Reduction || (Reduction = {
}));
var absoluteDifference = op({
    absoluteDifference_: absoluteDifference_
}), computeWeightedLoss = op({
    computeWeightedLoss_: computeWeightedLoss_
}), cosineDistance = op({
    cosineDistance_: cosineDistance_
}), hingeLoss = op({
    hingeLoss_: hingeLoss_
}), huberLoss = op({
    huberLoss_: huberLoss_
}), logLoss = op({
    logLoss_: logLoss_
}), meanSquaredError = op({
    meanSquaredError_: meanSquaredError_
}), sigmoidCrossEntropy = op({
    sigmoidCrossEntropy_: sigmoidCrossEntropy_
}), softmaxCrossEntropy = op({
    softmaxCrossEntropy_: softmaxCrossEntropy_
}), loss_ops = Object.freeze({
    get Reduction () {
        return Reduction;
    },
    absoluteDifference: absoluteDifference,
    computeWeightedLoss: computeWeightedLoss,
    cosineDistance: cosineDistance,
    hingeLoss: hingeLoss,
    huberLoss: huberLoss,
    logLoss: logLoss,
    meanSquaredError: meanSquaredError,
    sigmoidCrossEntropy: sigmoidCrossEntropy,
    softmaxCrossEntropy: softmaxCrossEntropy
});
function gramSchmidt_(e232) {
    var t88;
    if (Array.isArray(e232)) {
        t88 = !1, assert(null != e232 && e232.length > 0, "Gram-Schmidt process: input must not be null, undefined, or empty");
        for(var n = e232[0].shape[0], r = 1; r < e232.length; ++r)assert(e232[r].shape[0] === n, "Gram-Schmidt: Non-unique lengths found in the input vectors: (" + e232[r].shape[0] + " vs. " + n + ")");
    } else t88 = !0, e232 = split$1(e232, e232.shape[0], 0).map(function(e) {
        return squeeze(e, [
            0
        ]);
    });
    assert(e232.length <= e232[0].shape[0], "Gram-Schmidt: Number of vectors (" + e232.length + ") exceeds number of dimensions (" + e232[0].shape[0] + ").");
    var o = [], a = e232, i = function(e) {
        o.push(ENV.engine.tidy(function() {
            var t = a[e];
            if (e > 0) for(var n = 0; n < e; ++n){
                var r = sum$1(o[n].mulStrict(t)).mul(o[n]);
                t = t.sub(r);
            }
            return t.div(norm(t, "euclidean"));
        }));
    };
    for(r = 0; r < e232.length; ++r)i(r);
    return t88 ? stack(o, 0) : o;
}
function qr_(e233, t89) {
    if (void 0 === t89 && (t89 = !1), e233.rank < 2) throw new Error("qr() requires input tensor to have a rank >= 2, but got rank " + e233.rank);
    if (2 === e233.rank) return qr2d(e233, t89);
    var n45 = e233.shape.slice(0, e233.shape.length - 2).reduce(function(e, t) {
        return e * t;
    }), r = [], o = [];
    return unstack(e233.reshape([
        n45,
        e233.shape[e233.shape.length - 2],
        e233.shape[e233.shape.length - 1]
    ]), 0).forEach(function(e) {
        var n = qr2d(e, t89), a = n[0], i = n[1];
        r.push(a), o.push(i);
    }), [
        stack(r, 0).reshape(e233.shape),
        stack(o, 0).reshape(e233.shape)
    ];
}
function qr2d(e234, t90) {
    return void 0 === t90 && (t90 = !1), ENV.engine.tidy(function() {
        if (2 !== e234.shape.length) throw new Error("qr2d() requires a 2D Tensor, but got a " + e234.shape.length + "D Tensor.");
        for(var n = e234.shape[0], r = e234.shape[1], o = eye(n), a = e234.clone(), i = tensor2d([
            [
                1
            ]
        ], [
            1,
            1
        ]), s = i.clone(), u2 = n >= r ? r : n, l2 = function(e) {
            var t91, u3 = a, l3 = s, c2 = o;
            t91 = ENV.engine.tidy(function() {
                var t = a.slice([
                    e,
                    e
                ], [
                    n - e,
                    1
                ]), u = t.norm(), l = a.slice([
                    e,
                    e
                ], [
                    1,
                    1
                ]), c = l.sign().neg(), p = l.sub(c.mul(u)), d = t.div(p);
                s = 1 === d.shape[0] ? i.clone() : i.concat(d.slice([
                    1,
                    0
                ], [
                    d.shape[0] - 1,
                    d.shape[1]
                ]), 0);
                var h = c.matMul(p).div(u).neg(), f = a.slice([
                    e,
                    0
                ], [
                    n - e,
                    r
                ]), m = h.mul(s);
                a = 0 === e ? f.sub(m.matMul(s.transpose().matMul(f))) : a.slice([
                    0,
                    0
                ], [
                    e,
                    r
                ]).concat(f.sub(m.matMul(s.transpose().matMul(f))), 0);
                var g = o.slice([
                    0,
                    e
                ], [
                    n,
                    o.shape[1] - e
                ]);
                return o = 0 === e ? g.sub(g.matMul(s).matMul(m.transpose())) : o.slice([
                    0,
                    0
                ], [
                    n,
                    e
                ]).concat(g.sub(g.matMul(s).matMul(m.transpose())), 1), [
                    s,
                    a,
                    o
                ];
            }), s = t91[0], a = t91[1], o = t91[2], dispose([
                u3,
                l3,
                c2
            ]);
        }, c1 = 0; c1 < u2; ++c1)l2(c1);
        return !t90 && n > r && (o = o.slice([
            0,
            0
        ], [
            n,
            r
        ]), a = a.slice([
            0,
            0
        ], [
            r,
            r
        ])), [
            o,
            a
        ];
    });
}
var gramSchmidt = op({
    gramSchmidt_: gramSchmidt_
}), qr = op({
    qr_: qr_
}), linalg_ops = Object.freeze({
    gramSchmidt: gramSchmidt,
    qr: qr
});
function resizeBilinear_(e235, t92, n) {
    void 0 === n && (n = !1);
    var r = convertToTensor(e235, "images", "resizeBilinear");
    assert(3 === r.rank || 4 === r.rank, "Error in resizeBilinear: x must be rank 3 or 4, but got rank " + r.rank + "."), assert(2 === t92.length, "Error in resizeBilinear: new shape must 2D, but got shape " + t92 + ".");
    var o = r, a = !1;
    3 === r.rank && (a = !0, o = r.as4D(1, r.shape[0], r.shape[1], r.shape[2]));
    var i = t92[0], s = t92[1], u = ENV.engine.runKernel(function(e, t) {
        return e.resizeBilinear(o, i, s, n);
    }, {
        batchImages: o
    }, function(e, t93) {
        return {
            batchImages: function() {
                return ENV.engine.runKernel(function(t) {
                    return t.resizeBilinearBackprop(e, o, n);
                }, {
                });
            }
        };
    });
    return a ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;
}
function resizeNearestNeighbor_(e236, t94, n) {
    void 0 === n && (n = !1);
    var r = convertToTensor(e236, "images", "resizeNearestNeighbor");
    assert(3 === r.rank || 4 === r.rank, "Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank " + r.rank + "."), assert(2 === t94.length, "Error in resizeNearestNeighbor: new shape must 2D, but got shape " + t94 + "."), assert("float32" === r.dtype || "int32" === r.dtype, "`images` must have `int32` or `float32` as dtype");
    var o = r, a = !1;
    3 === r.rank && (a = !0, o = r.as4D(1, r.shape[0], r.shape[1], r.shape[2]));
    var i = t94[0], s = t94[1], u = ENV.engine.runKernel(function(e, t) {
        return e.resizeNearestNeighbor(o, i, s, n);
    }, {
        batchImages: o
    }, function(e, t95) {
        return {
            batchImages: function() {
                return ENV.engine.runKernel(function(t) {
                    return t.resizeNearestNeighborBackprop(e, o, n);
                }, {
                });
            }
        };
    });
    return a ? u.as3D(u.shape[1], u.shape[2], u.shape[3]) : u;
}
function nonMaxSuppression_(e237, t, n, r, o) {
    void 0 === r && (r = 0.5), void 0 === o && (o = Number.NEGATIVE_INFINITY);
    var a = convertToTensor(e237, "boxes", "nonMaxSuppression"), i = convertToTensor(t, "scores", "nonMaxSuppression"), s = nonMaxSuppSanityCheck(a, i, n, r, o);
    return n = s.maxOutputSize, r = s.iouThreshold, o = s.scoreThreshold, ENV.engine.runKernel(function(e) {
        return e.nonMaxSuppression(a, i, n, r, o);
    }, {
        $boxes: a
    });
}
function nonMaxSuppressionAsync_(e, t, n, r, o) {
    return void 0 === r && (r = 0.5), void 0 === o && (o = Number.NEGATIVE_INFINITY), __awaiter(this, void 0, void 0, function() {
        var a, i, s, u, l, c;
        return __generator(this, function(p) {
            switch(p.label){
                case 0:
                    return a = convertToTensor(e, "boxes", "nonMaxSuppressionAsync"), i = convertToTensor(t, "scores", "nonMaxSuppressionAsync"), s = nonMaxSuppSanityCheck(a, i, n, r, o), n = s.maxOutputSize, r = s.iouThreshold, o = s.scoreThreshold, [
                        4,
                        a.data()
                    ];
                case 1:
                    return u = p.sent(), [
                        4,
                        i.data()
                    ];
                case 2:
                    return l = p.sent(), c = nonMaxSuppressionImpl(u, l, n, r, o), a !== e && a.dispose(), i !== t && i.dispose(), [
                        2,
                        c
                    ];
            }
        });
    });
}
function nonMaxSuppSanityCheck(e, t, n, r, o) {
    null == r && (r = 0.5), null == o && (o = Number.NEGATIVE_INFINITY);
    var a = e.shape[0];
    return n = Math.min(n, a), assert(0 <= r && r <= 1, "iouThreshold must be in [0, 1], but was '" + r + "'"), assert(2 === e.rank, "boxes must be a 2D tensor, but was of rank '" + e.rank + "'"), assert(4 === e.shape[1], "boxes must have 4 columns, but 2nd dimension was " + e.shape[1]), assert(1 === t.rank, "scores must be a 1D tensor"), assert(t.shape[0] === a, "scores has incompatible shape with boxes. Expected " + a + ", but was " + t.shape[0]), {
        maxOutputSize: n,
        iouThreshold: r,
        scoreThreshold: o
    };
}
function cropAndResize_(e238, t, n, r, o, a) {
    var i = convertToTensor(e238, "image", "cropAndResize", "float32"), s = convertToTensor(t, "boxes", "cropAndResize", "float32"), u = convertToTensor(n, "boxInd", "cropAndResize", "int32");
    o = o || "bilinear", a = a || 0;
    var l = s.shape[0];
    assert(4 === i.rank, "Error in cropAndResize: image must be rank 4,but got rank " + i.rank + "."), assert(2 === s.rank && 4 === s.shape[1], "Error in cropAndResize: boxes must be have size [" + l + ",4] but had shape " + s.shape + "."), assert(1 === u.rank && u.shape[0] === l, "Error in cropAndResize: boxInd must be have size [" + l + "] but had shape " + s.shape + "."), assert(2 === r.length, "Error in cropAndResize: cropSize must be of length 2, but got length " + r.length + "."), assert(r[0] >= 1 && r[1] >= 1, "cropSize must be atleast [1,1], but was " + r), assert("bilinear" === o || "nearest" === o, "method must be bilinear or nearest, but was " + o);
    return ENV.engine.runKernel(function(e, t) {
        return e.cropAndResize(i, s, u, r, o, a);
    }, {
        $image: i,
        $boxes: s
    });
}
var resizeBilinear = op({
    resizeBilinear_: resizeBilinear_
}), resizeNearestNeighbor = op({
    resizeNearestNeighbor_: resizeNearestNeighbor_
}), nonMaxSuppression = op({
    nonMaxSuppression_: nonMaxSuppression_
}), nonMaxSuppressionAsync = nonMaxSuppressionAsync_, cropAndResize = op({
    cropAndResize_: cropAndResize_
}), image_ops = Object.freeze({
    resizeBilinear: resizeBilinear,
    resizeNearestNeighbor: resizeNearestNeighbor,
    nonMaxSuppression: nonMaxSuppression,
    nonMaxSuppressionAsync: nonMaxSuppressionAsync,
    cropAndResize: cropAndResize
});
function matMul_$1(e239, t96, n, r, o, a) {
    var i6;
    void 0 === n && (n = !1), void 0 === r && (r = !1), void 0 === a && (a = "linear");
    var s7 = convertToTensor(e239, "a", "fused matMul"), u4 = convertToTensor(t96, "b", "fused matMul");
    s7 = (i6 = makeTypesMatch(s7, u4))[0], u4 = i6[1];
    var l = n ? s7.shape[s7.rank - 2] : s7.shape[s7.rank - 1], c = r ? u4.shape[u4.rank - 1] : u4.shape[u4.rank - 2], p = n ? s7.shape[s7.rank - 1] : s7.shape[s7.rank - 2], d = r ? u4.shape[u4.rank - 2] : u4.shape[u4.rank - 1], h = s7.shape.slice(0, -2), f = u4.shape.slice(0, -2), m = sizeFromShape(h), g = sizeFromShape(f);
    assert(s7.rank >= 2 && u4.rank >= 2 && s7.rank === u4.rank, "Error in fused matMul: inputs must have the same rank of at least 2, got ranks " + s7.rank + " and " + u4.rank + "."), assert(arraysEqual(h, f), "Error in fused matMul: outer dimensions (" + h + ") and (" + f + ") of Tensors with shapes " + s7.shape + " and " + u4.shape + " must match."), assert(l === c, "Error in fused matMul: inner shapes (" + l + ") and (" + c + ") of Tensors with shapes " + s7.shape + " and " + u4.shape + " and transposeA=" + n + " and transposeB=" + r + " must match.");
    var v, y = s7.shape.slice(0, -2).concat([
        p,
        d
    ]), x = n ? s7.as3D(m, l, p) : s7.as3D(m, p, l), T = r ? u4.as3D(g, d, c) : u4.as3D(g, c, d);
    null != o && (v = makeTypesMatch(v = convertToTensor(o, "bias", "fused matMul"), s7)[0], assertAndGetBroadcastShape(y, v.shape));
    var w = {
        $a: x,
        $b: T
    };
    return null != o && (w.$bias = v), ENV.engine.runKernel(function(e, t) {
        return t(e.fusedBatchMatMul(x, T, n, r, v, a));
    }, w, function(e240, t97) {
        var i, s = t97[0];
        if (null == a || "linear" === a) i = e240;
        else {
            if ("relu" !== a) throw new Error("Gradient for activation " + a + " has not been implemented yet.");
            i = e240.mul(s.step());
        }
        var u = {
        };
        return null != o && (u = {
            $bias: function() {
                var e = i, t = getReductionAxes(v.shape, y);
                return t.length > 0 && (e = e.sum(t)), e.reshape(v.shape);
            }
        }), n || r ? !n && r ? Object.assign({
            $a: function() {
                return i.matMul(T, !1, !1);
            },
            $b: function() {
                return i.matMul(x, !0, !1);
            }
        }, u) : n && !r ? Object.assign({
            $a: function() {
                return T.matMul(i, !1, !0);
            },
            $b: function() {
                return x.matMul(i, !1, !1);
            }
        }, u) : Object.assign({
            $a: function() {
                return T.matMul(i, !0, !0);
            },
            $b: function() {
                return i.matMul(x, !0, !0);
            }
        }, u) : Object.assign({
            $a: function() {
                return i.matMul(T, !1, !0);
            },
            $b: function() {
                return x.matMul(i, !0, !1);
            }
        }, u);
    }).reshape(y);
}
var matMul$1 = op({
    matMul_: matMul_$1
}), fused_ops = Object.freeze({
    matMul: matMul$1
}), ops = Object.freeze({
    image: image_ops,
    linalg: linalg_ops,
    losses: loss_ops,
    spectral: spectral_ops,
    fused: fused_ops,
    op: op,
    batchNormalization2d: batchNormalization2d,
    batchNormalization3d: batchNormalization3d,
    batchNormalization4d: batchNormalization4d,
    batchNormalization: batchNormalization,
    batchNorm: batchNorm,
    batchNorm2d: batchNorm2d,
    batchNorm3d: batchNorm3d,
    batchNorm4d: batchNorm4d,
    complex: complex,
    real: real,
    imag: imag,
    concat: concat,
    concat1d: concat1d,
    concat2d: concat2d,
    concat3d: concat3d,
    concat4d: concat4d,
    split: split$1,
    conv1d: conv1d,
    conv2d: conv2d,
    conv3d: conv3d,
    conv2dDerFilter: conv2dDerFilter,
    depthwiseConv2d: depthwiseConv2d,
    separableConv2d: separableConv2d,
    conv2dTranspose: conv2dTranspose,
    matMul: matMul,
    dot: dot,
    outerProduct: outerProduct,
    reverse: reverse,
    reverse1d: reverse1d,
    reverse2d: reverse2d,
    reverse3d: reverse3d,
    reverse4d: reverse4d,
    maxPool: maxPool,
    avgPool: avgPool,
    pool: pool,
    slice: slice,
    slice1d: slice1d,
    slice2d: slice2d,
    slice3d: slice3d,
    slice4d: slice4d,
    abs: abs,
    acos: acos,
    acosh: acosh,
    asin: asin,
    asinh: asinh,
    atan: atan,
    atanh: atanh,
    ceil: ceil,
    clipByValue: clipByValue,
    cos: cos,
    cosh: cosh,
    erf: erf,
    exp: exp,
    expm1: expm1,
    floor: floor,
    log: log$1,
    log1p: log1p,
    logSigmoid: logSigmoid,
    neg: neg,
    reciprocal: reciprocal,
    round: round,
    rsqrt: rsqrt,
    sigmoid: sigmoid,
    sign: sign,
    sin: sin,
    sinh: sinh,
    softplus: softplus,
    sqrt: sqrt,
    square: square,
    step: step,
    tan: tan,
    tanh: tanh$1,
    all: all,
    any: any,
    argMax: argMax,
    argMin: argMin,
    logSumExp: logSumExp,
    max: max,
    mean: mean,
    min: min,
    moments: moments,
    sum: sum$1,
    prod: prod,
    equal: equal,
    equalStrict: equalStrict,
    greater: greater,
    greaterEqual: greaterEqual,
    greaterEqualStrict: greaterEqualStrict,
    greaterStrict: greaterStrict,
    less: less,
    lessEqual: lessEqual,
    lessEqualStrict: lessEqualStrict,
    lessStrict: lessStrict,
    notEqual: notEqual,
    notEqualStrict: notEqualStrict,
    add: add,
    addN: addN,
    addStrict: addStrict,
    atan2: atan2,
    div: div,
    divStrict: divStrict,
    floorDiv: floorDiv,
    maximum: maximum,
    maximumStrict: maximumStrict,
    minimum: minimum,
    minimumStrict: minimumStrict,
    mod: mod,
    modStrict: modStrict,
    mul: mul,
    mulStrict: mulStrict,
    pow: pow,
    powStrict: powStrict,
    squaredDifference: squaredDifference,
    squaredDifferenceStrict: squaredDifferenceStrict,
    sub: sub,
    subStrict: subStrict,
    elu: elu,
    leakyRelu: leakyRelu,
    prelu: prelu,
    relu: relu,
    selu: selu,
    logicalAnd: logicalAnd,
    logicalNot: logicalNot,
    logicalOr: logicalOr,
    logicalXor: logicalXor,
    where: where,
    whereAsync: whereAsync,
    buffer: buffer,
    toPixels: toPixels$1,
    print: print,
    batchToSpaceND: batchToSpaceND,
    cast: cast,
    clone: clone,
    cumsum: cumsum,
    depthToSpace: depthToSpace,
    expandDims: expandDims,
    eye: eye,
    fromPixels: fromPixels$1,
    multinomial: multinomial,
    oneHot: oneHot,
    pad: pad,
    pad1d: pad1d,
    pad2d: pad2d,
    pad3d: pad3d,
    pad4d: pad4d,
    rand: rand,
    randomNormal: randomNormal,
    randomUniform: randomUniform,
    reshape: reshape,
    spaceToBatchND: spaceToBatchND,
    squeeze: squeeze,
    stack: stack,
    tile: tile,
    truncatedNormal: truncatedNormal,
    unstack: unstack,
    setdiff1dAsync: setdiff1dAsync,
    fill: fill,
    linspace: linspace,
    ones: ones$1,
    range: range,
    scalar: scalar,
    tensor: tensor,
    tensor1d: tensor1d,
    tensor2d: tensor2d,
    tensor3d: tensor3d,
    tensor4d: tensor4d,
    tensor5d: tensor5d,
    tensor6d: tensor6d,
    zeros: zeros,
    onesLike: onesLike,
    zerosLike: zerosLike,
    transpose: transpose,
    softmax: softmax,
    logSoftmax: logSoftmax,
    localResponseNormalization: localResponseNormalization,
    norm: norm,
    gather: gather,
    unsortedSegmentSum: unsortedSegmentSum,
    basicLSTMCell: basicLSTMCell,
    multiRNNCell: multiRNNCell,
    movingAverage: movingAverage,
    stridedSlice: stridedSlice,
    topk: topk,
    scatterND: scatterND,
    fft: fft,
    ifft: ifft,
    rfft: rfft,
    irfft: irfft,
    sparseToDense: sparseToDense,
    gatherND: gatherND
});
function mapActivation(e, t, n) {
    if ("linear" === t) return e.linear(n);
    if ("relu" === t) return e.relu(n);
    throw new Error("Activation " + t + " has not been implemented for the CPU backend.");
}
var MathBackendCPU = function() {
    function e241() {
        this.blockSize = 48, this.firstUse = !0, ENV.get("IS_BROWSER") && (this.fromPixels2DContext = document.createElement("canvas").getContext("2d"));
    }
    return e241.prototype.setDataMover = function(e) {
        this.data = new DataStorage(e);
    }, e241.prototype.register = function(e, t, n) {
        if (this.firstUse && (this.firstUse = !1, ENV.get("IS_NODE") && warn("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================\n")), this.data.has(e)) throw new Error("Data buffer is already registered");
        this.data.set(e, {
            dtype: n
        });
    }, e241.prototype.write = function(e, t) {
        if (null == t) throw new Error("MathBackendCPU.write(): values can not be null");
        this.data.get(e).values = t;
    }, e241.prototype.fromPixels = function(e, t) {
        if (null == e) throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
        var n, r;
        if (ENV.get("IS_NODE") && null == e.getContext) throw new Error("When running in node, pixels must be an HTMLCanvasElement like the one returned by the `canvas` npm package");
        if (null != e.getContext) n = e.getContext("2d").getImageData(0, 0, e.width, e.height).data;
        else if (e instanceof ImageData) n = e.data;
        else {
            if (!(e instanceof HTMLImageElement || e instanceof HTMLVideoElement)) throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement or ImageData, but was " + e.constructor.name);
            if (null == this.fromPixels2DContext) throw new Error("Can't read pixels from HTMLImageElement outside the browser.");
            this.fromPixels2DContext.canvas.width = e.width, this.fromPixels2DContext.canvas.height = e.height, this.fromPixels2DContext.drawImage(e, 0, 0, e.width, e.height), n = this.fromPixels2DContext.getImageData(0, 0, e.width, e.height).data;
        }
        if (4 === t) r = new Int32Array(n);
        else {
            var o = e.width * e.height;
            r = new Int32Array(o * t);
            for(var a = 0; a < o; a++)for(var i = 0; i < t; ++i)r[a * t + i] = n[4 * a + i];
        }
        return tensor3d(r, [
            e.height,
            e.width,
            t
        ], "int32");
    }, e241.prototype.read = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [
                    2,
                    this.readSync(e)
                ];
            });
        });
    }, e241.prototype.readSync = function(e) {
        var t = this.data.get(e), n = t.dtype, r = t.complexTensors;
        return "complex64" === n ? mergeRealAndImagArrays(r.real.dataSync(), r.imag.dataSync()) : this.data.get(e).values;
    }, e241.prototype.disposeData = function(e) {
        if (this.data.has(e)) {
            var t = this.data.get(e).complexTensors;
            null != t && (t.real.dispose(), t.imag.dispose()), this.data.delete(e);
        }
    }, e241.prototype.time = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            var t;
            return __generator(this, function(n) {
                return t = now(), e(), [
                    2,
                    {
                        kernelMs: now() - t
                    }
                ];
            });
        });
    }, e241.prototype.memory = function() {
        return {
            unreliable: !0,
            reasons: [
                "The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."
            ]
        };
    }, e241.prototype.complex = function(e, t) {
        var n = Tensor.make(e.shape, {
        }, "complex64");
        return this.data.get(n.dataId).complexTensors = {
            real: ENV.engine.keep(e.clone()),
            imag: ENV.engine.keep(t.clone())
        }, n;
    }, e241.prototype.real = function(e) {
        return this.data.get(e.dataId).complexTensors.real.clone();
    }, e241.prototype.imag = function(e) {
        return this.data.get(e.dataId).complexTensors.imag.clone();
    }, e241.prototype.assertNotComplex = function(e242, t) {
        Array.isArray(e242) || (e242 = [
            e242
        ]), e242.forEach(function(e) {
            null != e && assert("complex64" !== e.dtype, t + " does not support complex64 tensors.");
        });
    }, e241.prototype.slice = function(e243, t, n) {
        if (this.assertNotComplex(e243, "slice"), isSliceContinous(e243.shape, t, n)) {
            var r = computeFlatOffset(t, e243.strides), o = sizeFromShape(n);
            return tensor(e243.dataSync().subarray(r, r + o), n, e243.dtype);
        }
        for(var a = buffer(n, e243.dtype), i = e243.bufferSync(), s = 0; s < a.size; ++s){
            var u = a.indexToLoc(s).map(function(e, n) {
                return e + t[n];
            });
            a.values[s] = i.get.apply(i, u);
        }
        return a.toTensor();
    }, e241.prototype.stridedSlice = function(e244, t98, n, r, o, a, i, s, u) {
        this.assertNotComplex(e244, "stridedSlice");
        var l = getStridedSlicedInfo(e244.shape, t98, n, r, o, a, i, s, u), c = l[0], p = l[1], d = l[2], h = p.filter(function(e, t) {
            return -1 === d.indexOf(t);
        });
        if (h.some(function(e) {
            return 0 === e;
        })) return tensor([], h);
        for(var f = buffer(p, e244.dtype), m = e244.bufferSync(), g = 0; g < f.size; g++){
            for(var v = f.indexToLoc(g), y = new Array(v.length), x = 0; x < y.length; x++)y[x] = v[x] * r[x] + c[x];
            f.set.apply(f, [
                m.get.apply(m, y)
            ].concat(v));
        }
        return f.toTensor().reshape(h);
    }, e241.prototype.unstack = function(e, t) {
        for(var n = e.shape[t], r = new Array(e.rank - 1), o = 0, a = 0; a < e.rank; a++)a !== t && (r[o++] = e.shape[a]);
        var i = new Array(e.rank).fill(0), s = e.shape.slice();
        s[t] = 1;
        var u = new Array(n);
        for(a = 0; a < u.length; a++)i[t] = a, u[a] = this.slice(e, i, s).reshape(r);
        return u;
    }, e241.prototype.reverse = function(e, t) {
        this.assertNotComplex(e, "reverse");
        for(var n = buffer(e.shape, e.dtype), r = e.bufferSync(), o19 = function(o) {
            var a = n.indexToLoc(o), i = a.slice();
            t.forEach(function(t) {
                return i[t] = e.shape[t] - 1 - i[t];
            }), n.set.apply(n, [
                r.get.apply(r, i)
            ].concat(a));
        }, a14 = 0; a14 < n.size; a14++)o19(a14);
        return n.toTensor();
    }, e241.prototype.concat = function(e245, t99) {
        this.assertNotComplex(e245, "concat");
        var n46 = e245.map(function(e) {
            var n = sizeFromShape(e.shape.slice(t99));
            return e.as2D(-1, n);
        }), r = computeOutShape(n46.map(function(e) {
            return e.shape;
        }), 1), o = buffer(r, e245[0].dtype).values;
        if (1 === n46[0].shape[0]) {
            var a = 0;
            n46.forEach(function(e) {
                o.set(e.dataSync(), a), a += e.size;
            });
        } else {
            var i = 0;
            n46.forEach(function(e) {
                for(var t = e.dataSync(), n = 0, a = 0; a < e.shape[0]; ++a)for(var s = a * r[1] + i, u = 0; u < e.shape[1]; ++u)o[s + u] = t[n++];
                i += e.shape[1];
            });
        }
        var s = computeOutShape(e245.map(function(e) {
            return e.shape;
        }), t99);
        return tensor(o, s, e245[0].dtype);
    }, e241.prototype.neg = function(e) {
        return this.assertNotComplex(e, "neg"), this.multiply(scalar(-1), e);
    }, e241.prototype.add = function(e246, t100) {
        return "complex64" === e246.dtype || "complex64" === t100.dtype ? this.broadcastedBinaryComplexOp(e246.cast("complex64"), t100.cast("complex64"), function(e, t, n, r) {
            return {
                real: e + n,
                imag: t + r
            };
        }) : this.broadcastedBinaryOp(e246, t100, upcastType(e246.dtype, t100.dtype), function(e, t) {
            return e + t;
        });
    }, e241.prototype.addN = function(e247) {
        this.assertNotComplex(e247, "addN");
        for(var t = e247.map(function(e) {
            return e.dataSync();
        }), n = buffer(e247[0].shape, e247[0].dtype), r = n.values, o = 0; o < e247.length; o++)for(var a = t[o], i = 0; i < r.length; i++)r[i] += a[i];
        return n.toTensor();
    }, e241.prototype.subtract = function(e248, t101) {
        return "complex64" === e248.dtype || "complex64" === t101.dtype ? this.broadcastedBinaryComplexOp(e248.cast("complex64"), t101.cast("complex64"), function(e, t, n, r) {
            return {
                real: e - n,
                imag: t - r
            };
        }) : this.broadcastedBinaryOp(e248, t101, upcastType(e248.dtype, t101.dtype), function(e, t) {
            return e - t;
        });
    }, e241.prototype.pow = function(e249, t102) {
        return this.assertNotComplex([
            e249,
            t102
        ], "pow"), this.broadcastedBinaryOp(e249, t102, e249.dtype, function(e, t) {
            return Math.pow(e, t);
        });
    }, e241.prototype.batchMatMul = function(e, t, n, r) {
        this.assertNotComplex([
            e,
            t
        ], "matMul");
        for(var o = n ? e.shape[1] : e.shape[2], a = n ? e.shape[2] : e.shape[1], i = r ? t.shape[1] : t.shape[2], s = e.shape[0], u = e.dataSync(), l = t.dataSync(), c = n ? [
            e.strides[0],
            1,
            e.strides[1]
        ] : [
            e.strides[0],
            e.strides[1],
            1
        ], p = c[0], d = c[1], h = c[2], f = r ? [
            1,
            t.strides[1],
            t.strides[0]
        ] : [
            t.strides[1],
            1,
            t.strides[0]
        ], m = f[0], g = f[1], v = f[2], y = a * i, x = buffer([
            s,
            a,
            i
        ], e.dtype), T = x.values, w = this.blockSize, E = 0; E < s; E++)for(var b = 0; b < a; b += w)for(var S = 0; S < i; S += w)for(var C = 0; C < o; C += w)for(var A = Math.min(b + w, a), N = Math.min(S + w, i), _ = Math.min(C + w, o), R = b; R < A; R++)for(var I = S; I < N; I++){
            for(var k = 0, D = C; D < _; D++)k += u[E * p + R * d + D * h] * l[D * m + I * g + E * v];
            T[E * y + (R * i + I)] += k;
        }
        return x.toTensor();
    }, e241.prototype.fusedBatchMatMul = function(e, t, n, r, o, a) {
        var i = this.batchMatMul(e, t, n, r);
        return o && (i = this.add(i, o)), a && (i = mapActivation(this, a, i)), i;
    }, e241.prototype.multiply = function(e250, t103) {
        return "complex64" === e250.dtype || "complex64" === t103.dtype ? this.broadcastedBinaryComplexOp(e250.cast("complex64"), t103.cast("complex64"), function(e, t, n, r) {
            return {
                real: e * n - t * r,
                imag: e * r + t * n
            };
        }) : this.broadcastedBinaryOp(e250, t103, upcastType(e250.dtype, t103.dtype), function(e, t) {
            return e * t;
        });
    }, e241.prototype.realDivide = function(e251, t104) {
        this.assertNotComplex([
            e251,
            t104
        ], "realDivide");
        return this.broadcastedBinaryOp(e251, t104, "float32", function(e, t) {
            return e / t;
        });
    }, e241.prototype.floorDiv = function(e252, t105) {
        this.assertNotComplex([
            e252,
            t105
        ], "floorDiv");
        return this.broadcastedBinaryOp(e252, t105, "int32", function(e, t) {
            return Math.floor(e / t);
        });
    }, e241.prototype.sum = function(e, t) {
        this.assertNotComplex(e, "sum"), assertAxesAreInnerMostDims("sum", t, e.rank);
        for(var n = computeOutAndReduceShapes(e.shape, t), r = n[0], o = n[1], a = zeros(r, upcastType(e.dtype, "int32")), i = sizeFromShape(o), s = a.dataSync(), u = e.dataSync(), l = 0; l < s.length; ++l){
            for(var c = l * i, p = 0, d = 0; d < i; ++d)p += u[c + d];
            s[l] = p;
        }
        return a;
    }, e241.prototype.prod = function(e, t) {
        this.assertNotComplex(e, "sum");
        for(var n = computeOutAndReduceShapes(e.shape, t), r = n[0], o = n[1], a = zeros(r, upcastType(e.dtype, "int32")), i = sizeFromShape(o), s = a.dataSync(), u = e.dataSync(), l = 0; l < s.length; ++l){
            for(var c = l * i, p = 1, d = 0; d < i; ++d)p *= u[c + d];
            s[l] = p;
        }
        return a;
    }, e241.prototype.unsortedSegmentSum = function(e, t, n) {
        this.assertNotComplex(e, "unsortedSegmentSum");
        for(var r = [], o = e.rank - t.rank, a = 0; a < o; ++a)t = t.expandDims(a + 1);
        for(a = 0; a < n; ++a){
            var i = scalar(a, "int32"), s = equal(i, t).asType("float32").mul(e).sum(0);
            r.push(s);
        }
        return stack(r);
    }, e241.prototype.argMin = function(e, t) {
        this.assertNotComplex(e, "argMin");
        var n = [
            t
        ];
        assertAxesAreInnerMostDims("argMin", n, e.rank);
        for(var r = computeOutAndReduceShapes(e.shape, n), o = r[0], a = r[1], i = zeros(o, "int32"), s = sizeFromShape(a), u = i.dataSync(), l = e.dataSync(), c = 0; c < u.length; ++c){
            for(var p = c * s, d = l[p], h = 0, f = 0; f < s; ++f){
                var m = l[p + f];
                m < d && (d = m, h = f);
            }
            u[c] = h;
        }
        return i;
    }, e241.prototype.argMax = function(e, t) {
        this.assertNotComplex(e, "argMax");
        var n = [
            t
        ];
        assertAxesAreInnerMostDims("argMax", n, e.rank);
        for(var r = computeOutAndReduceShapes(e.shape, n), o = r[0], a = r[1], i = zeros(o, "int32"), s = sizeFromShape(a), u = i.dataSync(), l = e.dataSync(), c = 0; c < u.length; ++c){
            for(var p = c * s, d = l[p], h = 0, f = 0; f < s; ++f){
                var m = l[p + f];
                m > d && (d = m, h = f);
            }
            u[c] = h;
        }
        return i;
    }, e241.prototype.cumsum = function(e253, t106, n, r) {
        if (this.assertNotComplex(e253, "cumsum"), t106 !== e253.rank - 1) throw new Error("backend.cumsum in CPU expects an inner-most axis=" + (e253.rank - 1) + " but got axis=" + t106);
        for(var o = upcastType(e253.dtype, "int32"), a = zeros(e253.shape, o), i = a.dataSync(), s = e253.dataSync(), u = e253.shape[e253.rank - 1], l = r ? function(e, t) {
            return e + u - t - 1;
        } : function(e, t) {
            return e + t;
        }, c = 0; c < s.length; c += u)for(var p = 0; p < u; p++){
            var d = l(c, p);
            if (0 === p) i[d] = n ? 0 : s[d];
            else {
                var h = l(c, p - 1);
                i[d] = n ? s[h] + i[h] : s[d] + i[h];
            }
        }
        return a;
    }, e241.prototype.equal = function(e254, t107) {
        return this.assertNotComplex([
            e254,
            t107
        ], "equal"), this.broadcastedBinaryOp(e254, t107, "bool", function(e, t) {
            return e === t ? 1 : 0;
        });
    }, e241.prototype.notEqual = function(e255, t108) {
        return this.assertNotComplex([
            e255,
            t108
        ], "notEqual"), this.broadcastedBinaryOp(e255, t108, "bool", function(e, t) {
            return e !== t ? 1 : 0;
        });
    }, e241.prototype.less = function(e256, t109) {
        return this.assertNotComplex([
            e256,
            t109
        ], "less"), this.broadcastedBinaryOp(e256, t109, "bool", function(e, t) {
            return e < t ? 1 : 0;
        });
    }, e241.prototype.lessEqual = function(e257, t110) {
        return this.assertNotComplex([
            e257,
            t110
        ], "lessEqual"), this.broadcastedBinaryOp(e257, t110, "bool", function(e, t) {
            return e <= t ? 1 : 0;
        });
    }, e241.prototype.greater = function(e258, t111) {
        return this.assertNotComplex([
            e258,
            t111
        ], "greater"), this.broadcastedBinaryOp(e258, t111, "bool", function(e, t) {
            return e > t ? 1 : 0;
        });
    }, e241.prototype.greaterEqual = function(e259, t112) {
        return this.assertNotComplex([
            e259,
            t112
        ], "greaterEqual"), this.broadcastedBinaryOp(e259, t112, "bool", function(e, t) {
            return e >= t ? 1 : 0;
        });
    }, e241.prototype.logicalNot = function(e) {
        this.assertNotComplex(e, "logicalNot");
        for(var t = e.dataSync(), n = new Uint8Array(t.length), r = 0; r < t.length; ++r)n[r] = t[r] ? 0 : 1;
        return Tensor.make(e.shape, {
            values: n
        }, "bool");
    }, e241.prototype.logicalAnd = function(e260, t113) {
        return this.assertNotComplex([
            e260,
            t113
        ], "logicalAnd"), this.broadcastedBinaryOp(e260, t113, "bool", function(e, t) {
            return e && t;
        });
    }, e241.prototype.logicalOr = function(e261, t114) {
        return this.assertNotComplex([
            e261,
            t114
        ], "logicalOr"), this.broadcastedBinaryOp(e261, t114, "bool", function(e, t) {
            return e || t;
        });
    }, e241.prototype.select = function(e, t, n) {
        this.assertNotComplex([
            e,
            t,
            n
        ], "select");
        for(var r = e.dataSync(), o = t.dataSync(), a = n.dataSync(), i = zeros(t.shape, upcastType(t.dtype, n.dtype)), s = i.dataSync(), u = 0, l = 0 === e.rank || e.rank > 1 || 1 === t.rank ? 1 : t.shape[1], c = 0; c < r.length; c++)for(var p = 0; p < l; p++)1 === r[c] ? s[u++] = o[c] : s[u++] = a[c];
        return i;
    }, e241.prototype.where = function(e) {
        this.assertNotComplex([
            e
        ], "where");
        var t = e.dataSync();
        return whereImpl(e.shape, t);
    }, e241.prototype.topk = function(e, t, n) {
        return this.assertNotComplex(e, "topk"), topkImpl(e.dataSync(), e.shape, e.dtype, t, n);
    }, e241.prototype.min = function(e, t) {
        this.assertNotComplex(e, "min"), assertAxesAreInnerMostDims("min", t, e.rank);
        for(var n = computeOutAndReduceShapes(e.shape, t), r = n[0], o = n[1], a = zeros(r, e.dtype), i = sizeFromShape(o), s = a.dataSync(), u = e.dataSync(), l = 0; l < s.length; ++l){
            for(var c = l * i, p = u[c], d = 0; d < i; ++d){
                var h = u[c + d];
                h < p && (p = h);
            }
            s[l] = p;
        }
        return a;
    }, e241.prototype.minimum = function(e262, t115) {
        return this.assertNotComplex([
            e262,
            t115
        ], "minimum"), this.broadcastedBinaryOp(e262, t115, e262.dtype, function(e, t) {
            return Math.min(e, t);
        });
    }, e241.prototype.mod = function(e263, t116) {
        return this.assertNotComplex([
            e263,
            t116
        ], "mod"), this.broadcastedBinaryOp(e263, t116, e263.dtype, function(e, t) {
            var n = e % t;
            return e < 0 && t < 0 || e >= 0 && t >= 0 ? n : (n + t) % t;
        });
    }, e241.prototype.max = function(e, t) {
        this.assertNotComplex(e, "max"), assertAxesAreInnerMostDims("max", t, e.rank);
        for(var n = computeOutAndReduceShapes(e.shape, t), r = n[0], o = n[1], a = zeros(r, e.dtype), i = sizeFromShape(o), s = a.dataSync(), u = e.dataSync(), l = 0; l < s.length; ++l){
            for(var c = l * i, p = u[c], d = 0; d < i; ++d){
                var h = u[c + d];
                h > p && (p = h);
            }
            s[l] = p;
        }
        return a;
    }, e241.prototype.maximum = function(e264, t117) {
        return this.assertNotComplex([
            e264,
            t117
        ], "maximum"), this.broadcastedBinaryOp(e264, t117, e264.dtype, function(e, t) {
            return Math.max(e, t);
        });
    }, e241.prototype.all = function(e, t) {
        this.assertNotComplex(e, "all"), assertAxesAreInnerMostDims("all", t, e.rank);
        for(var n = computeOutAndReduceShapes(e.shape, t), r = n[0], o = n[1], a = zeros(r, e.dtype), i = sizeFromShape(o), s = a.dataSync(), u = e.dataSync(), l = 0; l < s.length; ++l){
            for(var c = l * i, p = u[c], d = 0; d < i; ++d){
                var h = u[c + d];
                p = p && h;
            }
            s[l] = p;
        }
        return a;
    }, e241.prototype.any = function(e, t) {
        this.assertNotComplex(e, "any"), assertAxesAreInnerMostDims("any", t, e.rank);
        for(var n = computeOutAndReduceShapes(e.shape, t), r = n[0], o = n[1], a = zeros(r, e.dtype), i = sizeFromShape(o), s = a.dataSync(), u = e.dataSync(), l = 0; l < s.length; ++l){
            for(var c = l * i, p = u[c], d = 0; d < i; ++d){
                var h = u[c + d];
                p = p || h;
            }
            s[l] = p;
        }
        return a;
    }, e241.prototype.squaredDifference = function(e265, t118) {
        return this.assertNotComplex([
            e265,
            t118
        ], "squaredDifference"), this.broadcastedBinaryOp(e265, t118, e265.dtype, function(e, t) {
            var n = e - t;
            return n * n;
        });
    }, e241.prototype.ceil = function(e) {
        this.assertNotComplex(e, "ceil");
        for(var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r)n[r] = Math.ceil(t[r]);
        return Tensor.make(e.shape, {
            values: n
        });
    }, e241.prototype.floor = function(e) {
        this.assertNotComplex(e, "floor");
        for(var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r)n[r] = Math.floor(t[r]);
        return Tensor.make(e.shape, {
            values: n
        });
    }, e241.prototype.sign = function(e) {
        this.assertNotComplex(e, "x");
        for(var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r)t[r] < 0 ? n[r] = -1 : t[r] > 0 ? n[r] = 1 : n[r] = 0;
        return Tensor.make(e.shape, {
            values: n
        });
    }, e241.prototype.round = function(e) {
        this.assertNotComplex(e, "round");
        for(var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r){
            var o = Math.floor(t[r]);
            t[r] - o < 0.5 ? n[r] = Math.floor(t[r]) : t[r] - o > 0.5 ? n[r] = Math.ceil(t[r]) : n[r] = o % 2 == 0 ? o : o + 1;
        }
        return Tensor.make(e.shape, {
            values: n
        });
    }, e241.prototype.exp = function(e) {
        this.assertNotComplex(e, "exp");
        for(var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r)n[r] = Math.exp(t[r]);
        return Tensor.make(e.shape, {
            values: n
        });
    }, e241.prototype.expm1 = function(e) {
        this.assertNotComplex(e, "expm1");
        for(var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r)n[r] = Math.expm1(t[r]);
        return Tensor.make(e.shape, {
            values: n
        });
    }, e241.prototype.log = function(e) {
        this.assertNotComplex(e, "log");
        for(var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r){
            var o = t[r];
            n[r] = Math.log(o);
        }
        return Tensor.make(e.shape, {
            values: n
        });
    }, e241.prototype.log1p = function(e) {
        this.assertNotComplex(e, "log1p");
        for(var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r){
            var o = t[r];
            n[r] = Math.log1p(o);
        }
        return Tensor.make(e.shape, {
            values: n
        });
    }, e241.prototype.sqrt = function(e) {
        this.assertNotComplex(e, "sqrt");
        for(var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r){
            var o = t[r];
            n[r] = Math.sqrt(o);
        }
        return Tensor.make(e.shape, {
            values: n
        });
    }, e241.prototype.rsqrt = function(e) {
        this.assertNotComplex(e, "rsqrt");
        for(var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r){
            var o = t[r];
            n[r] = 1 / Math.sqrt(o);
        }
        return Tensor.make(e.shape, {
            values: n
        });
    }, e241.prototype.square = function(e) {
        this.assertNotComplex(e, "square");
        for(var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r){
            var o = t[r];
            n[r] = o * o;
        }
        return Tensor.make(e.shape, {
            values: n
        });
    }, e241.prototype.reciprocal = function(e) {
        this.assertNotComplex(e, "reciprocal");
        for(var t = e.dataSync(), n = new Float32Array(t.length), r = 0; r < t.length; ++r)n[r] = 1 / t[r];
        return Tensor.make(e.shape, {
            values: n
        });
    }, e241.prototype.linear = function(e) {
        return e;
    }, e241.prototype.relu = function(e) {
        this.assertNotComplex(e, "relu");
        for(var t = zeros(e.shape, e.dtype), n = t.dataSync(), r = e.dataSync(), o = 0; o < r.length; ++o)n[o] = Math.max(0, r[o]);
        return t;
    }, e241.prototype.prelu = function(e266, t119) {
        return this.assertNotComplex([
            e266,
            t119
        ], "prelu"), this.broadcastedBinaryOp(e266, t119, e266.dtype, function(e, t) {
            return e < 0 ? t * e : e;
        });
    }, e241.prototype.elu = function(e) {
        this.assertNotComplex(e, "elu");
        for(var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r){
            var o = n[r];
            t[r] = o >= 0 ? o : Math.exp(o) - 1;
        }
        return Tensor.make(e.shape, {
            values: t
        });
    }, e241.prototype.eluDer = function(e, t) {
        this.assertNotComplex([
            e,
            t
        ], "eluDer");
        for(var n = new Float32Array(t.size), r = t.dataSync(), o = e.dataSync(), a = 0; a < r.length; ++a){
            var i = r[a];
            n[a] = i >= 1 ? o[a] : o[a] * (i + 1);
        }
        return Tensor.make(t.shape, {
            values: n
        });
    }, e241.prototype.selu = function(e) {
        this.assertNotComplex(e, "selu");
        for(var t = SELU_SCALEALPHA, n = SELU_SCALE, r = new Float32Array(e.size), o = e.dataSync(), a = 0; a < o.length; ++a){
            var i = o[a];
            r[a] = i >= 0 ? n * i : t * (Math.exp(i) - 1);
        }
        return Tensor.make(e.shape, {
            values: r
        });
    }, e241.prototype.clip = function(e, t, n) {
        this.assertNotComplex(e, "clip");
        for(var r = new Float32Array(e.size), o = e.dataSync(), a = 0; a < o.length; ++a){
            var i = o[a];
            r[a] = i > n ? n : i < t ? t : i;
        }
        return Tensor.make(e.shape, {
            values: r
        });
    }, e241.prototype.abs = function(e) {
        for(var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r)t[r] = Math.abs(n[r]);
        return Tensor.make(e.shape, {
            values: t
        });
    }, e241.prototype.complexAbs = function(e) {
        for(var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < e.size; ++r){
            var o = n[2 * r], a = n[2 * r + 1];
            t[r] = Math.hypot(o, a);
        }
        return Tensor.make(e.shape, {
            values: t
        });
    }, e241.prototype.int = function(e) {
        this.assertNotComplex(e, "int");
        for(var t = new Int32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r)t[r] = n[r];
        return Tensor.make(e.shape, {
            values: t
        }, "int32");
    }, e241.prototype.sigmoid = function(e) {
        this.assertNotComplex(e, "sigmoid");
        for(var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r)t[r] = 1 / (1 + Math.exp(-n[r]));
        return Tensor.make(e.shape, {
            values: t
        });
    }, e241.prototype.softplus = function(e) {
        this.assertNotComplex(e, "softplus");
        for(var t = Math.log(0.00000011920928955078125) + 2, n = new Float32Array(e.size), r = e.dataSync(), o = 0; o < r.length; ++o){
            var a = r[o] > -t, i = r[o] < t, s = Math.exp(r[o]), u = void 0;
            u = i ? s : a ? r[o] : Math.log(1 + s), n[o] = u;
        }
        return Tensor.make(e.shape, {
            values: n
        });
    }, e241.prototype.sin = function(e) {
        this.assertNotComplex(e, "sin");
        for(var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r)t[r] = Math.sin(n[r]);
        return Tensor.make(e.shape, {
            values: t
        });
    }, e241.prototype.cos = function(e) {
        this.assertNotComplex(e, "cos");
        for(var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r)t[r] = Math.cos(n[r]);
        return Tensor.make(e.shape, {
            values: t
        });
    }, e241.prototype.tan = function(e) {
        this.assertNotComplex(e, "tan");
        for(var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r)t[r] = Math.tan(n[r]);
        return Tensor.make(e.shape, {
            values: t
        });
    }, e241.prototype.asin = function(e) {
        this.assertNotComplex(e, "asin");
        for(var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r)t[r] = Math.asin(n[r]);
        return Tensor.make(e.shape, {
            values: t
        });
    }, e241.prototype.acos = function(e) {
        this.assertNotComplex(e, "acos");
        for(var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r)t[r] = Math.acos(n[r]);
        return Tensor.make(e.shape, {
            values: t
        });
    }, e241.prototype.atan = function(e) {
        this.assertNotComplex(e, "atan");
        for(var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r)t[r] = Math.atan(n[r]);
        return Tensor.make(e.shape, {
            values: t
        });
    }, e241.prototype.atan2 = function(e267, t120) {
        return this.assertNotComplex([
            e267,
            t120
        ], "atan2"), this.broadcastedBinaryOp(e267, t120, e267.dtype, function(e, t) {
            return Math.atan2(e, t);
        });
    }, e241.prototype.sinh = function(e) {
        this.assertNotComplex(e, "sinh");
        for(var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r)t[r] = Math.sinh(n[r]);
        return Tensor.make(e.shape, {
            values: t
        });
    }, e241.prototype.cosh = function(e) {
        this.assertNotComplex(e, "cosh");
        for(var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r)t[r] = Math.cosh(n[r]);
        return Tensor.make(e.shape, {
            values: t
        });
    }, e241.prototype.tanh = function(e) {
        this.assertNotComplex(e, "tanh");
        for(var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r)t[r] = tanh(n[r]);
        return Tensor.make(e.shape, {
            values: t
        });
    }, e241.prototype.asinh = function(e) {
        this.assertNotComplex(e, "asinh");
        for(var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r)t[r] = Math.asinh(n[r]);
        return Tensor.make(e.shape, {
            values: t
        });
    }, e241.prototype.acosh = function(e) {
        this.assertNotComplex(e, "acosh");
        for(var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r)t[r] = Math.acosh(n[r]);
        return Tensor.make(e.shape, {
            values: t
        });
    }, e241.prototype.atanh = function(e) {
        this.assertNotComplex(e, "atanh");
        for(var t = new Float32Array(e.size), n = e.dataSync(), r = 0; r < n.length; ++r)t[r] = Math.atanh(n[r]);
        return Tensor.make(e.shape, {
            values: t
        });
    }, e241.prototype.erf = function(e) {
        this.assertNotComplex(e, "erf");
        for(var t = new Float32Array(e.size), n = e.dataSync(), r = ERF_P, o = ERF_A1, a = ERF_A2, i = ERF_A3, s = ERF_A4, u = ERF_A5, l = 0; l < n.length; ++l){
            var c = n[l], p = 1 / (1 + r * c);
            t[l] = 1 - ((((u * p + s) * p + i) * p + a) * p + o) * p * Math.exp(-c * c);
        }
        return Tensor.make(e.shape, {
            values: t
        });
    }, e241.prototype.step = function(e, t) {
        void 0 === t && (t = 0), this.assertNotComplex(e, "step");
        for(var n = new Float32Array(e.size), r = e.dataSync(), o = 0; o < r.length; ++o){
            var a = r[o];
            isNaN(a) ? n[o] = NaN : n[o] = a > 0 ? 1 : t;
        }
        return Tensor.make(e.shape, {
            values: n
        });
    }, e241.prototype.conv2d = function(e, t, n) {
        this.assertNotComplex([
            e,
            t
        ], "conv2d");
        for(var r = n.filterHeight, o = n.filterWidth, a = n.dilationHeight, i = n.dilationWidth, s = n.padInfo.left, u = n.padInfo.top, l = buffer(n.outShape, e.dtype), c = e.dataSync(), p = t.dataSync(), d = l.values, h = 0; h < n.batchSize; ++h)for(var f = h * e.strides[0], m = h * l.strides[0], g = 0; g < n.outHeight; ++g)for(var v = m + g * l.strides[1], y = g * n.strideHeight - s, x = 0; x < r; x++){
            var T = y + x * a;
            if (!(T < 0 || T >= n.inHeight)) for(var w = x * t.strides[0], E = f + T * e.strides[1], b = 0; b < n.outWidth; ++b)for(var S = v + b * n.outChannels, C = b * n.strideWidth - u, A = 0; A < o; A++){
                var N = C + A * i;
                if (!(N < 0 || N >= n.inWidth)) for(var _ = w + A * t.strides[1], R = E + N * n.inChannels, I = _, k = 0; k < n.inChannels; ++k){
                    for(var D = c[R + k], O = 0; O < n.outChannels; ++O)d[S + O] += D * p[I + O];
                    I += n.outChannels;
                }
            }
        }
        return l.toTensor();
    }, e241.prototype.conv3d = function(e, t, n) {
        for(var r = n.filterDepth, o = n.filterHeight, a = n.filterWidth, i = n.dilationDepth, s = n.dilationHeight, u = n.dilationWidth, l = n.padInfo.front, c = n.padInfo.left, p = n.padInfo.top, d = buffer(n.outShape, e.dtype), h = e.dataSync(), f = t.dataSync(), m = d.values, g = 0; g < n.batchSize; ++g)for(var v = g * e.strides[0], y = g * d.strides[0], x = 0; x < n.outDepth; ++x)for(var T = y + x * d.strides[1], w = x * n.strideDepth - l, E = 0; E < r; E++){
            var b = w + E * i;
            if (!(b < 0 || b >= n.inDepth)) for(var S = E * t.strides[0], C = v + b * e.strides[1], A = 0; A < n.outHeight; ++A)for(var N = T + A * d.strides[2], _ = A * n.strideHeight - p, R = 0; R < o; R++){
                var I = _ + R * s;
                if (!(I < 0 || I >= n.inHeight)) for(var k = S + R * t.strides[1], D = C + I * e.strides[2], O = 0; O < n.outWidth; ++O)for(var M = N + O * n.outChannels, P = O * n.strideWidth - c, F = 0; F < a; F++){
                    var L = P + F * u;
                    if (!(L < 0 || L >= n.inWidth)) for(var B = k + F * t.strides[2], U = D + L * n.inChannels, V = B, z = 0; z < n.inChannels; ++z){
                        for(var W = h[U + z], H = 0; H < n.outChannels; ++H)m[M + H] += W * f[V + H];
                        V += n.outChannels;
                    }
                }
            }
        }
        return d.toTensor();
    }, e241.prototype.conv2dDerInput = function(e, t, n) {
        this.assertNotComplex([
            e,
            t
        ], "conv2dDerInput");
        for(var r = buffer(n.inShape, "float32"), o = r.values, a = r.strides, i = a[0], s = a[1], u = a[2], l = e.dataSync(), c = e.strides, p = c[0], d = c[1], h = c[2], f = t.dataSync(), m = t.strides, g = m[0], v = m[1], y = m[2], x = n.batchSize, T = n.filterHeight, w = n.filterWidth, E = n.inChannels, b = n.inHeight, S = n.inWidth, C = n.outChannels, A = n.outHeight, N = n.outWidth, _ = n.strideHeight, R = n.strideWidth, I = T - 1 - n.padInfo.top, k = w - 1 - n.padInfo.left, D = 0; D < x; ++D)for(var O = 0; O < E; ++O)for(var M = 0; M < b; ++M)for(var P = M - I, F = Math.max(0, Math.ceil(P / _)), L = Math.min(A, (T + P) / _), B = 0; B < S; ++B){
            for(var U = B - k, V = Math.max(0, Math.ceil(U / R)), z = Math.min(N, (w + U) / R), W = 0, H = F; H < L; ++H)for(var G = H * _ - P, q = V; q < z; ++q)for(var $ = p * D + d * H + h * q, X = g * (T - 1 - G) + v * (w - 1 - (q * R - U)) + y * O, K = 0; K < C; ++K)W += l[$ + K] * f[X + K];
            o[i * D + s * M + u * B + O] = W;
        }
        return r.toTensor();
    }, e241.prototype.conv3dDerInput = function(e, t, n) {
        for(var r = buffer(n.inShape, "float32"), o = r.values, a = r.strides, i = a[0], s = a[1], u = a[2], l = a[3], c = e.dataSync(), p = e.strides, d = p[0], h = p[1], f = p[2], m = p[3], g = t.dataSync(), v = t.strides, y = v[0], x = v[1], T = v[2], w = v[3], E = n.batchSize, b = n.filterDepth, S = n.filterHeight, C = n.filterWidth, A = n.inChannels, N = n.inDepth, _ = n.inHeight, R = n.inWidth, I = n.outChannels, k = n.outDepth, D = n.outHeight, O = n.outWidth, M = n.strideDepth, P = n.strideHeight, F = n.strideWidth, L = b - 1 - n.padInfo.front, B = S - 1 - n.padInfo.top, U = C - 1 - n.padInfo.left, V = 0; V < E; ++V)for(var z = 0; z < A; ++z)for(var W = 0; W < N; ++W)for(var H = W - L, G = Math.max(0, Math.ceil(H / M)), q = Math.min(k, (b + H) / M), $ = 0; $ < _; ++$)for(var X = $ - B, K = Math.max(0, Math.ceil(X / P)), j = Math.min(D, (S + X) / P), Y = 0; Y < R; ++Y){
            for(var Q = Y - U, J = Math.max(0, Math.ceil(Q / F)), Z = Math.min(O, (C + Q) / F), ee = 0, te = G; te < q; ++te)for(var ne = te * M - H, re = K; re < j; ++re)for(var oe = re * P - X, ae = J; ae < Z; ++ae)for(var ie = d * V + h * te + f * re + m * ae, se = y * (b - 1 - ne) + x * (S - 1 - oe) + T * (C - 1 - (ae * F - Q)) + w * z, ue = 0; ue < I; ++ue)ee += c[ie + ue] * g[se + ue];
            o[i * V + s * W + u * $ + l * Y + z] = ee;
        }
        return r.toTensor();
    }, e241.prototype.conv2dDerFilter = function(e, t, n) {
        this.assertNotComplex([
            e,
            t
        ], "conv2dDerFilter");
        for(var r = n.strideHeight, o = n.strideWidth, a = n.filterHeight, i = n.filterWidth, s = buffer(n.filterShape, "float32"), u = n.padInfo.left, l = n.padInfo.top, c = e.bufferSync(), p = t.bufferSync(), d = 0; d < a; ++d)for(var h = Math.max(0, Math.ceil((l - d) / r)), f = Math.min(n.outHeight, (n.inHeight + l - d) / r), m = 0; m < i; ++m)for(var g = Math.max(0, Math.ceil((u - m) / o)), v = Math.min(n.outWidth, (n.inWidth + u - m) / o), y = 0; y < n.inChannels; ++y)for(var x = 0; x < n.outChannels; ++x){
            for(var T = 0, w = 0; w < n.batchSize; ++w)for(var E = h; E < f; ++E)for(var b = d + E * r - l, S = g; S < v; ++S){
                var C = m + S * o - u;
                T += c.get(w, b, C, y) * p.get(w, E, S, x);
            }
            s.set(T, d, m, y, x);
        }
        return s.toTensor();
    }, e241.prototype.conv3dDerFilter = function(e, t, n) {
        for(var r = n.strideDepth, o = n.strideHeight, a = n.strideWidth, i = n.filterDepth, s = n.filterHeight, u = n.filterWidth, l = buffer(n.filterShape, "float32"), c = l.values, p = l.strides, d = p[0], h = p[1], f = p[2], m = p[3], g = t.dataSync(), v = t.strides, y = v[0], x = v[1], T = v[2], w = v[3], E = e.dataSync(), b = e.strides, S = b[0], C = b[1], A = b[2], N = b[3], _ = n.padInfo.front, R = n.padInfo.left, I = n.padInfo.top, k = 0; k < i; ++k)for(var D = Math.max(0, Math.ceil((_ - k) / r)), O = Math.min(n.outDepth, (n.inDepth + _ - k) / r), M = k * d, P = 0; P < s; ++P)for(var F = Math.max(0, Math.ceil((I - P) / o)), L = Math.min(n.outHeight, (n.inHeight + I - P) / o), B = P * h + M, U = 0; U < u; ++U)for(var V = Math.max(0, Math.ceil((R - U) / a)), z = Math.min(n.outWidth, (n.inWidth + R - U) / a), W = U * f + B, H = 0; H < n.inChannels; ++H)for(var G = H * m + W, q = 0; q < n.outChannels; ++q){
            for(var $ = 0, X = 0; X < n.batchSize; ++X)for(var K = X * S, j = X * y, Y = D; Y < O; ++Y)for(var Q = (k + Y * r - _) * C + K, J = Y * x + j, Z = F; Z < L; ++Z)for(var ee = (P + Z * o - I) * A + Q, te = Z * T + J, ne = V; ne < z; ++ne){
                var re = ne * w + te;
                $ += E[(U + ne * a - R) * N + ee + H] * g[re + q];
            }
            c[G + q] = $;
        }
        return l.toTensor();
    }, e241.prototype.depthwiseConv2D = function(e, t, n) {
        this.assertNotComplex([
            e,
            t
        ], "depthwiseConv2D");
        for(var r = n.filterHeight, o = n.filterWidth, a = n.dilationHeight, i = n.dilationWidth, s = n.padInfo.left, u = n.padInfo.top, l = n.outChannels / n.inChannels, c = buffer(n.outShape, e.dtype), p = e.dataSync(), d = t.dataSync(), h = c.values, f = 0; f < n.batchSize; ++f)for(var m = f * e.strides[0], g = f * c.strides[0], v = 0; v < n.outHeight; ++v)for(var y = g + v * c.strides[1], x = v * n.strideHeight - s, T = 0; T < r; ++T){
            var w = x + T * a;
            if (!(w < 0 || w >= n.inHeight)) for(var E = T * t.strides[0], b = m + w * e.strides[1], S = 0; S < n.outWidth; ++S)for(var C = y + S * c.strides[2], A = S * n.strideWidth - u, N = 0; N < o; ++N){
                var _ = A + N * i;
                if (!(_ < 0 || _ >= n.inWidth)) for(var R = E + N * t.strides[1], I = b + _ * n.inChannels, k = C, D = R, O = 0; O < n.inChannels; ++O){
                    for(var M = p[I + O], P = 0; P < l; ++P)h[k + P] += M * d[D + P];
                    k += l, D += l;
                }
            }
        }
        return c.toTensor();
    }, e241.prototype.depthwiseConv2DDerInput = function(e, t, n) {
        this.assertNotComplex([
            e,
            t
        ], "depthwiseConv2DDerInput");
        for(var r = buffer(n.inShape, "float32"), o = r.values, a = r.strides, i = a[0], s = a[1], u = a[2], l = e.dataSync(), c = e.strides, p = c[0], d = c[1], h = c[2], f = t.dataSync(), m = t.strides, g = m[0], v = m[1], y = m[2], x = n.batchSize, T = n.filterHeight, w = n.filterWidth, E = n.inChannels, b = n.inHeight, S = n.inWidth, C = n.outChannels, A = n.outHeight, N = n.outWidth, _ = n.strideHeight, R = n.strideWidth, I = T - 1 - n.padInfo.top, k = w - 1 - n.padInfo.left, D = C / E, O = 0; O < x; ++O)for(var M = 0; M < E; ++M)for(var P = 0; P < b; ++P)for(var F = P - I, L = Math.max(0, Math.ceil(F / _)), B = Math.min(A, (T + F) / _), U = 0; U < S; ++U){
            for(var V = U - k, z = Math.max(0, Math.ceil(V / R)), W = Math.min(N, (w + V) / R), H = 0, G = L; G < B; ++G)for(var q = G * _ - F, $ = z; $ < W; ++$)for(var X = p * O + d * G + h * $, K = g * (T - 1 - q) + v * (w - 1 - ($ * R - V)) + y * M, j = 0; j < D; ++j)H += l[X + (M * D + j)] * f[K + j];
            o[i * O + s * P + u * U + M] = H;
        }
        return r.toTensor();
    }, e241.prototype.depthwiseConv2DDerFilter = function(e, t, n) {
        this.assertNotComplex([
            e,
            t
        ], "depthwiseConv2DDerFilter");
        for(var r = n.strideHeight, o = n.strideWidth, a = n.filterHeight, i = n.filterWidth, s = buffer(n.filterShape, "float32"), u = n.padInfo.left, l = n.padInfo.top, c = n.outChannels / n.inChannels, p = e.bufferSync(), d = t.bufferSync(), h = 0; h < a; ++h)for(var f = Math.max(0, Math.ceil((l - h) / r)), m = Math.min(n.outHeight, (n.inHeight + l - h) / r), g = 0; g < i; ++g)for(var v = Math.max(0, Math.ceil((u - g) / o)), y = Math.min(n.outWidth, (n.inWidth + u - g) / o), x = 0; x < n.outChannels; ++x){
            for(var T = Math.trunc(x / c), w = x % c, E = 0, b = 0; b < n.batchSize; ++b)for(var S = f; S < m; ++S)for(var C = h + S * r - l, A = v; A < y; ++A){
                var N = g + A * o - u;
                E += p.get(b, C, N, T) * d.get(b, S, A, x);
            }
            s.set(E, h, g, T, w);
        }
        return s.toTensor();
    }, e241.prototype.tile = function(e, t) {
        this.assertNotComplex(e, "tile");
        for(var n = new Array(e.rank), r = 0; r < n.length; r++)n[r] = e.shape[r] * t[r];
        var o = buffer(n, e.dtype), a = e.bufferSync();
        for(r = 0; r < o.values.length; ++r){
            for(var i = o.indexToLoc(r), s = new Array(e.rank), u = 0; u < s.length; u++)s[u] = i[u] % e.shape[u];
            var l = a.locToIndex(s);
            o.values[r] = a.values[l];
        }
        return o.toTensor();
    }, e241.prototype.pad = function(e268, t121, n) {
        this.assertNotComplex(e268, "pad");
        var r = t121.map(function(t, n) {
            return t[0] + e268.shape[n] + t[1];
        }), o = t121.map(function(e) {
            return e[0];
        }), a = e268.bufferSync(), i = buffer(r, e268.dtype);
        0 !== n && i.values.fill(n);
        for(var s = 0; s < e268.size; s++){
            var u = a.indexToLoc(s), l = u.map(function(e, t) {
                return e + o[t];
            });
            i.set.apply(i, [
                a.get.apply(a, u)
            ].concat(l));
        }
        return i.toTensor();
    }, e241.prototype.transpose = function(e, t) {
        this.assertNotComplex(e, "transpose");
        for(var n = new Array(e.rank), r = 0; r < n.length; r++)n[r] = e.shape[t[r]];
        var o = e.dataSync(), a = buffer(n, e.dtype), i = e.bufferSync();
        for(r = 0; r < e.size; ++r){
            for(var s = i.indexToLoc(r), u = new Array(s.length), l = 0; l < u.length; l++)u[l] = s[t[l]];
            var c = a.locToIndex(u);
            a.values[c] = o[r];
        }
        return a.toTensor();
    }, e241.prototype.gather = function(e, t, n) {
        this.assertNotComplex([
            e,
            t
        ], "gather");
        var r = e.shape.slice(), o = t.dataSync();
        r[n] = o.length;
        for(var a = buffer(r, e.dtype), i = e.bufferSync(), s = 0; s < a.size; ++s){
            var u = a.indexToLoc(s), l = u.slice();
            l[n] = o[u[n]];
            var c = i.locToIndex(l);
            a.values[s] = i.values[c];
        }
        return a.toTensor();
    }, e241.prototype.batchToSpaceND = function(e269, t122, n) {
        this.assertNotComplex([
            e269
        ], "batchToSpaceND");
        var r = t122.reduce(function(e, t) {
            return e * t;
        }), o = getReshaped(e269.shape, t122, r), a = getPermuted(o.length, t122.length), i = getReshapedPermuted(e269.shape, t122, r), s = getSliceBeginCoords(n, t122.length), u = getSliceSize(i, n, t122.length);
        return e269.reshape(o).transpose(a).reshape(i).slice(s, u);
    }, e241.prototype.spaceToBatchND = function(e270, t123, n) {
        this.assertNotComplex([
            e270
        ], "spaceToBatchND");
        var r = t123.reduce(function(e, t) {
            return e * t;
        }), o = [
            [
                0,
                0
            ]
        ];
        o.push.apply(o, n);
        for(var a = 1 + t123.length; a < e270.shape.length; ++a)o.push([
            0,
            0
        ]);
        var i = e270.pad(o), s = getReshaped(i.shape, t123, r, !1), u = getPermuted(s.length, t123.length, !1), l = getReshapedPermuted(i.shape, t123, r, !1);
        return i.reshape(s).transpose(u).reshape(l);
    }, e241.prototype.pool = function(e, t, n) {
        this.assertNotComplex(e, "pool");
        for(var r = t.strideHeight, o = t.strideWidth, a = t.dilationHeight, i = t.dilationWidth, s = t.effectiveFilterHeight, u = t.effectiveFilterWidth, l = t.padInfo.top, c = t.padInfo.left, p = "max" === n ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, d = e.dataSync(), h = buffer(t.outShape, e.dtype), f = h.values, m = t.outShape[1] * t.outShape[2] * t.outShape[3], g = t.outShape[2] * t.outShape[3], v = t.outShape[3], y = 0; y < t.batchSize; ++y)for(var x = y * m, T = y * e.strides[0], w = 0; w < t.inChannels; ++w)for(var E = 0; E < t.outHeight; ++E)for(var b = E * r - l, S = Math.max(0, b), C = Math.min(t.inHeight, s + b), A = x + E * g, N = 0; N < t.outWidth; ++N){
            for(var _ = N * o - c, R = Math.max(0, _), I = Math.min(t.inWidth, u + _), k = p, D = 0, O = 0, M = S; M < C; M += a){
                for(var P = T + M * e.strides[1], F = R; F < I; F += i){
                    var L = d[P + F * e.strides[2] + w];
                    "max" === n && L > k ? k = L : "avg" === n && (D += L, O++);
                }
                if (isNaN(k)) break;
            }
            f[A + N * v + w] = "avg" === n ? D / O : k;
        }
        return h.toTensor();
    }, e241.prototype.maxPool = function(e, t) {
        return this.pool(e, t, "max");
    }, e241.prototype.maxPoolPositions = function(e, t) {
        for(var n = buffer(t.outShape, "int32"), r = t.strideHeight, o = t.strideWidth, a = t.dilationHeight, i = t.dilationWidth, s = t.effectiveFilterHeight, u = t.effectiveFilterWidth, l = t.padInfo.top, c = t.padInfo.left, p = e.bufferSync(), d = 0; d < t.batchSize; ++d)for(var h = 0; h < t.inChannels; ++h)for(var f = 0; f < t.outHeight; ++f){
            for(var m = f * r - l, g = m; g < 0;)g += a;
            for(var v = Math.min(t.inHeight, s + m), y = 0; y < t.outWidth; ++y){
                for(var x = y * o - c, T = x; T < 0;)T += i;
                for(var w = Math.min(t.inWidth, u + x), E = Number.NEGATIVE_INFINITY, b = -1, S = g; S < v; S += a)for(var C = S - m, A = T; A < w; A += i){
                    var N = A - x, _ = p.get(d, S, A, h);
                    _ > E && (E = _, b = C * u + N);
                }
                n.set(b, d, f, y, h);
            }
        }
        return n.toTensor();
    }, e241.prototype.maxPoolBackprop = function(e, t, n, r) {
        this.assertNotComplex([
            t,
            n
        ], "maxPoolBackprop");
        for(var o = this.maxPoolPositions(t, r), a = r.strideHeight, i = r.strideWidth, s = r.dilationHeight, u = r.dilationWidth, l = r.effectiveFilterHeight, c = r.effectiveFilterWidth, p = c - 1 - r.padInfo.left, d = l - 1 - r.padInfo.top, h = buffer(t.shape, "float32"), f = o.bufferSync(), m = e.bufferSync(), g = 0; g < r.batchSize; ++g)for(var v = 0; v < r.inChannels; ++v)for(var y = 0; y < r.inHeight; ++y)for(var x = 0; x < r.inWidth; ++x){
            for(var T = y - d, w = x - p, E = 0, b = 0; b < l; b += s){
                var S = (T + b) / a;
                if (!(S < 0 || S >= r.outHeight || Math.floor(S) !== S)) for(var C = 0; C < c; C += u){
                    var A = (w + C) / i;
                    if (!(A < 0 || A >= r.outWidth || Math.floor(A) !== A)) {
                        var N = l * c - 1 - f.get(g, S, A, v) === b * c + C ? 1 : 0;
                        if (0 !== N) E += m.get(g, S, A, v) * N;
                    }
                }
            }
            h.set(E, g, y, x, v);
        }
        return h.toTensor();
    }, e241.prototype.avgPoolBackprop = function(e, t, n) {
        this.assertNotComplex([
            e,
            t
        ], "avgPoolBackprop");
        for(var r = n.strideHeight, o = n.strideWidth, a = n.filterHeight, i = n.filterWidth, s = n.dilationHeight, u = n.dilationWidth, l = n.effectiveFilterHeight, c = n.effectiveFilterWidth, p = c - 1 - n.padInfo.left, d = l - 1 - n.padInfo.top, h = buffer(t.shape, "float32"), f = 1 / (a * i), m = e.bufferSync(), g = 0; g < n.batchSize; ++g)for(var v = 0; v < n.inChannels; ++v)for(var y = 0; y < n.inHeight; ++y)for(var x = 0; x < n.inWidth; ++x){
            for(var T = y - d, w = x - p, E = 0, b = 0; b < l; b += s){
                var S = (T + b) / r;
                if (!(S < 0 || S >= n.outHeight || Math.floor(S) !== S)) for(var C = 0; C < c; C += u){
                    var A = (w + C) / o;
                    if (!(A < 0 || A >= n.outWidth || Math.floor(A) !== A)) E += m.get(g, S, A, v);
                }
            }
            h.set(E * f, g, y, x, v);
        }
        return h.toTensor();
    }, e241.prototype.cast = function(e, t) {
        return castTensor(e, t, this);
    }, e241.prototype.reshape = function(e, t) {
        return reshapeTensor(e, t);
    }, e241.prototype.avgPool = function(e, t) {
        return this.assertNotComplex(e, "avgPool"), this.pool(e, t, "avg").toFloat();
    }, e241.prototype.resizeBilinear = function(e, t, n, r) {
        this.assertNotComplex(e, "resizeBilinear");
        for(var o = e.shape, a = o[0], i = o[1], s = o[2], u = o[3], l = e.dataSync(), c = new Float32Array(sizeFromShape([
            a,
            t,
            n,
            u
        ])), p = [
            r && t > 1 ? i - 1 : i,
            r && n > 1 ? s - 1 : s
        ], d = [
            r && t > 1 ? t - 1 : t,
            r && n > 1 ? n - 1 : n
        ], h = 0, f = p[0] / d[0], m = p[1] / d[1], g = 0; g < a; g++)for(var v = 0; v < t; v++)for(var y = f * v, x = Math.floor(y), T = y - x, w = Math.min(i - 1, Math.ceil(y)), E = g * e.strides[0] + x * e.strides[1], b = g * e.strides[0] + w * e.strides[1], S = 0; S < n; S++)for(var C = m * S, A = Math.floor(C), N = C - A, _ = Math.min(s - 1, Math.ceil(C)), R = E + A * e.strides[2], I = b + A * e.strides[2], k = E + +_ * e.strides[2], D = b + _ * e.strides[2], O = 0; O < u; O++){
            var M = l[R + O], P = l[I + O], F = M + (l[k + O] - M) * N, L = F + (P + (l[D + O] - P) * N - F) * T;
            c[h++] = L;
        }
        return tensor(c, [
            a,
            t,
            n,
            u
        ]);
    }, e241.prototype.resizeBilinearBackprop = function(e, t, n) {
        this.assertNotComplex([
            e,
            t
        ], "resizeBilinearBackprop");
        for(var r = t.shape, o = r[0], a = r[1], i = r[2], s = r[3], u = e.shape, l = u[1], c = u[2], p = new Float32Array(o * a * i * s), d = [
            n && l > 1 ? a - 1 : a,
            n && c > 1 ? i - 1 : i
        ], h = [
            n && l > 1 ? l - 1 : l,
            n && c > 1 ? c - 1 : c
        ], f = d[0] / h[0], m = d[1] / h[1], g = e.dataSync(), v = 0, y = 0; y < o; y++)for(var x = y * t.strides[0], T = 0; T < l; T++)for(var w = T * f, E = Math.floor(w), b = Math.min(Math.ceil(w), a - 1), S = x + E * t.strides[1], C = x + b * t.strides[1], A = w - E, N = 1 - A, _ = 0; _ < c; _++)for(var R = _ * m, I = Math.floor(R), k = Math.min(Math.ceil(R), i - 1), D = R - I, O = 1 - D, M = S + I * t.strides[2], P = S + k * t.strides[2], F = C + I * t.strides[2], L = C + k * t.strides[2], B = N * O, U = N * D, V = A * O, z = A * D, W = 0; W < s; W++){
            var H = g[v++];
            p[M + W] += H * B, p[P + W] += H * U, p[F + W] += H * V, p[L + W] += H * z;
        }
        return tensor4d(p, [
            o,
            i,
            a,
            s
        ], t.dtype);
    }, e241.prototype.resizeNearestNeighbor = function(e, t, n, r) {
        this.assertNotComplex(e, "resizeNearestNeighbor");
        for(var o = e.shape, a = o[0], i = o[1], s = o[2], u = o[3], l = e.dataSync(), c = new Float32Array(a * t * n * u), p = [
            r && t > 1 ? i - 1 : i,
            r && n > 1 ? s - 1 : s
        ], d = [
            r && t > 1 ? t - 1 : t,
            r && n > 1 ? n - 1 : n
        ], h = p[0] / d[0], f = p[1] / d[1], m = 0, g = 0; g < a; g++)for(var v = g * e.strides[0], y = 0; y < t; y++)for(var x = h * y, T = v + Math.min(i - 1, r ? Math.round(x) : Math.floor(x)) * e.strides[1], w = 0; w < n; w++)for(var E = f * w, b = T + Math.min(s - 1, r ? Math.round(E) : Math.floor(E)) * e.strides[2], S = 0; S < u; S++){
            var C = l[b + S];
            c[m++] = C;
        }
        return tensor(c, [
            a,
            t,
            n,
            u
        ], e.dtype);
    }, e241.prototype.resizeNearestNeighborBackprop = function(e, t, n) {
        this.assertNotComplex([
            e,
            t
        ], "resizeNearestNeighborBackprop");
        for(var r = t.shape, o = r[0], a = r[1], i = r[2], s = r[3], u = e.shape, l = u[1], c = u[2], p = new Float32Array(o * a * i * s), d = e.dataSync(), h = [
            n && l > 1 ? a - 1 : a,
            n && c > 1 ? i - 1 : i
        ], f = [
            n && l > 1 ? l - 1 : l,
            n && c > 1 ? c - 1 : c
        ], m = h[0] / f[0], g = h[1] / f[1], v = 1 / m, y = 1 / g, x = 2 * Math.ceil(v) + 2, T = 2 * Math.ceil(y) + 2, w = 0; w < o; w++)for(var E = w * t.strides[0], b = 0; b < a; b++)for(var S = E + b * t.strides[1], C = Math.floor(b * v), A = Math.floor(C - x / 2), N = 0; N < i; N++)for(var _ = S + N * t.strides[2], R = Math.floor(N * y), I = Math.floor(R - T / 2), k = 0; k < s; k++){
            for(var D = 0, O = 0; O < x; O++){
                var M = O + A;
                if (!(M < 0 || M >= l)) {
                    var P = E + M * e.strides[1], F = M * m;
                    if (b === Math.min(a - 1, n ? Math.round(F) : Math.floor(F))) for(var L = 0; L < T; L++){
                        var B = L + I;
                        if (!(B < 0 || B >= c)) {
                            var U = P + B * e.strides[2], V = B * g;
                            N === Math.min(i - 1, n ? Math.round(V) : Math.floor(V)) && (D += d[U + k]);
                        }
                    }
                }
            }
            p[_ + k] = D;
        }
        return tensor4d(p, t.shape, t.dtype);
    }, e241.prototype.batchNormalization = function(e, t, n, r, o, a) {
        this.assertNotComplex([
            e,
            t,
            n,
            o,
            a
        ], "batchNorm");
        for(var i = e.dataSync(), s = t.dataSync(), u = n.dataSync(), l = o ? o.dataSync() : new Float32Array([
            1
        ]), c = a ? a.dataSync() : new Float32Array([
            0
        ]), p = new Float32Array(i.length), d = c.length, h = l.length, f = u.length, m = s.length, g = 0, v = 0, y = 0, x = 0, T = 0; T < i.length; ++T)p[T] = c[g++] + (i[T] - s[v++]) * l[y++] / Math.sqrt(u[x++] + r), g >= d && (g = 0), v >= m && (v = 0), y >= h && (y = 0), x >= f && (x = 0);
        return tensor4d(p, e.shape);
    }, e241.prototype.localResponseNormalization4D = function(e271, t, n47, r24, o20) {
        this.assertNotComplex(e271, "localResponseNormalization4D");
        var a = e271.shape[3], i = a - 1, s = e271.dataSync(), u5 = sizeFromShape(e271.shape), l4 = new Float32Array(u5);
        function c(e) {
            for(var n = e % a, r = e - n + Math.max(0, n - t), o = e - n + Math.min(n + t, i), u = 0; r <= o; r++){
                var l = s[r];
                u += l * l;
            }
            return u;
        }
        for(var p = 0; p < u5; p++){
            var d = c(p), h = s[p] * Math.pow(n47 + r24 * d, -o20);
            l4[p] = h;
        }
        return tensor4d(l4, e271.shape);
    }, e241.prototype.LRNGrad = function(e, t, n, r, o, a, i) {
        this.assertNotComplex(e, "LRNGrad");
        for(var s = e.shape[3], u = e.dataSync(), l = t.dataSync(), c = n.dataSync(), p = new Float32Array(sizeFromShape(e.shape)), d = sizeFromShape(e.shape), h = 0; h < d; h++){
            for(var f = h % s, m = h - f + Math.max(0, f - r), g = h - f + Math.min(s, f + r + 1), v = 0, y = m; y < g; y++)v += Math.pow(l[y], 2);
            v = a * v + o;
            for(y = m; y < g; y++){
                var x = -2 * a * i * l[y] * c[h] / v;
                h === y && (x += Math.pow(v, -i)), x *= u[h], p[y] += x;
            }
        }
        return tensor4d(p, e.shape);
    }, e241.prototype.multinomial = function(e, t, n, r) {
        this.assertNotComplex(e, "multinomial");
        for(var o = t ? e : softmax(e), a = o.shape[0], i = o.shape[1], s = zeros([
            a,
            n
        ], "int32"), u = s.dataSync(), l = o.dataSync(), c = 0; c < a; ++c){
            var p = c * i, d = new Float32Array(i - 1);
            d[0] = l[p];
            for(var h = 1; h < d.length; ++h)d[h] = d[h - 1] + l[p + h];
            for(var f = seedrandom_1(r.toString()), m = c * n, g = 0; g < n; ++g){
                var v = f();
                u[m + g] = d.length;
                for(var y = 0; y < d.length; y++)if (v < d[y]) {
                    u[m + g] = y;
                    break;
                }
            }
        }
        return s;
    }, e241.prototype.oneHot = function(e, t, n, r) {
        this.assertNotComplex(e, "oneHot");
        var o = new Float32Array(e.size * t);
        o.fill(r);
        for(var a = e.dataSync(), i = 0; i < e.size; ++i)a[i] >= 0 && a[i] < t && (o[i * t + a[i]] = n);
        return tensor2d(o, [
            e.size,
            t
        ], "int32");
    }, e241.prototype.nonMaxSuppression = function(e, t, n, r, o) {
        return this.assertNotComplex(e, "nonMaxSuppression"), nonMaxSuppressionImpl(e.dataSync(), t.dataSync(), n, r, o);
    }, e241.prototype.fft = function(e) {
        return this.fftBatch(e, !1);
    }, e241.prototype.ifft = function(e) {
        return this.fftBatch(e, !0);
    }, e241.prototype.fftBatch = function(e, t) {
        for(var n = e.shape[0], r = e.shape[1], o = buffer(e.shape, "float32"), a = buffer(e.shape, "float32"), i = real(e).as2D(n, r), s = imag(e).as2D(n, r), u = 0; u < n; u++)for(var l = i.slice([
            u,
            0
        ], [
            1,
            r
        ]), c = s.slice([
            u,
            0
        ], [
            1,
            r
        ]), p = complex(l, c), d = this.fftImpl(p, t).dataSync(), h = 0; h < r; h++){
            var f = getComplexWithIndex(d, h);
            o.values[u * r + h] = f.real, a.values[u * r + h] = f.imag;
        }
        return complex(o.toTensor(), a.toTensor()).as2D(n, r);
    }, e241.prototype.fftImpl = function(e, t) {
        var n = e.as1D(), r = n.size;
        if (this.isExponentOf2(r)) {
            var o = this.fftRadix2(n, r, t).as2D(e.shape[0], e.shape[1]);
            return t && (o = complex(real(o).div(scalar(r)), imag(o).div(scalar(r)))), o;
        }
        var a = e.dataSync(), i = splitRealAndImagArrays(this.fourierTransformByMatmul(a, r, t));
        return complex(i.real, i.imag).as2D(e.shape[0], e.shape[1]);
    }, e241.prototype.isExponentOf2 = function(e) {
        return 0 == (e & e - 1);
    }, e241.prototype.fftRadix2 = function(e, t, n) {
        if (1 === t) return e;
        var r = e.dataSync(), o = t / 2, a = complexWithEvenIndex(r), i = complex(a.real, a.imag).as1D(), s = complexWithOddIndex(r), u = complex(s.real, s.imag).as1D();
        i = this.fftRadix2(i, o, n), u = this.fftRadix2(u, o, n);
        var l = exponents(t, n), c = complex(l.real, l.imag).mul(u), p = i.add(c), d = i.sub(c), h = real(p).concat(real(d)), f = imag(p).concat(imag(d));
        return complex(h, f).as1D();
    }, e241.prototype.fourierTransformByMatmul = function(e, t, n) {
        for(var r = new Float32Array(2 * t), o = 0; o < t; o++){
            for(var a = 0, i = 0, s = 0; s < t; s++){
                var u = exponent(o * s, t, n), l = getComplexWithIndex(e, s);
                a += l.real * u.real - l.imag * u.imag, i += l.real * u.imag + l.imag * u.real;
            }
            n && (a /= t, i /= t), assignToTypedArray(r, a, i, o);
        }
        return r;
    }, e241.prototype.depthToSpace = function(e, t, n) {
        assert("NHWC" === n, "Only NHWC dataFormat supported on CPU for depthToSpace. Got " + n), assert(t > 1, "blockSize should be > 1 for depthToSpace, but was: " + t);
        for(var r = e.shape[0], o = e.shape[1], a = e.shape[2], i = e.shape[3], s = o * t, u = a * t, l = i / (t * t), c = e.dataSync(), p = new Float32Array(r * s * u * l), d = 0, h = 0; h < r; ++h)for(var f = 0; f < s; ++f)for(var m = Math.floor(f / t), g = f % t, v = 0; v < u; ++v)for(var y = Math.floor(v / t), x = (g * t + v % t) * l, T = 0; T < l; ++T){
            var w = T + x + i * (y + a * (m + o * h));
            p[d++] = c[w];
        }
        return tensor4d(p, [
            r,
            s,
            u,
            l
        ]);
    }, e241.prototype.broadcastedBinaryOp = function(e, t, n48, r) {
        var o21 = assertAndGetBroadcastShape(e.shape, t.shape), a = buffer(o21, n48), i = e.dataSync(), s = t.dataSync(), u = getBroadcastDims(e.shape, o21), l = getBroadcastDims(t.shape, o21), c = a.values;
        if (u.length + l.length === 0) for(var p1 = 0; p1 < c.length; ++p1)c[p1] = r(i[p1 % i.length], s[p1 % s.length]);
        else {
            var d = e.bufferSync(), h = t.bufferSync(), f = function(n) {
                var o = a.indexToLoc(n), p = o.slice(-e.rank);
                u.forEach(function(e) {
                    return p[e] = 0;
                });
                var f = d.locToIndex(p), m = o.slice(-t.rank);
                l.forEach(function(e) {
                    return m[e] = 0;
                });
                var g = h.locToIndex(m);
                c[n] = r(i[f], s[g]);
            };
            for(p1 = 0; p1 < c.length; ++p1)f(p1);
        }
        return a.toTensor();
    }, e241.prototype.broadcastedBinaryComplexOp = function(e, t, n) {
        var r25 = assertAndGetBroadcastShape(e.shape, t.shape), o = buffer(r25, "float32"), a15 = buffer(r25, "float32"), i = e.dataSync(), s = t.dataSync(), u = getBroadcastDims(e.shape, r25), l = getBroadcastDims(t.shape, r25), c = o.values, p = a15.values;
        if (u.length + l.length === 0) for(var d2 = 0; d2 < c.length; d2++){
            var h = d2 % i.length, f = d2 % s.length, m = n(i[2 * h], i[2 * h + 1], s[2 * f], s[2 * f + 1]);
            c[d2] = m.real, p[d2] = m.imag;
        }
        else {
            var g = this.data.get(e.dataId).complexTensors.real.bufferSync(), v = this.data.get(t.dataId).complexTensors.real.bufferSync(), y1 = function(r) {
                var a = o.indexToLoc(r), d = a.slice(-e.rank);
                u.forEach(function(e) {
                    return d[e] = 0;
                });
                var h = g.locToIndex(d), f = a.slice(-t.rank);
                l.forEach(function(e) {
                    return f[e] = 0;
                });
                var m = v.locToIndex(f), y = n(i[2 * h], i[2 * h + 1], s[2 * m], s[2 * m + 1]);
                c[r] = y.real, p[r] = y.imag;
            };
            for(d2 = 0; d2 < c.length; d2++)y1(d2);
        }
        return this.complex(o.toTensor(), a15.toTensor());
    }, e241.prototype.split = function(e, t, n) {
        return split(e, t, n);
    }, e241.prototype.dispose = function() {
    }, e241.prototype.floatPrecision = function() {
        return 32;
    }, e241.prototype.cropAndResize = function(e, t, n, r, o, a) {
        for(var i = e.shape, s = i[0], u = i[1], l = i[2], c = i[3], p = t.shape[0], d = r[0], h = r[1], f = buffer([
            p,
            d,
            h,
            c
        ], e.dtype), m = t.dataSync(), g = n.dataSync(), v = e.dataSync(), y = e.strides, x = f.strides, T = 0; T < p; T++){
            var w = 4 * T, E = m[w], b = m[w + 1], S = m[w + 2], C = m[w + 3], A = g[T];
            if (!(A >= s)) for(var N = d > 1 ? (S - E) * (u - 1) / (d - 1) : 0, _ = h > 1 ? (C - b) * (l - 1) / (h - 1) : 0, R = 0; R < d; R++){
                var I = d > 1 ? E * (u - 1) + R * N : 0.5 * (E + S) * (u - 1);
                if (I < 0 || I > u - 1) for(var k = 0; k < h; k++)for(var D = 0; D < c; D++){
                    var O = D + k * x[2] + R * x[1] + T * x[0];
                    f.values[O] = a;
                }
                else if ("bilinear" === o) {
                    var M = Math.floor(I), P = Math.ceil(I), F = I - M;
                    for(k = 0; k < h; k++){
                        if ((q = h > 1 ? b * (l - 1) + k * _ : 0.5 * (b + C) * (l - 1)) < 0 || q > l - 1) for(D = 0; D < c; D++){
                            O = D + k * x[2] + R * x[1] + T * x[0];
                            f.values[O] = a;
                        }
                        else {
                            var L = Math.floor(q), B = Math.ceil(q), U = q - L;
                            for(D = 0; D < c; D++){
                                var V = v[O = D + L * y[2] + M * y[1] + A * y[0]], z = v[O = D + B * y[2] + M * y[1] + A * y[0]], W = v[O = D + L * y[2] + P * y[1] + A * y[0]], H = V + (z - V) * U, G = W + (v[O = D + B * y[2] + P * y[1] + A * y[0]] - W) * U;
                                O = D + k * x[2] + R * x[1] + T * x[0], f.values[O] = H + (G - H) * F;
                            }
                        }
                    }
                } else for(k = 0; k < h; ++k){
                    var q;
                    if ((q = h > 1 ? b * (l - 1) + k * _ : 0.5 * (b + C) * (l - 1)) < 0 || q > l - 1) for(D = 0; D < c; D++){
                        O = D + k * x[2] + R * x[1] + T * x[0];
                        f.values[O] = a;
                    }
                    else {
                        var $ = Math.round(q), X = Math.round(I);
                        for(D = 0; D < c; D++){
                            var K = D + $ * y[2] + X * y[1] + A * y[0], j = D + k * x[2] + R * x[1] + T * x[0];
                            f.values[j] = v[K];
                        }
                    }
                }
            }
        }
        return f.toTensor();
    }, e241.prototype.sparseToDense = function(e, t, n, r) {
        var o = calculateShapes(t, e, n), a = o.sliceRank, i = o.numUpdates, s = o.sliceSize, u = o.strides, l = o.outputSize;
        return this.scatter(e, t, n, l, s, i, a, u, r, !1);
    }, e241.prototype.gatherND = function(e, t) {
        var n = t.shape, r = n[n.length - 1], o = prepareAndValidate(e, t), a = o[0], i = o[1], s = o[2], u = o[3];
        if (0 === i) return tensor([], a, e.dtype);
        for(var l = new TensorBuffer([
            i,
            s
        ], e.dtype), c = t.dataSync(), p = e.dataSync(), d = 0; d < i; d++){
            for(var h = [], f = 0, m = 0; m < r; m++){
                var g = c[d * r + m];
                f += g * u[m], h.push(g);
            }
            if (f < 0 || f >= e.size / s) throw new Error("Invalid indices: " + h + " does not index into " + e.shape);
            for(var v = 0; v < s; v++)l.values[d * s + v] = p[f * s + v];
        }
        return l.toTensor().reshape(a);
    }, e241.prototype.scatterND = function(e, t, n) {
        var r = calculateShapes(t, e, n), o = r.sliceRank, a = r.numUpdates, i = r.sliceSize, s = r.strides, u = r.outputSize, l = scalar(0);
        return this.scatter(e, t, n, u, i, a, o, s, l, !0);
    }, e241.prototype.scatter = function(e, t, n, r, o, a, i, s, u, l) {
        var c = [
            r / o,
            o
        ], p = e.dataSync(), d = t.dataSync();
        if (0 === r) return tensor([], n, t.dtype);
        var h = new TensorBuffer(c, t.dtype);
        h.values.fill(u.dataSync()[0]);
        for(var f = 0; f < a; f++){
            for(var m = [], g = 0, v = 0; v < i; v++){
                var y = p[f * i + v];
                m.push(y), g += y * s[v];
            }
            if (g < 0 || g >= r / o) throw new Error("Invalid indices: " + m + " does not index into " + n);
            for(var x = 0; x < o; x++)l ? h.values[g * o + x] += d[f * o + x] : h.values[g * o + x] = 0 === t.rank ? d[0] : d[f * o + x];
        }
        return h.toTensor().reshape(n);
    }, e241;
}();
ENV.registerBackend("cpu", function() {
    return new MathBackendCPU;
}, 1, setTensorTracker);
var delayCallback = "undefined" != typeof requestAnimationFrame ? requestAnimationFrame : setImmediate;
function nextFrame() {
    return new Promise(function(e) {
        return delayCallback(function() {
            return e();
        });
    });
}
var DTYPE_VALUE_SIZE_MAP = {
    float32: 4,
    int32: 4,
    uint16: 2,
    uint8: 1,
    bool: 1
};
function encodeWeights(e) {
    return __awaiter(this, void 0, void 0, function() {
        var t, n, r, o;
        return __generator(this, function(a) {
            switch(a.label){
                case 0:
                    for(r in t = [], n = [], e){
                        if ("float32" !== (o = e[r]).dtype && "int32" !== o.dtype && "bool" !== o.dtype) throw new Error("Unsupported dtype in weight '" + r + "': " + o.dtype);
                        t.push({
                            name: r,
                            shape: o.shape,
                            dtype: o.dtype
                        }), n.push(o.data());
                    }
                    return [
                        4,
                        Promise.all(n)
                    ];
                case 1:
                    return [
                        2,
                        {
                            data: concatenateTypedArrays(a.sent()),
                            specs: t
                        }
                    ];
            }
        });
    });
}
function decodeWeights(e272, t124) {
    for(var n = {
    }, r = 0, o22 = function(t) {
        var o = t.name, a = t.dtype, i = t.shape, s = sizeFromShape(i), u = void 0;
        if (("quantization" in t)) {
            var l = t.quantization;
            if ("uint8" !== l.dtype && "uint16" !== l.dtype) throw new Error("Weight " + t.name + " has unknown quantization dtype " + l.dtype + ". Supported quantization dtypes are: 'uint8' and 'uint16'.");
            var c = DTYPE_VALUE_SIZE_MAP[l.dtype], p = e272.slice(r, r + s * c), d = "uint8" === l.dtype ? new Uint8Array(p) : new Uint16Array(p);
            if ("float32" === a) u = Float32Array.from(d, function(e) {
                return e * l.scale + l.min;
            });
            else {
                if ("int32" !== a) throw new Error("Unsupported dtype in weight '" + o + "': " + a);
                u = Int32Array.from(d, function(e) {
                    return Math.round(e * l.scale + l.min);
                });
            }
            r += s * c;
        } else {
            var h = DTYPE_VALUE_SIZE_MAP[a];
            p = e272.slice(r, r + s * h);
            if ("float32" === a) u = new Float32Array(p);
            else if ("int32" === a) u = new Int32Array(p);
            else {
                if ("bool" !== a) throw new Error("Unsupported dtype in weight '" + o + "': " + a);
                u = new Uint8Array(p);
            }
            r += s * h;
        }
        var f = void 0;
        if ("float32" === a) f = tensor(u, i, "float32");
        else if ("int32" === a) f = tensor(u, i, "int32");
        else {
            if ("bool" !== a) throw new Error("Unsupported dtype in weight '" + o + "': " + a);
            f = tensor(u, i, "bool");
        }
        n[o] = f;
    }, a16 = 0, i7 = t124; a16 < i7.length; a16++)o22(i7[a16]);
    return n;
}
function concatenateTypedArrays(e273) {
    if (null === e273) throw new Error("Invalid input value: " + JSON.stringify(e273));
    var t = 0, n = [];
    e273.forEach(function(e) {
        if (t += e.byteLength, n.push(e.byteLength === e.buffer.byteLength ? e : new e.constructor(e)), !(e instanceof Float32Array || e instanceof Int32Array || e instanceof Uint8Array)) throw new Error("Unsupported TypedArray subtype: " + e.constructor.name);
    });
    var r = new Uint8Array(t), o = 0;
    return n.forEach(function(e) {
        r.set(new Uint8Array(e.buffer), o), o += e.byteLength;
    }), r.buffer;
}
var useNodeBuffer = "undefined" != typeof Buffer && ("undefined" == typeof Blob || "undefined" == typeof atob || "undefined" == typeof btoa);
function stringByteLength(e) {
    return useNodeBuffer ? Buffer.byteLength(e) : new Blob([
        e
    ]).size;
}
function arrayBufferToBase64String(e) {
    return useNodeBuffer ? Buffer.from(e).toString("base64") : btoa(String.fromCharCode.apply(null, new Uint8Array(e)));
}
function base64StringToArrayBuffer(e) {
    if (useNodeBuffer) {
        var t = Buffer.from(e, "base64");
        return t.buffer.slice(t.byteOffset, t.byteOffset + t.byteLength);
    }
    for(var n = atob(e), r = new Uint8Array(n.length), o = 0; o < n.length; ++o)r.set([
        n.charCodeAt(o)
    ], o);
    return r.buffer;
}
function concatenateArrayBuffers(e274) {
    var t = 0;
    e274.forEach(function(e) {
        t += e.byteLength;
    });
    var n = new Uint8Array(t), r = 0;
    return e274.forEach(function(e) {
        n.set(new Uint8Array(e), r), r += e.byteLength;
    }), n.buffer;
}
function basename(e) {
    for(e = e.trim(); e.endsWith("/");)e = e.slice(0, e.length - 1);
    var t = e.split("/");
    return t[t.length - 1];
}
function getModelArtifactsInfoForJSON(e) {
    if (e.modelTopology instanceof ArrayBuffer) throw new Error("Expected JSON model topology, received ArrayBuffer.");
    return {
        dateSaved: new Date,
        modelTopologyType: "JSON",
        modelTopologyBytes: null == e.modelTopology ? 0 : stringByteLength(JSON.stringify(e.modelTopology)),
        weightSpecsBytes: null == e.weightSpecs ? 0 : stringByteLength(JSON.stringify(e.weightSpecs)),
        weightDataBytes: null == e.weightData ? 0 : e.weightData.byteLength
    };
}
var IORouterRegistry = function() {
    function e275() {
        this.saveRouters = [], this.loadRouters = [];
    }
    return e275.getInstance = function() {
        return null == e275.instance && (e275.instance = new e275), e275.instance;
    }, e275.registerSaveRouter = function(t) {
        e275.getInstance().saveRouters.push(t);
    }, e275.registerLoadRouter = function(t) {
        e275.getInstance().loadRouters.push(t);
    }, e275.getSaveHandlers = function(t) {
        return e275.getHandlers(t, "save");
    }, e275.getLoadHandlers = function(t, n) {
        return e275.getHandlers(t, "load", n);
    }, e275.getHandlers = function(e, t125, n) {
        var r = [];
        return ("load" === t125 ? this.getInstance().loadRouters : this.getInstance().saveRouters).forEach(function(t) {
            var o = t(e, n);
            null !== o && r.push(o);
        }), r;
    }, e275;
}(), registerSaveRouter = function(e) {
    return IORouterRegistry.registerSaveRouter(e);
}, registerLoadRouter = function(e) {
    return IORouterRegistry.registerLoadRouter(e);
}, getSaveHandlers = function(e) {
    return IORouterRegistry.getSaveHandlers(e);
}, getLoadHandlers = function(e, t) {
    return IORouterRegistry.getLoadHandlers(e);
}, URL_SCHEME_SUFFIX = "://", ModelStoreManagerRegistry = function() {
    function e276() {
        this.managers = {
        };
    }
    return e276.getInstance = function() {
        return null == e276.instance && (e276.instance = new e276), e276.instance;
    }, e276.registerManager = function(t, n) {
        assert(null != t, "scheme must not be undefined or null."), t.endsWith(URL_SCHEME_SUFFIX) && (t = t.slice(0, t.indexOf(URL_SCHEME_SUFFIX))), assert(t.length > 0, "scheme must not be an empty string.");
        var r = e276.getInstance();
        assert(null == r.managers[t], "A model store manager is already registered for scheme '" + t + "'."), r.managers[t] = n;
    }, e276.getManager = function(e) {
        var t = this.getInstance().managers[e];
        if (null == t) throw new Error("Cannot find model manager for scheme '" + e + "'");
        return t;
    }, e276.getSchemes = function() {
        return Object.keys(this.getInstance().managers);
    }, e276;
}();
function parseURL(e) {
    if (-1 === e.indexOf(URL_SCHEME_SUFFIX)) throw new Error("The url string provided does not contain a scheme. Supported schemes are: " + ModelStoreManagerRegistry.getSchemes().join(","));
    return {
        scheme: e.split(URL_SCHEME_SUFFIX)[0],
        path: e.split(URL_SCHEME_SUFFIX)[1]
    };
}
function cloneModelInternal(e, t, n) {
    return void 0 === n && (n = !1), __awaiter(this, void 0, void 0, function() {
        var r, o, a, i, s, u, l, c, p;
        return __generator(this, function(d) {
            switch(d.label){
                case 0:
                    return assert(e !== t, "Old path and new path are the same: '" + e + "'"), assert((r = IORouterRegistry.getLoadHandlers(e)).length > 0, "Copying failed because no load handler is found for source URL " + e + "."), assert(r.length < 2, "Copying failed because more than one (" + r.length + ") load handlers for source URL " + e + "."), o = r[0], assert((a = IORouterRegistry.getSaveHandlers(t)).length > 0, "Copying failed because no save handler is found for destination URL " + t + "."), assert(a.length < 2, "Copying failed because more than one (" + r.length + ") save handlers for destination URL " + t + "."), i = a[0], s = parseURL(e).scheme, u = parseURL(e).path, l = s === parseURL(e).scheme, [
                        4,
                        o.load()
                    ];
                case 1:
                    return c = d.sent(), n && l ? [
                        4,
                        ModelStoreManagerRegistry.getManager(s).removeModel(u)
                    ] : [
                        3,
                        3
                    ];
                case 2:
                    d.sent(), d.label = 3;
                case 3:
                    return [
                        4,
                        i.save(c)
                    ];
                case 4:
                    return p = d.sent(), !n || l ? [
                        3,
                        6
                    ] : [
                        4,
                        ModelStoreManagerRegistry.getManager(s).removeModel(u)
                    ];
                case 5:
                    d.sent(), d.label = 6;
                case 6:
                    return [
                        2,
                        p.modelArtifactsInfo
                    ];
            }
        });
    });
}
function listModels() {
    return __awaiter(this, void 0, void 0, function() {
        var e, t, n, r, o, a, i;
        return __generator(this, function(s) {
            switch(s.label){
                case 0:
                    e = ModelStoreManagerRegistry.getSchemes(), t = {
                    }, n = 0, r = e, s.label = 1;
                case 1:
                    return n < r.length ? (o = r[n], [
                        4,
                        ModelStoreManagerRegistry.getManager(o).listModels()
                    ]) : [
                        3,
                        4
                    ];
                case 2:
                    for(i in a = s.sent())t[o + URL_SCHEME_SUFFIX + i] = a[i];
                    s.label = 3;
                case 3:
                    return n++, [
                        3,
                        1
                    ];
                case 4:
                    return [
                        2,
                        t
                    ];
            }
        });
    });
}
function removeModel(e) {
    return __awaiter(this, void 0, void 0, function() {
        var t;
        return __generator(this, function(n) {
            switch(n.label){
                case 0:
                    return t = parseURL(e), [
                        4,
                        ModelStoreManagerRegistry.getManager(t.scheme).removeModel(t.path)
                    ];
                case 1:
                    return [
                        2,
                        n.sent()
                    ];
            }
        });
    });
}
function copyModel(e, t) {
    return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(n) {
            switch(n.label){
                case 0:
                    return [
                        4,
                        cloneModelInternal(e, t, !1)
                    ];
                case 1:
                    return [
                        2,
                        n.sent()
                    ];
            }
        });
    });
}
function moveModel(e, t) {
    return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(n) {
            switch(n.label){
                case 0:
                    return [
                        4,
                        cloneModelInternal(e, t, !0)
                    ];
                case 1:
                    return [
                        2,
                        n.sent()
                    ];
            }
        });
    });
}
var DATABASE_NAME = "tensorflowjs", DATABASE_VERSION = 1, MODEL_STORE_NAME = "models_store", INFO_STORE_NAME = "model_info_store";
function getIndexedDBFactory() {
    if (!ENV.get("IS_BROWSER")) throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
    var e = window, t = e.indexedDB || e.mozIndexedDB || e.webkitIndexedDB || e.msIndexedDB || e.shimIndexedDB;
    if (null == t) throw new Error("The current browser does not appear to support IndexedDB.");
    return t;
}
function setUpDatabase(e) {
    var t = e.result;
    t.createObjectStore(MODEL_STORE_NAME, {
        keyPath: "modelPath"
    }), t.createObjectStore(INFO_STORE_NAME, {
        keyPath: "modelPath"
    });
}
var BrowserIndexedDB = function() {
    function e277(e) {
        if (this.indexedDB = getIndexedDBFactory(), null == e || !e) throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
        this.modelPath = e;
    }
    return e277.prototype.save = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                if (e.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
                return [
                    2,
                    this.databaseAction(this.modelPath, e)
                ];
            });
        });
    }, e277.prototype.load = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                return [
                    2,
                    this.databaseAction(this.modelPath)
                ];
            });
        });
    }, e277.prototype.databaseAction = function(e278, t126) {
        var n = this;
        return new Promise(function(e, r) {
            var o23 = n.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
            o23.onupgradeneeded = function() {
                return setUpDatabase(o23);
            }, o23.onsuccess = function() {
                var a = o23.result;
                if (null == t126) {
                    var i = a.transaction(MODEL_STORE_NAME, "readonly"), s = i.objectStore(MODEL_STORE_NAME).get(n.modelPath);
                    s.onsuccess = function() {
                        if (null == s.result) return a.close(), r(new Error("Cannot find model with path '" + n.modelPath + "' in IndexedDB."));
                        e(s.result.modelArtifacts);
                    }, s.onerror = function(e) {
                        return a.close(), r(s.error);
                    }, i.oncomplete = function() {
                        return a.close();
                    };
                } else {
                    var u, l = getModelArtifactsInfoForJSON(t126), c = a.transaction(INFO_STORE_NAME, "readwrite"), p = c.objectStore(INFO_STORE_NAME), d = p.put({
                        modelPath: n.modelPath,
                        modelArtifactsInfo: l
                    });
                    d.onsuccess = function() {
                        var o = (u = a.transaction(MODEL_STORE_NAME, "readwrite")).objectStore(MODEL_STORE_NAME).put({
                            modelPath: n.modelPath,
                            modelArtifacts: t126,
                            modelArtifactsInfo: l
                        });
                        o.onsuccess = function() {
                            return e({
                                modelArtifactsInfo: l
                            });
                        }, o.onerror = function(e) {
                            var t = (p = c.objectStore(INFO_STORE_NAME)).delete(n.modelPath);
                            t.onsuccess = function() {
                                return a.close(), r(o.error);
                            }, t.onerror = function(e) {
                                return a.close(), r(o.error);
                            };
                        };
                    }, d.onerror = function(e) {
                        return a.close(), r(d.error);
                    }, c.oncomplete = function() {
                        null == u ? a.close() : u.oncomplete = function() {
                            return a.close();
                        };
                    };
                }
            }, o23.onerror = function(e) {
                return r(o23.error);
            };
        });
    }, e277.URL_SCHEME = "indexeddb://", e277;
}(), indexedDBRouter = function(e) {
    return ENV.get("IS_BROWSER") && !Array.isArray(e) && e.startsWith(BrowserIndexedDB.URL_SCHEME) ? browserIndexedDB(e.slice(BrowserIndexedDB.URL_SCHEME.length)) : null;
};
function browserIndexedDB(e) {
    return new BrowserIndexedDB(e);
}
function maybeStripScheme(e) {
    return e.startsWith(BrowserIndexedDB.URL_SCHEME) ? e.slice(BrowserIndexedDB.URL_SCHEME.length) : e;
}
IORouterRegistry.registerSaveRouter(indexedDBRouter), IORouterRegistry.registerLoadRouter(indexedDBRouter);
var BrowserIndexedDBManager = function() {
    function e279() {
        this.indexedDB = getIndexedDBFactory();
    }
    return e279.prototype.listModels = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e280 = this;
            return __generator(this, function(t127) {
                return [
                    2,
                    new Promise(function(t, n49) {
                        var r26 = e280.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
                        r26.onupgradeneeded = function() {
                            return setUpDatabase(r26);
                        }, r26.onsuccess = function() {
                            var e281 = r26.result, o24 = e281.transaction(INFO_STORE_NAME, "readonly"), a = o24.objectStore(INFO_STORE_NAME).getAll();
                            a.onsuccess = function() {
                                for(var e = {
                                }, n = 0, r = a.result; n < r.length; n++){
                                    var o = r[n];
                                    e[o.modelPath] = o.modelArtifactsInfo;
                                }
                                t(e);
                            }, a.onerror = function(t) {
                                return e281.close(), n49(a.error);
                            }, o24.oncomplete = function() {
                                return e281.close();
                            };
                        }, r26.onerror = function(e) {
                            return n49(r26.error);
                        };
                    })
                ];
            });
        });
    }, e279.prototype.removeModel = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            var t128 = this;
            return __generator(this, function(n50) {
                return e = maybeStripScheme(e), [
                    2,
                    new Promise(function(n, r) {
                        var o25 = t128.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);
                        o25.onupgradeneeded = function() {
                            return setUpDatabase(o25);
                        }, o25.onsuccess = function() {
                            var t, a = o25.result, i8 = a.transaction(INFO_STORE_NAME, "readwrite"), s = i8.objectStore(INFO_STORE_NAME), u = s.get(e);
                            u.onsuccess = function() {
                                if (null == u.result) return a.close(), r(new Error("Cannot find model with path '" + e + "' in IndexedDB."));
                                var o26 = s.delete(e), i = function() {
                                    var o = (t = a.transaction(MODEL_STORE_NAME, "readwrite")).objectStore(MODEL_STORE_NAME).delete(e);
                                    o.onsuccess = function() {
                                        return n(u.result.modelArtifactsInfo);
                                    }, o.onerror = function(e) {
                                        return r(u.error);
                                    };
                                };
                                o26.onsuccess = i, o26.onerror = function(e) {
                                    return i(), a.close(), r(u.error);
                                };
                            }, u.onerror = function(e) {
                                return a.close(), r(u.error);
                            }, i8.oncomplete = function() {
                                null == t ? a.close() : t.oncomplete = function() {
                                    return a.close();
                                };
                            };
                        }, o25.onerror = function(e) {
                            return r(o25.error);
                        };
                    })
                ];
            });
        });
    }, e279;
}();
if (ENV.get("IS_BROWSER")) try {
    ModelStoreManagerRegistry.registerManager(BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager);
} catch (e) {
}
var PATH_SEPARATOR = "/", PATH_PREFIX = "tensorflowjs_models", INFO_SUFFIX = "info", MODEL_TOPOLOGY_SUFFIX = "model_topology", WEIGHT_SPECS_SUFFIX = "weight_specs", WEIGHT_DATA_SUFFIX = "weight_data";
function getModelKeys(e282) {
    return {
        info: [
            PATH_PREFIX,
            e282,
            INFO_SUFFIX
        ].join(PATH_SEPARATOR),
        topology: [
            PATH_PREFIX,
            e282,
            MODEL_TOPOLOGY_SUFFIX
        ].join(PATH_SEPARATOR),
        weightSpecs: [
            PATH_PREFIX,
            e282,
            WEIGHT_SPECS_SUFFIX
        ].join(PATH_SEPARATOR),
        weightData: [
            PATH_PREFIX,
            e282,
            WEIGHT_DATA_SUFFIX
        ].join(PATH_SEPARATOR)
    };
}
function getModelPathFromKey(e283) {
    var t = e283.split(PATH_SEPARATOR);
    if (t.length < 3) throw new Error("Invalid key format: " + e283);
    return t.slice(1, t.length - 1).join(PATH_SEPARATOR);
}
function maybeStripScheme$1(e284) {
    return e284.startsWith(BrowserLocalStorage.URL_SCHEME) ? e284.slice(BrowserLocalStorage.URL_SCHEME.length) : e284;
}
var BrowserLocalStorage = function() {
    function e285(e286) {
        if (!ENV.get("IS_BROWSER") || void 0 === window.localStorage) throw new Error("The current environment does not support local storage.");
        if (this.LS = window.localStorage, null == e286 || !e286) throw new Error("For local storage, modelPath must not be null, undefined or empty.");
        this.modelPath = e286, this.keys = getModelKeys(this.modelPath);
    }
    return e285.prototype.save = function(e287) {
        return __awaiter(this, void 0, void 0, function() {
            var t, n, r, o;
            return __generator(this, function(a) {
                if (e287.modelTopology instanceof ArrayBuffer) throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
                t = JSON.stringify(e287.modelTopology), n = JSON.stringify(e287.weightSpecs), r = getModelArtifactsInfoForJSON(e287);
                try {
                    return this.LS.setItem(this.keys.info, JSON.stringify(r)), this.LS.setItem(this.keys.topology, t), this.LS.setItem(this.keys.weightSpecs, n), this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(e287.weightData)), [
                        2,
                        {
                            modelArtifactsInfo: r
                        }
                    ];
                } catch (e) {
                    for(o in this.keys)this.LS.removeItem(this.keys[o]);
                    throw new Error("Failed to save model '" + this.modelPath + "' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=" + r.modelTopologyBytes + ", weightSpecsBytes=" + r.weightSpecsBytes + ", weightDataBytes=" + r.weightDataBytes + ".");
                }
                return [
                    2
                ];
            });
        });
    }, e285.prototype.load = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e288, t, n, r, o;
            return __generator(this, function(a) {
                if (null == (e288 = JSON.parse(this.LS.getItem(this.keys.info)))) throw new Error("In local storage, there is no model with name '" + this.modelPath + "'");
                if ("JSON" !== e288.modelTopologyType) throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
                if (t = {
                }, null == (n = JSON.parse(this.LS.getItem(this.keys.topology)))) throw new Error("In local storage, the topology of model '" + this.modelPath + "' is missing.");
                if (t.modelTopology = n, null == (r = JSON.parse(this.LS.getItem(this.keys.weightSpecs)))) throw new Error("In local storage, the weight specs of model '" + this.modelPath + "' are missing.");
                if (t.weightSpecs = r, null == (o = this.LS.getItem(this.keys.weightData))) throw new Error("In local storage, the binary weight values of model '" + this.modelPath + "' are missing.");
                return t.weightData = base64StringToArrayBuffer(o), [
                    2,
                    t
                ];
            });
        });
    }, e285.URL_SCHEME = "localstorage://", e285;
}(), localStorageRouter = function(e289) {
    return ENV.get("IS_BROWSER") && !Array.isArray(e289) && e289.startsWith(BrowserLocalStorage.URL_SCHEME) ? browserLocalStorage(e289.slice(BrowserLocalStorage.URL_SCHEME.length)) : null;
};
function browserLocalStorage(e290) {
    return new BrowserLocalStorage(e290);
}
IORouterRegistry.registerSaveRouter(localStorageRouter), IORouterRegistry.registerLoadRouter(localStorageRouter);
var BrowserLocalStorageManager = function() {
    function e291() {
        assert(ENV.get("IS_BROWSER"), "Current environment is not a web browser"), assert(void 0 !== window.localStorage, "Current browser does not appear to support localStorage"), this.LS = window.localStorage;
    }
    return e291.prototype.listModels = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e292, t, n, r, o, a;
            return __generator(this, function(i) {
                for(e292 = {
                }, t = PATH_PREFIX + PATH_SEPARATOR, n = PATH_SEPARATOR + INFO_SUFFIX, r = 0; r < this.LS.length; ++r)(o = this.LS.key(r)).startsWith(t) && o.endsWith(n) && (a = getModelPathFromKey(o), e292[a] = JSON.parse(this.LS.getItem(o)));
                return [
                    2,
                    e292
                ];
            });
        });
    }, e291.prototype.removeModel = function(e293) {
        return __awaiter(this, void 0, void 0, function() {
            var t, n;
            return __generator(this, function(r) {
                if (e293 = maybeStripScheme$1(e293), t = getModelKeys(e293), null == this.LS.getItem(t.info)) throw new Error("Cannot find model at path '" + e293 + "'");
                return n = JSON.parse(this.LS.getItem(t.info)), this.LS.removeItem(t.info), this.LS.removeItem(t.topology), this.LS.removeItem(t.weightSpecs), this.LS.removeItem(t.weightData), [
                    2,
                    n
                ];
            });
        });
    }, e291;
}();
if (ENV.get("IS_BROWSER")) try {
    ModelStoreManagerRegistry.registerManager(BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager);
} catch (e294) {
}
var DEFAULT_FILE_NAME_PREFIX = "model", DEFAULT_JSON_EXTENSION_NAME = ".json", DEFAULT_WEIGHT_DATA_EXTENSION_NAME = ".weights.bin", BrowserDownloads = function() {
    function e295(t) {
        if (!ENV.get("IS_BROWSER")) throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
        t.startsWith(e295.URL_SCHEME) && (t = t.slice(e295.URL_SCHEME.length)), null != t && 0 !== t.length || (t = DEFAULT_FILE_NAME_PREFIX), this.modelTopologyFileName = t + DEFAULT_JSON_EXTENSION_NAME, this.weightDataFileName = t + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;
    }
    return e295.prototype.save = function(e296) {
        return __awaiter(this, void 0, void 0, function() {
            var t, n, r, o, a, i;
            return __generator(this, function(s) {
                if (t = window.URL.createObjectURL(new Blob([
                    e296.weightData
                ], {
                    type: "application/octet-stream"
                })), e296.modelTopology instanceof ArrayBuffer) throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
                return n = [
                    {
                        paths: [
                            "./" + this.weightDataFileName
                        ],
                        weights: e296.weightSpecs
                    }
                ], r = {
                    modelTopology: e296.modelTopology,
                    weightsManifest: n
                }, o = window.URL.createObjectURL(new Blob([
                    JSON.stringify(r)
                ], {
                    type: "application/json"
                })), (a = null == this.jsonAnchor ? document.createElement("a") : this.jsonAnchor).download = this.modelTopologyFileName, a.href = o, a.click(), null != e296.weightData && ((i = null == this.weightDataAnchor ? document.createElement("a") : this.weightDataAnchor).download = this.weightDataFileName, i.href = t, i.click()), [
                    2,
                    {
                        modelArtifactsInfo: getModelArtifactsInfoForJSON(e296)
                    }
                ];
            });
        });
    }, e295.URL_SCHEME = "downloads://", e295;
}(), BrowserFiles = function() {
    function e297(e298) {
        if (null == e298 || e298.length < 1) throw new Error("When calling browserFiles, at least 1 file is required, but received " + e298);
        this.files = e298;
    }
    return e297.prototype.load = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e299, t129, n51 = this;
            return __generator(this, function(r27) {
                return e299 = this.files[0], t129 = this.files.slice(1), [
                    2,
                    new Promise(function(r, o) {
                        var a17 = new FileReader;
                        a17.onload = function(a) {
                            var i = JSON.parse(a.target.result), s = i.modelTopology;
                            if (null != s) {
                                0 === t129.length && r({
                                    modelTopology: s
                                });
                                var u = i.weightsManifest;
                                if (null != u) {
                                    var l;
                                    try {
                                        l = n51.checkManifestAndWeightFiles(u, t129);
                                    } catch (e300) {
                                        return void o(e300);
                                    }
                                    var c = [], p = [], d = [];
                                    u.forEach(function(e301) {
                                        e301.paths.forEach(function(e302) {
                                            p.push(e302), d.push(null);
                                        }), c.push.apply(c, e301.weights);
                                    }), u.forEach(function(e303) {
                                        e303.paths.forEach(function(e304) {
                                            var t130 = new FileReader;
                                            t130.onload = function(t) {
                                                var n = t.target.result, o = p.indexOf(e304);
                                                d[o] = n, -1 === d.indexOf(null) && r({
                                                    modelTopology: s,
                                                    weightSpecs: c,
                                                    weightData: concatenateArrayBuffers(d)
                                                });
                                            }, t130.onerror = function(t) {
                                                return o("Failed to weights data from file of path '" + e304 + "'.");
                                            }, t130.readAsArrayBuffer(l[e304]);
                                        });
                                    });
                                } else o(new Error("weightManifest field is missing from file " + e299.name));
                            } else o(new Error("modelTopology field is missing from file " + e299.name));
                        }, a17.onerror = function(t) {
                            return o("Failed to read model topology and weights manifest JSON from file '" + e299.name + "'. BrowserFiles supports loading Keras-style tf.Model artifacts only.");
                        }, a17.readAsText(e299);
                    })
                ];
            });
        });
    }, e297.prototype.checkManifestAndWeightFiles = function(e305, t) {
        for(var n = [], r = t.map(function(e306) {
            return basename(e306.name);
        }), o = {
        }, a18 = 0, i = e305; a18 < i.length; a18++)i[a18].paths.forEach(function(e307) {
            var a = basename(e307);
            if (-1 !== n.indexOf(a)) throw new Error("Duplicate file basename found in weights manifest: '" + a + "'");
            if (n.push(a), -1 === r.indexOf(a)) throw new Error("Weight file with basename '" + a + "' is not provided.");
            o[e307] = t[r.indexOf(a)];
        });
        if (n.length !== t.length) throw new Error("Mismatch in the number of files in weights manifest (" + n.length + ") and the number of weight files provided (" + t.length + ").");
        return o;
    }, e297;
}(), browserDownloadsRouter = function(e308) {
    return ENV.get("IS_BROWSER") && !Array.isArray(e308) && e308.startsWith(BrowserDownloads.URL_SCHEME) ? browserDownloads(e308.slice(BrowserDownloads.URL_SCHEME.length)) : null;
};
function browserDownloads(e309) {
    return void 0 === e309 && (e309 = "model"), new BrowserDownloads(e309);
}
function browserFiles(e310) {
    return new BrowserFiles(e310);
}
function loadWeightsAsArrayBuffer(e311, t, n, r) {
    return __awaiter(this, void 0, void 0, function() {
        var o, a, i;
        return __generator(this, function(s) {
            switch(s.label){
                case 0:
                    return null == n && (n = fetch), o = e311.map(function(e312) {
                        return n(e312, t);
                    }), null != r && monitorPromisesProgress(o, r, 0, 0.5), [
                        4,
                        Promise.all(o)
                    ];
                case 1:
                    return a = s.sent(), i = a.map(function(e313) {
                        return e313.arrayBuffer();
                    }), null != r && monitorPromisesProgress(i, r, 0.5, 1), [
                        4,
                        Promise.all(i)
                    ];
                case 2:
                    return [
                        2,
                        s.sent()
                    ];
            }
        });
    });
}
function loadWeights(e314, t, n, r) {
    return void 0 === t && (t = ""), __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(o) {
            return [
                2,
                weightsLoaderFactory(function(e315) {
                    return loadWeightsAsArrayBuffer(e315, r);
                })(e314, t, n)
            ];
        });
    });
}
function weightsLoaderFactory(e316) {
    var t131 = this;
    return function(n52, r28, o27) {
        return void 0 === r28 && (r28 = ""), __awaiter(t131, void 0, void 0, function() {
            var t132, a, i9, s8, u6, l5, c3, p, d, h;
            return __generator(this, function(f) {
                switch(f.label){
                    case 0:
                        if (t132 = n52.map(function() {
                            return !1;
                        }), a = {
                        }, i9 = null != o27 ? o27.map(function() {
                            return !1;
                        }) : [], s8 = [], n52.forEach(function(e317, n) {
                            var r = 0;
                            e317.weights.forEach(function(e318) {
                                var u = "quantization" in e318 ? e318.quantization.dtype : e318.dtype, l = DTYPE_VALUE_SIZE_MAP[u] * sizeFromShape(e318.shape), c = function() {
                                    t132[n] = !0, null == a[n] && (a[n] = []), a[n].push({
                                        manifestEntry: e318,
                                        groupOffset: r,
                                        sizeBytes: l
                                    });
                                };
                                null != o27 ? o27.forEach(function(t, n) {
                                    t === e318.name && (c(), i9[n] = !0);
                                }) : c(), s8.push(e318.name), r += l;
                            });
                        }), !i9.every(function(e319) {
                            return e319;
                        })) throw u6 = o27.filter(function(e, t) {
                            return !i9[t];
                        }), new Error("Could not find weights in manifest with names: " + u6.join(", ") + ". \nManifest JSON has weights with names: " + s8.join(", ") + ".");
                        return l5 = t132.reduce(function(e320, t, n) {
                            return t && e320.push(n), e320;
                        }, []), c3 = [], l5.forEach(function(e321) {
                            n52[e321].paths.forEach(function(e322) {
                                var t = r28 + (r28.endsWith("/") ? "" : "/") + e322;
                                c3.push(t);
                            });
                        }), [
                            4,
                            e316(c3)
                        ];
                    case 1:
                        return p = f.sent(), d = {
                        }, h = 0, l5.forEach(function(e323) {
                            for(var t133 = n52[e323].paths.length, r = 0, o = 0; o < t133; o++)r += p[h + o].byteLength;
                            for(var i = new ArrayBuffer(r), s = new Uint8Array(i), u = 0, l = 0; l < t133; l++){
                                var c = new Uint8Array(p[h + l]);
                                s.set(c, u), u += c.byteLength;
                            }
                            a[e323].forEach(function(e324) {
                                var t = decodeWeights(i.slice(e324.groupOffset, e324.groupOffset + e324.sizeBytes), [
                                    e324.manifestEntry
                                ]);
                                for(var n in t)d[n] = t[n];
                            }), h += t133;
                        }), [
                            2,
                            d
                        ];
                }
            });
        });
    };
}
IORouterRegistry.registerSaveRouter(browserDownloadsRouter);
var OCTET_STREAM_MIME_TYPE = "application/octet-stream", JSON_TYPE = "application/json", BrowserHTTPRequest = function() {
    function e325(e326, t134, n, r, o) {
        if (this.weightPathPrefix = n, this.onProgress = o, this.DEFAULT_METHOD = "POST", null == r) {
            if ("undefined" == typeof fetch) throw new Error("browserHTTPRequest is not supported outside the web browser without a fetch polyfill.");
            r = fetch.bind("undefined" == typeof window ? null : window);
        } else assert("function" == typeof r, "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)");
        if (this.fetchFunc = function(e327, t135) {
            return r(e327, t135).catch(function(t) {
                throw new Error("Request for " + e327 + " failed due to error: " + t);
            });
        }, assert(null != e326 && e326.length > 0, "URL path for browserHTTPRequest must not be null, undefined or empty."), Array.isArray(e326) && assert(2 === e326.length, "URL paths for browserHTTPRequest must have a length of 2, (actual length is " + e326.length + ")."), this.path = e326, null != t134 && null != t134.body) throw new Error("requestInit is expected to have no pre-existing body, but has one.");
        this.requestInit = t134 || {
        };
    }
    return e325.prototype.save = function(e328) {
        return __awaiter(this, void 0, void 0, function() {
            var t, n, r, o;
            return __generator(this, function(a) {
                switch(a.label){
                    case 0:
                        if (e328.modelTopology instanceof ArrayBuffer) throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
                        return (t = Object.assign({
                            method: this.DEFAULT_METHOD
                        }, this.requestInit)).body = new FormData, n = [
                            {
                                paths: [
                                    "./model.weights.bin"
                                ],
                                weights: e328.weightSpecs
                            }
                        ], r = {
                            modelTopology: e328.modelTopology,
                            weightsManifest: n
                        }, t.body.append("model.json", new Blob([
                            JSON.stringify(r)
                        ], {
                            type: JSON_TYPE
                        }), "model.json"), null != e328.weightData && t.body.append("model.weights.bin", new Blob([
                            e328.weightData
                        ], {
                            type: OCTET_STREAM_MIME_TYPE
                        }), "model.weights.bin"), [
                            4,
                            this.getFetchFunc()(this.path, t)
                        ];
                    case 1:
                        if ((o = a.sent()).ok) return [
                            2,
                            {
                                modelArtifactsInfo: getModelArtifactsInfoForJSON(e328),
                                responses: [
                                    o
                                ]
                            }
                        ];
                        throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status " + o.status + ".");
                }
            });
        });
    }, e325.prototype.load = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                return [
                    2,
                    Array.isArray(this.path) ? this.loadBinaryModel() : this.loadJSONModel()
                ];
            });
        });
    }, e325.prototype.loadBinaryTopology = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e329;
            return __generator(this, function(t) {
                switch(t.label){
                    case 0:
                        return [
                            4,
                            this.getFetchFunc()(this.path[0], this.requestInit)
                        ];
                    case 1:
                        if (!(e329 = t.sent()).ok) throw new Error("Request to " + this.path[0] + " failed with error: " + e329.statusText);
                        return [
                            4,
                            e329.arrayBuffer()
                        ];
                    case 2:
                        return [
                            2,
                            t.sent()
                        ];
                }
            });
        });
    }, e325.prototype.loadBinaryModel = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e330, t, n, r, o, a, i, s;
            return __generator(this, function(u) {
                switch(u.label){
                    case 0:
                        return e330 = this.loadBinaryTopology(), [
                            4,
                            this.getFetchFunc()(this.path[1], this.requestInit)
                        ];
                    case 1:
                        if (!(t = u.sent()).ok) throw new Error("Request to " + this.path[1] + " failed with error: " + t.statusText);
                        return [
                            4,
                            Promise.all([
                                e330,
                                t
                            ])
                        ];
                    case 2:
                        return n = u.sent(), r = n[0], [
                            4,
                            n[1].json()
                        ];
                    case 3:
                        return null == (o = u.sent()) ? [
                            3,
                            5
                        ] : [
                            4,
                            this.loadWeights(o)
                        ];
                    case 4:
                        s = u.sent(), a = s[0], i = s[1], u.label = 5;
                    case 5:
                        return [
                            2,
                            {
                                modelTopology: r,
                                weightSpecs: a,
                                weightData: i
                            }
                        ];
                }
            });
        });
    }, e325.prototype.loadJSONModel = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e331, t, n, r, o, a, i, s;
            return __generator(this, function(u) {
                switch(u.label){
                    case 0:
                        return [
                            4,
                            this.getFetchFunc()(this.path, this.requestInit)
                        ];
                    case 1:
                        if (!(e331 = u.sent()).ok) throw new Error("Request to " + this.path + " failed with error: " + e331.statusText);
                        return [
                            4,
                            e331.json()
                        ];
                    case 2:
                        if (t = u.sent(), n = t.modelTopology, r = t.weightsManifest, null == n && null == r) throw new Error("The JSON from HTTP path " + this.path + " contains neither model topology or manifest for weights.");
                        return null == r ? [
                            3,
                            4
                        ] : (i = t.weightsManifest, [
                            4,
                            this.loadWeights(i)
                        ]);
                    case 3:
                        s = u.sent(), o = s[0], a = s[1], u.label = 4;
                    case 4:
                        return [
                            2,
                            {
                                modelTopology: n,
                                weightSpecs: o,
                                weightData: a
                            }
                        ];
                }
            });
        });
    }, e325.prototype.loadWeights = function(e332) {
        return __awaiter(this, void 0, void 0, function() {
            var t, n, r, o, a, i, s, u, l, c, p, d;
            return __generator(this, function(h) {
                switch(h.label){
                    case 0:
                        for(t = Array.isArray(this.path) ? this.path[1] : this.path, n = parseUrl(t), r = n[0], o = n[1], a = this.weightPathPrefix || r, i = [], s = 0, u = e332; s < u.length; s++)l = u[s], i.push.apply(i, l.weights);
                        return c = [], e332.forEach(function(e333) {
                            e333.paths.forEach(function(e334) {
                                c.push(a + e334 + o);
                            });
                        }), p = [
                            i
                        ], d = concatenateArrayBuffers, [
                            4,
                            loadWeightsAsArrayBuffer(c, this.requestInit, this.getFetchFunc(), this.onProgress)
                        ];
                    case 1:
                        return [
                            2,
                            p.concat([
                                d.apply(void 0, [
                                    h.sent()
                                ])
                            ])
                        ];
                }
            });
        });
    }, e325.prototype.getFetchFunc = function() {
        return this.fetchFunc;
    }, e325.URL_SCHEME_REGEX = /^https?:\/\//, e325;
}();
function parseUrl(e335) {
    var t = e335.lastIndexOf("/"), n = e335.lastIndexOf("?");
    return [
        e335.substring(0, t) + "/",
        n > t ? e335.substring(n) : ""
    ];
}
function isHTTPScheme(e336) {
    return null != e336.match(BrowserHTTPRequest.URL_SCHEME_REGEX);
}
var httpRequestRouter = function(e337, t) {
    if ("undefined" == typeof fetch) return null;
    return (Array.isArray(e337) ? e337.every(function(e338) {
        return isHTTPScheme(e338);
    }) : isHTTPScheme(e337)) ? browserHTTPRequest(e337, null, null, null, t) : null;
};
function browserHTTPRequest(e339, t, n, r, o) {
    return new BrowserHTTPRequest(e339, t, n, r, o);
}
IORouterRegistry.registerSaveRouter(httpRequestRouter), IORouterRegistry.registerLoadRouter(httpRequestRouter);
var PassthroughLoader = function() {
    function e340(e341, t, n) {
        this.modelTopology = e341, this.weightSpecs = t, this.weightData = n;
    }
    return e340.prototype.load = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e342;
            return __generator(this, function(t) {
                return e342 = {
                }, null != this.modelTopology && (e342 = __assign({
                    modelTopology: this.modelTopology
                }, e342)), null != this.weightSpecs && this.weightSpecs.length > 0 && (e342 = __assign({
                    weightSpecs: this.weightSpecs
                }, e342)), null != this.weightData && this.weightData.byteLength > 0 && (e342 = __assign({
                    weightData: this.weightData
                }, e342)), [
                    2,
                    e342
                ];
            });
        });
    }, e340;
}(), PassthroughSaver = function() {
    function e343(e344) {
        this.saveHandler = e344;
    }
    return e343.prototype.save = function(e345) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [
                    2,
                    this.saveHandler(e345)
                ];
            });
        });
    }, e343;
}();
function fromMemory(e346, t, n) {
    return new PassthroughLoader(e346, t, n);
}
function withSaveHandler(e347) {
    return new PassthroughSaver(e347);
}
var io = Object.freeze({
    browserFiles: browserFiles,
    browserHTTPRequest: browserHTTPRequest,
    concatenateArrayBuffers: concatenateArrayBuffers,
    decodeWeights: decodeWeights,
    encodeWeights: encodeWeights,
    fromMemory: fromMemory,
    getLoadHandlers: getLoadHandlers,
    getModelArtifactsInfoForJSON: getModelArtifactsInfoForJSON,
    getSaveHandlers: getSaveHandlers,
    isHTTPScheme: isHTTPScheme,
    loadWeights: loadWeights,
    registerLoadRouter: registerLoadRouter,
    registerSaveRouter: registerSaveRouter,
    weightsLoaderFactory: weightsLoaderFactory,
    withSaveHandler: withSaveHandler,
    copyModel: copyModel,
    listModels: listModels,
    moveModel: moveModel,
    removeModel: removeModel
});
function confusionMatrix_(e348, t, n) {
    var r = convertToTensor(e348, "labels", "confusionMatrix"), o = convertToTensor(t, "predictions", "confusionMatrix");
    assert(null == n || n > 0 && Number.isInteger(n), "If provided, numClasses must be a positive integer, but got " + n), assert(1 === r.rank, "Expected the rank of labels to be 1, but got " + r.rank), assert(1 === o.rank, "Expected the rank of predictions to be 1, but got " + o.rank), assert(r.shape[0] === o.shape[0], "Mismatch in the number of examples: " + r.shape[0] + " vs. " + o.shape[0] + ". Labels and predictions should have the same number of elements."), assert(n > 0 && Number.isInteger(n), "numClasses is required to be a positive integer, but got " + n);
    var a = oneHot(r.asType("int32"), n), i = oneHot(o.asType("int32"), n);
    return a.transpose().matMul(i).asType("int32");
}
var confusionMatrix = op({
    confusionMatrix_: confusionMatrix_
}), math = Object.freeze({
    confusionMatrix: confusionMatrix
}), Serializable = function() {
    function e349() {
    }
    return e349.prototype.getClassName = function() {
        return this.constructor.className;
    }, e349.fromConfig = function(e350, t) {
        return new e350(t);
    }, e349;
}(), SerializationMap = function() {
    function e351() {
        this.classNameMap = {
        };
    }
    return e351.getMap = function() {
        return null == e351.instance && (e351.instance = new e351), e351.instance;
    }, e351.register = function(t) {
        e351.getMap().classNameMap[t.className] = [
            t,
            t.fromConfig
        ];
    }, e351;
}();
function registerClass(e352) {
    assert(null != e352.className, "Class being registered does not have the static className property defined."), assert("string" == typeof e352.className, "className is required to be a string, but got type " + typeof e352.className), assert(e352.className.length > 0, "Class being registered has an empty-string as its className, which is disallowed."), SerializationMap.register(e352);
}
var serialization = Object.freeze({
    Serializable: Serializable,
    SerializationMap: SerializationMap,
    registerClass: registerClass
}), WEBGL_ENVS = {
    HAS_WEBGL: !0
}, PACKED_ENVS = {
    WEBGL_PACK: !0
}, NODE_ENVS = {
    IS_NODE: !0
}, CHROME_ENVS = {
    IS_CHROME: !0
}, BROWSER_ENVS = {
    IS_BROWSER: !0
}, CPU_ENVS = {
    HAS_WEBGL: !1
}, ALL_ENVS = {
};
function expectArraysClose(e353, t136, n) {
    return null == n && (n = ENV.get("TEST_EPSILON")), expectArraysPredicate(e353, "number" == typeof t136 || "boolean" == typeof t136 ? [
        t136
    ] : t136, function(e354, t) {
        return areClose(e354, Number(t), n);
    });
}
function expectArraysPredicate(e355, t, n) {
    if (e355 instanceof Tensor || t instanceof Tensor) {
        if (e355 instanceof Tensor && t instanceof Tensor) {
            if (e355.dtype !== t.dtype) throw new Error("Arrays are of different type actual: " + e355.dtype + " vs expected: " + t.dtype + ".");
            if (!arraysEqual(e355.shape, t.shape)) throw new Error("Arrays are of different shape actual: " + e355.shape + " vs expected: " + t.shape + ".");
        }
    } else {
        var r = e355.constructor.name, o = t.constructor.name;
        if (r !== o) throw new Error("Arrays are of different type actual: " + r + " vs expected: " + o);
    }
    var a, i;
    if (a = e355 instanceof Tensor ? e355.dataSync() : e355, i = t instanceof Tensor ? t.dataSync() : t, a.length !== i.length) throw new Error("Arrays have different lengths actual: " + a.length + " vs expected: " + i.length + ".\nActual:   " + a + ".\nExpected: " + i + ".");
    for(var s = 0; s < i.length; ++s){
        var u = a[s], l = i[s];
        if (!n(u, l)) throw new Error("Arrays differ: actual[" + s + "] = " + u + ", expected[" + s + "] = " + l + ".\nActual:   " + a + ".\nExpected: " + i + ".");
    }
}
function expectPromiseToFail(e356, t) {
    e356().then(function() {
        return t.fail();
    }, function() {
        return t();
    });
}
function expectArraysEqual(e357, t137) {
    var n = "string" == typeof t137 || "number" == typeof t137 || "boolean" == typeof t137 ? [
        t137
    ] : t137;
    return e357 instanceof Tensor && "string" === e357.dtype || t137 instanceof Tensor && "string" === t137.dtype || Array.isArray(e357) && isString(e357[0]) || Array.isArray(t137) && isString(t137[0]) ? expectArraysPredicate(e357, n, function(e358, t) {
        return e358 == t;
    }) : expectArraysClose(e357, t137, 0);
}
function expectNumbersClose(e359, t, n) {
    if (null == n && (n = ENV.get("TEST_EPSILON")), !areClose(e359, t, n)) throw new Error("Numbers differ: actual === " + e359 + ", expected === " + t);
}
function areClose(e360, t, n) {
    return !(!isNaN(e360) || !isNaN(t)) || !(isNaN(e360) || isNaN(t) || Math.abs(e360 - t) > n);
}
function expectValuesInRange(e361, t, n) {
    var r;
    r = e361 instanceof Tensor ? e361.dataSync() : e361;
    for(var o = 0; o < r.length; o++)if (r[o] < t || r[o] > n) throw new Error("Value out of range:" + r[o] + " low: " + t + ", high: " + n);
}
function expectArrayBuffersEqual(e362, t) {
    expect(new Float32Array(e362)).toEqual(new Float32Array(t));
}
var test_util = Object.freeze({
    WEBGL_ENVS: WEBGL_ENVS,
    PACKED_ENVS: PACKED_ENVS,
    NODE_ENVS: NODE_ENVS,
    CHROME_ENVS: CHROME_ENVS,
    BROWSER_ENVS: BROWSER_ENVS,
    CPU_ENVS: CPU_ENVS,
    ALL_ENVS: ALL_ENVS,
    expectArraysClose: expectArraysClose,
    expectPromiseToFail: expectPromiseToFail,
    expectArraysEqual: expectArraysEqual,
    expectNumbersClose: expectNumbersClose,
    expectValuesInRange: expectValuesInRange,
    expectArrayBuffersEqual: expectArrayBuffersEqual
}), version = "0.15.4", webgl = Object.freeze({
    gpgpu_util: gpgpu_util,
    webgl_util: webgl_util,
    MathBackendWebGL: MathBackendWebGL,
    GPGPUContext: GPGPUContext
}), Optimizer = function(e363) {
    function t138() {
        return null !== e363 && e363.apply(this, arguments) || this;
    }
    return __extends(t138, e363), t138.prototype.minimize = function(e364, t, n) {
        void 0 === t && (t = !1);
        var r = this.computeGradients(e364, n), o = r.value, a = r.grads;
        return this.applyGradients(a), Object.keys(a).forEach(function(e) {
            return a[e].dispose();
        }), t ? o : (o.dispose(), null);
    }, t138.prototype.computeGradients = function(e365, t) {
        return variableGrads(e365, t);
    }, t138;
}(Serializable);
Object.defineProperty(Optimizer, Symbol.hasInstance, {
    value: function(e366) {
        return null != e366.minimize && null != e366.computeGradients && null != e366.applyGradients;
    }
});
var AdadeltaOptimizer = function(e367) {
    function t139(t, n, r) {
        void 0 === r && (r = null);
        var o = e367.call(this) || this;
        return o.learningRate = t, o.rho = n, o.epsilon = r, o.accumulatedGrads = {
        }, o.accumulatedUpdates = {
        }, o.c = keep(scalar(-t)), o.rhoScalar = keep(scalar(n)), o.oneMinusRho = keep(scalar(1 - n)), null === r && (r = ENV.get("EPSILON")), o.epsilonScalar = keep(scalar(r)), o;
    }
    return __extends(t139, e367), t139.prototype.applyGradients = function(e368) {
        var t = this, n = function(n) {
            var o = ENV.engine.registeredVariables[n];
            if (null == r29.accumulatedGrads[n]) tidy(function() {
                t.accumulatedGrads[n] = zerosLike(o).variable(!1);
            });
            if (null == r29.accumulatedUpdates[n]) tidy(function() {
                t.accumulatedUpdates[n] = zerosLike(o).variable(!1);
            });
            var a = e368[n], i = r29.accumulatedGrads[n], s = r29.accumulatedUpdates[n];
            tidy(function() {
                var e369 = t.rhoScalar.mul(i).add(t.oneMinusRho.mul(a.square())), r = s.add(t.epsilonScalar).sqrt().div(i.add(t.epsilonScalar).sqrt()).mul(a), u = t.rhoScalar.mul(s).add(t.oneMinusRho.mul(r.square()));
                t.accumulatedGrads[n].assign(e369), t.accumulatedUpdates[n].assign(u);
                var l = t.c.mul(r).add(o);
                o.assign(l);
            });
        }, r29 = this;
        for(var o28 in e368)n(o28);
    }, t139.prototype.dispose = function() {
        var e370 = this;
        this.c.dispose(), this.epsilonScalar.dispose(), this.rhoScalar.dispose(), this.oneMinusRho.dispose(), null != this.accumulatedUpdates && (Object.keys(this.accumulatedUpdates).forEach(function(t) {
            return e370.accumulatedUpdates[t].dispose();
        }), Object.keys(this.accumulatedGrads).forEach(function(t) {
            return e370.accumulatedGrads[t].dispose();
        }));
    }, t139.prototype.getConfig = function() {
        return {
            learningRate: this.learningRate,
            rho: this.rho,
            epsilon: this.epsilon
        };
    }, t139.fromConfig = function(e371, t) {
        return new e371(t.learningRate, t.rho, t.epsilon);
    }, t139.className = "AdadeltaOptimizer", t139;
}(Optimizer);
registerClass(AdadeltaOptimizer);
var AdagradOptimizer = function(e372) {
    function t140(t, n) {
        void 0 === n && (n = 0.1);
        var r = e372.call(this) || this;
        return r.learningRate = t, r.initialAccumulatorValue = n, r.accumulatedGrads = {
        }, r.c = keep(scalar(-t)), r.epsilon = keep(scalar(ENV.get("EPSILON"))), r;
    }
    return __extends(t140, e372), t140.prototype.applyGradients = function(e373) {
        var t = this, n = function(n) {
            var o = ENV.engine.registeredVariables[n];
            if (null == r30.accumulatedGrads[n]) tidy(function() {
                t.accumulatedGrads[n] = fill(o.shape, t.initialAccumulatorValue).variable(!1);
            });
            var a = e373[n], i = r30.accumulatedGrads[n];
            tidy(function() {
                var e374 = i.add(a.square());
                t.accumulatedGrads[n].assign(e374);
                var r = t.c.mul(a.div(e374.add(t.epsilon).sqrt())).add(o);
                o.assign(r);
            });
        }, r30 = this;
        for(var o29 in e373)n(o29);
    }, t140.prototype.dispose = function() {
        var e375 = this;
        this.epsilon.dispose(), this.c.dispose(), null != this.accumulatedGrads && Object.keys(this.accumulatedGrads).forEach(function(t) {
            return e375.accumulatedGrads[t].dispose();
        });
    }, t140.prototype.getConfig = function() {
        return {
            learningRate: this.learningRate,
            initialAccumulatorValue: this.initialAccumulatorValue
        };
    }, t140.fromConfig = function(e376, t) {
        return new e376(t.learningRate, t.initialAccumulatorValue);
    }, t140.className = "AdagradOptimizer", t140;
}(Optimizer);
registerClass(AdagradOptimizer);
var AdamOptimizer = function(e377) {
    function t141(t, n, r, o) {
        void 0 === o && (o = null);
        var a = e377.call(this) || this;
        return a.learningRate = t, a.beta1 = n, a.beta2 = r, a.epsilon = o, a.accumulatedFirstMoment = {
        }, a.accumulatedSecondMoment = {
        }, a.c = keep(scalar(-t)), a.beta1Scalar = keep(scalar(n)), a.beta2Scalar = keep(scalar(r)), tidy(function() {
            a.accBeta1 = scalar(n).variable(), a.accBeta2 = scalar(r).variable();
        }), a.oneMinusBeta1 = keep(scalar(1 - n)), a.oneMinusBeta2 = keep(scalar(1 - r)), a.one = keep(scalar(1)), null === o && (o = ENV.get("EPSILON")), a.epsScalar = keep(scalar(o)), a;
    }
    return __extends(t141, e377), t141.prototype.applyGradients = function(e378) {
        var t = this;
        tidy(function() {
            var n = t.one.sub(t.accBeta1), r = t.one.sub(t.accBeta2);
            for(var o in e378){
                var a = ENV.engine.registeredVariables[o];
                if (null == t.accumulatedFirstMoment[o]) {
                    var i = !1;
                    t.accumulatedFirstMoment[o] = zerosLike(a).variable(i);
                }
                if (null == t.accumulatedSecondMoment[o]) {
                    i = !1;
                    t.accumulatedSecondMoment[o] = zerosLike(a).variable(i);
                }
                var s = e378[o], u = t.accumulatedFirstMoment[o], l = t.accumulatedSecondMoment[o], c = t.beta1Scalar.mul(u).add(t.oneMinusBeta1.mul(s)), p = t.beta2Scalar.mul(l).add(t.oneMinusBeta2.mul(s.square())), d = c.div(n), h = p.div(r);
                t.accumulatedFirstMoment[o].assign(c), t.accumulatedSecondMoment[o].assign(p);
                var f = t.c.mul(d.div(t.epsScalar.add(h.sqrt()))).add(a);
                a.assign(f);
            }
            t.accBeta1.assign(t.accBeta1.mul(t.beta1Scalar)), t.accBeta2.assign(t.accBeta2.mul(t.beta2Scalar));
        });
    }, t141.prototype.dispose = function() {
        var e379 = this;
        this.c.dispose(), this.epsScalar.dispose(), this.beta1Scalar.dispose(), this.beta2Scalar.dispose(), this.accBeta1.dispose(), this.accBeta2.dispose(), this.oneMinusBeta1.dispose(), this.oneMinusBeta2.dispose(), this.one.dispose(), null != this.accumulatedFirstMoment && Object.keys(this.accumulatedFirstMoment).forEach(function(t) {
            return e379.accumulatedFirstMoment[t].dispose();
        }), null != this.accumulatedSecondMoment && Object.keys(this.accumulatedSecondMoment).forEach(function(t) {
            return e379.accumulatedSecondMoment[t].dispose();
        });
    }, t141.prototype.getConfig = function() {
        return {
            learningRate: this.learningRate,
            beta1: this.beta1,
            beta2: this.beta2,
            epsilon: this.epsilon
        };
    }, t141.fromConfig = function(e380, t) {
        return new e380(t.learningRate, t.beta1, t.beta2, t.epsilon);
    }, t141.className = "AdamOptimizer", t141;
}(Optimizer);
registerClass(AdamOptimizer);
var AdamaxOptimizer = function(e381) {
    function t142(t, n, r, o, a) {
        void 0 === o && (o = null), void 0 === a && (a = 0);
        var i = e381.call(this) || this;
        return i.learningRate = t, i.beta1 = n, i.beta2 = r, i.epsilon = o, i.decay = a, i.accumulatedFirstMoment = {
        }, i.accumulatedWeightedInfNorm = {
        }, i.c = keep(scalar(-t)), i.beta1Scalar = keep(scalar(n)), i.beta2Scalar = keep(scalar(r)), i.decayScalar = keep(scalar(a)), tidy(function() {
            i.iteration = scalar(0).variable(), i.accBeta1 = scalar(n).variable();
        }), i.oneMinusBeta1 = keep(scalar(1 - n)), i.one = keep(scalar(1)), null === o && (o = ENV.get("EPSILON")), i.epsScalar = keep(scalar(o)), i;
    }
    return __extends(t142, e381), t142.prototype.applyGradients = function(e382) {
        var t = this;
        tidy(function() {
            var n = t.one.sub(t.accBeta1), r = t.c.div(t.one.add(t.decayScalar.mul(t.iteration)));
            for(var o in e382){
                var a = ENV.engine.registeredVariables[o];
                if (null == t.accumulatedFirstMoment[o]) {
                    var i = !1;
                    t.accumulatedFirstMoment[o] = zerosLike(a).variable(i);
                }
                if (null == t.accumulatedWeightedInfNorm[o]) {
                    i = !1;
                    t.accumulatedWeightedInfNorm[o] = zerosLike(a).variable(i);
                }
                var s = e382[o], u = t.accumulatedFirstMoment[o], l = t.accumulatedWeightedInfNorm[o], c = t.beta1Scalar.mul(u).add(t.oneMinusBeta1.mul(s)), p = t.beta2Scalar.mul(l), d = s.abs(), h = p.maximum(d);
                t.accumulatedFirstMoment[o].assign(c), t.accumulatedWeightedInfNorm[o].assign(h);
                var f = r.div(n).mul(c.div(t.epsScalar.add(h))).add(a);
                a.assign(f);
            }
            t.iteration.assign(t.iteration.add(t.one)), t.accBeta1.assign(t.accBeta1.mul(t.beta1Scalar));
        });
    }, t142.prototype.dispose = function() {
        var e383 = this;
        this.c.dispose(), this.epsScalar.dispose(), this.accBeta1.dispose(), this.beta1Scalar.dispose(), this.beta2Scalar.dispose(), this.oneMinusBeta1.dispose(), this.decayScalar.dispose(), this.iteration.dispose(), this.one.dispose(), null != this.accumulatedFirstMoment && Object.keys(this.accumulatedFirstMoment).forEach(function(t) {
            return e383.accumulatedFirstMoment[t].dispose();
        }), null != this.accumulatedWeightedInfNorm && Object.keys(this.accumulatedWeightedInfNorm).forEach(function(t) {
            return e383.accumulatedWeightedInfNorm[t].dispose();
        });
    }, t142.prototype.getConfig = function() {
        return {
            learningRate: this.learningRate,
            beta1: this.beta1,
            beta2: this.beta2,
            epsilon: this.epsilon,
            decay: this.decay
        };
    }, t142.fromConfig = function(e384, t) {
        return new e384(t.learningRate, t.beta1, t.beta2, t.epsilon, t.decay);
    }, t142.className = "AdamaxOptimizer", t142;
}(Optimizer);
registerClass(AdamaxOptimizer);
var SGDOptimizer = function(e385) {
    function t143(t) {
        var n = e385.call(this) || this;
        return n.learningRate = t, n.setLearningRate(t), n;
    }
    return __extends(t143, e385), t143.prototype.applyGradients = function(e386) {
        var t = this;
        Object.keys(e386).forEach(function(n) {
            var r = e386[n], o = ENV.engine.registeredVariables[n];
            tidy(function() {
                var e387 = t.c.mul(r).add(o);
                o.assign(e387);
            });
        });
    }, t143.prototype.setLearningRate = function(e388) {
        this.learningRate = e388, null != this.c && this.c.dispose(), this.c = keep(scalar(-e388));
    }, t143.prototype.dispose = function() {
        this.c.dispose();
    }, t143.prototype.getConfig = function() {
        return {
            learningRate: this.learningRate
        };
    }, t143.fromConfig = function(e389, t) {
        return new e389(t.learningRate);
    }, t143.className = "SGDOptimizer", t143;
}(Optimizer);
registerClass(SGDOptimizer);
var MomentumOptimizer = function(e390) {
    function t144(t, n, r) {
        void 0 === r && (r = !1);
        var o = e390.call(this, t) || this;
        return o.learningRate = t, o.momentum = n, o.useNesterov = r, o.m = scalar(o.momentum), o.accumulations = {
        }, o;
    }
    return __extends(t144, e390), t144.prototype.applyGradients = function(e391) {
        var t = this, n = function(n) {
            var o = ENV.engine.registeredVariables[n];
            if (null == r31.accumulations[n]) tidy(function() {
                t.accumulations[n] = zerosLike(o).variable(!1);
            });
            var a = r31.accumulations[n], i = e391[n];
            tidy(function() {
                var e392, r = t.m.mul(a).add(i);
                e392 = t.useNesterov ? t.c.mul(i.add(r.mul(t.m))).add(o) : t.c.mul(r).add(o), t.accumulations[n].assign(r), o.assign(e392);
            });
        }, r31 = this;
        for(var o30 in e391)n(o30);
    }, t144.prototype.dispose = function() {
        if (e390.prototype.dispose.call(this), this.m.dispose(), null != this.accumulations) for(var t in this.accumulations)this.accumulations[t].dispose();
    }, t144.prototype.setMomentum = function(e393) {
        this.momentum = e393;
    }, t144.prototype.getConfig = function() {
        return {
            learningRate: this.learningRate,
            momentum: this.momentum,
            useNesterov: this.useNesterov
        };
    }, t144.fromConfig = function(e394, t) {
        return new e394(t.learningRate, t.momentum, t.useNesterov);
    }, t144.className = "MomentumOptimizer", t144;
}(SGDOptimizer);
registerClass(MomentumOptimizer);
var RMSPropOptimizer = function(e395) {
    function t145(t, n, r, o, a) {
        void 0 === n && (n = 0.9), void 0 === r && (r = 0), void 0 === o && (o = null), void 0 === a && (a = !1);
        var i = e395.call(this) || this;
        return i.learningRate = t, i.decay = n, i.momentum = r, i.epsilon = o, i.accumulatedMeanSquares = {
        }, i.accumulatedMeanGrads = {
        }, i.accumulatedMoments = {
        }, i.c = keep(scalar(t)), i.decayScalar = keep(scalar(n)), i.momentumScalar = keep(scalar(r)), i.oneMinusDecay = keep(scalar(1 - n)), i.centered = a, null === o && (o = ENV.get("EPSILON")), i.epsilonScalar = keep(scalar(o)), i;
    }
    return __extends(t145, e395), t145.prototype.applyGradients = function(e396) {
        var t = this, n = function(n) {
            var o = ENV.engine.registeredVariables[n];
            if (null == r32.accumulatedMeanSquares[n]) tidy(function() {
                t.accumulatedMeanSquares[n] = zerosLike(o).variable(!1);
            });
            if (null == r32.accumulatedMeanGrads[n] && r32.centered) tidy(function() {
                t.accumulatedMeanGrads[n] = zerosLike(o).variable(!1);
            });
            if (null == r32.accumulatedMoments[n]) tidy(function() {
                t.accumulatedMoments[n] = zerosLike(o).variable(!1);
            });
            var a = r32.accumulatedMeanSquares[n], i = r32.accumulatedMeanGrads[n], s = r32.accumulatedMoments[n], u = e396[n];
            tidy(function() {
                var e397 = t.decayScalar.mul(a).add(t.oneMinusDecay.mul(u.square()));
                if (t.centered) {
                    var r = t.decayScalar.mul(i).add(t.oneMinusDecay.mul(u)), l = t.momentumScalar.mul(s).add(t.c.mul(u).div(e397.sub(r.square().add(t.epsilonScalar)).sqrt()));
                    t.accumulatedMeanSquares[n].assign(e397), t.accumulatedMeanGrads[n].assign(r), t.accumulatedMoments[n].assign(l);
                    var c = o.sub(l);
                    o.assign(c);
                } else {
                    var p = t.decayScalar.mul(a).add(t.oneMinusDecay.mul(u.square()));
                    l = t.momentumScalar.mul(s).add(t.c.mul(u).div(p.add(t.epsilonScalar).sqrt()));
                    t.accumulatedMeanSquares[n].assign(p), t.accumulatedMoments[n].assign(l);
                    c = o.sub(l);
                    o.assign(c);
                }
            });
        }, r32 = this;
        for(var o31 in e396)n(o31);
    }, t145.prototype.dispose = function() {
        var e398 = this;
        this.c.dispose(), this.epsilonScalar.dispose(), this.decayScalar.dispose(), this.momentumScalar.dispose(), this.oneMinusDecay.dispose(), null != this.accumulatedMeanSquares && Object.keys(this.accumulatedMeanSquares).forEach(function(t) {
            return e398.accumulatedMeanSquares[t].dispose();
        }), null != this.accumulatedMeanGrads && this.centered && Object.keys(this.accumulatedMeanGrads).forEach(function(t) {
            return e398.accumulatedMeanGrads[t].dispose();
        }), null != this.accumulatedMoments && Object.keys(this.accumulatedMoments).forEach(function(t) {
            return e398.accumulatedMoments[t].dispose();
        });
    }, t145.prototype.getConfig = function() {
        return {
            learningRate: this.learningRate,
            decay: this.decay,
            momentum: this.momentum,
            epsilon: this.epsilon,
            centered: this.centered
        };
    }, t145.fromConfig = function(e399, t) {
        return new e399(t.learningRate, t.decay, t.momentum, t.epsilon, t.centered);
    }, t145.className = "RMSPropOptimizer", t145;
}(Optimizer);
registerClass(RMSPropOptimizer);
var OptimizerConstructors = function() {
    function e400() {
    }
    return e400.sgd = function(e401) {
        return new SGDOptimizer(e401);
    }, e400.momentum = function(e402, t, n) {
        return void 0 === n && (n = !1), new MomentumOptimizer(e402, t, n);
    }, e400.rmsprop = function(e403, t, n, r, o) {
        return void 0 === t && (t = 0.9), void 0 === n && (n = 0), void 0 === r && (r = null), void 0 === o && (o = !1), new RMSPropOptimizer(e403, t, n, r, o);
    }, e400.adam = function(e404, t, n, r) {
        return void 0 === e404 && (e404 = 0.001), void 0 === t && (t = 0.9), void 0 === n && (n = 0.999), void 0 === r && (r = null), new AdamOptimizer(e404, t, n, r);
    }, e400.adadelta = function(e405, t, n) {
        return void 0 === e405 && (e405 = 0.001), void 0 === t && (t = 0.95), void 0 === n && (n = null), new AdadeltaOptimizer(e405, t, n);
    }, e400.adamax = function(e406, t, n, r, o) {
        return void 0 === e406 && (e406 = 0.002), void 0 === t && (t = 0.9), void 0 === n && (n = 0.999), void 0 === r && (r = null), void 0 === o && (o = 0), new AdamaxOptimizer(e406, t, n, r, o);
    }, e400.adagrad = function(e407, t) {
        return void 0 === t && (t = 0.1), new AdagradOptimizer(e407, t);
    }, e400;
}(), train = {
    sgd: OptimizerConstructors.sgd,
    momentum: OptimizerConstructors.momentum,
    adadelta: OptimizerConstructors.adadelta,
    adagrad: OptimizerConstructors.adagrad,
    rmsprop: OptimizerConstructors.rmsprop,
    adamax: OptimizerConstructors.adamax,
    adam: OptimizerConstructors.adam
}, setBackend = Environment.setBackend, getBackend = Environment.getBackend, disposeVariables = Environment.disposeVariables, memory = Environment.memory;
setOpHandler(ops);

},{"process":"d5jf4","buffer":"fCgem","crypto":"hagNj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {
};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e1) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {
};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {
};
function noop() {
}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function() {
    return '/';
};
process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() {
    return 0;
};

},{}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 'use strict';
const base64 = require('base64-js');
const ieee754 = require('ieee754');
const customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 2147483647;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === 'string') return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== 'number') throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';
    if (!Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + ' bytes');
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== 'string') throw new TypeError("The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type " + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case 'ascii':
        case 'latin1':
        case 'binary':
            return len;
        case 'utf8':
        case 'utf-8':
            return utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return len * 2;
        case 'hex':
            return len >>> 1;
        case 'base64':
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return '';
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return '';
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return '';
    if (!encoding) encoding = 'utf8';
    while(true)switch(encoding){
        case 'hex':
            return hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
            return utf8Slice(this, start, end);
        case 'ascii':
            return asciiSlice(this, start, end);
        case 'latin1':
        case 'binary':
            return latin1Slice(this, start, end);
        case 'base64':
            return base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
    for(let i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = '';
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError("The \"target\" argument must be one of type Buffer or Uint8Array. Received type " + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError('out of range index');
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 2147483647) byteOffset = 2147483647;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === 'string') val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
        val = val & 255 // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i1;
    if (dir) {
        let foundIndex = -1;
        for(i1 = byteOffset; i1 < arrLength; i1++)if (read(arr, i1) === read(val, foundIndex === -1 ? 0 : i1 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i1;
            if (i1 - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i1 -= i1 - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i1 = byteOffset; i1 >= 0; i1--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i1 + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i1;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError('Attempt to write outside buffer bounds');
    if (!encoding) encoding = 'utf8';
    let loweredCase = false;
    for(;;)switch(encoding){
        case 'hex':
            return hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
            return utf8Write(this, string, offset, length);
        case 'ascii':
        case 'latin1':
        case 'binary':
            return asciiWrite(this, string, offset, length);
        case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 128) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 65533;
            bytesPerSequence = 1;
        } else if (codePoint > 65535) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 4096;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = '';
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = '';
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 127);
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = '';
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = '';
    for(let i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength1, noAssert) {
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength1, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength1 && (mul *= 256))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
    offset = offset >>> 0;
    byteLength2 = byteLength2 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength2, this.length);
    let val = this[offset + --byteLength2];
    let mul = 1;
    while(byteLength2 > 0 && (mul *= 256))val += this[offset + --byteLength2] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 65536 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
    offset = offset >>> 0;
    byteLength3 = byteLength3 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength3, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength3 && (mul *= 256))val += this[offset + i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength3);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength4, noAssert) {
    offset = offset >>> 0;
    byteLength4 = byteLength4 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength4, this.length);
    let i = byteLength4;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 256))val += this[offset + --i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength4);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128)) return this[offset];
    return (255 - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 65536 + (last << 24) // Overflow
    ;
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 65536 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, 'offset');
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = (first << 24) + this[++offset] * 65536 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 65536 + this[++offset] * 256 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength5, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength5 = byteLength5 >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength5) - 1;
        checkInt(this, value, offset, byteLength5, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 255;
    while(++i < byteLength5 && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength5;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength6, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength6 = byteLength6 >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength6) - 1;
        checkInt(this, value, offset, byteLength6, maxBytes, 0);
    }
    let i = byteLength6 - 1;
    let mul = 1;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength6;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
    this[offset] = value & 255;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 255;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(4294967295));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(4294967295));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(4294967295));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(4294967295));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength7, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength7 - 1);
        checkInt(this, value, offset, byteLength7, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 255;
    while(++i < byteLength7 && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength7;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength8, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength8 - 1);
        checkInt(this, value, offset, byteLength8, limit - 1, -limit);
    }
    let i = byteLength8 - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength8;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
    if (value < 0) value = 255 + value + 1;
    this[offset] = value & 255;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
    if (value < 0) value = 4294967295 + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 340282346638528860000000000000000000000, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError('targetStart out of bounds');
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
        if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') throw new TypeError('encoding must be a string');
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === 'number') val = val & 255;
    else if (typeof val === 'boolean') val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError('Out of range index');
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === 'number') for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {
};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, 'message', {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, 'code', {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E('ERR_BUFFER_OUT_OF_BOUNDS', function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return 'Attempt to access memory outside buffer bounds';
}, RangeError);
E('ERR_INVALID_ARG_TYPE', function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E('ERR_OUT_OF_RANGE', function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
    else if (typeof input === 'bigint') {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
        received += 'n';
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = '';
    let i = val.length;
    const start = val[0] === '-' ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength9) {
    validateNumber(offset, 'offset');
    if (buf[offset] === undefined || buf[offset + byteLength9] === undefined) boundsError(offset, buf.length - (byteLength9 + 1));
}
function checkIntBI(value, min, max, buf, offset, byteLength10) {
    if (value > max || value < min) {
        const n = typeof min === 'bigint' ? 'n' : '';
        let range;
        if (byteLength10 > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength10 + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength10 + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength10 + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new errors.ERR_OUT_OF_RANGE('value', range, value);
    }
    checkBounds(buf, offset, byteLength10);
}
function validateNumber(value, name) {
    if (typeof value !== 'number') throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value);
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value);
    }
    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + '=';
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 55295 && codePoint < 57344) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 56319) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 56320) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else throw new Error('Invalid code point');
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 255);
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = '0123456789abcdef';
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error('BigInt not supported');
}

},{"base64-js":"eIiSV","ieee754":"cO95r"}],"eIiSV":[function(require,module,exports) {
'use strict';
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;
function getLens(b64) {
    var len1 = b64.length;
    if (len1 % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len1;
    var placeHoldersLen = validLen === len1 ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i1;
    for(i1 = 0; i1 < len2; i1 += 4){
        tmp = revLookup[b64.charCodeAt(i1)] << 18 | revLookup[b64.charCodeAt(i1 + 1)] << 12 | revLookup[b64.charCodeAt(i1 + 2)] << 6 | revLookup[b64.charCodeAt(i1 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i1)] << 2 | revLookup[b64.charCodeAt(i1 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i1)] << 10 | revLookup[b64.charCodeAt(i1 + 1)] << 4 | revLookup[b64.charCodeAt(i1 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i2 = start; i2 < end; i2 += 3){
        tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
        output.push(tripletToBase64(tmp));
    }
    return output.join('');
}
function fromByteArray(uint8) {
    var tmp;
    var len3 = uint8.length;
    var extraBytes = len3 % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i3 = 0, len2 = len3 - extraBytes; i3 < len2; i3 += maxChunkLength)parts.push(encodeChunk(uint8, i3, i3 + maxChunkLength > len2 ? len2 : i3 + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len3 - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len3 - 2] << 8) + uint8[len3 - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + '=');
    }
    return parts.join('');
}

},{}],"cO95r":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"hagNj":[function(require,module,exports) {
'use strict';
exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes');
exports.createHash = exports.Hash = require('create-hash');
exports.createHmac = exports.Hmac = require('create-hmac');
var algos = require('browserify-sign/algos');
var algoKeys = Object.keys(algos);
var hashes = [
    'sha1',
    'sha224',
    'sha256',
    'sha384',
    'sha512',
    'md5',
    'rmd160'
].concat(algoKeys);
exports.getHashes = function() {
    return hashes;
};
var p = require('pbkdf2');
exports.pbkdf2 = p.pbkdf2;
exports.pbkdf2Sync = p.pbkdf2Sync;
var aes = require('browserify-cipher');
exports.Cipher = aes.Cipher;
exports.createCipher = aes.createCipher;
exports.Cipheriv = aes.Cipheriv;
exports.createCipheriv = aes.createCipheriv;
exports.Decipher = aes.Decipher;
exports.createDecipher = aes.createDecipher;
exports.Decipheriv = aes.Decipheriv;
exports.createDecipheriv = aes.createDecipheriv;
exports.getCiphers = aes.getCiphers;
exports.listCiphers = aes.listCiphers;
var dh = require('diffie-hellman');
exports.DiffieHellmanGroup = dh.DiffieHellmanGroup;
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
exports.getDiffieHellman = dh.getDiffieHellman;
exports.createDiffieHellman = dh.createDiffieHellman;
exports.DiffieHellman = dh.DiffieHellman;
var sign = require('browserify-sign');
exports.createSign = sign.createSign;
exports.Sign = sign.Sign;
exports.createVerify = sign.createVerify;
exports.Verify = sign.Verify;
exports.createECDH = require('create-ecdh');
var publicEncrypt = require('public-encrypt');
exports.publicEncrypt = publicEncrypt.publicEncrypt;
exports.privateEncrypt = publicEncrypt.privateEncrypt;
exports.publicDecrypt = publicEncrypt.publicDecrypt;
exports.privateDecrypt = publicEncrypt.privateDecrypt;
// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })
var rf = require('randomfill');
exports.randomFill = rf.randomFill;
exports.randomFillSync = rf.randomFillSync;
exports.createCredentials = function() {
    throw new Error([
        'sorry, createCredentials is not implemented yet',
        'we accept pull requests',
        'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'));
};
exports.constants = {
    'DH_CHECK_P_NOT_SAFE_PRIME': 2,
    'DH_CHECK_P_NOT_PRIME': 1,
    'DH_UNABLE_TO_CHECK_GENERATOR': 4,
    'DH_NOT_SUITABLE_GENERATOR': 8,
    'NPN_ENABLED': 1,
    'ALPN_ENABLED': 1,
    'RSA_PKCS1_PADDING': 1,
    'RSA_SSLV23_PADDING': 2,
    'RSA_NO_PADDING': 3,
    'RSA_PKCS1_OAEP_PADDING': 4,
    'RSA_X931_PADDING': 5,
    'RSA_PKCS1_PSS_PADDING': 6,
    'POINT_CONVERSION_COMPRESSED': 2,
    'POINT_CONVERSION_UNCOMPRESSED': 4,
    'POINT_CONVERSION_HYBRID': 6
};

},{"randombytes":"8hjhE","create-hash":"2WyL8","create-hmac":"k1utz","browserify-sign/algos":"busIB","pbkdf2":"g38Hg","browserify-cipher":"d4idn","diffie-hellman":"hwD3y","browserify-sign":"jbRNy","create-ecdh":"9Rcg1","public-encrypt":"h9Rdh","randomfill":"k3tsT"}],"8hjhE":[function(require,module,exports) {
'use strict';
var process = require("process");
var global = arguments[3];
// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536;
// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295;
function oldBrowser() {
    throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11');
}
var Buffer = require('safe-buffer').Buffer;
var crypto = global.crypto || global.msCrypto;
if (crypto && crypto.getRandomValues) module.exports = randomBytes;
else module.exports = oldBrowser;
function randomBytes(size, cb) {
    // phantomjs needs to throw
    if (size > MAX_UINT32) throw new RangeError('requested too many random bytes');
    var bytes = Buffer.allocUnsafe(size);
    if (size > 0) {
        if (size > MAX_BYTES) // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
        for(var generated = 0; generated < size; generated += MAX_BYTES)// buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
        else crypto.getRandomValues(bytes);
    }
    if (typeof cb === 'function') return process.nextTick(function() {
        cb(null, bytes);
    });
    return bytes;
}

},{"process":"d5jf4","safe-buffer":"eW7r9"}],"eW7r9":[function(require,module,exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ var buffer = require('buffer');
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
SafeBuffer.prototype = Object.create(Buffer.prototype);
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === 'number') throw new TypeError('Argument must not be a number');
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === 'string') buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return buffer.SlowBuffer(size);
};

},{"buffer":"fCgem"}],"2WyL8":[function(require,module,exports) {
'use strict';
var inherits = require('inherits');
var MD5 = require('md5.js');
var RIPEMD160 = require('ripemd160');
var sha = require('sha.js');
var Base = require('cipher-base');
function Hash(hash) {
    Base.call(this, 'digest');
    this._hash = hash;
}
inherits(Hash, Base);
Hash.prototype._update = function(data) {
    this._hash.update(data);
};
Hash.prototype._final = function() {
    return this._hash.digest();
};
module.exports = function createHash(alg) {
    alg = alg.toLowerCase();
    if (alg === 'md5') return new MD5();
    if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160();
    return new Hash(sha(alg));
};

},{"inherits":"bRL3M","md5.js":"45VeE","ripemd160":"bFDDq","sha.js":"jkn7m","cipher-base":"g5fTz"}],"bRL3M":[function(require,module,exports) {
if (typeof Object.create === 'function') // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

},{}],"45VeE":[function(require,module,exports) {
'use strict';
var inherits = require('inherits');
var HashBase = require('hash-base');
var Buffer = require('safe-buffer').Buffer;
var ARRAY16 = new Array(16);
function MD5() {
    HashBase.call(this, 64);
    // state
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
}
inherits(MD5, HashBase);
MD5.prototype._update = function() {
    var M = ARRAY16;
    for(var i = 0; i < 16; ++i)M[i] = this._block.readInt32LE(i * 4);
    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;
    a = fnF(a, b, c, d, M[0], 3614090360, 7);
    d = fnF(d, a, b, c, M[1], 3905402710, 12);
    c = fnF(c, d, a, b, M[2], 606105819, 17);
    b = fnF(b, c, d, a, M[3], 3250441966, 22);
    a = fnF(a, b, c, d, M[4], 4118548399, 7);
    d = fnF(d, a, b, c, M[5], 1200080426, 12);
    c = fnF(c, d, a, b, M[6], 2821735955, 17);
    b = fnF(b, c, d, a, M[7], 4249261313, 22);
    a = fnF(a, b, c, d, M[8], 1770035416, 7);
    d = fnF(d, a, b, c, M[9], 2336552879, 12);
    c = fnF(c, d, a, b, M[10], 4294925233, 17);
    b = fnF(b, c, d, a, M[11], 2304563134, 22);
    a = fnF(a, b, c, d, M[12], 1804603682, 7);
    d = fnF(d, a, b, c, M[13], 4254626195, 12);
    c = fnF(c, d, a, b, M[14], 2792965006, 17);
    b = fnF(b, c, d, a, M[15], 1236535329, 22);
    a = fnG(a, b, c, d, M[1], 4129170786, 5);
    d = fnG(d, a, b, c, M[6], 3225465664, 9);
    c = fnG(c, d, a, b, M[11], 643717713, 14);
    b = fnG(b, c, d, a, M[0], 3921069994, 20);
    a = fnG(a, b, c, d, M[5], 3593408605, 5);
    d = fnG(d, a, b, c, M[10], 38016083, 9);
    c = fnG(c, d, a, b, M[15], 3634488961, 14);
    b = fnG(b, c, d, a, M[4], 3889429448, 20);
    a = fnG(a, b, c, d, M[9], 568446438, 5);
    d = fnG(d, a, b, c, M[14], 3275163606, 9);
    c = fnG(c, d, a, b, M[3], 4107603335, 14);
    b = fnG(b, c, d, a, M[8], 1163531501, 20);
    a = fnG(a, b, c, d, M[13], 2850285829, 5);
    d = fnG(d, a, b, c, M[2], 4243563512, 9);
    c = fnG(c, d, a, b, M[7], 1735328473, 14);
    b = fnG(b, c, d, a, M[12], 2368359562, 20);
    a = fnH(a, b, c, d, M[5], 4294588738, 4);
    d = fnH(d, a, b, c, M[8], 2272392833, 11);
    c = fnH(c, d, a, b, M[11], 1839030562, 16);
    b = fnH(b, c, d, a, M[14], 4259657740, 23);
    a = fnH(a, b, c, d, M[1], 2763975236, 4);
    d = fnH(d, a, b, c, M[4], 1272893353, 11);
    c = fnH(c, d, a, b, M[7], 4139469664, 16);
    b = fnH(b, c, d, a, M[10], 3200236656, 23);
    a = fnH(a, b, c, d, M[13], 681279174, 4);
    d = fnH(d, a, b, c, M[0], 3936430074, 11);
    c = fnH(c, d, a, b, M[3], 3572445317, 16);
    b = fnH(b, c, d, a, M[6], 76029189, 23);
    a = fnH(a, b, c, d, M[9], 3654602809, 4);
    d = fnH(d, a, b, c, M[12], 3873151461, 11);
    c = fnH(c, d, a, b, M[15], 530742520, 16);
    b = fnH(b, c, d, a, M[2], 3299628645, 23);
    a = fnI(a, b, c, d, M[0], 4096336452, 6);
    d = fnI(d, a, b, c, M[7], 1126891415, 10);
    c = fnI(c, d, a, b, M[14], 2878612391, 15);
    b = fnI(b, c, d, a, M[5], 4237533241, 21);
    a = fnI(a, b, c, d, M[12], 1700485571, 6);
    d = fnI(d, a, b, c, M[3], 2399980690, 10);
    c = fnI(c, d, a, b, M[10], 4293915773, 15);
    b = fnI(b, c, d, a, M[1], 2240044497, 21);
    a = fnI(a, b, c, d, M[8], 1873313359, 6);
    d = fnI(d, a, b, c, M[15], 4264355552, 10);
    c = fnI(c, d, a, b, M[6], 2734768916, 15);
    b = fnI(b, c, d, a, M[13], 1309151649, 21);
    a = fnI(a, b, c, d, M[4], 4149444226, 6);
    d = fnI(d, a, b, c, M[11], 3174756917, 10);
    c = fnI(c, d, a, b, M[2], 718787259, 15);
    b = fnI(b, c, d, a, M[9], 3951481745, 21);
    this._a = this._a + a | 0;
    this._b = this._b + b | 0;
    this._c = this._c + c | 0;
    this._d = this._d + d | 0;
};
MD5.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 128;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = Buffer.allocUnsafe(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer;
};
function rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function fnF(a, b, c, d, m, k, s) {
    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}
function fnG(a, b, c, d, m, k, s) {
    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}
function fnH(a, b, c, d, m, k, s) {
    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}
function fnI(a, b, c, d, m, k, s) {
    return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}
module.exports = MD5;

},{"inherits":"bRL3M","hash-base":"51qBP","safe-buffer":"eW7r9"}],"51qBP":[function(require,module,exports) {
'use strict';
var Buffer = require('safe-buffer').Buffer;
var Transform = require('readable-stream').Transform;
var inherits = require('inherits');
function throwIfNotStringOrBuffer(val, prefix) {
    if (!Buffer.isBuffer(val) && typeof val !== 'string') throw new TypeError(prefix + ' must be a string or a buffer');
}
function HashBase(blockSize) {
    Transform.call(this);
    this._block = Buffer.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [
        0,
        0,
        0,
        0
    ];
    this._finalized = false;
}
inherits(HashBase, Transform);
HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
        this.update(chunk, encoding);
    } catch (err) {
        error = err;
    }
    callback(error);
};
HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
        this.push(this.digest());
    } catch (err) {
        error = err;
    }
    callback(error);
};
HashBase.prototype.update = function(data, encoding) {
    throwIfNotStringOrBuffer(data, 'Data');
    if (this._finalized) throw new Error('Digest already called');
    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);
    // consume data
    var block = this._block;
    var offset = 0;
    while(this._blockOffset + data.length - offset >= this._blockSize){
        for(var i = this._blockOffset; i < this._blockSize;)block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
    }
    while(offset < data.length)block[this._blockOffset++] = data[offset++];
    // update length
    for(var j = 0, carry = data.length * 8; carry > 0; ++j){
        this._length[j] += carry;
        carry = this._length[j] / 4294967296 | 0;
        if (carry > 0) this._length[j] -= 4294967296 * carry;
    }
    return this;
};
HashBase.prototype._update = function() {
    throw new Error('_update is not implemented');
};
HashBase.prototype.digest = function(encoding) {
    if (this._finalized) throw new Error('Digest already called');
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);
    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for(var i = 0; i < 4; ++i)this._length[i] = 0;
    return digest;
};
HashBase.prototype._digest = function() {
    throw new Error('_digest is not implemented');
};
module.exports = HashBase;

},{"safe-buffer":"eW7r9","readable-stream":"jXNWE","inherits":"bRL3M"}],"jXNWE":[function(require,module,exports) {
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');

},{"./lib/_stream_readable.js":"6NdbQ","./lib/_stream_writable.js":"gTkcq","./lib/_stream_duplex.js":"kKNA3","./lib/_stream_transform.js":"ba8Mr","./lib/_stream_passthrough.js":"2xP98","./lib/internal/streams/end-of-stream.js":"aOMy2","./lib/internal/streams/pipeline.js":"fyp4t"}],"6NdbQ":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
var process = require("process");
var global = arguments[3];
module.exports = Readable;
/*<replacement>*/ var Duplex;
/*</replacement>*/ Readable.ReadableState = ReadableState;
/*<replacement>*/ var EE = require('events').EventEmitter;
var EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};
/*</replacement>*/ /*<replacement>*/ var Stream = require('./internal/streams/stream');
/*</replacement>*/ var Buffer = require('buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {
}).Uint8Array || function() {
};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/ var debugUtil = require('util');
var debug;
if (debugUtil && debugUtil.debuglog) debug = debugUtil.debuglog('stream');
else debug = function debug() {
};
/*</replacement>*/ var BufferList = require('./internal/streams/buffer_list');
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
// Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require('inherits')(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = [
    'error',
    'close',
    'destroy',
    'pause',
    'resume'
];
function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);
    // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}
function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require('./_stream_duplex');
    options = options || {
    };
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;
    // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
    // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex);
    // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true;
    // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy;
    // has it been destroyed
    this.destroyed = false;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';
    // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0;
    // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}
function Readable(options) {
    Duplex = Duplex || require('./_stream_duplex');
    if (!(this instanceof Readable)) return new Readable(options);
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex);
    // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
    }
    Stream.call(this);
}
Object.defineProperty(Readable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function(err, cb) {
    cb(err);
};
// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === 'string') {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = '';
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};
// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug('readableAddChunk', chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) chunk = _uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else addChunk(stream, state, chunk, true);
            } else if (state.ended) errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                } else addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
        }
    }
    // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) er = new ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer',
        'Uint8Array'
    ], chunk);
    return er;
}
Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
};
// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder;
    // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding;
    // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = '';
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== '') this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
};
// Don't raise the hwm > 1GB
var MAX_HWM = 1073741824;
function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
}
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    }
    // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n;
    // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
}
// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false;
    // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
    }
    n = howMuchToRead(n, state);
    // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
    }
    // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead);
    // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
    }
    // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
    } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;
        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
    }
    if (ret !== null) this.emit('data', ret);
    return ret;
};
function onEofChunk(stream, state) {
    debug('onEofChunk');
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
        }
    }
}
// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
    var state = stream._readableState;
    debug('emitReadable', state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
    }
}
function emitReadable_(stream) {
    var state = stream._readableState;
    debug('emitReadable_', state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
    }
    // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
}
// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
    }
}
function maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
}
// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) process.nextTick(endFn);
    else src.once('end', endFn);
    dest.on('unpipe', onunpipe);
    function onunpipe(readable, unpipeInfo) {
        debug('onunpipe');
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        debug('onend');
        dest.end();
    }
    // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;
    function cleanup() {
        debug('cleanup');
        // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true;
        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on('data', ondata);
    function ondata(chunk) {
        debug('ondata');
        var ret = dest.write(chunk);
        debug('dest.write', ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug('false write response, pause', state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    }
    // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
    }
    // Make sure our error handler is attached before userland ones.
    prependListener(dest, 'error', onerror);
    // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
    }
    dest.once('finish', onfinish);
    function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
    }
    // tell the dest that it's being piped to
    dest.emit('pipe', src);
    // start the flow if it hasn't been started already.
    if (!state.flowing) {
        debug('pipe resume');
        src.resume();
    }
    return dest;
};
function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
            state.flowing = true;
            flow(src);
        }
    };
}
Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    };
    // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this;
    // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes;
        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
    }
    // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit('unpipe', this, {
            hasUnpiped: false
        });
        return this;
    }
    // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit('unpipe', this, unpipeInfo);
    return this;
};
// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0;
        // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug('on readable', state.length, state.reading);
            if (state.length) emitReadable(this);
            else if (!state.reading) process.nextTick(nReadingNextTick, this);
        }
    }
    return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === 'readable') // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === 'readable' || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
function updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount('readable') > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true;
    else if (self.listenerCount('data') > 0) self.resume();
}
function nReadingNextTick(self) {
    debug('readable nexttick read 0');
    self.read(0);
}
// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        debug('resume');
        // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        resume(this, state);
    }
    state.paused = false;
    return this;
};
function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
    }
}
function resume_(stream, state) {
    debug('resume', state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function() {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
    }
    this._readableState.paused = true;
    return this;
};
function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    while(state.flowing && stream.read() !== null);
}
// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on('end', function() {
        debug('wrapped end');
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on('data', function(chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk);
        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    });
    // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === 'function') this[i] = (function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    })(i);
    // proxy certain important events.
    for(var n1 = 0; n1 < kProxyEvents.length; n1++)stream.on(kProxyEvents[n1], this.emit.bind(this, kProxyEvents[n1]));
    // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        debug('wrapped _read', n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};
if (typeof Symbol === 'function') Readable.prototype[Symbol.asyncIterator] = function() {
    if (createReadableStreamAsyncIterator === undefined) createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    return createReadableStreamAsyncIterator(this);
};
Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
});
// exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
});
// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function endReadable(stream) {
    var state = stream._readableState;
    debug('endReadable', state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
    }
}
function endReadableNT(state, stream) {
    debug('endReadableNT', state.endEmitted, state.length);
    // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}
if (typeof Symbol === 'function') Readable.from = function(iterable, opts) {
    if (from === undefined) from = require('./internal/streams/from');
    return from(Readable, iterable, opts);
};
function indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

},{"process":"d5jf4","events":"1VQLm","./internal/streams/stream":"60BLS","buffer":"fCgem","util":"jhUEF","./internal/streams/buffer_list":"hf3P2","./internal/streams/destroy":"YI8DF","./internal/streams/state":"61BRN","../errors":"aJlwj","inherits":"bRL3M","./_stream_duplex":"kKNA3","string_decoder/":"3vmkr","./internal/streams/async_iterator":"k019Y","./internal/streams/from":"ak0YH"}],"1VQLm":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== 'function') throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === 'error';
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === 'function') ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit('newListener', type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === 'function') // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
    } else if (typeof list !== 'function') {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === 'function') this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === 'function') return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === 'function') return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === 'function') emitter.removeListener('error', errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== 'error') addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === 'function') eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === 'function') // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

},{}],"60BLS":[function(require,module,exports) {
module.exports = require('events').EventEmitter;

},{"events":"1VQLm"}],"jhUEF":[function(require,module,exports) {
"use strict";

},{}],"hf3P2":[function(require,module,exports) {
'use strict';
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {
        };
        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
var _require = require('buffer'), Buffer = _require.Buffer;
var _require2 = require('util'), inspect = _require2.inspect;
var custom = inspect && inspect.custom || 'inspect';
function copyBuffer(src, target, offset) {
    Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ (function() {
    function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    _createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return '';
                var p = this.head;
                var ret = '' + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            }
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            }
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            }
        },
        {
            key: custom,
            value: function value(_, options) {
                return inspect(this, _objectSpread(_objectSpread({
                }, options), {
                }, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
})();

},{"buffer":"fCgem","util":"jhUEF"}],"YI8DF":[function(require,module,exports) {
'use strict';
var process = require("process");
// undocumented cb() API, needed for core, not for public API
function destroy(err1, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err1);
        else if (err1) {
            if (!this._writableState) process.nextTick(emitErrorNT, this, err1);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err1);
            }
        }
        return this;
    }
    // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
    // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err1 || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) process.nextTick(emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err);
            } else process.nextTick(emitCloseNT, _this);
        } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err);
        } else process.nextTick(emitCloseNT, _this);
    });
    return this;
}
function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
}
function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit('close');
}
function undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function emitErrorNT(self, err) {
    self.emit('error', err);
}
function errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit('error', err);
}
module.exports = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy
};

},{"process":"d5jf4"}],"61BRN":[function(require,module,exports) {
'use strict';
var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : 'highWaterMark';
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    }
    // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: getHighWaterMark
};

},{"../../../errors":"aJlwj"}],"aJlwj":[function(require,module,exports) {
'use strict';
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var codes = {
};
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError1 = /*#__PURE__*/ function(_Base) {
        _inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError1.prototype.name = Base.name;
    NodeError1.prototype.code = code;
    codes[code] = NodeError1;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== 'number') start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType('ERR_INVALID_OPT_VALUE', function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === 'string' && startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
    } else determiner = 'must be';
    var msg;
    if (endsWith(name, ' argument')) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
    else {
        var type = includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function(name) {
    return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function(name) {
    return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function(arg) {
    return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],"kKNA3":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
var process = require("process");
/*<replacement>*/ var objectKeys = Object.keys || function(obj) {
    var keys1 = [];
    for(var key in obj)keys1.push(key);
    return keys1;
};
/*</replacement>*/ module.exports = Duplex;
var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');
require('inherits')(Duplex, Readable);
// Allow the keys array to be GC'ed.
var keys = objectKeys(Writable.prototype);
for(var v = 0; v < keys.length; v++){
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once('end', onend);
        }
    }
}
Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
// the no-half-open enforcer
function onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return;
    // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(onEndNT, this);
}
function onEndNT(self) {
    self.end();
}
Object.defineProperty(Duplex.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

},{"process":"d5jf4","./_stream_readable":"6NdbQ","./_stream_writable":"gTkcq","inherits":"bRL3M"}],"gTkcq":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';
var global = arguments[3];
var process = require("process");
module.exports = Writable;
/* <replacement> */ function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
}
// It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var Duplex;
/*</replacement>*/ Writable.WritableState = WritableState;
/*<replacement>*/ var internalUtil = {
    deprecate: require('util-deprecate')
};
/*</replacement>*/ /*<replacement>*/ var Stream = require('./internal/streams/stream');
/*</replacement>*/ var Buffer = require('buffer').Buffer;
var OurUint8Array = (typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {
}).Uint8Array || function() {
};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require('inherits')(Writable, Stream);
function nop() {
}
function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require('./_stream_duplex');
    options = options || {
    };
    // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex;
    // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
    // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex);
    // if _final has been called
    this.finalCalled = false;
    // drain event flag.
    this.needDrain = false;
    // at the start of calling end()
    this.ending = false;
    // when end() has been called, and returned
    this.ended = false;
    // when 'finish' is emitted
    this.finished = false;
    // has it been destroyed
    this.destroyed = false;
    // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8';
    // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0;
    // a flag to see when we're in the middle of a write.
    this.writing = false;
    // when true all writes will be buffered until .uncork() call
    this.corked = 0;
    // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true;
    // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false;
    // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        onwrite(stream, er);
    };
    // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null;
    // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0;
    // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false;
    // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false;
    // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false;
    // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy;
    // count buffered requests
    this.bufferedRequestCount = 0;
    // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty(WritableState.prototype, 'buffer', {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", 'DEP0003')
        });
    } catch (_) {
    }
})();
// Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
        }
    });
} else realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};
function Writable(options) {
    Duplex = Duplex || require('./_stream_duplex');
    // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex);
    // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
    }
    Stream.call(this);
}
// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END();
    // TODO: defer error events consistently everywhere, not just the cb
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
}
// Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== 'string' && !state.objectMode) er = new ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer'
    ], chunk);
    if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
    }
    return true;
}
Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
    if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = 'buffer';
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = nop;
    if (state.ending) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
Writable.prototype.cork = function() {
    this._writableState.corked++;
};
Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!([
        'hex',
        'utf8',
        'utf-8',
        'ascii',
        'binary',
        'base64',
        'ucs2',
        'ucs-2',
        'utf16le',
        'utf-16le',
        'raw'
    ].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty(Writable.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') chunk = Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = 'buffer';
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er);
        // this can emit finish, and it will always happen
        // after error
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
        // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
    }
}
function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
        if (sync) process.nextTick(afterWrite, stream, state, finished, cb);
        else afterWrite(stream, state, finished, cb);
    }
}
function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
}
// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
    }
}
// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, '', holder.finish);
        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--;
            // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
    // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    }
    // ignore unnecessary end() calls.
    if (!state.ending) endWritable(this, state, cb);
    return this;
};
Object.defineProperty(Writable.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit('prefinish');
        finishMaybe(stream, state);
    });
}
function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit('prefinish');
        }
    }
}
function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit('finish');
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
        if (state.finished) process.nextTick(cb);
        else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    }
    // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
        // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

},{"process":"d5jf4","util-deprecate":"j92NQ","./internal/streams/stream":"60BLS","buffer":"fCgem","./internal/streams/destroy":"YI8DF","./internal/streams/state":"61BRN","../errors":"aJlwj","inherits":"bRL3M","./_stream_duplex":"kKNA3"}],"j92NQ":[function(require,module,exports) {
var global = arguments[3];
/**
 * Module exports.
 */ module.exports = deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function deprecate(fn, msg) {
    if (config('noDeprecation')) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (config('throwDeprecation')) throw new Error(msg);
            else if (config('traceDeprecation')) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === 'true';
}

},{}],"3vmkr":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
/*<replacement>*/ var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {
    encoding = '' + encoding;
    switch(encoding && encoding.toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
        case 'raw':
            return true;
        default:
            return false;
    }
};
function _normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while(true)switch(enc){
        case 'utf8':
        case 'utf-8':
            return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return 'utf16le';
        case 'latin1':
        case 'binary':
            return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
            return enc;
        default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
}
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case 'utf16le':
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
        case 'utf8':
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
        case 'base64':
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
        default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
}
StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
};
StringDecoder.prototype.end = utf8End;
// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
    if (byte <= 127) return 0;
    else if (byte >> 5 === 6) return 2;
    else if (byte >> 4 === 14) return 3;
    else if (byte >> 3 === 30) return 4;
    return byte >> 6 === 2 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 192) !== 128) {
        self.lastNeed = 0;
        return '\ufffd';
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
            self.lastNeed = 1;
            return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 192) !== 128) {
                self.lastNeed = 2;
                return '\ufffd';
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + '\ufffd';
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 55296 && c <= 56319) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
}
function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
}
function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
}

},{"safe-buffer":"eW7r9"}],"k019Y":[function(require,module,exports) {
'use strict';
var process = require("process");
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
var finished = require('./end-of-stream');
var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');
function createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
        var data = iter[kStream].read();
        // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
        }
    }
}
function onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
            }
            iter[kHandlePromise](resolve, reject);
        }, reject);
    };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream () {
        return this[kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];
        if (error !== null) return Promise.reject(error);
        if (this[kEnded]) return Promise.resolve(createIterResult(undefined, true));
        if (this[kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            process.nextTick(function() {
                if (_this[kError]) reject(_this[kError]);
                else resolve(createIterResult(undefined, true));
            });
        });
        // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[kStream].read();
            if (data !== null) return Promise.resolve(createIterResult(data, false));
            promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
    }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve(createIterResult(undefined, true));
        });
    });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {
    }, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
            } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
            var reject = iterator[kLastReject];
            // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
            }
            iterator[kError] = err;
            return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(undefined, true));
        }
        iterator[kEnded] = true;
    });
    stream.on('readable', onReadable.bind(null, iterator));
    return iterator;
};
module.exports = createReadableStreamAsyncIterator;

},{"process":"d5jf4","./end-of-stream":"aOMy2"}],"aOMy2":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function noop() {
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function eos(stream, opts, callback) {
    if (typeof opts === 'function') return eos(stream, null, opts);
    if (!opts) opts = {
    };
    callback = once(callback || noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on('finish', onfinish);
    };
    if (isRequest(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();
        else stream.on('request', onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
    }
    stream.on('end', onend);
    stream.on('finish', onfinish);
    if (opts.error !== false) stream.on('error', onerror);
    stream.on('close', onclose);
    return function() {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
    };
}
module.exports = eos;

},{"../../../errors":"aJlwj"}],"ak0YH":[function(require,module,exports) {
module.exports = function() {
    throw new Error('Readable.from is not available in the browser');
};

},{}],"ba8Mr":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';
module.exports = Transform;
var _require$codes = require('../errors').codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require('./_stream_duplex');
require('inherits')(Transform, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit('error', new ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    };
    // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true;
    // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
    }
    // When the writable side finishes, then flush out anything remaining.
    this.on('prefinish', prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === 'function' && !this._readableState.destroyed) this._flush(function(er, data) {
        done(_this, er, data);
    });
    else done(this, null, null);
}
Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
};
// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
};
// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
Transform.prototype._destroy = function(err, cb) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function done(stream, er, data) {
    if (er) return stream.emit('error', er);
    if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);
    // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

},{"../errors":"aJlwj","./_stream_duplex":"kKNA3","inherits":"bRL3M"}],"2xP98":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';
module.exports = PassThrough;
var Transform = require('./_stream_transform');
require('inherits')(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

},{"./_stream_transform":"ba8Mr","inherits":"bRL3M"}],"fyp4t":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var eos;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}
var _require$codes = require('../../../errors').codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on('close', function() {
        closed = true;
    });
    if (eos === undefined) eos = require('./end-of-stream');
    eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true;
        // request.destroy just do .end - .abort is what we want
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED('pipe'));
    };
}
function call(fn) {
    fn();
}
function pipe(from, to) {
    return from.pipe(to);
}
function popCallback(streams) {
    if (!streams.length) return noop;
    if (typeof streams[streams.length - 1] !== 'function') return noop;
    return streams.pop();
}
function pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new ERR_MISSING_ARGS('streams');
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error);
        });
    });
    return streams.reduce(pipe);
}
module.exports = pipeline;

},{"../../../errors":"aJlwj","./end-of-stream":"aOMy2"}],"bFDDq":[function(require,module,exports) {
'use strict';
var Buffer = require('buffer').Buffer;
var inherits = require('inherits');
var HashBase = require('hash-base');
var ARRAY16 = new Array(16);
var zl = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var zr = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var sl = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var sr = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];
var hl = [
    0,
    1518500249,
    1859775393,
    2400959708,
    2840853838
];
var hr = [
    1352829926,
    1548603684,
    1836072691,
    2053994217,
    0
];
function RIPEMD160() {
    HashBase.call(this, 64);
    // state
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
}
inherits(RIPEMD160, HashBase);
RIPEMD160.prototype._update = function() {
    var words = ARRAY16;
    for(var j = 0; j < 16; ++j)words[j] = this._block.readInt32LE(j * 4);
    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;
    // computation
    for(var i = 0; i < 80; i += 1){
        var tl;
        var tr;
        if (i < 16) {
            tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
            tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
        } else if (i < 32) {
            tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
            tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
        } else if (i < 48) {
            tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
            tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
        } else if (i < 64) {
            tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
            tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
        } else {
            tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
            tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
        }
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = tr;
    }
    // update state
    var t = this._b + cl + dr | 0;
    this._b = this._c + dl + er | 0;
    this._c = this._d + el + ar | 0;
    this._d = this._e + al + br | 0;
    this._e = this._a + bl + cr | 0;
    this._a = t;
};
RIPEMD160.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 128;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer;
};
function rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function fn1(a, b, c, d, e, m, k, s) {
    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}
function fn2(a, b, c, d, e, m, k, s) {
    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}
function fn3(a, b, c, d, e, m, k, s) {
    return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}
function fn4(a, b, c, d, e, m, k, s) {
    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}
function fn5(a, b, c, d, e, m, k, s) {
    return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}
module.exports = RIPEMD160;

},{"buffer":"fCgem","inherits":"bRL3M","hash-base":"51qBP"}],"jkn7m":[function(require,module,exports) {
var exports = module.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = exports[algorithm];
    if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');
    return new Algorithm();
};
exports.sha = require('./sha');
exports.sha1 = require('./sha1');
exports.sha224 = require('./sha224');
exports.sha256 = require('./sha256');
exports.sha384 = require('./sha384');
exports.sha512 = require('./sha512');

},{"./sha":"6PecA","./sha1":"iCEYJ","./sha224":"7e0O2","./sha256":"kVAym","./sha384":"bWRvM","./sha512":"aZK4H"}],"6PecA":[function(require,module,exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */ var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;
var K = [
    1518500249,
    1859775393,
    -1894007588,
    -899497514
];
var W = new Array(80);
function Sha() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
}
inherits(Sha, Hash);
Sha.prototype.init = function() {
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
    return this;
};
function rotl5(num) {
    return num << 5 | num >>> 27;
}
function rotl30(num) {
    return num << 30 | num >>> 2;
}
function ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
Sha.prototype._update = function(M) {
    var W1 = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W1[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W1[i] = W1[i - 3] ^ W1[i - 8] ^ W1[i - 14] ^ W1[i - 16];
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W1[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
Sha.prototype._hash = function() {
    var H = Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = Sha;

},{"inherits":"bRL3M","./hash":"7wpAR","safe-buffer":"eW7r9"}],"7wpAR":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
// prototype class for hash functions
function Hash(blockSize, finalSize) {
    this._block = Buffer.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
}
Hash.prototype.update = function(data, enc) {
    if (typeof data === 'string') {
        enc = enc || 'utf8';
        data = Buffer.from(data, enc);
    }
    var block = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;
    for(var offset = 0; offset < length;){
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for(var i = 0; i < remainder; i++)block[assigned + i] = data[offset + i];
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) this._update(block);
    }
    this._len += length;
    return this;
};
Hash.prototype.digest = function(enc) {
    var rem = this._len % this._blockSize;
    this._block[rem] = 128;
    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
    this._block.fill(0, rem + 1);
    if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
    }
    var bits = this._len * 8;
    // uint32
    if (bits <= 4294967295) this._block.writeUInt32BE(bits, this._blockSize - 4);
    else {
        var lowBits = (bits & 4294967295) >>> 0;
        var highBits = (bits - lowBits) / 4294967296;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }
    this._update(this._block);
    var hash = this._hash();
    return enc ? hash.toString(enc) : hash;
};
Hash.prototype._update = function() {
    throw new Error('_update must be implemented by subclass');
};
module.exports = Hash;

},{"safe-buffer":"eW7r9"}],"iCEYJ":[function(require,module,exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */ var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;
var K = [
    1518500249,
    1859775393,
    -1894007588,
    -899497514
];
var W = new Array(80);
function Sha1() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
}
inherits(Sha1, Hash);
Sha1.prototype.init = function() {
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
    return this;
};
function rotl1(num) {
    return num << 1 | num >>> 31;
}
function rotl5(num) {
    return num << 5 | num >>> 27;
}
function rotl30(num) {
    return num << 30 | num >>> 2;
}
function ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
Sha1.prototype._update = function(M) {
    var W1 = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W1[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W1[i] = rotl1(W1[i - 3] ^ W1[i - 8] ^ W1[i - 14] ^ W1[i - 16]);
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W1[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
Sha1.prototype._hash = function() {
    var H = Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = Sha1;

},{"inherits":"bRL3M","./hash":"7wpAR","safe-buffer":"eW7r9"}],"7e0O2":[function(require,module,exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ var inherits = require('inherits');
var Sha256 = require('./sha256');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;
var W = new Array(64);
function Sha224() {
    this.init();
    this._w = W // new Array(64)
    ;
    Hash.call(this, 64, 56);
}
inherits(Sha224, Sha256);
Sha224.prototype.init = function() {
    this._a = 3238371032;
    this._b = 914150663;
    this._c = 812702999;
    this._d = 4144912697;
    this._e = 4290775857;
    this._f = 1750603025;
    this._g = 1694076839;
    this._h = 3204075428;
    return this;
};
Sha224.prototype._hash = function() {
    var H = Buffer.allocUnsafe(28);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    return H;
};
module.exports = Sha224;

},{"inherits":"bRL3M","./sha256":"kVAym","./hash":"7wpAR","safe-buffer":"eW7r9"}],"kVAym":[function(require,module,exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;
var K = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
];
var W = new Array(64);
function Sha256() {
    this.init();
    this._w = W // new Array(64)
    ;
    Hash.call(this, 64, 56);
}
inherits(Sha256, Hash);
Sha256.prototype.init = function() {
    this._a = 1779033703;
    this._b = 3144134277;
    this._c = 1013904242;
    this._d = 2773480762;
    this._e = 1359893119;
    this._f = 2600822924;
    this._g = 528734635;
    this._h = 1541459225;
    return this;
};
function ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function maj(x, y, z) {
    return x & y | z & (x | y);
}
function sigma0(x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}
function sigma1(x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}
function gamma0(x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}
function gamma1(x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}
Sha256.prototype._update = function(M) {
    var W1 = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    var f = this._f | 0;
    var g = this._g | 0;
    var h = this._h | 0;
    for(var i = 0; i < 16; ++i)W1[i] = M.readInt32BE(i * 4);
    for(; i < 64; ++i)W1[i] = gamma1(W1[i - 2]) + W1[i - 7] + gamma0(W1[i - 15]) + W1[i - 16] | 0;
    for(var j = 0; j < 64; ++j){
        var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W1[j] | 0;
        var T2 = sigma0(a) + maj(a, b, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
    this._f = f + this._f | 0;
    this._g = g + this._g | 0;
    this._h = h + this._h | 0;
};
Sha256.prototype._hash = function() {
    var H = Buffer.allocUnsafe(32);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    H.writeInt32BE(this._h, 28);
    return H;
};
module.exports = Sha256;

},{"inherits":"bRL3M","./hash":"7wpAR","safe-buffer":"eW7r9"}],"bWRvM":[function(require,module,exports) {
var inherits = require('inherits');
var SHA512 = require('./sha512');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;
var W = new Array(160);
function Sha384() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
}
inherits(Sha384, SHA512);
Sha384.prototype.init = function() {
    this._ah = 3418070365;
    this._bh = 1654270250;
    this._ch = 2438529370;
    this._dh = 355462360;
    this._eh = 1731405415;
    this._fh = 2394180231;
    this._gh = 3675008525;
    this._hh = 1203062813;
    this._al = 3238371032;
    this._bl = 914150663;
    this._cl = 812702999;
    this._dl = 4144912697;
    this._el = 4290775857;
    this._fl = 1750603025;
    this._gl = 1694076839;
    this._hl = 3204075428;
    return this;
};
Sha384.prototype._hash = function() {
    var H = Buffer.allocUnsafe(48);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    return H;
};
module.exports = Sha384;

},{"inherits":"bRL3M","./sha512":"aZK4H","./hash":"7wpAR","safe-buffer":"eW7r9"}],"aZK4H":[function(require,module,exports) {
var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;
var K = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
];
var W = new Array(160);
function Sha512() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
}
inherits(Sha512, Hash);
Sha512.prototype.init = function() {
    this._ah = 1779033703;
    this._bh = 3144134277;
    this._ch = 1013904242;
    this._dh = 2773480762;
    this._eh = 1359893119;
    this._fh = 2600822924;
    this._gh = 528734635;
    this._hh = 1541459225;
    this._al = 4089235720;
    this._bl = 2227873595;
    this._cl = 4271175723;
    this._dl = 1595750129;
    this._el = 2917565137;
    this._fl = 725511199;
    this._gl = 4215389547;
    this._hl = 327033209;
    return this;
};
function Ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function maj(x, y, z) {
    return x & y | z & (x | y);
}
function sigma0(x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}
function sigma1(x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}
function Gamma0(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}
function Gamma0l(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}
function Gamma1(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}
function Gamma1l(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}
function getCarry(a, b) {
    return a >>> 0 < b >>> 0 ? 1 : 0;
}
Sha512.prototype._update = function(M) {
    var W1 = this._w;
    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;
    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;
    for(var i = 0; i < 32; i += 2){
        W1[i] = M.readInt32BE(i * 4);
        W1[i + 1] = M.readInt32BE(i * 4 + 4);
    }
    for(; i < 160; i += 2){
        var xh = W1[i - 30];
        var xl = W1[i - 30 + 1];
        var gamma0 = Gamma0(xh, xl);
        var gamma0l = Gamma0l(xl, xh);
        xh = W1[i - 4];
        xl = W1[i - 4 + 1];
        var gamma1 = Gamma1(xh, xl);
        var gamma1l = Gamma1l(xl, xh);
        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W1[i - 14];
        var Wi7l = W1[i - 14 + 1];
        var Wi16h = W1[i - 32];
        var Wi16l = W1[i - 32 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
        W1[i] = Wih;
        W1[i + 1] = Wil;
    }
    for(var j = 0; j < 160; j += 2){
        Wih = W1[j];
        Wil = W1[j + 1];
        var majh = maj(ah, bh, ch);
        var majl = maj(al, bl, cl);
        var sigma0h = sigma0(ah, al);
        var sigma0l = sigma0(al, ah);
        var sigma1h = sigma1(eh, el);
        var sigma1l = sigma1(el, eh);
        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = K[j];
        var Kil = K[j + 1];
        var chh = Ch(eh, fh, gh);
        var chl = Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
        // t2 = sigma0 + maj
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + getCarry(al, t1l) | 0;
    }
    this._al = this._al + al | 0;
    this._bl = this._bl + bl | 0;
    this._cl = this._cl + cl | 0;
    this._dl = this._dl + dl | 0;
    this._el = this._el + el | 0;
    this._fl = this._fl + fl | 0;
    this._gl = this._gl + gl | 0;
    this._hl = this._hl + hl | 0;
    this._ah = this._ah + ah + getCarry(this._al, al) | 0;
    this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
    this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
    this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
    this._eh = this._eh + eh + getCarry(this._el, el) | 0;
    this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
    this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
    this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
};
Sha512.prototype._hash = function() {
    var H = Buffer.allocUnsafe(64);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);
    return H;
};
module.exports = Sha512;

},{"inherits":"bRL3M","./hash":"7wpAR","safe-buffer":"eW7r9"}],"g5fTz":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
var Transform = require('stream').Transform;
var StringDecoder = require('string_decoder').StringDecoder;
var inherits = require('inherits');
function CipherBase(hashMode) {
    Transform.call(this);
    this.hashMode = typeof hashMode === 'string';
    if (this.hashMode) this[hashMode] = this._finalOrDigest;
    else this.final = this._finalOrDigest;
    if (this._final) {
        this.__final = this._final;
        this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
}
inherits(CipherBase, Transform);
CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
    if (typeof data === 'string') data = Buffer.from(data, inputEnc);
    var outData = this._update(data);
    if (this.hashMode) return this;
    if (outputEnc) outData = this._toString(outData, outputEnc);
    return outData;
};
CipherBase.prototype.setAutoPadding = function() {
};
CipherBase.prototype.getAuthTag = function() {
    throw new Error('trying to get auth tag in unsupported state');
};
CipherBase.prototype.setAuthTag = function() {
    throw new Error('trying to set auth tag in unsupported state');
};
CipherBase.prototype.setAAD = function() {
    throw new Error('trying to set aad in unsupported state');
};
CipherBase.prototype._transform = function(data, _, next) {
    var err;
    try {
        if (this.hashMode) this._update(data);
        else this.push(this._update(data));
    } catch (e) {
        err = e;
    } finally{
        next(err);
    }
};
CipherBase.prototype._flush = function(done) {
    var err;
    try {
        this.push(this.__final());
    } catch (e) {
        err = e;
    }
    done(err);
};
CipherBase.prototype._finalOrDigest = function(outputEnc) {
    var outData = this.__final() || Buffer.alloc(0);
    if (outputEnc) outData = this._toString(outData, outputEnc, true);
    return outData;
};
CipherBase.prototype._toString = function(value, enc, fin) {
    if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
    }
    if (this._encoding !== enc) throw new Error('can\'t switch encodings');
    var out = this._decoder.write(value);
    if (fin) out += this._decoder.end();
    return out;
};
module.exports = CipherBase;

},{"safe-buffer":"eW7r9","stream":"j77ns","string_decoder":"3vmkr","inherits":"bRL3M"}],"j77ns":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = Stream;
var EE = require('events').EventEmitter;
var inherits = require('inherits');
inherits(Stream, EE);
Stream.Readable = require('readable-stream/lib/_stream_readable.js');
Stream.Writable = require('readable-stream/lib/_stream_writable.js');
Stream.Duplex = require('readable-stream/lib/_stream_duplex.js');
Stream.Transform = require('readable-stream/lib/_stream_transform.js');
Stream.PassThrough = require('readable-stream/lib/_stream_passthrough.js');
Stream.finished = require('readable-stream/lib/internal/streams/end-of-stream.js');
Stream.pipeline = require('readable-stream/lib/internal/streams/pipeline.js');
// Backwards-compat with node 0.4.x
Stream.Stream = Stream;
// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.
function Stream() {
    EE.call(this);
}
Stream.prototype.pipe = function(dest, options) {
    var source = this;
    function ondata(chunk) {
        if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) source.pause();
        }
    }
    source.on('data', ondata);
    function ondrain() {
        if (source.readable && source.resume) source.resume();
    }
    dest.on('drain', ondrain);
    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
    }
    var didOnEnd = false;
    function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
    }
    function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === 'function') dest.destroy();
    }
    // don't leave dangling pipes when there are errors.
    function onerror(er) {
        cleanup();
        if (EE.listenerCount(this, 'error') === 0) throw er; // Unhandled stream error in pipe.
    }
    source.on('error', onerror);
    dest.on('error', onerror);
    // remove all the event listeners that were added.
    function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);
        source.removeListener('end', onend);
        source.removeListener('close', onclose);
        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);
        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);
        dest.removeListener('close', cleanup);
    }
    source.on('end', cleanup);
    source.on('close', cleanup);
    dest.on('close', cleanup);
    dest.emit('pipe', source);
    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
};

},{"events":"1VQLm","inherits":"bRL3M","readable-stream/lib/_stream_readable.js":"6NdbQ","readable-stream/lib/_stream_writable.js":"gTkcq","readable-stream/lib/_stream_duplex.js":"kKNA3","readable-stream/lib/_stream_transform.js":"ba8Mr","readable-stream/lib/_stream_passthrough.js":"2xP98","readable-stream/lib/internal/streams/end-of-stream.js":"aOMy2","readable-stream/lib/internal/streams/pipeline.js":"fyp4t"}],"k1utz":[function(require,module,exports) {
'use strict';
var inherits = require('inherits');
var Legacy = require('./legacy');
var Base = require('cipher-base');
var Buffer = require('safe-buffer').Buffer;
var md5 = require('create-hash/md5');
var RIPEMD160 = require('ripemd160');
var sha = require('sha.js');
var ZEROS = Buffer.alloc(128);
function Hmac(alg, key) {
    Base.call(this, 'digest');
    if (typeof key === 'string') key = Buffer.from(key);
    var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) {
        var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
        key = hash.update(key).digest();
    } else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
    var opad = this._opad = Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
    }
    this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
    this._hash.update(ipad);
}
inherits(Hmac, Base);
Hmac.prototype._update = function(data) {
    this._hash.update(data);
};
Hmac.prototype._final = function() {
    var h = this._hash.digest();
    var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg);
    return hash.update(this._opad).update(h).digest();
};
module.exports = function createHmac(alg, key) {
    alg = alg.toLowerCase();
    if (alg === 'rmd160' || alg === 'ripemd160') return new Hmac('rmd160', key);
    if (alg === 'md5') return new Legacy(md5, key);
    return new Hmac(alg, key);
};

},{"inherits":"bRL3M","./legacy":"kO6k7","cipher-base":"g5fTz","safe-buffer":"eW7r9","create-hash/md5":"h5gRT","ripemd160":"bFDDq","sha.js":"jkn7m"}],"kO6k7":[function(require,module,exports) {
'use strict';
var inherits = require('inherits');
var Buffer = require('safe-buffer').Buffer;
var Base = require('cipher-base');
var ZEROS = Buffer.alloc(128);
var blocksize = 64;
function Hmac(alg, key) {
    Base.call(this, 'digest');
    if (typeof key === 'string') key = Buffer.from(key);
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) key = alg(key);
    else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
    var opad = this._opad = Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
    }
    this._hash = [
        ipad
    ];
}
inherits(Hmac, Base);
Hmac.prototype._update = function(data) {
    this._hash.push(data);
};
Hmac.prototype._final = function() {
    var h = this._alg(Buffer.concat(this._hash));
    return this._alg(Buffer.concat([
        this._opad,
        h
    ]));
};
module.exports = Hmac;

},{"inherits":"bRL3M","safe-buffer":"eW7r9","cipher-base":"g5fTz"}],"h5gRT":[function(require,module,exports) {
var MD5 = require('md5.js');
module.exports = function(buffer) {
    return new MD5().update(buffer).digest();
};

},{"md5.js":"45VeE"}],"busIB":[function(require,module,exports) {
module.exports = require('./browser/algorithms.json');

},{"./browser/algorithms.json":"kWFdV"}],"kWFdV":[function(require,module,exports) {
module.exports = JSON.parse("{\"sha224WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"RSA-SHA224\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"sha256WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"RSA-SHA256\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"sha384WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"RSA-SHA384\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"sha512WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA512\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA1\":{\"sign\":\"rsa\",\"hash\":\"sha1\",\"id\":\"3021300906052b0e03021a05000414\"},\"ecdsa-with-SHA1\":{\"sign\":\"ecdsa\",\"hash\":\"sha1\",\"id\":\"\"},\"sha256\":{\"sign\":\"ecdsa\",\"hash\":\"sha256\",\"id\":\"\"},\"sha224\":{\"sign\":\"ecdsa\",\"hash\":\"sha224\",\"id\":\"\"},\"sha384\":{\"sign\":\"ecdsa\",\"hash\":\"sha384\",\"id\":\"\"},\"sha512\":{\"sign\":\"ecdsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-SHA1\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-WITH-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-WITH-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-WITH-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-WITH-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-RIPEMD160\":{\"sign\":\"dsa\",\"hash\":\"rmd160\",\"id\":\"\"},\"ripemd160WithRSA\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"RSA-RIPEMD160\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"md5WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"},\"RSA-MD5\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"}}");

},{}],"g38Hg":[function(require,module,exports) {
exports.pbkdf2 = require('./lib/async');
exports.pbkdf2Sync = require('./lib/sync');

},{"./lib/async":"aqdig","./lib/sync":"lh9gw"}],"aqdig":[function(require,module,exports) {
var global = arguments[3];
var Buffer = require('safe-buffer').Buffer;
var checkParameters = require('./precondition');
var defaultEncoding = require('./default-encoding');
var sync = require('./sync');
var toBuffer = require('./to-buffer');
var ZERO_BUF;
var subtle = global.crypto && global.crypto.subtle;
var toBrowser = {
    sha: 'SHA-1',
    'sha-1': 'SHA-1',
    sha1: 'SHA-1',
    sha256: 'SHA-256',
    'sha-256': 'SHA-256',
    sha384: 'SHA-384',
    'sha-384': 'SHA-384',
    'sha-512': 'SHA-512',
    sha512: 'SHA-512'
};
var checks = [];
function checkNative(algo) {
    if (global.process && !global.process.browser) return Promise.resolve(false);
    if (!subtle || !subtle.importKey || !subtle.deriveBits) return Promise.resolve(false);
    if (checks[algo] !== undefined) return checks[algo];
    ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
    var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {
        return true;
    }).catch(function() {
        return false;
    });
    checks[algo] = prom;
    return prom;
}
var nextTick;
function getNextTick() {
    if (nextTick) return nextTick;
    if (global.process && global.process.nextTick) nextTick = global.process.nextTick;
    else if (global.queueMicrotask) nextTick = global.queueMicrotask;
    else if (global.setImmediate) nextTick = global.setImmediate;
    else nextTick = global.setTimeout;
    return nextTick;
}
function browserPbkdf2(password, salt, iterations, length, algo) {
    return subtle.importKey('raw', password, {
        name: 'PBKDF2'
    }, false, [
        'deriveBits'
    ]).then(function(key) {
        return subtle.deriveBits({
            name: 'PBKDF2',
            salt: salt,
            iterations: iterations,
            hash: {
                name: algo
            }
        }, key, length << 3);
    }).then(function(res) {
        return Buffer.from(res);
    });
}
function resolvePromise(promise, callback) {
    promise.then(function(out) {
        getNextTick()(function() {
            callback(null, out);
        });
    }, function(e) {
        getNextTick()(function() {
            callback(e);
        });
    });
}
module.exports = function(password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === 'function') {
        callback = digest;
        digest = undefined;
    }
    digest = digest || 'sha1';
    var algo = toBrowser[digest.toLowerCase()];
    if (!algo || typeof global.Promise !== 'function') {
        getNextTick()(function() {
            var out;
            try {
                out = sync(password, salt, iterations, keylen, digest);
            } catch (e) {
                return callback(e);
            }
            callback(null, out);
        });
        return;
    }
    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, 'Password');
    salt = toBuffer(salt, defaultEncoding, 'Salt');
    if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');
    resolvePromise(checkNative(algo).then(function(resp) {
        if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
        return sync(password, salt, iterations, keylen, digest);
    }), callback);
};

},{"safe-buffer":"eW7r9","./precondition":"jg75G","./default-encoding":"T9r9Q","./sync":"lh9gw","./to-buffer":"kaFyH"}],"jg75G":[function(require,module,exports) {
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
;
module.exports = function(iterations, keylen) {
    if (typeof iterations !== 'number') throw new TypeError('Iterations not a number');
    if (iterations < 0) throw new TypeError('Bad iterations');
    if (typeof keylen !== 'number') throw new TypeError('Key length not a number');
    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) throw new TypeError('Bad key length');
};

},{}],"T9r9Q":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
var defaultEncoding;
/* istanbul ignore next */ if (global.process && global.process.browser) defaultEncoding = 'utf-8';
else if (global.process && global.process.version) {
    var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);
    defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
} else defaultEncoding = 'utf-8';
module.exports = defaultEncoding;

},{"process":"d5jf4"}],"lh9gw":[function(require,module,exports) {
var md5 = require('create-hash/md5');
var RIPEMD160 = require('ripemd160');
var sha = require('sha.js');
var Buffer = require('safe-buffer').Buffer;
var checkParameters = require('./precondition');
var defaultEncoding = require('./default-encoding');
var toBuffer = require('./to-buffer');
var ZEROS = Buffer.alloc(128);
var sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
};
function Hmac(alg, key, saltLen) {
    var hash = getDigest(alg);
    var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
    if (key.length > blocksize) key = hash(key);
    else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = Buffer.allocUnsafe(blocksize + sizes[alg]);
    var opad = Buffer.allocUnsafe(blocksize + sizes[alg]);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
    }
    var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4);
    ipad.copy(ipad1, 0, 0, blocksize);
    this.ipad1 = ipad1;
    this.ipad2 = ipad;
    this.opad = opad;
    this.alg = alg;
    this.blocksize = blocksize;
    this.hash = hash;
    this.size = sizes[alg];
}
Hmac.prototype.run = function(data, ipad) {
    data.copy(ipad, this.blocksize);
    var h = this.hash(ipad);
    h.copy(this.opad, this.blocksize);
    return this.hash(this.opad);
};
function getDigest(alg) {
    function shaFunc(data) {
        return sha(alg).update(data).digest();
    }
    function rmd160Func(data) {
        return new RIPEMD160().update(data).digest();
    }
    if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func;
    if (alg === 'md5') return md5;
    return shaFunc;
}
function pbkdf2(password, salt, iterations, keylen, digest) {
    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, 'Password');
    salt = toBuffer(salt, defaultEncoding, 'Salt');
    digest = digest || 'sha1';
    var hmac = new Hmac(digest, password, salt.length);
    var DK = Buffer.allocUnsafe(keylen);
    var block1 = Buffer.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);
    var destPos = 0;
    var hLen = sizes[digest];
    var l = Math.ceil(keylen / hLen);
    for(var i = 1; i <= l; i++){
        block1.writeUInt32BE(i, salt.length);
        var T = hmac.run(block1, hmac.ipad1);
        var U = T;
        for(var j = 1; j < iterations; j++){
            U = hmac.run(U, hmac.ipad2);
            for(var k = 0; k < hLen; k++)T[k] ^= U[k];
        }
        T.copy(DK, destPos);
        destPos += hLen;
    }
    return DK;
}
module.exports = pbkdf2;

},{"create-hash/md5":"h5gRT","ripemd160":"bFDDq","sha.js":"jkn7m","safe-buffer":"eW7r9","./precondition":"jg75G","./default-encoding":"T9r9Q","./to-buffer":"kaFyH"}],"kaFyH":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
module.exports = function(thing, encoding, name) {
    if (Buffer.isBuffer(thing)) return thing;
    else if (typeof thing === 'string') return Buffer.from(thing, encoding);
    else if (ArrayBuffer.isView(thing)) return Buffer.from(thing.buffer);
    else throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView');
};

},{"safe-buffer":"eW7r9"}],"d4idn":[function(require,module,exports) {
var DES = require('browserify-des');
var aes = require('browserify-aes/browser');
var aesModes = require('browserify-aes/modes');
var desModes = require('browserify-des/modes');
var ebtk = require('evp_bytestokey');
function createCipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
    } else throw new TypeError('invalid suite type');
    var keys = ebtk(password, false, keyLen, ivLen);
    return createCipheriv(suite, keys.key, keys.iv);
}
function createDecipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
    } else throw new TypeError('invalid suite type');
    var keys = ebtk(password, false, keyLen, ivLen);
    return createDecipheriv(suite, keys.key, keys.iv);
}
function createCipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite]) return aes.createCipheriv(suite, key, iv);
    if (desModes[suite]) return new DES({
        key: key,
        iv: iv,
        mode: suite
    });
    throw new TypeError('invalid suite type');
}
function createDecipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv);
    if (desModes[suite]) return new DES({
        key: key,
        iv: iv,
        mode: suite,
        decrypt: true
    });
    throw new TypeError('invalid suite type');
}
function getCiphers() {
    return Object.keys(desModes).concat(aes.getCiphers());
}
exports.createCipher = exports.Cipher = createCipher;
exports.createCipheriv = exports.Cipheriv = createCipheriv;
exports.createDecipher = exports.Decipher = createDecipher;
exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
exports.listCiphers = exports.getCiphers = getCiphers;

},{"browserify-des":"d7hSK","browserify-aes/browser":"hnlHj","browserify-aes/modes":"jyQSU","browserify-des/modes":"iO8co","evp_bytestokey":"1rd4d"}],"d7hSK":[function(require,module,exports) {
var CipherBase = require('cipher-base');
var des = require('des.js');
var inherits = require('inherits');
var Buffer = require('safe-buffer').Buffer;
var modes = {
    'des-ede3-cbc': des.CBC.instantiate(des.EDE),
    'des-ede3': des.EDE,
    'des-ede-cbc': des.CBC.instantiate(des.EDE),
    'des-ede': des.EDE,
    'des-cbc': des.CBC.instantiate(des.DES),
    'des-ecb': des.DES
};
modes.des = modes['des-cbc'];
modes.des3 = modes['des-ede3-cbc'];
module.exports = DES;
inherits(DES, CipherBase);
function DES(opts) {
    CipherBase.call(this);
    var modeName = opts.mode.toLowerCase();
    var mode = modes[modeName];
    var type;
    if (opts.decrypt) type = 'decrypt';
    else type = 'encrypt';
    var key = opts.key;
    if (!Buffer.isBuffer(key)) key = Buffer.from(key);
    if (modeName === 'des-ede' || modeName === 'des-ede-cbc') key = Buffer.concat([
        key,
        key.slice(0, 8)
    ]);
    var iv = opts.iv;
    if (!Buffer.isBuffer(iv)) iv = Buffer.from(iv);
    this._des = mode.create({
        key: key,
        iv: iv,
        type: type
    });
}
DES.prototype._update = function(data) {
    return Buffer.from(this._des.update(data));
};
DES.prototype._final = function() {
    return Buffer.from(this._des.final());
};

},{"cipher-base":"g5fTz","des.js":"jn95T","inherits":"bRL3M","safe-buffer":"eW7r9"}],"jn95T":[function(require,module,exports) {
'use strict';
exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/utils":"aeccw","./des/cipher":"jz3In","./des/des":"gDFTo","./des/cbc":"lPo0P","./des/ede":"avp7S"}],"aeccw":[function(require,module,exports) {
'use strict';
exports.readUInt32BE = function readUInt32BE(bytes, off) {
    var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
    return res >>> 0;
};
exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
    bytes[0 + off] = value >>> 24;
    bytes[1 + off] = value >>> 16 & 255;
    bytes[2 + off] = value >>> 8 & 255;
    bytes[3 + off] = value & 255;
};
exports.ip = function ip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >>> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >>> j + i & 1;
        }
    }
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inR >>> j + i & 1;
        }
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inL >>> j + i & 1;
        }
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.rip = function rip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 0; i < 4; i++)for(var j = 24; j >= 0; j -= 8){
        outL <<= 1;
        outL |= inR >>> j + i & 1;
        outL <<= 1;
        outL |= inL >>> j + i & 1;
    }
    for(var i = 4; i < 8; i++)for(var j = 24; j >= 0; j -= 8){
        outR <<= 1;
        outR |= inR >>> j + i & 1;
        outR <<= 1;
        outR |= inL >>> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.pc1 = function pc1(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    // 7, 15, 23, 31, 39, 47, 55, 63
    // 6, 14, 22, 30, 39, 47, 55, 63
    // 5, 13, 21, 29, 39, 47, 55, 63
    // 4, 12, 20, 28
    for(var i = 7; i >= 5; i--){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outL <<= 1;
        outL |= inR >> j + i & 1;
    }
    // 1, 9, 17, 25, 33, 41, 49, 57
    // 2, 10, 18, 26, 34, 42, 50, 58
    // 3, 11, 19, 27, 35, 43, 51, 59
    // 36, 44, 52, 60
    for(var i = 1; i <= 3; i++){
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outR <<= 1;
        outR |= inL >> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.r28shl = function r28shl(num, shift) {
    return num << shift & 268435455 | num >>> 28 - shift;
};
var pc2table = [
    // inL => outL
    14,
    11,
    17,
    4,
    27,
    23,
    25,
    0,
    13,
    22,
    7,
    18,
    5,
    9,
    16,
    24,
    2,
    20,
    12,
    21,
    1,
    8,
    15,
    26,
    // inR => outR
    15,
    4,
    25,
    19,
    9,
    1,
    26,
    16,
    5,
    11,
    23,
    8,
    12,
    7,
    17,
    0,
    22,
    3,
    10,
    14,
    6,
    20,
    27,
    24
];
exports.pc2 = function pc2(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    var len = pc2table.length >>> 1;
    for(var i = 0; i < len; i++){
        outL <<= 1;
        outL |= inL >>> pc2table[i] & 1;
    }
    for(var i = len; i < pc2table.length; i++){
        outR <<= 1;
        outR |= inR >>> pc2table[i] & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.expand = function expand(r, out, off) {
    var outL = 0;
    var outR = 0;
    outL = (r & 1) << 5 | r >>> 27;
    for(var i = 23; i >= 15; i -= 4){
        outL <<= 6;
        outL |= r >>> i & 63;
    }
    for(var i = 11; i >= 3; i -= 4){
        outR |= r >>> i & 63;
        outR <<= 6;
    }
    outR |= (r & 31) << 1 | r >>> 31;
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
var sTable = [
    14,
    0,
    4,
    15,
    13,
    7,
    1,
    4,
    2,
    14,
    15,
    2,
    11,
    13,
    8,
    1,
    3,
    10,
    10,
    6,
    6,
    12,
    12,
    11,
    5,
    9,
    9,
    5,
    0,
    3,
    7,
    8,
    4,
    15,
    1,
    12,
    14,
    8,
    8,
    2,
    13,
    4,
    6,
    9,
    2,
    1,
    11,
    7,
    15,
    5,
    12,
    11,
    9,
    3,
    7,
    14,
    3,
    10,
    10,
    0,
    5,
    6,
    0,
    13,
    15,
    3,
    1,
    13,
    8,
    4,
    14,
    7,
    6,
    15,
    11,
    2,
    3,
    8,
    4,
    14,
    9,
    12,
    7,
    0,
    2,
    1,
    13,
    10,
    12,
    6,
    0,
    9,
    5,
    11,
    10,
    5,
    0,
    13,
    14,
    8,
    7,
    10,
    11,
    1,
    10,
    3,
    4,
    15,
    13,
    4,
    1,
    2,
    5,
    11,
    8,
    6,
    12,
    7,
    6,
    12,
    9,
    0,
    3,
    5,
    2,
    14,
    15,
    9,
    10,
    13,
    0,
    7,
    9,
    0,
    14,
    9,
    6,
    3,
    3,
    4,
    15,
    6,
    5,
    10,
    1,
    2,
    13,
    8,
    12,
    5,
    7,
    14,
    11,
    12,
    4,
    11,
    2,
    15,
    8,
    1,
    13,
    1,
    6,
    10,
    4,
    13,
    9,
    0,
    8,
    6,
    15,
    9,
    3,
    8,
    0,
    7,
    11,
    4,
    1,
    15,
    2,
    14,
    12,
    3,
    5,
    11,
    10,
    5,
    14,
    2,
    7,
    12,
    7,
    13,
    13,
    8,
    14,
    11,
    3,
    5,
    0,
    6,
    6,
    15,
    9,
    0,
    10,
    3,
    1,
    4,
    2,
    7,
    8,
    2,
    5,
    12,
    11,
    1,
    12,
    10,
    4,
    14,
    15,
    9,
    10,
    3,
    6,
    15,
    9,
    0,
    0,
    6,
    12,
    10,
    11,
    1,
    7,
    13,
    13,
    8,
    15,
    9,
    1,
    4,
    3,
    5,
    14,
    11,
    5,
    12,
    2,
    7,
    8,
    2,
    4,
    14,
    2,
    14,
    12,
    11,
    4,
    2,
    1,
    12,
    7,
    4,
    10,
    7,
    11,
    13,
    6,
    1,
    8,
    5,
    5,
    0,
    3,
    15,
    15,
    10,
    13,
    3,
    0,
    9,
    14,
    8,
    9,
    6,
    4,
    11,
    2,
    8,
    1,
    12,
    11,
    7,
    10,
    1,
    13,
    14,
    7,
    2,
    8,
    13,
    15,
    6,
    9,
    15,
    12,
    0,
    5,
    9,
    6,
    10,
    3,
    4,
    0,
    5,
    14,
    3,
    12,
    10,
    1,
    15,
    10,
    4,
    15,
    2,
    9,
    7,
    2,
    12,
    6,
    9,
    8,
    5,
    0,
    6,
    13,
    1,
    3,
    13,
    4,
    14,
    14,
    0,
    7,
    11,
    5,
    3,
    11,
    8,
    9,
    4,
    14,
    3,
    15,
    2,
    5,
    12,
    2,
    9,
    8,
    5,
    12,
    15,
    3,
    10,
    7,
    11,
    0,
    14,
    4,
    1,
    10,
    7,
    1,
    6,
    13,
    0,
    11,
    8,
    6,
    13,
    4,
    13,
    11,
    0,
    2,
    11,
    14,
    7,
    15,
    4,
    0,
    9,
    8,
    1,
    13,
    10,
    3,
    14,
    12,
    3,
    9,
    5,
    7,
    12,
    5,
    2,
    10,
    15,
    6,
    8,
    1,
    6,
    1,
    6,
    4,
    11,
    11,
    13,
    13,
    8,
    12,
    1,
    3,
    4,
    7,
    10,
    14,
    7,
    10,
    9,
    15,
    5,
    6,
    0,
    8,
    15,
    0,
    14,
    5,
    2,
    9,
    3,
    2,
    12,
    13,
    1,
    2,
    15,
    8,
    13,
    4,
    8,
    6,
    10,
    15,
    3,
    11,
    7,
    1,
    4,
    10,
    12,
    9,
    5,
    3,
    6,
    14,
    11,
    5,
    0,
    0,
    14,
    12,
    9,
    7,
    2,
    7,
    2,
    11,
    1,
    4,
    14,
    1,
    7,
    9,
    4,
    12,
    10,
    14,
    8,
    2,
    13,
    0,
    15,
    6,
    12,
    10,
    9,
    13,
    0,
    15,
    3,
    3,
    5,
    5,
    6,
    8,
    11
];
exports.substitute = function substitute(inL, inR) {
    var out = 0;
    for(var i = 0; i < 4; i++){
        var b = inL >>> 18 - i * 6 & 63;
        var sb = sTable[i * 64 + b];
        out <<= 4;
        out |= sb;
    }
    for(var i = 0; i < 4; i++){
        var b = inR >>> 18 - i * 6 & 63;
        var sb = sTable[256 + i * 64 + b];
        out <<= 4;
        out |= sb;
    }
    return out >>> 0;
};
var permuteTable = [
    16,
    25,
    12,
    11,
    3,
    20,
    4,
    15,
    31,
    17,
    9,
    6,
    27,
    14,
    1,
    22,
    30,
    24,
    8,
    18,
    0,
    5,
    29,
    23,
    13,
    19,
    2,
    26,
    10,
    21,
    28,
    7
];
exports.permute = function permute(num) {
    var out = 0;
    for(var i = 0; i < permuteTable.length; i++){
        out <<= 1;
        out |= num >>> permuteTable[i] & 1;
    }
    return out >>> 0;
};
exports.padSplit = function padSplit(num, size, group) {
    var str = num.toString(2);
    while(str.length < size)str = '0' + str;
    var out = [];
    for(var i = 0; i < size; i += group)out.push(str.slice(i, i + group));
    return out.join(' ');
};

},{}],"jz3In":[function(require,module,exports) {
'use strict';
var assert = require('minimalistic-assert');
function Cipher(options) {
    this.options = options;
    this.type = this.options.type;
    this.blockSize = 8;
    this._init();
    this.buffer = new Array(this.blockSize);
    this.bufferOff = 0;
    this.padding = options.padding !== false;
}
module.exports = Cipher;
Cipher.prototype._init = function _init() {
// Might be overrided
};
Cipher.prototype.update = function update(data) {
    if (data.length === 0) return [];
    if (this.type === 'decrypt') return this._updateDecrypt(data);
    else return this._updateEncrypt(data);
};
Cipher.prototype._buffer = function _buffer(data, off) {
    // Append data to buffer
    var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
    for(var i = 0; i < min; i++)this.buffer[this.bufferOff + i] = data[off + i];
    this.bufferOff += min;
    // Shift next
    return min;
};
Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
    this._update(this.buffer, 0, out, off);
    this.bufferOff = 0;
    return this.blockSize;
};
Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = (this.bufferOff + data.length) / this.blockSize | 0;
    var out = new Array(count * this.blockSize);
    if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
        if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
    }
    // Write blocks
    var max = data.length - (data.length - inputOff) % this.blockSize;
    for(; inputOff < max; inputOff += this.blockSize){
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
    }
    // Queue rest
    for(; inputOff < data.length; inputOff++, this.bufferOff++)this.buffer[this.bufferOff] = data[inputOff];
    return out;
};
Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
    var out = new Array(count * this.blockSize);
    // TODO(indutny): optimize it, this is far from optimal
    for(; count > 0; count--){
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
    }
    // Buffer rest of the input
    inputOff += this._buffer(data, inputOff);
    return out;
};
Cipher.prototype.final = function final(buffer) {
    var first;
    if (buffer) first = this.update(buffer);
    var last;
    if (this.type === 'encrypt') last = this._finalEncrypt();
    else last = this._finalDecrypt();
    if (first) return first.concat(last);
    else return last;
};
Cipher.prototype._pad = function _pad(buffer, off) {
    if (off === 0) return false;
    while(off < buffer.length)buffer[off++] = 0;
    return true;
};
Cipher.prototype._finalEncrypt = function _finalEncrypt() {
    if (!this._pad(this.buffer, this.bufferOff)) return [];
    var out = new Array(this.blockSize);
    this._update(this.buffer, 0, out, 0);
    return out;
};
Cipher.prototype._unpad = function _unpad(buffer) {
    return buffer;
};
Cipher.prototype._finalDecrypt = function _finalDecrypt() {
    assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
    var out = new Array(this.blockSize);
    this._flushBuffer(out, 0);
    return this._unpad(out);
};

},{"minimalistic-assert":"8OvWh"}],"8OvWh":[function(require,module,exports) {
module.exports = assert;
function assert(val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
}
assert.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
};

},{}],"gDFTo":[function(require,module,exports) {
'use strict';
var assert = require('minimalistic-assert');
var inherits = require('inherits');
var utils = require('./utils');
var Cipher = require('./cipher');
function DESState() {
    this.tmp = new Array(2);
    this.keys = null;
}
function DES(options) {
    Cipher.call(this, options);
    var state = new DESState();
    this._desState = state;
    this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;
DES.create = function create(options) {
    return new DES(options);
};
var shiftTable = [
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1
];
DES.prototype.deriveKeys = function deriveKeys(state, key) {
    state.keys = new Array(32);
    assert.equal(key.length, this.blockSize, 'Invalid key length');
    var kL = utils.readUInt32BE(key, 0);
    var kR = utils.readUInt32BE(key, 4);
    utils.pc1(kL, kR, state.tmp, 0);
    kL = state.tmp[0];
    kR = state.tmp[1];
    for(var i = 0; i < state.keys.length; i += 2){
        var shift = shiftTable[i >>> 1];
        kL = utils.r28shl(kL, shift);
        kR = utils.r28shl(kR, shift);
        utils.pc2(kL, kR, state.keys, i);
    }
};
DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._desState;
    var l = utils.readUInt32BE(inp, inOff);
    var r = utils.readUInt32BE(inp, inOff + 4);
    // Initial Permutation
    utils.ip(l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    if (this.type === 'encrypt') this._encrypt(state, l, r, state.tmp, 0);
    else this._decrypt(state, l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    utils.writeUInt32BE(out, l, outOff);
    utils.writeUInt32BE(out, r, outOff + 4);
};
DES.prototype._pad = function _pad(buffer, off) {
    if (this.padding === false) return false;
    var value = buffer.length - off;
    for(var i = off; i < buffer.length; i++)buffer[i] = value;
    return true;
};
DES.prototype._unpad = function _unpad(buffer) {
    if (this.padding === false) return buffer;
    var pad = buffer[buffer.length - 1];
    for(var i = buffer.length - pad; i < buffer.length; i++)assert.equal(buffer[i], pad);
    return buffer.slice(0, buffer.length - pad);
};
DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
    var l = lStart;
    var r = rStart;
    // Apply f() x16 times
    for(var i = 0; i < state.keys.length; i += 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        utils.expand(r, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
    }
    // Reverse Initial Permutation
    utils.rip(r, l, out, off);
};
DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
    var l = rStart;
    var r = lStart;
    // Apply f() x16 times
    for(var i = state.keys.length - 2; i >= 0; i -= 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        utils.expand(l, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
    }
    // Reverse Initial Permutation
    utils.rip(l, r, out, off);
};

},{"minimalistic-assert":"8OvWh","inherits":"bRL3M","./utils":"aeccw","./cipher":"jz3In"}],"lPo0P":[function(require,module,exports) {
'use strict';
var assert = require('minimalistic-assert');
var inherits = require('inherits');
var proto = {
};
function CBCState(iv) {
    assert.equal(iv.length, 8, 'Invalid IV length');
    this.iv = new Array(8);
    for(var i = 0; i < this.iv.length; i++)this.iv[i] = iv[i];
}
function instantiate(Base) {
    function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
    }
    inherits(CBC, Base);
    var keys = Object.keys(proto);
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        CBC.prototype[key] = proto[key];
    }
    CBC.create = function create(options) {
        return new CBC(options);
    };
    return CBC;
}
exports.instantiate = instantiate;
proto._cbcInit = function _cbcInit() {
    var state = new CBCState(this.options.iv);
    this._cbcState = state;
};
proto._update = function _update(inp, inOff, out, outOff) {
    var state = this._cbcState;
    var superProto = this.constructor.super_.prototype;
    var iv = state.iv;
    if (this.type === 'encrypt') {
        for(var i = 0; i < this.blockSize; i++)iv[i] ^= inp[inOff + i];
        superProto._update.call(this, iv, 0, out, outOff);
        for(var i = 0; i < this.blockSize; i++)iv[i] = out[outOff + i];
    } else {
        superProto._update.call(this, inp, inOff, out, outOff);
        for(var i = 0; i < this.blockSize; i++)out[outOff + i] ^= iv[i];
        for(var i = 0; i < this.blockSize; i++)iv[i] = inp[inOff + i];
    }
};

},{"minimalistic-assert":"8OvWh","inherits":"bRL3M"}],"avp7S":[function(require,module,exports) {
'use strict';
var assert = require('minimalistic-assert');
var inherits = require('inherits');
var Cipher = require('./cipher');
var DES = require('./des');
function EDEState(type, key) {
    assert.equal(key.length, 24, 'Invalid key length');
    var k1 = key.slice(0, 8);
    var k2 = key.slice(8, 16);
    var k3 = key.slice(16, 24);
    if (type === 'encrypt') this.ciphers = [
        DES.create({
            type: 'encrypt',
            key: k1
        }),
        DES.create({
            type: 'decrypt',
            key: k2
        }),
        DES.create({
            type: 'encrypt',
            key: k3
        })
    ];
    else this.ciphers = [
        DES.create({
            type: 'decrypt',
            key: k3
        }),
        DES.create({
            type: 'encrypt',
            key: k2
        }),
        DES.create({
            type: 'decrypt',
            key: k1
        })
    ];
}
function EDE(options) {
    Cipher.call(this, options);
    var state = new EDEState(this.type, this.options.key);
    this._edeState = state;
}
inherits(EDE, Cipher);
module.exports = EDE;
EDE.create = function create(options) {
    return new EDE(options);
};
EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._edeState;
    state.ciphers[0]._update(inp, inOff, out, outOff);
    state.ciphers[1]._update(out, outOff, out, outOff);
    state.ciphers[2]._update(out, outOff, out, outOff);
};
EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"minimalistic-assert":"8OvWh","inherits":"bRL3M","./cipher":"jz3In","./des":"gDFTo"}],"hnlHj":[function(require,module,exports) {
var ciphers = require('./encrypter');
var deciphers = require('./decrypter');
var modes = require('./modes/list.json');
function getCiphers() {
    return Object.keys(modes);
}
exports.createCipher = exports.Cipher = ciphers.createCipher;
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
exports.createDecipher = exports.Decipher = deciphers.createDecipher;
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;
exports.listCiphers = exports.getCiphers = getCiphers;

},{"./encrypter":"7DBsd","./decrypter":"cixt2","./modes/list.json":"1XQMU"}],"7DBsd":[function(require,module,exports) {
var MODES = require('./modes');
var AuthCipher = require('./authCipher');
var Buffer = require('safe-buffer').Buffer;
var StreamCipher = require('./streamCipher');
var Transform = require('cipher-base');
var aes = require('./aes');
var ebtk = require('evp_bytestokey');
var inherits = require('inherits');
function Cipher(mode, key, iv) {
    Transform.call(this);
    this._cache = new Splitter();
    this._cipher = new aes.AES(key);
    this._prev = Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
inherits(Cipher, Transform);
Cipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get()){
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
    }
    return Buffer.concat(out);
};
var PADDING = Buffer.alloc(16, 16);
Cipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
        return chunk;
    }
    if (!chunk.equals(PADDING)) {
        this._cipher.scrub();
        throw new Error('data not multiple of block length');
    }
};
Cipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function Splitter() {
    this.cache = Buffer.allocUnsafe(0);
}
Splitter.prototype.add = function(data) {
    this.cache = Buffer.concat([
        this.cache,
        data
    ]);
};
Splitter.prototype.get = function() {
    if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
Splitter.prototype.flush = function() {
    var len = 16 - this.cache.length;
    var padBuff = Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)padBuff.writeUInt8(len, i);
    return Buffer.concat([
        this.cache,
        padBuff
    ]);
};
function createCipheriv(suite, password, iv) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    if (typeof password === 'string') password = Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
    if (typeof iv === 'string') iv = Buffer.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
    if (config.type === 'stream') return new StreamCipher(config.module, password, iv);
    else if (config.type === 'auth') return new AuthCipher(config.module, password, iv);
    return new Cipher(config.module, password, iv);
}
function createCipher(suite, password) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    var keys = ebtk(password, false, config.key, config.iv);
    return createCipheriv(suite, keys.key, keys.iv);
}
exports.createCipheriv = createCipheriv;
exports.createCipher = createCipher;

},{"./modes":"jyQSU","./authCipher":"kn9wf","safe-buffer":"eW7r9","./streamCipher":"4ZMNU","cipher-base":"g5fTz","./aes":"4VzKF","evp_bytestokey":"1rd4d","inherits":"bRL3M"}],"jyQSU":[function(require,module,exports) {
var modeModules = {
    ECB: require('./ecb'),
    CBC: require('./cbc'),
    CFB: require('./cfb'),
    CFB8: require('./cfb8'),
    CFB1: require('./cfb1'),
    OFB: require('./ofb'),
    CTR: require('./ctr'),
    GCM: require('./ctr')
};
var modes = require('./list.json');
for(var key in modes)modes[key].module = modeModules[modes[key].mode];
module.exports = modes;

},{"./ecb":"f4tme","./cbc":"8JcO4","./cfb":"dVMRE","./cfb8":"jk3Qm","./cfb1":"4BsKj","./ofb":"9DT3x","./ctr":"fLj86","./list.json":"1XQMU"}],"f4tme":[function(require,module,exports) {
exports.encrypt = function(self, block) {
    return self._cipher.encryptBlock(block);
};
exports.decrypt = function(self, block) {
    return self._cipher.decryptBlock(block);
};

},{}],"8JcO4":[function(require,module,exports) {
var xor = require('buffer-xor');
exports.encrypt = function(self, block) {
    var data = xor(block, self._prev);
    self._prev = self._cipher.encryptBlock(data);
    return self._prev;
};
exports.decrypt = function(self, block) {
    var pad = self._prev;
    self._prev = block;
    var out = self._cipher.decryptBlock(block);
    return xor(out, pad);
};

},{"buffer-xor":"eYhY5"}],"eYhY5":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
module.exports = function xor(a, b) {
    var length = Math.min(a.length, b.length);
    var buffer = new Buffer(length);
    for(var i = 0; i < length; ++i)buffer[i] = a[i] ^ b[i];
    return buffer;
};

},{"buffer":"fCgem"}],"dVMRE":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
var xor = require('buffer-xor');
function encryptStart(self, data, decrypt) {
    var len = data.length;
    var out = xor(data, self._cache);
    self._cache = self._cache.slice(len);
    self._prev = Buffer.concat([
        self._prev,
        decrypt ? data : out
    ]);
    return out;
}
exports.encrypt = function(self, data, decrypt) {
    var out = Buffer.allocUnsafe(0);
    var len;
    while(data.length){
        if (self._cache.length === 0) {
            self._cache = self._cipher.encryptBlock(self._prev);
            self._prev = Buffer.allocUnsafe(0);
        }
        if (self._cache.length <= data.length) {
            len = self._cache.length;
            out = Buffer.concat([
                out,
                encryptStart(self, data.slice(0, len), decrypt)
            ]);
            data = data.slice(len);
        } else {
            out = Buffer.concat([
                out,
                encryptStart(self, data, decrypt)
            ]);
            break;
        }
    }
    return out;
};

},{"safe-buffer":"eW7r9","buffer-xor":"eYhY5"}],"jk3Qm":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
function encryptByte(self, byteParam, decrypt) {
    var pad = self._cipher.encryptBlock(self._prev);
    var out = pad[0] ^ byteParam;
    self._prev = Buffer.concat([
        self._prev.slice(1),
        Buffer.from([
            decrypt ? byteParam : out
        ])
    ]);
    return out;
}
exports.encrypt = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = encryptByte(self, chunk[i], decrypt);
    return out;
};

},{"safe-buffer":"eW7r9"}],"4BsKj":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
function encryptByte(self, byteParam, decrypt) {
    var pad;
    var i = -1;
    var len = 8;
    var out = 0;
    var bit, value;
    while(++i < len){
        pad = self._cipher.encryptBlock(self._prev);
        bit = byteParam & 1 << 7 - i ? 128 : 0;
        value = pad[0] ^ bit;
        out += (value & 128) >> i % 8;
        self._prev = shiftIn(self._prev, decrypt ? bit : value);
    }
    return out;
}
function shiftIn(buffer, value) {
    var len = buffer.length;
    var i = -1;
    var out = Buffer.allocUnsafe(buffer.length);
    buffer = Buffer.concat([
        buffer,
        Buffer.from([
            value
        ])
    ]);
    while(++i < len)out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
    return out;
}
exports.encrypt = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = encryptByte(self, chunk[i], decrypt);
    return out;
};

},{"safe-buffer":"eW7r9"}],"9DT3x":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var xor = require('buffer-xor');
function getBlock(self) {
    self._prev = self._cipher.encryptBlock(self._prev);
    return self._prev;
}
exports.encrypt = function(self, chunk) {
    while(self._cache.length < chunk.length)self._cache = Buffer.concat([
        self._cache,
        getBlock(self)
    ]);
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return xor(chunk, pad);
};

},{"buffer":"fCgem","buffer-xor":"eYhY5"}],"fLj86":[function(require,module,exports) {
var xor = require('buffer-xor');
var Buffer = require('safe-buffer').Buffer;
var incr32 = require('../incr32');
function getBlock(self) {
    var out = self._cipher.encryptBlockRaw(self._prev);
    incr32(self._prev);
    return out;
}
var blockSize = 16;
exports.encrypt = function(self, chunk) {
    var chunkNum = Math.ceil(chunk.length / blockSize);
    var start = self._cache.length;
    self._cache = Buffer.concat([
        self._cache,
        Buffer.allocUnsafe(chunkNum * blockSize)
    ]);
    for(var i = 0; i < chunkNum; i++){
        var out = getBlock(self);
        var offset = start + i * blockSize;
        self._cache.writeUInt32BE(out[0], offset + 0);
        self._cache.writeUInt32BE(out[1], offset + 4);
        self._cache.writeUInt32BE(out[2], offset + 8);
        self._cache.writeUInt32BE(out[3], offset + 12);
    }
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return xor(chunk, pad);
};

},{"buffer-xor":"eYhY5","safe-buffer":"eW7r9","../incr32":"bZlDZ"}],"bZlDZ":[function(require,module,exports) {
function incr32(iv) {
    var len = iv.length;
    var item;
    while(len--){
        item = iv.readUInt8(len);
        if (item === 255) iv.writeUInt8(0, len);
        else {
            item++;
            iv.writeUInt8(item, len);
            break;
        }
    }
}
module.exports = incr32;

},{}],"1XQMU":[function(require,module,exports) {
module.exports = JSON.parse("{\"aes-128-ecb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-192-ecb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-256-ecb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-128-cbc\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-192-cbc\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-256-cbc\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes128\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes192\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes256\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-128-cfb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-192-cfb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-256-cfb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-128-cfb8\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-192-cfb8\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-256-cfb8\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-128-cfb1\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-192-cfb1\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-256-cfb1\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-128-ofb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-192-ofb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-256-ofb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-128-ctr\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-192-ctr\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-256-ctr\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-128-gcm\":{\"cipher\":\"AES\",\"key\":128,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-192-gcm\":{\"cipher\":\"AES\",\"key\":192,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-256-gcm\":{\"cipher\":\"AES\",\"key\":256,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"}}");

},{}],"kn9wf":[function(require,module,exports) {
var aes = require('./aes');
var Buffer = require('safe-buffer').Buffer;
var Transform = require('cipher-base');
var inherits = require('inherits');
var GHASH = require('./ghash');
var xor = require('buffer-xor');
var incr32 = require('./incr32');
function xorTest(a, b) {
    var out = 0;
    if (a.length !== b.length) out++;
    var len = Math.min(a.length, b.length);
    for(var i = 0; i < len; ++i)out += a[i] ^ b[i];
    return out;
}
function calcIv(self, iv, ck) {
    if (iv.length === 12) {
        self._finID = Buffer.concat([
            iv,
            Buffer.from([
                0,
                0,
                0,
                1
            ])
        ]);
        return Buffer.concat([
            iv,
            Buffer.from([
                0,
                0,
                0,
                2
            ])
        ]);
    }
    var ghash = new GHASH(ck);
    var len = iv.length;
    var toPad = len % 16;
    ghash.update(iv);
    if (toPad) {
        toPad = 16 - toPad;
        ghash.update(Buffer.alloc(toPad, 0));
    }
    ghash.update(Buffer.alloc(8, 0));
    var ivBits = len * 8;
    var tail = Buffer.alloc(8);
    tail.writeUIntBE(ivBits, 0, 8);
    ghash.update(tail);
    self._finID = ghash.state;
    var out = Buffer.from(self._finID);
    incr32(out);
    return out;
}
function StreamCipher(mode, key, iv, decrypt) {
    Transform.call(this);
    var h = Buffer.alloc(4, 0);
    this._cipher = new aes.AES(key);
    var ck = this._cipher.encryptBlock(h);
    this._ghash = new GHASH(ck);
    iv = calcIv(this, iv, ck);
    this._prev = Buffer.from(iv);
    this._cache = Buffer.allocUnsafe(0);
    this._secCache = Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._alen = 0;
    this._len = 0;
    this._mode = mode;
    this._authTag = null;
    this._called = false;
}
inherits(StreamCipher, Transform);
StreamCipher.prototype._update = function(chunk) {
    if (!this._called && this._alen) {
        var rump = 16 - this._alen % 16;
        if (rump < 16) {
            rump = Buffer.alloc(rump, 0);
            this._ghash.update(rump);
        }
    }
    this._called = true;
    var out = this._mode.encrypt(this, chunk);
    if (this._decrypt) this._ghash.update(chunk);
    else this._ghash.update(out);
    this._len += chunk.length;
    return out;
};
StreamCipher.prototype._final = function() {
    if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data');
    var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
    if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data');
    this._authTag = tag;
    this._cipher.scrub();
};
StreamCipher.prototype.getAuthTag = function getAuthTag() {
    if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state');
    return this._authTag;
};
StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
    if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state');
    this._authTag = tag;
};
StreamCipher.prototype.setAAD = function setAAD(buf) {
    if (this._called) throw new Error('Attempting to set AAD in unsupported state');
    this._ghash.update(buf);
    this._alen += buf.length;
};
module.exports = StreamCipher;

},{"./aes":"4VzKF","safe-buffer":"eW7r9","cipher-base":"g5fTz","inherits":"bRL3M","./ghash":"lmx0M","buffer-xor":"eYhY5","./incr32":"bZlDZ"}],"4VzKF":[function(require,module,exports) {
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/
var Buffer = require('safe-buffer').Buffer;
function asUInt32Array(buf) {
    if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
    var len = buf.length / 4 | 0;
    var out = new Array(len);
    for(var i = 0; i < len; i++)out[i] = buf.readUInt32BE(i * 4);
    return out;
}
function scrubVec(v) {
    for(var i = 0; i < v.length; v++)v[i] = 0;
}
function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0];
    var SUB_MIX1 = SUB_MIX[1];
    var SUB_MIX2 = SUB_MIX[2];
    var SUB_MIX3 = SUB_MIX[3];
    var s0 = M[0] ^ keySchedule[0];
    var s1 = M[1] ^ keySchedule[1];
    var s2 = M[2] ^ keySchedule[2];
    var s3 = M[3] ^ keySchedule[3];
    var t0, t1, t2, t3;
    var ksRow = 4;
    for(var round = 1; round < nRounds; round++){
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 255] ^ SUB_MIX2[s2 >>> 8 & 255] ^ SUB_MIX3[s3 & 255] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 255] ^ SUB_MIX2[s3 >>> 8 & 255] ^ SUB_MIX3[s0 & 255] ^ keySchedule[ksRow++];
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 255] ^ SUB_MIX2[s0 >>> 8 & 255] ^ SUB_MIX3[s1 & 255] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 255] ^ SUB_MIX2[s1 >>> 8 & 255] ^ SUB_MIX3[s2 & 255] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
    }
    t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s2 >>> 8 & 255] << 8 | SBOX[s3 & 255]) ^ keySchedule[ksRow++];
    t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 255] << 16 | SBOX[s3 >>> 8 & 255] << 8 | SBOX[s0 & 255]) ^ keySchedule[ksRow++];
    t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[s1 & 255]) ^ keySchedule[ksRow++];
    t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[s2 & 255]) ^ keySchedule[ksRow++];
    t0 = t0 >>> 0;
    t1 = t1 >>> 0;
    t2 = t2 >>> 0;
    t3 = t3 >>> 0;
    return [
        t0,
        t1,
        t2,
        t3
    ];
}
// AES constants
var RCON = [
    0,
    1,
    2,
    4,
    8,
    16,
    32,
    64,
    128,
    27,
    54
];
var G = function() {
    // Compute double table
    var d = new Array(256);
    for(var j = 0; j < 256; j++)if (j < 128) d[j] = j << 1;
    else d[j] = j << 1 ^ 283;
    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    var INV_SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    // Walk GF(2^8)
    var x = 0;
    var xi = 0;
    for(var i = 0; i < 256; ++i){
        // Compute sbox
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 255 ^ 99;
        SBOX[x] = sx;
        INV_SBOX[sx] = x;
        // Compute multiplication
        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4];
        // Compute sub bytes, mix columns tables
        var t = d[sx] * 257 ^ sx * 16843008;
        SUB_MIX[0][x] = t << 24 | t >>> 8;
        SUB_MIX[1][x] = t << 16 | t >>> 16;
        SUB_MIX[2][x] = t << 8 | t >>> 24;
        SUB_MIX[3][x] = t;
        // Compute inv sub bytes, inv mix columns tables
        t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
        INV_SUB_MIX[3][sx] = t;
        if (x === 0) x = xi = 1;
        else {
            x = x2 ^ d[d[d[x8 ^ x2]]];
            xi ^= d[d[xi]];
        }
    }
    return {
        SBOX: SBOX,
        INV_SBOX: INV_SBOX,
        SUB_MIX: SUB_MIX,
        INV_SUB_MIX: INV_SUB_MIX
    };
}();
function AES(key) {
    this._key = asUInt32Array(key);
    this._reset();
}
AES.blockSize = 16;
AES.keySize = 32;
AES.prototype.blockSize = AES.blockSize;
AES.prototype.keySize = AES.keySize;
AES.prototype._reset = function() {
    var keyWords = this._key;
    var keySize = keyWords.length;
    var nRounds = keySize + 6;
    var ksRows = (nRounds + 1) * 4;
    var keySchedule = [];
    for(var k = 0; k < keySize; k++)keySchedule[k] = keyWords[k];
    for(k = keySize; k < ksRows; k++){
        var t = keySchedule[k - 1];
        if (k % keySize === 0) {
            t = t << 8 | t >>> 24;
            t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 255] << 16 | G.SBOX[t >>> 8 & 255] << 8 | G.SBOX[t & 255];
            t ^= RCON[k / keySize | 0] << 24;
        } else if (keySize > 6 && k % keySize === 4) t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 255] << 16 | G.SBOX[t >>> 8 & 255] << 8 | G.SBOX[t & 255];
        keySchedule[k] = keySchedule[k - keySize] ^ t;
    }
    var invKeySchedule = [];
    for(var ik = 0; ik < ksRows; ik++){
        var ksR = ksRows - ik;
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];
        if (ik < 4 || ksR <= 4) invKeySchedule[ik] = tt;
        else invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 255]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 255]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 255]];
    }
    this._nRounds = nRounds;
    this._keySchedule = keySchedule;
    this._invKeySchedule = invKeySchedule;
};
AES.prototype.encryptBlockRaw = function(M) {
    M = asUInt32Array(M);
    return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);
};
AES.prototype.encryptBlock = function(M) {
    var out = this.encryptBlockRaw(M);
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[1], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[3], 12);
    return buf;
};
AES.prototype.decryptBlock = function(M) {
    M = asUInt32Array(M);
    // swap
    var m1 = M[1];
    M[1] = M[3];
    M[3] = m1;
    var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[3], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[1], 12);
    return buf;
};
AES.prototype.scrub = function() {
    scrubVec(this._keySchedule);
    scrubVec(this._invKeySchedule);
    scrubVec(this._key);
};
module.exports.AES = AES;

},{"safe-buffer":"eW7r9"}],"lmx0M":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
var ZEROES = Buffer.alloc(16, 0);
function toArray(buf) {
    return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
    ];
}
function fromArray(out) {
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0] >>> 0, 0);
    buf.writeUInt32BE(out[1] >>> 0, 4);
    buf.writeUInt32BE(out[2] >>> 0, 8);
    buf.writeUInt32BE(out[3] >>> 0, 12);
    return buf;
}
function GHASH(key) {
    this.h = key;
    this.state = Buffer.alloc(16, 0);
    this.cache = Buffer.allocUnsafe(0);
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function(block) {
    var i = -1;
    while(++i < block.length)this.state[i] ^= block[i];
    this._multiply();
};
GHASH.prototype._multiply = function() {
    var Vi = toArray(this.h);
    var Zi = [
        0,
        0,
        0,
        0
    ];
    var j, xi, lsbVi;
    var i = -1;
    while(++i < 128){
        xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
        if (xi) {
            // Z_i+1 = Z_i ^ V_i
            Zi[0] ^= Vi[0];
            Zi[1] ^= Vi[1];
            Zi[2] ^= Vi[2];
            Zi[3] ^= Vi[3];
        }
        // Store the value of LSB(V_i)
        lsbVi = (Vi[3] & 1) !== 0;
        // V_i+1 = V_i >> 1
        for(j = 3; j > 0; j--)Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
        Vi[0] = Vi[0] >>> 1;
        // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
        if (lsbVi) Vi[0] = Vi[0] ^ -520093696;
    }
    this.state = fromArray(Zi);
};
GHASH.prototype.update = function(buf) {
    this.cache = Buffer.concat([
        this.cache,
        buf
    ]);
    var chunk;
    while(this.cache.length >= 16){
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
    }
};
GHASH.prototype.final = function(abl, bl) {
    if (this.cache.length) this.ghash(Buffer.concat([
        this.cache,
        ZEROES
    ], 16));
    this.ghash(fromArray([
        0,
        abl,
        0,
        bl
    ]));
    return this.state;
};
module.exports = GHASH;

},{"safe-buffer":"eW7r9"}],"4ZMNU":[function(require,module,exports) {
var aes = require('./aes');
var Buffer = require('safe-buffer').Buffer;
var Transform = require('cipher-base');
var inherits = require('inherits');
function StreamCipher(mode, key, iv, decrypt) {
    Transform.call(this);
    this._cipher = new aes.AES(key);
    this._prev = Buffer.from(iv);
    this._cache = Buffer.allocUnsafe(0);
    this._secCache = Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._mode = mode;
}
inherits(StreamCipher, Transform);
StreamCipher.prototype._update = function(chunk) {
    return this._mode.encrypt(this, chunk, this._decrypt);
};
StreamCipher.prototype._final = function() {
    this._cipher.scrub();
};
module.exports = StreamCipher;

},{"./aes":"4VzKF","safe-buffer":"eW7r9","cipher-base":"g5fTz","inherits":"bRL3M"}],"1rd4d":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
var MD5 = require('md5.js');
/* eslint-disable camelcase */ function EVP_BytesToKey(password, salt, keyBits, ivLen) {
    if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary');
    if (salt) {
        if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary');
        if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length');
    }
    var keyLen = keyBits / 8;
    var key = Buffer.alloc(keyLen);
    var iv = Buffer.alloc(ivLen || 0);
    var tmp = Buffer.alloc(0);
    while(keyLen > 0 || ivLen > 0){
        var hash = new MD5();
        hash.update(tmp);
        hash.update(password);
        if (salt) hash.update(salt);
        tmp = hash.digest();
        var used = 0;
        if (keyLen > 0) {
            var keyStart = key.length - keyLen;
            used = Math.min(keyLen, tmp.length);
            tmp.copy(key, keyStart, 0, used);
            keyLen -= used;
        }
        if (used < tmp.length && ivLen > 0) {
            var ivStart = iv.length - ivLen;
            var length = Math.min(ivLen, tmp.length - used);
            tmp.copy(iv, ivStart, used, used + length);
            ivLen -= length;
        }
    }
    tmp.fill(0);
    return {
        key: key,
        iv: iv
    };
}
module.exports = EVP_BytesToKey;

},{"safe-buffer":"eW7r9","md5.js":"45VeE"}],"cixt2":[function(require,module,exports) {
var AuthCipher = require('./authCipher');
var Buffer = require('safe-buffer').Buffer;
var MODES = require('./modes');
var StreamCipher = require('./streamCipher');
var Transform = require('cipher-base');
var aes = require('./aes');
var ebtk = require('evp_bytestokey');
var inherits = require('inherits');
function Decipher(mode, key, iv) {
    Transform.call(this);
    this._cache = new Splitter();
    this._last = void 0;
    this._cipher = new aes.AES(key);
    this._prev = Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
inherits(Decipher, Transform);
Decipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get(this._autopadding)){
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
    }
    return Buffer.concat(out);
};
Decipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) return unpad(this._mode.decrypt(this, chunk));
    else if (chunk) throw new Error('data not multiple of block length');
};
Decipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function Splitter() {
    this.cache = Buffer.allocUnsafe(0);
}
Splitter.prototype.add = function(data) {
    this.cache = Buffer.concat([
        this.cache,
        data
    ]);
};
Splitter.prototype.get = function(autoPadding) {
    var out;
    if (autoPadding) {
        if (this.cache.length > 16) {
            out = this.cache.slice(0, 16);
            this.cache = this.cache.slice(16);
            return out;
        }
    } else if (this.cache.length >= 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
Splitter.prototype.flush = function() {
    if (this.cache.length) return this.cache;
};
function unpad(last) {
    var padded = last[15];
    if (padded < 1 || padded > 16) throw new Error('unable to decrypt data');
    var i = -1;
    while(++i < padded){
        if (last[i + (16 - padded)] !== padded) throw new Error('unable to decrypt data');
    }
    if (padded === 16) return;
    return last.slice(0, 16 - padded);
}
function createDecipheriv(suite, password, iv) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    if (typeof iv === 'string') iv = Buffer.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
    if (typeof password === 'string') password = Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
    if (config.type === 'stream') return new StreamCipher(config.module, password, iv, true);
    else if (config.type === 'auth') return new AuthCipher(config.module, password, iv, true);
    return new Decipher(config.module, password, iv);
}
function createDecipher(suite, password) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    var keys = ebtk(password, false, config.key, config.iv);
    return createDecipheriv(suite, keys.key, keys.iv);
}
exports.createDecipher = createDecipher;
exports.createDecipheriv = createDecipheriv;

},{"./authCipher":"kn9wf","safe-buffer":"eW7r9","./modes":"jyQSU","./streamCipher":"4ZMNU","cipher-base":"g5fTz","./aes":"4VzKF","evp_bytestokey":"1rd4d","inherits":"bRL3M"}],"iO8co":[function(require,module,exports) {
exports['des-ecb'] = {
    key: 8,
    iv: 0
};
exports['des-cbc'] = exports.des = {
    key: 8,
    iv: 8
};
exports['des-ede3-cbc'] = exports.des3 = {
    key: 24,
    iv: 8
};
exports['des-ede3'] = {
    key: 24,
    iv: 0
};
exports['des-ede-cbc'] = {
    key: 16,
    iv: 8
};
exports['des-ede'] = {
    key: 16,
    iv: 0
};

},{}],"hwD3y":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var generatePrime = require('./lib/generatePrime');
var primes = require('./lib/primes.json');
var DH = require('./lib/dh');
function getDiffieHellman(mod) {
    var prime = new Buffer(primes[mod].prime, 'hex');
    var gen = new Buffer(primes[mod].gen, 'hex');
    return new DH(prime, gen);
}
var ENCODINGS = {
    'binary': true,
    'hex': true,
    'base64': true
};
function createDiffieHellman(prime, enc, generator, genc) {
    if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) return createDiffieHellman(prime, 'binary', enc, generator);
    enc = enc || 'binary';
    genc = genc || 'binary';
    generator = generator || new Buffer([
        2
    ]);
    if (!Buffer.isBuffer(generator)) generator = new Buffer(generator, genc);
    if (typeof prime === 'number') return new DH(generatePrime(prime, generator), generator, true);
    if (!Buffer.isBuffer(prime)) prime = new Buffer(prime, enc);
    return new DH(prime, generator, true);
}
exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;

},{"buffer":"fCgem","./lib/generatePrime":"ZMXAL","./lib/primes.json":"ch1XV","./lib/dh":"f8kfc"}],"ZMXAL":[function(require,module,exports) {
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;
function _getPrimes() {
    if (primes !== null) return primes;
    var limit = 1048576;
    var res = [];
    res[0] = 2;
    for(var i = 1, k = 3; k < limit; k += 2){
        var sqrt = Math.ceil(Math.sqrt(k));
        for(var j = 0; j < i && res[j] <= sqrt; j++)if (k % res[j] === 0) break;
        if (i !== j && res[j] <= sqrt) continue;
        res[i++] = k;
    }
    primes = res;
    return res;
}
function simpleSieve(p) {
    var primes1 = _getPrimes();
    for(var i = 0; i < primes1.length; i++)if (p.modn(primes1[i]) === 0) {
        if (p.cmpn(primes1[i]) === 0) return true;
        else return false;
    }
    return true;
}
function fermatTest(p) {
    var red = BN.mont(p);
    return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}
function findPrime(bits, gen) {
    if (bits < 16) {
        // this is what openssl does
        if (gen === 2 || gen === 5) return new BN([
            140,
            123
        ]);
        else return new BN([
            140,
            39
        ]);
    }
    gen = new BN(gen);
    var num, n2;
    while(true){
        num = new BN(randomBytes(Math.ceil(bits / 8)));
        while(num.bitLength() > bits)num.ishrn(1);
        if (num.isEven()) num.iadd(ONE);
        if (!num.testn(1)) num.iadd(TWO);
        if (!gen.cmp(TWO)) while(num.mod(TWENTYFOUR).cmp(ELEVEN))num.iadd(FOUR);
        else if (!gen.cmp(FIVE)) while(num.mod(TEN).cmp(THREE))num.iadd(FOUR);
        n2 = num.shrn(1);
        if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) return num;
    }
}

},{"randombytes":"8hjhE","bn.js":"VopIn","miller-rabin":"i79Nu"}],"VopIn":[function(require,module,exports) {
(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require('buffer').Buffer;
    } catch (e) {
    }
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 15;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 10;
            else if (c >= 17) r += c - 17 + 10;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(typeof module === 'undefined' || module, this);

},{"buffer":"jhUEF"}],"i79Nu":[function(require,module,exports) {
var bn = require('bn.js');
var brorand = require('brorand');
function MillerRabin(rand) {
    this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;
MillerRabin.create = function create(rand) {
    return new MillerRabin(rand);
};
MillerRabin.prototype._randbelow = function _randbelow(n) {
    var len = n.bitLength();
    var min_bytes = Math.ceil(len / 8);
    // Generage random bytes until a number less than n is found.
    // This ensures that 0..n-1 have an equal probability of being selected.
    do var a = new bn(this.rand.generate(min_bytes));
    while (a.cmp(n) >= 0)
    return a;
};
MillerRabin.prototype._randrange = function _randrange(start, stop) {
    // Generate a random number greater than or equal to start and less than stop.
    var size = stop.sub(start);
    return start.add(this._randbelow(size));
};
MillerRabin.prototype.test = function test(n, k, cb) {
    var len = n.bitLength();
    var red = bn.mont(n);
    var rone = new bn(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    var prime = true;
    for(; k > 0; k--){
        var a = this._randrange(new bn(2), n1);
        if (cb) cb(a);
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return false;
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) return false;
    }
    return prime;
};
MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
    var len = n.bitLength();
    var red = bn.mont(n);
    var rone = new bn(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    for(; k > 0; k--){
        var a = this._randrange(new bn(2), n1);
        var g = n.gcd(a);
        if (g.cmpn(1) !== 0) return g;
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) {
            x = x.redSqr();
            return x.fromRed().subn(1).gcd(n);
        }
    }
    return false;
};

},{"bn.js":"VopIn","brorand":"8FGdh"}],"8FGdh":[function(require,module,exports) {
var r;
module.exports = function rand(len) {
    if (!r) r = new Rand(null);
    return r.generate(len);
};
function Rand(rand) {
    this.rand = rand;
}
module.exports.Rand = Rand;
Rand.prototype.generate = function generate(len) {
    return this._rand(len);
};
// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes) return this.rand.getBytes(n);
    var res = new Uint8Array(n);
    for(var i = 0; i < res.length; i++)res[i] = this.rand.getByte();
    return res;
};
if (typeof self === 'object') {
    if (self.crypto && self.crypto.getRandomValues) // Modern browsers
    Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
    };
    else if (self.msCrypto && self.msCrypto.getRandomValues) // IE
    Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
    };
    else if (typeof window === 'object') // Old junk
    Rand.prototype._rand = function() {
        throw new Error('Not implemented yet');
    };
} else // Node.js or Web worker with no crypto support
try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function') throw new Error('Not supported');
    Rand.prototype._rand = function _rand(n) {
        return crypto.randomBytes(n);
    };
} catch (e) {
}

},{"crypto":"jhUEF"}],"ch1XV":[function(require,module,exports) {
module.exports = JSON.parse("{\"modp1\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff\"},\"modp2\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff\"},\"modp5\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff\"},\"modp14\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff\"},\"modp15\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff\"},\"modp16\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff\"},\"modp17\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff\"},\"modp18\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff\"}}");

},{}],"f8kfc":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;
function setPublicKey(pub, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(pub)) pub = new Buffer(pub, enc);
    this._pub = new BN(pub);
    return this;
}
function setPrivateKey(priv, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(priv)) priv = new Buffer(priv, enc);
    this._priv = new BN(priv);
    return this;
}
var primeCache = {
};
function checkPrime(prime, generator) {
    var gen = generator.toString('hex');
    var hex = [
        gen,
        prime.toString(16)
    ].join('_');
    if (hex in primeCache) return primeCache[hex];
    var error = 0;
    if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
        //not a prime so +1
        error += 1;
        if (gen === '02' || gen === '05') // we'd be able to check the generator
        // it would fail so +8
        error += 8;
        else //we wouldn't be able to test the generator
        // so +4
        error += 4;
        primeCache[hex] = error;
        return error;
    }
    if (!millerRabin.test(prime.shrn(1))) //not a safe prime
    error += 2;
    var rem;
    switch(gen){
        case '02':
            if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) // unsuidable generator
            error += 8;
            break;
        case '05':
            rem = prime.mod(TEN);
            if (rem.cmp(THREE) && rem.cmp(SEVEN)) // prime mod 10 needs to equal 3 or 7
            error += 8;
            break;
        default:
            error += 4;
    }
    primeCache[hex] = error;
    return error;
}
function DH(prime, generator, malleable) {
    this.setGenerator(generator);
    this.__prime = new BN(prime);
    this._prime = BN.mont(this.__prime);
    this._primeLen = prime.length;
    this._pub = undefined;
    this._priv = undefined;
    this._primeCode = undefined;
    if (malleable) {
        this.setPublicKey = setPublicKey;
        this.setPrivateKey = setPrivateKey;
    } else this._primeCode = 8;
}
Object.defineProperty(DH.prototype, 'verifyError', {
    enumerable: true,
    get: function() {
        if (typeof this._primeCode !== 'number') this._primeCode = checkPrime(this.__prime, this.__gen);
        return this._primeCode;
    }
});
DH.prototype.generateKeys = function() {
    if (!this._priv) this._priv = new BN(randomBytes(this._primeLen));
    this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
    return this.getPublicKey();
};
DH.prototype.computeSecret = function(other) {
    other = new BN(other);
    other = other.toRed(this._prime);
    var secret = other.redPow(this._priv).fromRed();
    var out = new Buffer(secret.toArray());
    var prime = this.getPrime();
    if (out.length < prime.length) {
        var front = new Buffer(prime.length - out.length);
        front.fill(0);
        out = Buffer.concat([
            front,
            out
        ]);
    }
    return out;
};
DH.prototype.getPublicKey = function getPublicKey(enc) {
    return formatReturnValue(this._pub, enc);
};
DH.prototype.getPrivateKey = function getPrivateKey(enc) {
    return formatReturnValue(this._priv, enc);
};
DH.prototype.getPrime = function(enc) {
    return formatReturnValue(this.__prime, enc);
};
DH.prototype.getGenerator = function(enc) {
    return formatReturnValue(this._gen, enc);
};
DH.prototype.setGenerator = function(gen, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(gen)) gen = new Buffer(gen, enc);
    this.__gen = gen;
    this._gen = new BN(gen);
    return this;
};
function formatReturnValue(bn, enc) {
    var buf = new Buffer(bn.toArray());
    if (!enc) return buf;
    else return buf.toString(enc);
}

},{"buffer":"fCgem","bn.js":"VopIn","miller-rabin":"i79Nu","./generatePrime":"ZMXAL","randombytes":"8hjhE"}],"jbRNy":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
var createHash = require('create-hash');
var stream = require('readable-stream');
var inherits = require('inherits');
var sign = require('./sign');
var verify = require('./verify');
var algorithms = require('./algorithms.json');
Object.keys(algorithms).forEach(function(key) {
    algorithms[key].id = Buffer.from(algorithms[key].id, 'hex');
    algorithms[key.toLowerCase()] = algorithms[key];
});
function Sign(algorithm) {
    stream.Writable.call(this);
    var data = algorithms[algorithm];
    if (!data) throw new Error('Unknown message digest');
    this._hashType = data.hash;
    this._hash = createHash(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
inherits(Sign, stream.Writable);
Sign.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
Sign.prototype.update = function update(data, enc) {
    if (typeof data === 'string') data = Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
Sign.prototype.sign = function signMethod(key, enc) {
    this.end();
    var hash = this._hash.digest();
    var sig = sign(hash, key, this._hashType, this._signType, this._tag);
    return enc ? sig.toString(enc) : sig;
};
function Verify(algorithm) {
    stream.Writable.call(this);
    var data = algorithms[algorithm];
    if (!data) throw new Error('Unknown message digest');
    this._hash = createHash(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
inherits(Verify, stream.Writable);
Verify.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
Verify.prototype.update = function update(data, enc) {
    if (typeof data === 'string') data = Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
Verify.prototype.verify = function verifyMethod(key, sig, enc) {
    if (typeof sig === 'string') sig = Buffer.from(sig, enc);
    this.end();
    var hash = this._hash.digest();
    return verify(sig, hash, key, this._signType, this._tag);
};
function createSign(algorithm) {
    return new Sign(algorithm);
}
function createVerify(algorithm) {
    return new Verify(algorithm);
}
module.exports = {
    Sign: createSign,
    Verify: createVerify,
    createSign: createSign,
    createVerify: createVerify
};

},{"safe-buffer":"eW7r9","create-hash":"2WyL8","readable-stream":"jXNWE","inherits":"bRL3M","./sign":"lDgyi","./verify":"vbFso","./algorithms.json":"kWFdV"}],"lDgyi":[function(require,module,exports) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer;
var createHmac = require('create-hmac');
var crt = require('browserify-rsa');
var EC = require('elliptic').ec;
var BN = require('bn.js');
var parseKeys = require('parse-asn1');
var curves = require('./curves.json');
function sign(hash, key, hashType, signType, tag) {
    var priv = parseKeys(key);
    if (priv.curve) {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
        return ecSign(hash, priv);
    } else if (priv.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong private key type');
        return dsaSign(hash, priv, hashType);
    } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
    }
    hash = Buffer.concat([
        tag,
        hash
    ]);
    var len = priv.modulus.byteLength();
    var pad = [
        0,
        1
    ];
    while(hash.length + pad.length + 1 < len)pad.push(255);
    pad.push(0);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    var out = crt(pad, priv);
    return out;
}
function ecSign(hash, priv) {
    var curveId = curves[priv.curve.join('.')];
    if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'));
    var curve = new EC(curveId);
    var key = curve.keyFromPrivate(priv.privateKey);
    var out = key.sign(hash);
    return Buffer.from(out.toDER());
}
function dsaSign(hash, priv, algo) {
    var x = priv.params.priv_key;
    var p = priv.params.p;
    var q = priv.params.q;
    var g = priv.params.g;
    var r = new BN(0);
    var k;
    var H = bits2int(hash, q).mod(q);
    var s = false;
    var kv = getKey(x, q, hash, algo);
    while(s === false){
        k = makeKey(q, kv, algo);
        r = makeR(g, k, p, q);
        s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
        if (s.cmpn(0) === 0) {
            s = false;
            r = new BN(0);
        }
    }
    return toDER(r, s);
}
function toDER(r, s) {
    r = r.toArray();
    s = s.toArray();
    // Pad values
    if (r[0] & 128) r = [
        0
    ].concat(r);
    if (s[0] & 128) s = [
        0
    ].concat(s);
    var total = r.length + s.length + 4;
    var res = [
        48,
        total,
        2,
        r.length
    ];
    res = res.concat(r, [
        2,
        s.length
    ], s);
    return Buffer.from(res);
}
function getKey(x, q, hash, algo) {
    x = Buffer.from(x.toArray());
    if (x.length < q.byteLength()) {
        var zeros = Buffer.alloc(q.byteLength() - x.length);
        x = Buffer.concat([
            zeros,
            x
        ]);
    }
    var hlen = hash.length;
    var hbits = bits2octets(hash, q);
    var v = Buffer.alloc(hlen);
    v.fill(1);
    var k = Buffer.alloc(hlen);
    k = createHmac(algo, k).update(v).update(Buffer.from([
        0
    ])).update(x).update(hbits).digest();
    v = createHmac(algo, k).update(v).digest();
    k = createHmac(algo, k).update(v).update(Buffer.from([
        1
    ])).update(x).update(hbits).digest();
    v = createHmac(algo, k).update(v).digest();
    return {
        k: k,
        v: v
    };
}
function bits2int(obits, q) {
    var bits = new BN(obits);
    var shift = (obits.length << 3) - q.bitLength();
    if (shift > 0) bits.ishrn(shift);
    return bits;
}
function bits2octets(bits, q) {
    bits = bits2int(bits, q);
    bits = bits.mod(q);
    var out = Buffer.from(bits.toArray());
    if (out.length < q.byteLength()) {
        var zeros = Buffer.alloc(q.byteLength() - out.length);
        out = Buffer.concat([
            zeros,
            out
        ]);
    }
    return out;
}
function makeKey(q, kv, algo) {
    var t;
    var k;
    do {
        t = Buffer.alloc(0);
        while(t.length * 8 < q.bitLength()){
            kv.v = createHmac(algo, kv.k).update(kv.v).digest();
            t = Buffer.concat([
                t,
                kv.v
            ]);
        }
        k = bits2int(t, q);
        kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([
            0
        ])).digest();
        kv.v = createHmac(algo, kv.k).update(kv.v).digest();
    }while (k.cmp(q) !== -1)
    return k;
}
function makeR(g, k, p, q) {
    return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
}
module.exports = sign;
module.exports.getKey = getKey;
module.exports.makeKey = makeKey;

},{"safe-buffer":"eW7r9","create-hmac":"k1utz","browserify-rsa":"e594P","elliptic":"1NKsH","bn.js":"dkoZR","parse-asn1":"4Szbv","./curves.json":"iadQk"}],"e594P":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var BN = require('bn.js');
var randomBytes = require('randombytes');
function blind(priv) {
    var r = getr(priv);
    var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed();
    return {
        blinder: blinder,
        unblinder: r.invm(priv.modulus)
    };
}
function getr(priv) {
    var len = priv.modulus.byteLength();
    var r;
    do r = new BN(randomBytes(len));
    while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2))
    return r;
}
function crt(msg, priv) {
    var blinds = blind(priv);
    var len = priv.modulus.byteLength();
    var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus);
    var c1 = blinded.toRed(BN.mont(priv.prime1));
    var c2 = blinded.toRed(BN.mont(priv.prime2));
    var qinv = priv.coefficient;
    var p = priv.prime1;
    var q = priv.prime2;
    var m1 = c1.redPow(priv.exponent1).fromRed();
    var m2 = c2.redPow(priv.exponent2).fromRed();
    var h = m1.isub(m2).imul(qinv).umod(p).imul(q);
    return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer, 'be', len);
}
crt.getr = getr;
module.exports = crt;

},{"buffer":"fCgem","bn.js":"a7QF4","randombytes":"8hjhE"}],"a7QF4":[function(require,module,exports) {
(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require('buffer').Buffer;
    } catch (e) {
    }
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, 'Invalid character in ' + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 10;
            else if (c >= 17) b = c - 17 + 10;
            else b = c;
            assert(c >= 0 && b < mul, 'Invalid character');
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') try {
        BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e1) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 255;
            if (position < res.length) res[position++] = word >> 8 & 255;
            if (position < res.length) res[position++] = word >> 16 & 255;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 255;
            if (position >= 0) res[position--] = word >> 8 & 255;
            if (position >= 0) res[position--] = word >> 16 & 255;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(typeof module === 'undefined' || module, this);

},{"buffer":"jhUEF"}],"1NKsH":[function(require,module,exports) {
'use strict';
var elliptic = exports;
elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');
// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":"bvED4","./elliptic/utils":"8sNT5","brorand":"8FGdh","./elliptic/curve":"72OoG","./elliptic/curves":"6yRo9","./elliptic/ec":"5gDK1","./elliptic/eddsa":"jPbam"}],"bvED4":[function(require,module,exports) {
module.exports = JSON.parse("{\"name\":\"elliptic\",\"version\":\"6.5.4\",\"description\":\"EC cryptography\",\"main\":\"lib/elliptic.js\",\"files\":[\"lib\"],\"scripts\":{\"lint\":\"eslint lib test\",\"lint:fix\":\"npm run lint -- --fix\",\"unit\":\"istanbul test _mocha --reporter=spec test/index.js\",\"test\":\"npm run lint && npm run unit\",\"version\":\"grunt dist && git add dist/\"},\"repository\":{\"type\":\"git\",\"url\":\"git@github.com:indutny/elliptic\"},\"keywords\":[\"EC\",\"Elliptic\",\"curve\",\"Cryptography\"],\"author\":\"Fedor Indutny <fedor@indutny.com>\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/indutny/elliptic/issues\"},\"homepage\":\"https://github.com/indutny/elliptic\",\"devDependencies\":{\"brfs\":\"^2.0.2\",\"coveralls\":\"^3.1.0\",\"eslint\":\"^7.6.0\",\"grunt\":\"^1.2.1\",\"grunt-browserify\":\"^5.3.0\",\"grunt-cli\":\"^1.3.2\",\"grunt-contrib-connect\":\"^3.0.0\",\"grunt-contrib-copy\":\"^1.0.0\",\"grunt-contrib-uglify\":\"^5.0.0\",\"grunt-mocha-istanbul\":\"^5.0.2\",\"grunt-saucelabs\":\"^9.0.1\",\"istanbul\":\"^0.4.5\",\"mocha\":\"^8.0.1\"},\"dependencies\":{\"bn.js\":\"^4.11.9\",\"brorand\":\"^1.1.0\",\"hash.js\":\"^1.0.0\",\"hmac-drbg\":\"^1.0.1\",\"inherits\":\"^2.0.4\",\"minimalistic-assert\":\"^1.0.1\",\"minimalistic-crypto-utils\":\"^1.0.1\"}}");

},{}],"8sNT5":[function(require,module,exports) {
'use strict';
var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');
utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;
// Represent num in a w-NAF form
function getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws = 1 << w + 1;
    var k = num.clone();
    for(var i = 0; i < naf.length; i++){
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
            else z = mod;
            k.isubn(z);
        } else z = 0;
        naf[i] = z;
        k.iushrn(1);
    }
    return naf;
}
utils.getNAF = getNAF;
// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
    var jsf = [
        [],
        [], 
    ];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){
        // First phase
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3) m14 = -1;
        if (m24 === 3) m24 = -1;
        var u1;
        if ((m14 & 1) === 0) u1 = 0;
        else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
            else u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) u2 = 0;
        else {
            m8 = k2.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
            else u2 = m24;
        }
        jsf[1].push(u2);
        // Second phase
        if (2 * d1 === u1 + 1) d1 = 1 - d1;
        if (2 * d2 === u2 + 1) d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
    }
    return jsf;
}
utils.getJSF = getJSF;
function cachedProperty(obj, name, computer) {
    var key = '_' + name;
    obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
    };
}
utils.cachedProperty = cachedProperty;
function parseBytes(bytes) {
    return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
}
utils.parseBytes = parseBytes;
function intFromLE(bytes) {
    return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;

},{"bn.js":"VopIn","minimalistic-assert":"8OvWh","minimalistic-crypto-utils":"6f39G"}],"6f39G":[function(require,module,exports) {
'use strict';
var utils = exports;
function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg !== 'string') {
        for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
        return res;
    }
    if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0) msg = '0' + msg;
        for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else for(var i = 0; i < msg.length; i++){
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 255;
        if (hi) res.push(hi, lo);
        else res.push(lo);
    }
    return res;
}
utils.toArray = toArray;
function zero2(word) {
    if (word.length === 1) return '0' + word;
    else return word;
}
utils.zero2 = zero2;
function toHex(msg) {
    var res = '';
    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
    return res;
}
utils.toHex = toHex;
utils.encode = function encode(arr, enc) {
    if (enc === 'hex') return toHex(arr);
    else return arr;
};

},{}],"72OoG":[function(require,module,exports) {
'use strict';
var curve = exports;
curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":"kvY1a","./short":"e7TRt","./mont":"2JhQH","./edwards":"3idNZ"}],"kvY1a":[function(require,module,exports) {
'use strict';
var BN = require('bn.js');
var utils = require('../utils');
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;
function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN(conf.p, 16);
    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
    // Useful for many curves
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);
    // Curve configuration, optional
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) this.redN = null;
    else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
    }
}
module.exports = BaseCurve;
BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
};
BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
};
BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert(p.precomputed);
    var doubles = p._getDoubles();
    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    // Translate into more windowed form
    var repr = [];
    var j;
    var nafW;
    for(j = 0; j < naf.length; j += doubles.step){
        nafW = 0;
        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for(var i = I; i > 0; i--){
        for(j = 0; j < repr.length; j++){
            nafW = repr[j];
            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
    }
    return a.toP();
};
BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    // Get NAF form
    var naf = getNAF(k, w, this._bitLength);
    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for(var i = naf.length - 1; i >= 0; i--){
        // Count zeroes
        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;
        if (i >= 0) l++;
        acc = acc.dblp(l);
        if (i < 0) break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === 'affine') {
            // J +- P
            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);
            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else // J +- J
        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);
        else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
    return p.type === 'affine' ? acc.toP() : acc;
};
BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    // Fill all arrays
    var max = 0;
    var i;
    var j;
    var p;
    for(i = 0; i < len; i++){
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
    }
    // Comb small window NAFs
    for(i = len - 1; i >= 1; i -= 2){
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
        }
        var comb = [
            points[a],
            /* 1 */ null,
            /* 3 */ null,
            /* 5 */ points[b]
        ];
        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
        } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
            -3,
            /* -1 -1 */ -1,
            /* -1 0 */ -5,
            /* -1 1 */ -7,
            /* 0 -1 */ 0,
            /* 0 0 */ 7,
            /* 0 1 */ 5,
            /* 1 -1 */ 1,
            /* 1 0 */ 3
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for(j = 0; j < max; j++){
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
        }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for(i = max; i >= 0; i--){
        var k = 0;
        while(i >= 0){
            var zero = true;
            for(j = 0; j < len; j++){
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0) zero = false;
            }
            if (!zero) break;
            k++;
            i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        for(j = 0; j < len; j++){
            var z = tmp[j];
            if (z === 0) continue;
            else if (z > 0) p = wnd[j][z - 1 >> 1];
            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
            if (p.type === 'affine') acc = acc.mixedAdd(p);
            else acc = acc.add(p);
        }
    }
    // Zeroify references
    for(i = 0; i < len; i++)wnd[i] = null;
    if (jacobianResult) return acc;
    else return acc.toP();
};
function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;
BasePoint.prototype.eq = function eq() {
    throw new Error('Not implemented');
};
BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
};
BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils.toArray(bytes, enc);
    var len = this.p.byteLength();
    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6) assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7) assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
    } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
    throw new Error('Unknown point format');
};
BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
};
BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);
    if (compact) return [
        this.getY().isEven() ? 2 : 3
    ].concat(x);
    return [
        4
    ].concat(x, this.getY().toArray('be', len));
};
BasePoint.prototype.encode = function encode(enc, compact) {
    return utils.encode(this._encode(compact), enc);
};
BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed) return this;
    var precomputed = {
        doubles: null,
        naf: null,
        beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
};
BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed) return false;
    var doubles = this.precomputed.doubles;
    if (!doubles) return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};
BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
    var doubles = [
        this
    ];
    var acc = this;
    for(var i = 0; i < power; i += step){
        for(var j = 0; j < step; j++)acc = acc.dbl();
        doubles.push(acc);
    }
    return {
        step: step,
        points: doubles
    };
};
BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
    var res = [
        this
    ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);
    return {
        wnd: wnd,
        points: res
    };
};
BasePoint.prototype._getBeta = function _getBeta() {
    return null;
};
BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for(var i = 0; i < k; i++)r = r.dbl();
    return r;
};

},{"bn.js":"VopIn","../utils":"8sNT5"}],"e7TRt":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');
var assert = utils.assert;
function ShortCurve(conf) {
    Base.call(this, 'short', conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;
ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) beta = new BN(conf.beta, 16).toRed(this.red);
    else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
    }
    if (conf.lambda) lambda = new BN(conf.lambda, 16);
    else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) lambda = lambdas[0];
        else {
            lambda = lambdas[1];
            assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
    }
    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) basis = conf.basis.map(function(vec) {
        return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16)
        };
    });
    else basis = this._getEndoBasis(lambda);
    return {
        beta: beta,
        lambda: lambda,
        basis: basis
    };
};
ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : BN.mont(num);
    var tinv = new BN(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [
        l1,
        l2
    ];
};
ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new BN(1);
    var y1 = new BN(0);
    var x2 = new BN(0);
    var y2 = new BN(1);
    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while(u.cmpn(0) !== 0){
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
        } else if (a1 && ++i === 2) break;
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
    }
    // Normalize signs
    if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
    }
    if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
    }
    return [
        {
            a: a1,
            b: b1
        },
        {
            a: a2,
            b: b2
        }, 
    ];
};
ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return {
        k1: k1,
        k2: k2
    };
};
ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
ShortCurve.prototype.validate = function validate(point) {
    if (point.inf) return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
};
ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for(var i = 0; i < points.length; i++){
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
        }
        if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    // Clean-up references to points and coefficients
    for(var j = 0; j < i * 2; j++){
        npoints[j] = null;
        ncoeffs[j] = null;
    }
    return res;
};
function Point(curve, x, y, isRed) {
    Base.BasePoint.call(this, curve, 'affine');
    if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
    }
}
inherits(Point, Base.BasePoint);
ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
};
ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
};
Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo) return;
    var pre = this.precomputed;
    if (pre && pre.beta) return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
            beta: null,
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
            }
        };
    }
    return beta;
};
Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed) return [
        this.x,
        this.y
    ];
    return [
        this.x,
        this.y,
        this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
            }
        }
    ];
};
Point.fromJSON = function fromJSON(curve, obj1, red) {
    if (typeof obj1 === 'string') obj1 = JSON.parse(obj1);
    var res = curve.point(obj1[0], obj1[1], red);
    if (!obj1[2]) return res;
    function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
    }
    var pre = obj1[2];
    res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [
                res
            ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [
                res
            ].concat(pre.naf.points.map(obj2point))
        }
    };
    return res;
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};
Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
};
Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf) return p;
    // P + O = P
    if (p.inf) return this;
    // P + P = 2P
    if (this.eq(p)) return this.dbl();
    // P + (-P) = O
    if (this.neg().eq(p)) return this.curve.point(null, null);
    // P + Q = O
    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.dbl = function dbl() {
    if (this.inf) return this;
    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.getX = function getX() {
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    return this.y.fromRed();
};
Point.prototype.mul = function mul(k) {
    k = new BN(k, 16);
    if (this.isInfinity()) return this;
    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo) return this.curve._endoWnafMulAdd([
        this
    ], [
        k
    ]);
    else return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
Point.prototype.eq = function eq(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};
Point.prototype.neg = function neg(_precompute) {
    if (this.inf) return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
            return p.neg();
        };
        res.precomputed = {
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
            }
        };
    }
    return res;
};
Point.prototype.toJ = function toJ() {
    if (this.inf) return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
};
function JPoint(curve, x, y, z) {
    Base.BasePoint.call(this, curve, 'jacobian');
    if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);
ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
};
JPoint.prototype.toP = function toP() {
    if (this.isInfinity()) return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
};
JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity()) return p;
    // P + O = P
    if (p.isInfinity()) return this;
    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity()) return p.toJ();
    // P + O = P
    if (p.isInfinity()) return this;
    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0) return this;
    if (this.isInfinity()) return this;
    if (!pow) return this.dbl();
    var i;
    if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for(i = 0; i < pow; i++)r = r.dbl();
        return r;
    }
    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    // Reuse results
    var jyd = jy.redAdd(jy);
    for(i = 0; i < pow; i++){
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    if (this.curve.zeroA) return this._zeroDbl();
    else if (this.curve.threeA) return this._threeDbl();
    else return this._dbl();
};
JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);
        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();
        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA) return this.dbl().add(this);
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...
    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mul = function mul(k, kbase) {
    k = new BN(k, kbase);
    return this.curve._wnafMul(this, k);
};
JPoint.prototype.eq = function eq(p) {
    if (p.type === 'affine') return this.eq(p.toJ());
    if (this === p) return true;
    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;
    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};
JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
};
JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};

},{"../utils":"8sNT5","bn.js":"VopIn","inherits":"bRL3M","./base":"kvY1a"}],"2JhQH":[function(require,module,exports) {
'use strict';
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');
var utils = require('../utils');
function MontCurve(conf) {
    Base.call(this, 'mont', conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.i4 = new BN(4).toRed(this.red).redInvm();
    this.two = new BN(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;
MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
};
function Point(curve, x, z) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
    } else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    }
}
inherits(Point, Base.BasePoint);
MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils.toArray(bytes, enc), 1);
};
MontCurve.prototype.point = function point(x, z) {
    return new Point(this, x, z);
};
MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
Point.prototype.precompute = function precompute() {
// No-op
};
Point.prototype._encode = function _encode() {
    return this.getX().toArray('be', this.curve.p.byteLength());
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1] || curve.one);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};
Point.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A
    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
};
Point.prototype.add = function add() {
    throw new Error('Not supported on Montgomery curve');
};
Point.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A
    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
};
Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q
    for(var bits = []; t.cmpn(0) !== 0; t.iushrn(1))bits.push(t.andln(1));
    for(var i = bits.length - 1; i >= 0; i--)if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
    } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
    }
    return b;
};
Point.prototype.mulAdd = function mulAdd() {
    throw new Error('Not supported on Montgomery curve');
};
Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error('Not supported on Montgomery curve');
};
Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
};
Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
};
Point.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();
    return this.x.fromRed();
};

},{"bn.js":"VopIn","inherits":"bRL3M","./base":"kvY1a","../utils":"8sNT5"}],"3idNZ":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');
var assert = utils.assert;
function EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    Base.call(this, 'edwards', conf);
    this.a = new BN(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;
EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA) return num.redNeg();
    else return this.a.redMul(num);
};
EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC) return num;
    else return this.c.redMul(num);
};
// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
};
EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new BN(y, 16);
    if (!y.red) y = y.toRed(this.red);
    // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
        if (odd) throw new Error('invalid point');
        else return this.point(this.zero, y);
    }
    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');
    if (x.fromRed().isOdd() !== odd) x = x.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity()) return true;
    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
};
function Point(curve, x, y, z, t) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        // Use extended coordinates
        if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
    }
}
inherits(Point, Base.BasePoint);
EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point(this, x, y, z, t);
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
};
Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S
    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S
    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e;
    var h;
    var j;
    if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
            // X3 = (B - C - D) * (F - 2)
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F^2 - 2 * F
            nz = f.redSqr().redSub(f).redSub(f);
        } else {
            // H = Z1^2
            h = this.z.redSqr();
            // J = F - 2 * H
            j = f.redSub(h).redISub(h);
            // X3 = (B-C-D)*J
            nx = b.redSub(c).redISub(d).redMul(j);
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F * J
            nz = f.redMul(j);
        }
    } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    // Double in extended coordinates
    if (this.curve.extended) return this._extDbl();
    else return this._projDbl();
};
Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M
    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S
    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
    } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.add = function add(p) {
    if (this.isInfinity()) return p;
    if (p.isInfinity()) return this;
    if (this.curve.extended) return this._extAdd(p);
    else return this._projAdd(p);
};
Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, false);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, true);
};
Point.prototype.normalize = function normalize() {
    if (this.zOne) return this;
    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t) this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
};
Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};
Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
};
Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};
Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":"8sNT5","bn.js":"VopIn","inherits":"bRL3M","./base":"kvY1a"}],"6yRo9":[function(require,module,exports) {
'use strict';
var curves = exports;
var hash = require('hash.js');
var curve = require('./curve');
var utils = require('./utils');
var assert = utils.assert;
function PresetCurve(options) {
    if (options.type === 'short') this.curve = new curve.short(options);
    else if (options.type === 'edwards') this.curve = new curve.edwards(options);
    else this.curve = new curve.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert(this.g.validate(), 'Invalid curve');
    assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;
function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
            var curve1 = new PresetCurve(options);
            Object.defineProperty(curves, name, {
                configurable: true,
                enumerable: true,
                value: curve1
            });
            return curve1;
        }
    });
}
defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: hash.sha256,
    gRed: false,
    g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811', 
    ]
});
defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: hash.sha256,
    gRed: false,
    g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34', 
    ]
});
defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: hash.sha256,
    gRed: false,
    g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5', 
    ]
});
defineCurve('p384', {
    type: 'short',
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: hash.sha384,
    gRed: false,
    g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f", 
    ]
});
defineCurve('p521', {
    type: 'short',
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: hash.sha512,
    gRed: false,
    g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650", 
    ]
});
defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: [
        '9', 
    ]
});
defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658', 
    ]
});
var pre;
try {
    pre = require('./precomputed/secp256k1');
} catch (e) {
    pre = undefined;
}
defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: hash.sha256,
    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [
        {
            a: '3086d221a7d46bcde86c90e49284eb15',
            b: '-e4437ed6010e88286f547fa90abfe4c3'
        },
        {
            a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
            b: '3086d221a7d46bcde86c90e49284eb15'
        }, 
    ],
    gRed: false,
    g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        pre, 
    ]
});

},{"hash.js":"gOEGU","./curve":"72OoG","./utils":"8sNT5","./precomputed/secp256k1":"lgNSV"}],"gOEGU":[function(require,module,exports) {
var hash = exports;
hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');
// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/utils":"kfzn2","./hash/common":"ecAfF","./hash/sha":"8nbee","./hash/ripemd":"9kyRQ","./hash/hmac":"5KrrE"}],"kfzn2":[function(require,module,exports) {
'use strict';
var assert = require('minimalistic-assert');
var inherits = require('inherits');
exports.inherits = inherits;
function isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 64512) !== 55296) return false;
    if (i < 0 || i + 1 >= msg.length) return false;
    return (msg.charCodeAt(i + 1) & 64512) === 56320;
}
function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg === 'string') {
        if (!enc) {
            // Inspired by stringToUtf8ByteArray() in closure-library by Google
            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
            // Apache License 2.0
            // https://github.com/google/closure-library/blob/master/LICENSE
            var p = 0;
            for(var i = 0; i < msg.length; i++){
                var c = msg.charCodeAt(i);
                if (c < 128) res[p++] = c;
                else if (c < 2048) {
                    res[p++] = c >> 6 | 192;
                    res[p++] = c & 63 | 128;
                } else if (isSurrogatePair(msg, i)) {
                    c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);
                    res[p++] = c >> 18 | 240;
                    res[p++] = c >> 12 & 63 | 128;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                } else {
                    res[p++] = c >> 12 | 224;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                }
            }
        } else if (enc === 'hex') {
            msg = msg.replace(/[^a-z0-9]+/ig, '');
            if (msg.length % 2 !== 0) msg = '0' + msg;
            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
    } else for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
    return res;
}
exports.toArray = toArray;
function toHex(msg) {
    var res = '';
    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
    return res;
}
exports.toHex = toHex;
function htonl(w) {
    var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
    return res >>> 0;
}
exports.htonl = htonl;
function toHex32(msg, endian) {
    var res = '';
    for(var i = 0; i < msg.length; i++){
        var w = msg[i];
        if (endian === 'little') w = htonl(w);
        res += zero8(w.toString(16));
    }
    return res;
}
exports.toHex32 = toHex32;
function zero2(word) {
    if (word.length === 1) return '0' + word;
    else return word;
}
exports.zero2 = zero2;
function zero8(word) {
    if (word.length === 7) return '0' + word;
    else if (word.length === 6) return '00' + word;
    else if (word.length === 5) return '000' + word;
    else if (word.length === 4) return '0000' + word;
    else if (word.length === 3) return '00000' + word;
    else if (word.length === 2) return '000000' + word;
    else if (word.length === 1) return '0000000' + word;
    else return word;
}
exports.zero8 = zero8;
function join32(msg, start, end, endian) {
    var len = end - start;
    assert(len % 4 === 0);
    var res = new Array(len / 4);
    for(var i = 0, k = start; i < res.length; i++, k += 4){
        var w;
        if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
    }
    return res;
}
exports.join32 = join32;
function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for(var i = 0, k = 0; i < msg.length; i++, k += 4){
        var m = msg[i];
        if (endian === 'big') {
            res[k] = m >>> 24;
            res[k + 1] = m >>> 16 & 255;
            res[k + 2] = m >>> 8 & 255;
            res[k + 3] = m & 255;
        } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = m >>> 16 & 255;
            res[k + 1] = m >>> 8 & 255;
            res[k] = m & 255;
        }
    }
    return res;
}
exports.split32 = split32;
function rotr32(w, b) {
    return w >>> b | w << 32 - b;
}
exports.rotr32 = rotr32;
function rotl32(w, b) {
    return w << b | w >>> 32 - b;
}
exports.rotl32 = rotl32;
function sum32(a, b) {
    return a + b >>> 0;
}
exports.sum32 = sum32;
function sum32_3(a, b, c) {
    return a + b + c >>> 0;
}
exports.sum32_3 = sum32_3;
function sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
}
exports.sum32_4 = sum32_4;
function sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
}
exports.sum32_5 = sum32_5;
function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
}
exports.sum64 = sum64;
function sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
}
exports.sum64_hi = sum64_hi;
function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
}
exports.sum64_lo = sum64_lo;
function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;
function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;
function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;
function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;
function rotr64_hi(ah, al, num) {
    var r = al << 32 - num | ah >>> num;
    return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;
function rotr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;
function shr64_hi(ah, al, num) {
    return ah >>> num;
}
exports.shr64_hi = shr64_hi;
function shr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"minimalistic-assert":"8OvWh","inherits":"bRL3M"}],"ecAfF":[function(require,module,exports) {
'use strict';
var utils = require('./utils');
var assert = require('minimalistic-assert');
function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;
BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils.toArray(msg, enc);
    if (!this.pending) this.pending = msg;
    else this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
        msg = this.pending;
        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);
    }
    return this;
};
BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert(this.pending === null);
    return this._digest(enc);
};
BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 128;
    for(var i = 1; i < k; i++)res[i] = 0;
    // Append length
    len <<= 3;
    if (this.endian === 'big') {
        for(var t = 8; t < this.padLength; t++)res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len & 255;
    } else {
        res[i++] = len & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 24 & 255;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for(t = 8; t < this.padLength; t++)res[i++] = 0;
    }
    return res;
};

},{"./utils":"kfzn2","minimalistic-assert":"8OvWh"}],"8nbee":[function(require,module,exports) {
'use strict';
exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":"fnjyb","./sha/224":"9x7tY","./sha/256":"9bCbT","./sha/384":"lJMiS","./sha/512":"8y482"}],"fnjyb":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;
var sha1_K = [
    1518500249,
    1859775393,
    2400959708,
    3395469782
];
function SHA1() {
    if (!(this instanceof SHA1)) return new SHA1();
    BlockHash.call(this);
    this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
    ];
    this.W = new Array(80);
}
utils.inherits(SHA1, BlockHash);
module.exports = SHA1;
SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;
SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for(i = 0; i < W.length; i++){
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
};
SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'big');
    else return utils.split32(this.h, 'big');
};

},{"../utils":"kfzn2","../common":"ecAfF","./common":"gzrNi"}],"gzrNi":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var rotr32 = utils.rotr32;
function ft_1(s, x, y, z) {
    if (s === 0) return ch32(x, y, z);
    if (s === 1 || s === 3) return p32(x, y, z);
    if (s === 2) return maj32(x, y, z);
}
exports.ft_1 = ft_1;
function ch32(x, y, z) {
    return x & y ^ ~x & z;
}
exports.ch32 = ch32;
function maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
}
exports.maj32 = maj32;
function p32(x, y, z) {
    return x ^ y ^ z;
}
exports.p32 = p32;
function s0_256(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;
function s1_256(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;
function g0_256(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
}
exports.g0_256 = g0_256;
function g1_256(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
}
exports.g1_256 = g1_256;

},{"../utils":"kfzn2"}],"9x7tY":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var SHA256 = require('./256');
function SHA224() {
    if (!(this instanceof SHA224)) return new SHA224();
    SHA256.call(this);
    this.h = [
        3238371032,
        914150663,
        812702999,
        4144912697,
        4290775857,
        1750603025,
        1694076839,
        3204075428
    ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;
SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;
SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === 'hex') return utils.toHex32(this.h.slice(0, 7), 'big');
    else return utils.split32(this.h.slice(0, 7), 'big');
};

},{"../utils":"kfzn2","./256":"9bCbT"}],"9bCbT":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;
var BlockHash = common.BlockHash;
var sha256_K = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
];
function SHA256() {
    if (!(this instanceof SHA256)) return new SHA256();
    BlockHash.call(this);
    this.h = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
    ];
    this.k = sha256_K;
    this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;
SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;
SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    assert(this.k.length === W.length);
    for(i = 0; i < W.length; i++){
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
    this.h[5] = sum32(this.h[5], f);
    this.h[6] = sum32(this.h[6], g);
    this.h[7] = sum32(this.h[7], h);
};
SHA256.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'big');
    else return utils.split32(this.h, 'big');
};

},{"../utils":"kfzn2","../common":"ecAfF","./common":"gzrNi","minimalistic-assert":"8OvWh"}],"lJMiS":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var SHA512 = require('./512');
function SHA384() {
    if (!(this instanceof SHA384)) return new SHA384();
    SHA512.call(this);
    this.h = [
        3418070365,
        3238371032,
        1654270250,
        914150663,
        2438529370,
        812702999,
        355462360,
        4144912697,
        1731405415,
        4290775857,
        2394180231,
        1750603025,
        3675008525,
        1694076839,
        1203062813,
        3204075428
    ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;
SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;
SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h.slice(0, 12), 'big');
    else return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":"kfzn2","./512":"8y482"}],"8y482":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = common.BlockHash;
var sha512_K = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
];
function SHA512() {
    if (!(this instanceof SHA512)) return new SHA512();
    BlockHash.call(this);
    this.h = [
        1779033703,
        4089235720,
        3144134277,
        2227873595,
        1013904242,
        4271175723,
        2773480762,
        1595750129,
        1359893119,
        2917565137,
        2600822924,
        725511199,
        528734635,
        4215389547,
        1541459225,
        327033209
    ];
    this.k = sha512_K;
    this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;
SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;
SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    // 32 x 32bit words
    for(var i = 0; i < 32; i++)W[i] = msg[start + i];
    for(; i < W.length; i += 2){
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14]; // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32]; // i - 16
        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
};
SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    assert(this.k.length === W.length);
    for(var i = 0; i < W.length; i += 2){
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
};
SHA512.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'big');
    else return utils.split32(this.h, 'big');
};
function ch64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ ~xh & zh;
    if (r < 0) r += 4294967296;
    return r;
}
function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ ~xl & zl;
    if (r < 0) r += 4294967296;
    return r;
}
function maj64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ xh & zh ^ yh & zh;
    if (r < 0) r += 4294967296;
    return r;
}
function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ xl & zl ^ yl & zl;
    if (r < 0) r += 4294967296;
    return r;
}
function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2); // 34
    var c2_hi = rotr64_hi(xl, xh, 7); // 39
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2); // 34
    var c2_lo = rotr64_lo(xl, xh, 7); // 39
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}
function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9); // 41
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9); // 41
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}
function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}
function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29); // 61
    var c2_hi = shr64_hi(xh, xl, 6);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29); // 61
    var c2_lo = shr64_lo(xh, xl, 6);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}

},{"../utils":"kfzn2","../common":"ecAfF","minimalistic-assert":"8OvWh"}],"9kyRQ":[function(require,module,exports) {
'use strict';
var utils = require('./utils');
var common = require('./common');
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;
function RIPEMD160() {
    if (!(this instanceof RIPEMD160)) return new RIPEMD160();
    BlockHash.call(this);
    this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
    ];
    this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;
RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;
RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for(var j = 0; j < 80; j++){
        var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
};
RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'little');
    else return utils.split32(this.h, 'little');
};
function f(j, x, y, z) {
    if (j <= 15) return x ^ y ^ z;
    else if (j <= 31) return x & y | ~x & z;
    else if (j <= 47) return (x | ~y) ^ z;
    else if (j <= 63) return x & z | y & ~z;
    else return x ^ (y | ~z);
}
function K(j) {
    if (j <= 15) return 0;
    else if (j <= 31) return 1518500249;
    else if (j <= 47) return 1859775393;
    else if (j <= 63) return 2400959708;
    else return 2840853838;
}
function Kh(j) {
    if (j <= 15) return 1352829926;
    else if (j <= 31) return 1548603684;
    else if (j <= 47) return 1836072691;
    else if (j <= 63) return 2053994217;
    else return 0;
}
var r = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var s = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];

},{"./utils":"kfzn2","./common":"ecAfF"}],"5KrrE":[function(require,module,exports) {
'use strict';
var utils = require('./utils');
var assert = require('minimalistic-assert');
function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils.toArray(key, enc));
}
module.exports = Hmac;
Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
    assert(key.length <= this.blockSize);
    // Add padding to key
    for(var i = key.length; i < this.blockSize; i++)key.push(0);
    for(i = 0; i < key.length; i++)key[i] ^= 54;
    this.inner = new this.Hash().update(key);
    // 0x36 ^ 0x5c = 0x6a
    for(i = 0; i < key.length; i++)key[i] ^= 106;
    this.outer = new this.Hash().update(key);
};
Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
};
Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
};

},{"./utils":"kfzn2","minimalistic-assert":"8OvWh"}],"lgNSV":[function(require,module,exports) {
module.exports = {
    doubles: {
        step: 4,
        points: [
            [
                'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
                'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821', 
            ],
            [
                '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
                '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf', 
            ],
            [
                '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
                'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695', 
            ],
            [
                '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
                '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9', 
            ],
            [
                '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
                '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36', 
            ],
            [
                '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
                '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f', 
            ],
            [
                'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
                '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999', 
            ],
            [
                '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
                'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09', 
            ],
            [
                'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
                '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d', 
            ],
            [
                'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
                'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088', 
            ],
            [
                'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
                '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d', 
            ],
            [
                '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
                '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8', 
            ],
            [
                '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
                '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a', 
            ],
            [
                '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
                '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453', 
            ],
            [
                '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
                '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160', 
            ],
            [
                '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
                '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0', 
            ],
            [
                '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
                '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6', 
            ],
            [
                '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
                '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589', 
            ],
            [
                '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
                'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17', 
            ],
            [
                'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
                '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda', 
            ],
            [
                'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
                '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd', 
            ],
            [
                '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
                '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2', 
            ],
            [
                '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
                '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6', 
            ],
            [
                'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
                '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f', 
            ],
            [
                '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
                'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01', 
            ],
            [
                'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
                '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3', 
            ],
            [
                'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
                'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f', 
            ],
            [
                'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
                '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7', 
            ],
            [
                'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
                'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78', 
            ],
            [
                'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
                '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1', 
            ],
            [
                '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
                'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150', 
            ],
            [
                '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
                '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82', 
            ],
            [
                'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
                '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc', 
            ],
            [
                '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
                'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b', 
            ],
            [
                'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
                '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51', 
            ],
            [
                'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
                '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45', 
            ],
            [
                'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
                'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120', 
            ],
            [
                '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
                '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84', 
            ],
            [
                '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
                '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d', 
            ],
            [
                '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
                'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d', 
            ],
            [
                '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
                '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8', 
            ],
            [
                'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
                '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8', 
            ],
            [
                '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
                '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac', 
            ],
            [
                '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
                'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f', 
            ],
            [
                '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
                '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962', 
            ],
            [
                'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
                '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907', 
            ],
            [
                '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
                'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec', 
            ],
            [
                'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
                'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d', 
            ],
            [
                'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
                '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414', 
            ],
            [
                '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
                'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd', 
            ],
            [
                '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
                'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0', 
            ],
            [
                'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
                '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811', 
            ],
            [
                'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
                '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1', 
            ],
            [
                'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
                '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c', 
            ],
            [
                '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
                'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73', 
            ],
            [
                '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
                '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd', 
            ],
            [
                'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
                'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405', 
            ],
            [
                '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
                'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589', 
            ],
            [
                '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
                '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e', 
            ],
            [
                '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
                '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27', 
            ],
            [
                'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
                'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1', 
            ],
            [
                '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
                '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482', 
            ],
            [
                '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
                '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945', 
            ],
            [
                'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
                '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573', 
            ],
            [
                'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
                'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82', 
            ], 
        ]
    },
    naf: {
        wnd: 7,
        points: [
            [
                'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
                '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672', 
            ],
            [
                '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
                'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6', 
            ],
            [
                '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
                '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da', 
            ],
            [
                'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
                'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37', 
            ],
            [
                '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
                'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b', 
            ],
            [
                'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
                'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81', 
            ],
            [
                'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
                '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58', 
            ],
            [
                'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
                '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77', 
            ],
            [
                '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
                '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a', 
            ],
            [
                '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
                '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c', 
            ],
            [
                '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
                '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67', 
            ],
            [
                '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
                '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402', 
            ],
            [
                'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
                'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55', 
            ],
            [
                'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
                '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482', 
            ],
            [
                '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
                'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82', 
            ],
            [
                '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
                'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396', 
            ],
            [
                '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
                '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49', 
            ],
            [
                '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
                '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf', 
            ],
            [
                '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
                '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a', 
            ],
            [
                '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
                'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7', 
            ],
            [
                'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
                'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933', 
            ],
            [
                '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
                '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a', 
            ],
            [
                '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
                '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6', 
            ],
            [
                'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
                'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37', 
            ],
            [
                '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
                '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e', 
            ],
            [
                'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
                'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6', 
            ],
            [
                'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
                'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476', 
            ],
            [
                '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
                '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40', 
            ],
            [
                '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
                '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61', 
            ],
            [
                '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
                '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683', 
            ],
            [
                'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
                '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5', 
            ],
            [
                '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
                '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b', 
            ],
            [
                'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
                '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417', 
            ],
            [
                '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
                'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868', 
            ],
            [
                '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
                'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a', 
            ],
            [
                'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
                'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6', 
            ],
            [
                '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
                '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996', 
            ],
            [
                '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
                'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e', 
            ],
            [
                'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
                'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d', 
            ],
            [
                '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
                '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2', 
            ],
            [
                '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
                'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e', 
            ],
            [
                '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
                '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437', 
            ],
            [
                '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
                'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311', 
            ],
            [
                'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
                '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4', 
            ],
            [
                '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
                '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575', 
            ],
            [
                '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
                'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d', 
            ],
            [
                '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
                'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d', 
            ],
            [
                'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
                'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629', 
            ],
            [
                'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
                'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06', 
            ],
            [
                '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
                '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374', 
            ],
            [
                '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
                '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee', 
            ],
            [
                'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
                '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1', 
            ],
            [
                'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
                'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b', 
            ],
            [
                '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
                '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661', 
            ],
            [
                '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
                '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6', 
            ],
            [
                'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
                '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e', 
            ],
            [
                '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
                '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d', 
            ],
            [
                'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
                'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc', 
            ],
            [
                '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
                'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4', 
            ],
            [
                '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
                '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c', 
            ],
            [
                'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
                '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b', 
            ],
            [
                'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
                '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913', 
            ],
            [
                '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
                '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154', 
            ],
            [
                '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
                '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865', 
            ],
            [
                '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
                'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc', 
            ],
            [
                '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
                'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224', 
            ],
            [
                '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
                '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e', 
            ],
            [
                '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
                '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6', 
            ],
            [
                '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
                '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511', 
            ],
            [
                '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
                'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b', 
            ],
            [
                'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
                'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2', 
            ],
            [
                '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
                'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c', 
            ],
            [
                'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
                '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3', 
            ],
            [
                'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
                '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d', 
            ],
            [
                'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
                '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700', 
            ],
            [
                'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
                '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4', 
            ],
            [
                '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
                'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196', 
            ],
            [
                '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
                '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4', 
            ],
            [
                '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
                'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257', 
            ],
            [
                'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
                'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13', 
            ],
            [
                'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
                '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096', 
            ],
            [
                'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
                'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38', 
            ],
            [
                'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
                '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f', 
            ],
            [
                '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
                '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448', 
            ],
            [
                'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
                '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a', 
            ],
            [
                'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
                '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4', 
            ],
            [
                '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
                '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437', 
            ],
            [
                '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
                'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7', 
            ],
            [
                'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
                '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d', 
            ],
            [
                'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
                '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a', 
            ],
            [
                'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
                '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54', 
            ],
            [
                '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
                '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77', 
            ],
            [
                'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
                'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517', 
            ],
            [
                '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
                'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10', 
            ],
            [
                'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
                'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125', 
            ],
            [
                'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
                '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e', 
            ],
            [
                '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
                'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1', 
            ],
            [
                'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
                '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2', 
            ],
            [
                'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
                '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423', 
            ],
            [
                'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
                '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8', 
            ],
            [
                '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
                'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758', 
            ],
            [
                '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
                'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375', 
            ],
            [
                'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
                '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d', 
            ],
            [
                '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
                'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec', 
            ],
            [
                '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
                '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0', 
            ],
            [
                '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
                'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c', 
            ],
            [
                'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
                'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4', 
            ],
            [
                '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
                'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f', 
            ],
            [
                '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
                '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649', 
            ],
            [
                '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
                'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826', 
            ],
            [
                '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
                '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5', 
            ],
            [
                'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
                'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87', 
            ],
            [
                '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
                '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b', 
            ],
            [
                'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
                '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc', 
            ],
            [
                '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
                '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c', 
            ],
            [
                'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
                'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f', 
            ],
            [
                'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
                '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a', 
            ],
            [
                'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
                'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46', 
            ],
            [
                '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
                'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f', 
            ],
            [
                '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
                '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03', 
            ],
            [
                '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
                'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08', 
            ],
            [
                '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
                '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8', 
            ],
            [
                '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
                '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373', 
            ],
            [
                '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
                'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3', 
            ],
            [
                '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
                '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8', 
            ],
            [
                '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
                '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1', 
            ],
            [
                '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
                '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9', 
            ], 
        ]
    }
};

},{}],"5gDK1":[function(require,module,exports) {
'use strict';
var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var utils = require('../utils');
var curves = require('../curves');
var rand = require('brorand');
var assert = utils.assert;
var KeyPair = require('./key');
var Signature = require('./signature');
function EC(options) {
    if (!(this instanceof EC)) return new EC(options);
    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === 'string') {
        assert(Object.prototype.hasOwnProperty.call(curves, options), 'Unknown curve ' + options);
        options = curves[options];
    }
    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof curves.PresetCurve) options = {
        curve: options
    };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
}
module.exports = EC;
EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair(this, options);
};
EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair.fromPrivate(this, priv, enc);
};
EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair.fromPublic(this, pub, enc);
};
EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options) options = {
    };
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN(2));
    for(;;){
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
    }
};
EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0) msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
    else return msg;
};
EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === 'object') {
        options = enc;
        enc = null;
    }
    if (!options) options = {
    };
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new BN(msg, 16));
    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray('be', bytes);
    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray('be', bytes);
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8'
    });
    // Number of bytes to generate
    var ns1 = this.n.sub(new BN(1));
    for(var iter = 0;; iter++){
        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
        }
        return new Signature({
            r: r,
            s: s,
            recoveryParam: recoveryParam
        });
    }
};
EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new BN(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new Signature(signature, 'hex');
    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;
        return p.getX().umod(this.n).cmp(r) === 0;
    }
    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K
    p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
};
EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
    assert((3 & j) === j, 'The recovery param is more than two bits');
    signature = new Signature(signature, enc);
    var n = this.n;
    var e = new BN(msg);
    var r = signature.r;
    var s = signature.s;
    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate');
    // 1.1. Let x = r + jn.
    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
};
EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new Signature(signature, enc);
    if (signature.recoveryParam !== null) return signature.recoveryParam;
    for(var i = 0; i < 4; i++){
        var Qprime;
        try {
            Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
            continue;
        }
        if (Qprime.eq(Q)) return i;
    }
    throw new Error('Unable to find valid recovery factor');
};

},{"bn.js":"VopIn","hmac-drbg":"eMMR6","../utils":"8sNT5","../curves":"6yRo9","brorand":"8FGdh","./key":"c4oIH","./signature":"cRuxW"}],"eMMR6":[function(require,module,exports) {
'use strict';
var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');
function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
    var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
    var pers = utils.toArray(options.pers, options.persEnc || 'hex');
    assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;
HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for(var i = 0; i < this.V.length; i++){
        this.K[i] = 0;
        this.V[i] = 1;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 281474976710656; // 2^48
};
HmacDRBG.prototype._hmac = function hmac() {
    return new hash.hmac(this.hash, this.K);
};
HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([
        0
    ]);
    if (seed) kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed) return;
    this.K = this._hmac().update(this.V).update([
        1
    ]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
};
HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
    }
    entropy = utils.toArray(entropy, entropyEnc);
    add = utils.toArray(add, addEnc);
    assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._update(entropy.concat(add || []));
    this._reseed = 1;
};
HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval) throw new Error('Reseed is required');
    // Optional encoding
    if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
    }
    // Optional additional data
    if (add) {
        add = utils.toArray(add, addEnc || 'hex');
        this._update(add);
    }
    var temp = [];
    while(temp.length < len){
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils.encode(res, enc);
};

},{"hash.js":"gOEGU","minimalistic-crypto-utils":"6f39G","minimalistic-assert":"8OvWh"}],"c4oIH":[function(require,module,exports) {
'use strict';
var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
function KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv) this._importPrivate(options.priv, options.privEnc);
    if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;
KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc
    });
};
KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair) return priv;
    return new KeyPair(ec, {
        priv: priv,
        privEnc: enc
    });
};
KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity()) return {
        result: false,
        reason: 'Invalid public key'
    };
    if (!pub.validate()) return {
        result: false,
        reason: 'Public key is not a point'
    };
    if (!pub.mul(this.ec.curve.n).isInfinity()) return {
        result: false,
        reason: 'Public key * N != O'
    };
    return {
        result: true,
        reason: null
    };
};
KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === 'string') {
        enc = compact;
        compact = null;
    }
    if (!this.pub) this.pub = this.ec.g.mul(this.priv);
    if (!enc) return this.pub;
    return this.pub.encode(enc, compact);
};
KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex') return this.priv.toString(16, 2);
    else return this.priv;
};
KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new BN(key, enc || 16);
    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};
KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') assert(key.x, 'Need x coordinate');
        else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') assert(key.x && key.y, 'Need both x and y coordinate');
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
};
// ECDH
KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) assert(pub.validate(), 'public point not validated');
    return pub.mul(this.priv).getX();
};
// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
};
KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
};
KeyPair.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"bn.js":"VopIn","../utils":"8sNT5"}],"cRuxW":[function(require,module,exports) {
'use strict';
var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
function Signature(options, enc) {
    if (options instanceof Signature) return options;
    if (this._importDER(options, enc)) return;
    assert(options.r && options.s, 'Signature without r or s');
    this.r = new BN(options.r, 16);
    this.s = new BN(options.s, 16);
    if (options.recoveryParam === undefined) this.recoveryParam = null;
    else this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;
function Position() {
    this.place = 0;
}
function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 128)) return initial;
    var octetLen = initial & 15;
    // Indefinite length or overflow
    if (octetLen === 0 || octetLen > 4) return false;
    var val = 0;
    for(var i = 0, off = p.place; i < octetLen; i++, off++){
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
    }
    // Leading zeroes
    if (val <= 127) return false;
    p.place = off;
    return val;
}
function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while(!buf[i] && !(buf[i + 1] & 128) && i < len)i++;
    if (i === 0) return buf;
    return buf.slice(i);
}
Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 48) return false;
    var len = getLength(data, p);
    if (len === false) return false;
    if (len + p.place !== data.length) return false;
    if (data[p.place++] !== 2) return false;
    var rlen = getLength(data, p);
    if (rlen === false) return false;
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 2) return false;
    var slen = getLength(data, p);
    if (slen === false) return false;
    if (data.length !== slen + p.place) return false;
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
        if (r[1] & 128) r = r.slice(1);
        else // Leading zeroes
        return false;
    }
    if (s[0] === 0) {
        if (s[1] & 128) s = s.slice(1);
        else // Leading zeroes
        return false;
    }
    this.r = new BN(r);
    this.s = new BN(s);
    this.recoveryParam = null;
    return true;
};
function constructLength(arr, len) {
    if (len < 128) {
        arr.push(len);
        return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 128);
    while(--octets)arr.push(len >>> (octets << 3) & 255);
    arr.push(len);
}
Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
    // Pad values
    if (r[0] & 128) r = [
        0
    ].concat(r);
    // Pad values
    if (s[0] & 128) s = [
        0
    ].concat(s);
    r = rmPadding(r);
    s = rmPadding(s);
    while(!s[0] && !(s[1] & 128))s = s.slice(1);
    var arr = [
        2
    ];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(2);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [
        48
    ];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils.encode(res, enc);
};

},{"bn.js":"VopIn","../utils":"8sNT5"}],"jPbam":[function(require,module,exports) {
'use strict';
var hash = require('hash.js');
var curves = require('../curves');
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');
function EDDSA(curve) {
    assert(curve === 'ed25519', 'only tested with ed25519 so far');
    if (!(this instanceof EDDSA)) return new EDDSA(curve);
    curve = curves[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = hash.sha512;
}
module.exports = EDDSA;
/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/ EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({
        R: R,
        S: S,
        Rencoded: Rencoded
    });
};
/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/ EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
};
EDDSA.prototype.hashInt = function hashInt() {
    var hash1 = this.hash();
    for(var i = 0; i < arguments.length; i++)hash1.update(arguments[i]);
    return utils.intFromLE(hash1.digest()).umod(this.curve.n);
};
EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
};
EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
};
EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature) return sig;
    return new Signature(this, sig);
};
/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/ EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray('le', this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
    return enc;
};
EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & -129);
    var xIsOdd = (bytes[lastIx] & 128) !== 0;
    var y = utils.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
};
EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray('le', this.encodingLength);
};
EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils.intFromLE(bytes);
};
EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
};

},{"hash.js":"gOEGU","../curves":"6yRo9","../utils":"8sNT5","./key":"hOVET","./signature":"a5qj9"}],"hOVET":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;
/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/ function KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes(params.secret);
    if (eddsa.isPoint(params.pub)) this._pub = params.pub;
    else this._pubBytes = parseBytes(params.pub);
}
KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(eddsa, {
        pub: pub
    });
};
KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair) return secret;
    return new KeyPair(eddsa, {
        secret: secret
    });
};
KeyPair.prototype.secret = function secret() {
    return this._secret;
};
cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
});
cachedProperty(KeyPair, 'pub', function pub() {
    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
});
cachedProperty(KeyPair, 'privBytes', function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
});
cachedProperty(KeyPair, 'priv', function priv() {
    return this.eddsa.decodeInt(this.privBytes());
});
cachedProperty(KeyPair, 'hash', function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
});
cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
});
KeyPair.prototype.sign = function sign(message) {
    assert(this._secret, 'KeyPair can only verify');
    return this.eddsa.sign(message, this);
};
KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
};
KeyPair.prototype.getSecret = function getSecret(enc) {
    assert(this._secret, 'KeyPair is public only');
    return utils.encode(this.secret(), enc);
};
KeyPair.prototype.getPublic = function getPublic(enc) {
    return utils.encode(this.pubBytes(), enc);
};
module.exports = KeyPair;

},{"../utils":"8sNT5"}],"a5qj9":[function(require,module,exports) {
'use strict';
var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;
/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/ function Signature(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== 'object') sig = parseBytes(sig);
    if (Array.isArray(sig)) sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
    };
    assert(sig.R && sig.S, 'Signature without R or S');
    if (eddsa.isPoint(sig.R)) this._R = sig.R;
    if (sig.S instanceof BN) this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}
cachedProperty(Signature, 'S', function S() {
    return this.eddsa.decodeInt(this.Sencoded());
});
cachedProperty(Signature, 'R', function R() {
    return this.eddsa.decodePoint(this.Rencoded());
});
cachedProperty(Signature, 'Rencoded', function Rencoded() {
    return this.eddsa.encodePoint(this.R());
});
cachedProperty(Signature, 'Sencoded', function Sencoded() {
    return this.eddsa.encodeInt(this.S());
});
Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
};
Signature.prototype.toHex = function toHex() {
    return utils.encode(this.toBytes(), 'hex').toUpperCase();
};
module.exports = Signature;

},{"bn.js":"VopIn","../utils":"8sNT5"}],"dkoZR":[function(require,module,exports) {
(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require('buffer').Buffer;
    } catch (e) {
    }
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, 'Invalid character in ' + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 10;
            else if (c >= 17) b = c - 17 + 10;
            else b = c;
            assert(c >= 0 && b < mul, 'Invalid character');
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') try {
        BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e1) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 255;
            if (position < res.length) res[position++] = word >> 8 & 255;
            if (position < res.length) res[position++] = word >> 16 & 255;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 255;
            if (position >= 0) res[position--] = word >> 8 & 255;
            if (position >= 0) res[position--] = word >> 16 & 255;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(typeof module === 'undefined' || module, this);

},{"buffer":"jhUEF"}],"4Szbv":[function(require,module,exports) {
var asn1 = require('./asn1');
var aesid = require('./aesid.json');
var fixProc = require('./fixProc');
var ciphers = require('browserify-aes');
var compat = require('pbkdf2');
var Buffer = require('safe-buffer').Buffer;
module.exports = parseKeys;
function parseKeys(buffer) {
    var password;
    if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
        password = buffer.passphrase;
        buffer = buffer.key;
    }
    if (typeof buffer === 'string') buffer = Buffer.from(buffer);
    var stripped = fixProc(buffer, password);
    var type = stripped.tag;
    var data = stripped.data;
    var subtype, ndata;
    switch(type){
        case 'CERTIFICATE':
            ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;
        // falls through
        case 'PUBLIC KEY':
            if (!ndata) ndata = asn1.PublicKey.decode(data, 'der');
            subtype = ndata.algorithm.algorithm.join('.');
            switch(subtype){
                case '1.2.840.113549.1.1.1':
                    return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
                case '1.2.840.10045.2.1':
                    ndata.subjectPrivateKey = ndata.subjectPublicKey;
                    return {
                        type: 'ec',
                        data: ndata
                    };
                case '1.2.840.10040.4.1':
                    ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
                    return {
                        type: 'dsa',
                        data: ndata.algorithm.params
                    };
                default:
                    throw new Error('unknown key id ' + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case 'ENCRYPTED PRIVATE KEY':
            data = asn1.EncryptedPrivateKey.decode(data, 'der');
            data = decrypt(data, password);
        // falls through
        case 'PRIVATE KEY':
            ndata = asn1.PrivateKey.decode(data, 'der');
            subtype = ndata.algorithm.algorithm.join('.');
            switch(subtype){
                case '1.2.840.113549.1.1.1':
                    return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
                case '1.2.840.10045.2.1':
                    return {
                        curve: ndata.algorithm.curve,
                        privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
                    };
                case '1.2.840.10040.4.1':
                    ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
                    return {
                        type: 'dsa',
                        params: ndata.algorithm.params
                    };
                default:
                    throw new Error('unknown key id ' + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case 'RSA PUBLIC KEY':
            return asn1.RSAPublicKey.decode(data, 'der');
        case 'RSA PRIVATE KEY':
            return asn1.RSAPrivateKey.decode(data, 'der');
        case 'DSA PRIVATE KEY':
            return {
                type: 'dsa',
                params: asn1.DSAPrivateKey.decode(data, 'der')
            };
        case 'EC PRIVATE KEY':
            data = asn1.ECPrivateKey.decode(data, 'der');
            return {
                curve: data.parameters.value,
                privateKey: data.privateKey
            };
        default:
            throw new Error('unknown key type ' + type);
    }
}
parseKeys.signature = asn1.signature;
function decrypt(data, password) {
    var salt = data.algorithm.decrypt.kde.kdeparams.salt;
    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
    var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];
    var iv = data.algorithm.decrypt.cipher.iv;
    var cipherText = data.subjectPrivateKey;
    var keylen = parseInt(algo.split('-')[1], 10) / 8;
    var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1');
    var cipher = ciphers.createDecipheriv(algo, key, iv);
    var out = [];
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    return Buffer.concat(out);
}

},{"./asn1":"l0ugz","./aesid.json":"bvb6u","./fixProc":"bNDUb","browserify-aes":"hnlHj","pbkdf2":"g38Hg","safe-buffer":"eW7r9"}],"l0ugz":[function(require,module,exports) {
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict';
var asn1 = require('asn1.js');
exports.certificate = require('./certificate');
var RSAPrivateKey = asn1.define('RSAPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());
});
exports.RSAPrivateKey = RSAPrivateKey;
var RSAPublicKey = asn1.define('RSAPublicKey', function() {
    this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());
});
exports.RSAPublicKey = RSAPublicKey;
var PublicKey = asn1.define('SubjectPublicKeyInfo', function() {
    this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
exports.PublicKey = PublicKey;
var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function() {
    this.seq().obj(this.key('algorithm').objid(), this.key('none').null_().optional(), this.key('curve').objid().optional(), this.key('params').seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()).optional());
});
var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function() {
    this.seq().obj(this.key('version').int(), this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPrivateKey').octstr());
});
exports.PrivateKey = PrivateKeyInfo;
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function() {
    this.seq().obj(this.key('algorithm').seq().obj(this.key('id').objid(), this.key('decrypt').seq().obj(this.key('kde').seq().obj(this.key('id').objid(), this.key('kdeparams').seq().obj(this.key('salt').octstr(), this.key('iters').int())), this.key('cipher').seq().obj(this.key('algo').objid(), this.key('iv').octstr()))), this.key('subjectPrivateKey').octstr());
});
exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
var DSAPrivateKey = asn1.define('DSAPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('p').int(), this.key('q').int(), this.key('g').int(), this.key('pub_key').int(), this.key('priv_key').int());
});
exports.DSAPrivateKey = DSAPrivateKey;
exports.DSAparam = asn1.define('DSAparam', function() {
    this.int();
});
var ECPrivateKey = asn1.define('ECPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('privateKey').octstr(), this.key('parameters').optional().explicit(0).use(ECParameters), this.key('publicKey').optional().explicit(1).bitstr());
});
exports.ECPrivateKey = ECPrivateKey;
var ECParameters = asn1.define('ECParameters', function() {
    this.choice({
        namedCurve: this.objid()
    });
});
exports.signature = asn1.define('signature', function() {
    this.seq().obj(this.key('r').int(), this.key('s').int());
});

},{"asn1.js":"iV1JX","./certificate":"Tf0QA"}],"iV1JX":[function(require,module,exports) {
'use strict';
const asn1 = exports;
asn1.bignum = require('bn.js');
asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"bn.js":"VopIn","./asn1/api":"2oHUo","./asn1/base":"3q4wA","./asn1/constants":"oiTK8","./asn1/decoders":"awa6C","./asn1/encoders":"2psTt"}],"2oHUo":[function(require,module,exports) {
'use strict';
const encoders = require('./encoders');
const decoders = require('./decoders');
const inherits = require('inherits');
const api = exports;
api.define = function define(name, body) {
    return new Entity(name, body);
};
function Entity(name, body) {
    this.name = name;
    this.body = body;
    this.decoders = {
    };
    this.encoders = {
    };
}
Entity.prototype._createNamed = function createNamed(Base) {
    const name1 = this.name;
    function Generated(entity) {
        this._initNamed(entity, name1);
    }
    inherits(Generated, Base);
    Generated.prototype._initNamed = function _initNamed(entity, name) {
        Base.call(this, entity, name);
    };
    return new Generated(this);
};
Entity.prototype._getDecoder = function _getDecoder(enc) {
    enc = enc || 'der';
    // Lazily create decoder
    if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed(decoders[enc]);
    return this.decoders[enc];
};
Entity.prototype.decode = function decode(data, enc, options) {
    return this._getDecoder(enc).decode(data, options);
};
Entity.prototype._getEncoder = function _getEncoder(enc) {
    enc = enc || 'der';
    // Lazily create encoder
    if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed(encoders[enc]);
    return this.encoders[enc];
};
Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
    return this._getEncoder(enc).encode(data, reporter);
};

},{"./encoders":"2psTt","./decoders":"awa6C","inherits":"bRL3M"}],"2psTt":[function(require,module,exports) {
'use strict';
const encoders = exports;
encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":"b1CZy","./pem":"jRlrF"}],"b1CZy":[function(require,module,exports) {
'use strict';
const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;
const Node = require('../base/node');
// Import DER constants
const der = require('../constants/der');
function DEREncoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new DERNode();
    this.tree._init(entity.body);
}
module.exports = DEREncoder;
DEREncoder.prototype.encode = function encode(data, reporter) {
    return this.tree._encode(data, reporter).join();
};
// Tree methods
function DERNode(parent) {
    Node.call(this, 'der', parent);
}
inherits(DERNode, Node);
DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
    const encodedTag = encodeTag(tag, primitive, cls, this.reporter);
    // Short form
    if (content.length < 128) {
        const header = Buffer.alloc(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([
            header,
            content
        ]);
    }
    // Long form
    // Count octets required to store length
    let lenOctets = 1;
    for(let i = content.length; i >= 256; i >>= 8)lenOctets++;
    const header = Buffer.alloc(2 + lenOctets);
    header[0] = encodedTag;
    header[1] = 128 | lenOctets;
    for(let i1 = 1 + lenOctets, j = content.length; j > 0; i1--, j >>= 8)header[i1] = j & 255;
    return this._createEncoderBuffer([
        header,
        content
    ]);
};
DERNode.prototype._encodeStr = function encodeStr(str, tag) {
    if (tag === 'bitstr') return this._createEncoderBuffer([
        str.unused | 0,
        str.data
    ]);
    else if (tag === 'bmpstr') {
        const buf = Buffer.alloc(str.length * 2);
        for(let i = 0; i < str.length; i++)buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        return this._createEncoderBuffer(buf);
    } else if (tag === 'numstr') {
        if (!this._isNumstr(str)) return this.reporter.error("Encoding of string type: numstr supports only digits and space");
        return this._createEncoderBuffer(str);
    } else if (tag === 'printstr') {
        if (!this._isPrintstr(str)) return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
        return this._createEncoderBuffer(str);
    } else if (/str$/.test(tag)) return this._createEncoderBuffer(str);
    else if (tag === 'objDesc') return this._createEncoderBuffer(str);
    else return this.reporter.error('Encoding of string type: ' + tag + ' unsupported');
};
DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
    if (typeof id === 'string') {
        if (!values) return this.reporter.error('string objid given, but no values map found');
        if (!values.hasOwnProperty(id)) return this.reporter.error('objid not found in values map');
        id = values[id].split(/[\s.]+/g);
        for(let i = 0; i < id.length; i++)id[i] |= 0;
    } else if (Array.isArray(id)) {
        id = id.slice();
        for(let i = 0; i < id.length; i++)id[i] |= 0;
    }
    if (!Array.isArray(id)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
    if (!relative) {
        if (id[1] >= 40) return this.reporter.error('Second objid identifier OOB');
        id.splice(0, 2, id[0] * 40 + id[1]);
    }
    // Count number of octets
    let size = 0;
    for(let i = 0; i < id.length; i++){
        let ident = id[i];
        for(size++; ident >= 128; ident >>= 7)size++;
    }
    const objid = Buffer.alloc(size);
    let offset = objid.length - 1;
    for(let i2 = id.length - 1; i2 >= 0; i2--){
        let ident = id[i2];
        objid[offset--] = ident & 127;
        while((ident >>= 7) > 0)objid[offset--] = 128 | ident & 127;
    }
    return this._createEncoderBuffer(objid);
};
function two(num) {
    if (num < 10) return '0' + num;
    else return num;
}
DERNode.prototype._encodeTime = function encodeTime(time, tag) {
    let str;
    const date = new Date(time);
    if (tag === 'gentime') str = [
        two(date.getUTCFullYear()),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        'Z'
    ].join('');
    else if (tag === 'utctime') str = [
        two(date.getUTCFullYear() % 100),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        'Z'
    ].join('');
    else this.reporter.error('Encoding ' + tag + ' time is not supported yet');
    return this._encodeStr(str, 'octstr');
};
DERNode.prototype._encodeNull = function encodeNull() {
    return this._createEncoderBuffer('');
};
DERNode.prototype._encodeInt = function encodeInt(num, values) {
    if (typeof num === 'string') {
        if (!values) return this.reporter.error('String int or enum given, but no values map');
        if (!values.hasOwnProperty(num)) return this.reporter.error('Values map doesn\'t contain: ' + JSON.stringify(num));
        num = values[num];
    }
    // Bignum, assume big endian
    if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
        const numArray = num.toArray();
        if (!num.sign && numArray[0] & 128) numArray.unshift(0);
        num = Buffer.from(numArray);
    }
    if (Buffer.isBuffer(num)) {
        let size = num.length;
        if (num.length === 0) size++;
        const out = Buffer.alloc(size);
        num.copy(out);
        if (num.length === 0) out[0] = 0;
        return this._createEncoderBuffer(out);
    }
    if (num < 128) return this._createEncoderBuffer(num);
    if (num < 256) return this._createEncoderBuffer([
        0,
        num
    ]);
    let size = 1;
    for(let i = num; i >= 256; i >>= 8)size++;
    const out = new Array(size);
    for(let i3 = out.length - 1; i3 >= 0; i3--){
        out[i3] = num & 255;
        num >>= 8;
    }
    if (out[0] & 128) out.unshift(0);
    return this._createEncoderBuffer(Buffer.from(out));
};
DERNode.prototype._encodeBool = function encodeBool(value) {
    return this._createEncoderBuffer(value ? 255 : 0);
};
DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function') entity = entity(obj);
    return entity._getEncoder('der').tree;
};
DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
    const state = this._baseState;
    let i;
    if (state['default'] === null) return false;
    const data = dataBuffer.join();
    if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
    if (data.length !== state.defaultBuffer.length) return false;
    for(i = 0; i < data.length; i++)if (data[i] !== state.defaultBuffer[i]) return false;
    return true;
};
// Utility methods
function encodeTag(tag, primitive, cls, reporter) {
    let res;
    if (tag === 'seqof') tag = 'seq';
    else if (tag === 'setof') tag = 'set';
    if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag];
    else if (typeof tag === 'number' && (tag | 0) === tag) res = tag;
    else return reporter.error('Unknown tag: ' + tag);
    if (res >= 31) return reporter.error('Multi-octet tag encoding unsupported');
    if (!primitive) res |= 32;
    res |= der.tagClassByName[cls || 'universal'] << 6;
    return res;
}

},{"inherits":"bRL3M","safer-buffer":"aLyFx","../base/node":"l9Edp","../constants/der":"i6Hqy"}],"aLyFx":[function(require,module,exports) {
/* eslint-disable node/no-deprecated-api */ 'use strict';
var process = require("process");
var buffer = require('buffer');
var Buffer = buffer.Buffer;
var safer = {
};
var key;
for(key in buffer){
    if (!buffer.hasOwnProperty(key)) continue;
    if (key === 'SlowBuffer' || key === 'Buffer') continue;
    safer[key] = buffer[key];
}
var Safer = safer.Buffer = {
};
for(key in Buffer){
    if (!Buffer.hasOwnProperty(key)) continue;
    if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue;
    Safer[key] = Buffer[key];
}
safer.Buffer.prototype = Buffer.prototype;
if (!Safer.from || Safer.from === Uint8Array.from) Safer.from = function(value, encodingOrOffset, length) {
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
    if (value && typeof value.length === 'undefined') throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value);
    return Buffer(value, encodingOrOffset, length);
};
if (!Safer.alloc) Safer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
    if (size < 0 || size >= 2147483648) throw new RangeError('The value "' + size + '" is invalid for option "size"');
    var buf = Buffer(size);
    if (!fill || fill.length === 0) buf.fill(0);
    else if (typeof encoding === 'string') buf.fill(fill, encoding);
    else buf.fill(fill);
    return buf;
};
if (!safer.kStringMaxLength) try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength;
} catch (e) {
// we can't determine kStringMaxLength in environments where process.binding
// is unsupported, so let's not set it
}
if (!safer.constants) {
    safer.constants = {
        MAX_LENGTH: safer.kMaxLength
    };
    if (safer.kStringMaxLength) safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
}
module.exports = safer;

},{"process":"d5jf4","buffer":"fCgem"}],"l9Edp":[function(require,module,exports) {
'use strict';
const Reporter = require('../base/reporter').Reporter;
const EncoderBuffer = require('../base/buffer').EncoderBuffer;
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const assert = require('minimalistic-assert');
// Supported tags
const tags = [
    'seq',
    'seqof',
    'set',
    'setof',
    'objid',
    'bool',
    'gentime',
    'utctime',
    'null_',
    'enum',
    'int',
    'objDesc',
    'bitstr',
    'bmpstr',
    'charstr',
    'genstr',
    'graphstr',
    'ia5str',
    'iso646str',
    'numstr',
    'octstr',
    'printstr',
    't61str',
    'unistr',
    'utf8str',
    'videostr'
];
// Public methods list
const methods = [
    'key',
    'obj',
    'use',
    'optional',
    'explicit',
    'implicit',
    'def',
    'choice',
    'any',
    'contains'
].concat(tags);
// Overrided methods list
const overrided = [
    '_peekTag',
    '_decodeTag',
    '_use',
    '_decodeStr',
    '_decodeObjid',
    '_decodeTime',
    '_decodeNull',
    '_decodeInt',
    '_decodeBool',
    '_decodeList',
    '_encodeComposite',
    '_encodeStr',
    '_encodeObjid',
    '_encodeTime',
    '_encodeNull',
    '_encodeInt',
    '_encodeBool'
];
function Node(enc, parent, name) {
    const state = {
    };
    this._baseState = state;
    state.name = name;
    state.enc = enc;
    state.parent = parent || null;
    state.children = null;
    // State
    state.tag = null;
    state.args = null;
    state.reverseArgs = null;
    state.choice = null;
    state.optional = false;
    state.any = false;
    state.obj = false;
    state.use = null;
    state.useDecoder = null;
    state.key = null;
    state['default'] = null;
    state.explicit = null;
    state.implicit = null;
    state.contains = null;
    // Should create new instance on each method
    if (!state.parent) {
        state.children = [];
        this._wrap();
    }
}
module.exports = Node;
const stateProps = [
    'enc',
    'parent',
    'children',
    'tag',
    'args',
    'reverseArgs',
    'choice',
    'optional',
    'any',
    'obj',
    'use',
    'alteredUse',
    'key',
    'default',
    'explicit',
    'implicit',
    'contains'
];
Node.prototype.clone = function clone() {
    const state = this._baseState;
    const cstate = {
    };
    stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
    });
    const res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
};
Node.prototype._wrap = function wrap() {
    const state = this._baseState;
    methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
            const clone = new this.constructor(this);
            state.children.push(clone);
            return clone[method].apply(clone, arguments);
        };
    }, this);
};
Node.prototype._init = function init(body) {
    const state = this._baseState;
    assert(state.parent === null);
    body.call(this);
    // Filter children
    state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
    }, this);
    assert.equal(state.children.length, 1, 'Root node can have only one child');
};
Node.prototype._useArgs = function useArgs(args) {
    const state = this._baseState;
    // Filter children and args
    const children = args.filter(function(arg) {
        return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
    }, this);
    if (children.length !== 0) {
        assert(state.children === null);
        state.children = children;
        // Replace parent to maintain backward link
        children.forEach(function(child) {
            child._baseState.parent = this;
        }, this);
    }
    if (args.length !== 0) {
        assert(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
            if (typeof arg !== 'object' || arg.constructor !== Object) return arg;
            const res = {
            };
            Object.keys(arg).forEach(function(key) {
                if (key == (key | 0)) key |= 0;
                const value = arg[key];
                res[value] = key;
            });
            return res;
        });
    }
};
//
// Overrided methods
//
overrided.forEach(function(method) {
    Node.prototype[method] = function _overrided() {
        const state = this._baseState;
        throw new Error(method + ' not implemented for encoding: ' + state.enc);
    };
});
//
// Public methods
//
tags.forEach(function(tag) {
    Node.prototype[tag] = function _tagMethod() {
        const state = this._baseState;
        const args = Array.prototype.slice.call(arguments);
        assert(state.tag === null);
        state.tag = tag;
        this._useArgs(args);
        return this;
    };
});
Node.prototype.use = function use(item) {
    assert(item);
    const state = this._baseState;
    assert(state.use === null);
    state.use = item;
    return this;
};
Node.prototype.optional = function optional() {
    const state = this._baseState;
    state.optional = true;
    return this;
};
Node.prototype.def = function def(val) {
    const state = this._baseState;
    assert(state['default'] === null);
    state['default'] = val;
    state.optional = true;
    return this;
};
Node.prototype.explicit = function explicit(num) {
    const state = this._baseState;
    assert(state.explicit === null && state.implicit === null);
    state.explicit = num;
    return this;
};
Node.prototype.implicit = function implicit(num) {
    const state = this._baseState;
    assert(state.explicit === null && state.implicit === null);
    state.implicit = num;
    return this;
};
Node.prototype.obj = function obj() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);
    state.obj = true;
    if (args.length !== 0) this._useArgs(args);
    return this;
};
Node.prototype.key = function key(newKey) {
    const state = this._baseState;
    assert(state.key === null);
    state.key = newKey;
    return this;
};
Node.prototype.any = function any() {
    const state = this._baseState;
    state.any = true;
    return this;
};
Node.prototype.choice = function choice(obj) {
    const state = this._baseState;
    assert(state.choice === null);
    state.choice = obj;
    this._useArgs(Object.keys(obj).map(function(key) {
        return obj[key];
    }));
    return this;
};
Node.prototype.contains = function contains(item) {
    const state = this._baseState;
    assert(state.use === null);
    state.contains = item;
    return this;
};
//
// Decoding
//
Node.prototype._decode = function decode(input, options) {
    const state = this._baseState;
    // Decode root node
    if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));
    let result = state['default'];
    let present = true;
    let prevKey = null;
    if (state.key !== null) prevKey = input.enterKey(state.key);
    // Check if tag is there
    if (state.optional) {
        let tag = null;
        if (state.explicit !== null) tag = state.explicit;
        else if (state.implicit !== null) tag = state.implicit;
        else if (state.tag !== null) tag = state.tag;
        if (tag === null && !state.any) {
            // Trial and Error
            const save = input.save();
            try {
                if (state.choice === null) this._decodeGeneric(state.tag, input, options);
                else this._decodeChoice(input, options);
                present = true;
            } catch (e) {
                present = false;
            }
            input.restore(save);
        } else {
            present = this._peekTag(input, tag, state.any);
            if (input.isError(present)) return present;
        }
    }
    // Push object on stack
    let prevObj;
    if (state.obj && present) prevObj = input.enterObject();
    if (present) {
        // Unwrap explicit values
        if (state.explicit !== null) {
            const explicit = this._decodeTag(input, state.explicit);
            if (input.isError(explicit)) return explicit;
            input = explicit;
        }
        const start = input.offset;
        // Unwrap implicit and normal values
        if (state.use === null && state.choice === null) {
            let save;
            if (state.any) save = input.save();
            const body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
            if (input.isError(body)) return body;
            if (state.any) result = input.raw(save);
            else input = body;
        }
        if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, 'tagged');
        if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, 'content');
        // Select proper method for tag
        if (state.any) ;
        else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);
        else result = this._decodeChoice(input, options);
        if (input.isError(result)) return result;
        // Decode children
        if (!state.any && state.choice === null && state.children !== null) state.children.forEach(function decodeChildren(child) {
            // NOTE: We are ignoring errors here, to let parser continue with other
            // parts of encoded data
            child._decode(input, options);
        });
        // Decode contained/encoded by schema, only in bit or octet strings
        if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
            const data = new DecoderBuffer(result);
            result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
    }
    // Pop object
    if (state.obj && present) result = input.leaveObject(prevObj);
    // Set key
    if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);
    else if (prevKey !== null) input.exitKey(prevKey);
    return result;
};
Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
    const state = this._baseState;
    if (tag === 'seq' || tag === 'set') return null;
    if (tag === 'seqof' || tag === 'setof') return this._decodeList(input, tag, state.args[0], options);
    else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);
    else if (tag === 'objid' && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);
    else if (tag === 'objid') return this._decodeObjid(input, null, null, options);
    else if (tag === 'gentime' || tag === 'utctime') return this._decodeTime(input, tag, options);
    else if (tag === 'null_') return this._decodeNull(input, options);
    else if (tag === 'bool') return this._decodeBool(input, options);
    else if (tag === 'objDesc') return this._decodeStr(input, tag, options);
    else if (tag === 'int' || tag === 'enum') return this._decodeInt(input, state.args && state.args[0], options);
    if (state.use !== null) return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
    else return input.error('unknown tag: ' + tag);
};
Node.prototype._getUse = function _getUse(entity, obj) {
    const state = this._baseState;
    // Create altered use decoder if implicit is set
    state.useDecoder = this._use(entity, obj);
    assert(state.useDecoder._baseState.parent === null);
    state.useDecoder = state.useDecoder._baseState.children[0];
    if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
    }
    return state.useDecoder;
};
Node.prototype._decodeChoice = function decodeChoice(input, options) {
    const state = this._baseState;
    let result = null;
    let match = false;
    Object.keys(state.choice).some(function(key) {
        const save = input.save();
        const node = state.choice[key];
        try {
            const value = node._decode(input, options);
            if (input.isError(value)) return false;
            result = {
                type: key,
                value: value
            };
            match = true;
        } catch (e) {
            input.restore(save);
            return false;
        }
        return true;
    }, this);
    if (!match) return input.error('Choice not matched');
    return result;
};
//
// Encoding
//
Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
    return new EncoderBuffer(data, this.reporter);
};
Node.prototype._encode = function encode(data, reporter, parent) {
    const state = this._baseState;
    if (state['default'] !== null && state['default'] === data) return;
    const result = this._encodeValue(data, reporter, parent);
    if (result === undefined) return;
    if (this._skipDefault(result, reporter, parent)) return;
    return result;
};
Node.prototype._encodeValue = function encode(data, reporter, parent) {
    const state1 = this._baseState;
    // Decode root node
    if (state1.parent === null) return state1.children[0]._encode(data, reporter || new Reporter());
    let result = null;
    // Set reporter to share it with a child class
    this.reporter = reporter;
    // Check if data is there
    if (state1.optional && data === undefined) {
        if (state1['default'] !== null) data = state1['default'];
        else return;
    }
    // Encode children first
    let content = null;
    let primitive = false;
    if (state1.any) // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
    else if (state1.choice) result = this._encodeChoice(data, reporter);
    else if (state1.contains) {
        content = this._getUse(state1.contains, parent)._encode(data, reporter);
        primitive = true;
    } else if (state1.children) {
        content = state1.children.map(function(child) {
            if (child._baseState.tag === 'null_') return child._encode(null, reporter, data);
            if (child._baseState.key === null) return reporter.error('Child should have a key');
            const prevKey = reporter.enterKey(child._baseState.key);
            if (typeof data !== 'object') return reporter.error('Child expected, but input is not object');
            const res = child._encode(data[child._baseState.key], reporter, data);
            reporter.leaveKey(prevKey);
            return res;
        }, this).filter(function(child) {
            return child;
        });
        content = this._createEncoderBuffer(content);
    } else {
        if (state1.tag === 'seqof' || state1.tag === 'setof') {
            // TODO(indutny): this should be thrown on DSL level
            if (!(state1.args && state1.args.length === 1)) return reporter.error('Too many args for : ' + state1.tag);
            if (!Array.isArray(data)) return reporter.error('seqof/setof, but data is not Array');
            const child = this.clone();
            child._baseState.implicit = null;
            content = this._createEncoderBuffer(data.map(function(item) {
                const state = this._baseState;
                return this._getUse(state.args[0], data)._encode(item, reporter);
            }, child));
        } else if (state1.use !== null) result = this._getUse(state1.use, parent)._encode(data, reporter);
        else {
            content = this._encodePrimitive(state1.tag, data);
            primitive = true;
        }
    }
    // Encode data itself
    if (!state1.any && state1.choice === null) {
        const tag = state1.implicit !== null ? state1.implicit : state1.tag;
        const cls = state1.implicit === null ? 'universal' : 'context';
        if (tag === null) {
            if (state1.use === null) reporter.error('Tag could be omitted only for .use()');
        } else if (state1.use === null) result = this._encodeComposite(tag, primitive, cls, content);
    }
    // Wrap in explicit
    if (state1.explicit !== null) result = this._encodeComposite(state1.explicit, false, 'context', result);
    return result;
};
Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
    const state = this._baseState;
    const node = state.choice[data.type];
    if (!node) assert(false, data.type + ' not found in ' + JSON.stringify(Object.keys(state.choice)));
    return node._encode(data.value, reporter);
};
Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
    const state = this._baseState;
    if (/str$/.test(tag)) return this._encodeStr(data, tag);
    else if (tag === 'objid' && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
    else if (tag === 'objid') return this._encodeObjid(data, null, null);
    else if (tag === 'gentime' || tag === 'utctime') return this._encodeTime(data, tag);
    else if (tag === 'null_') return this._encodeNull();
    else if (tag === 'int' || tag === 'enum') return this._encodeInt(data, state.args && state.reverseArgs[0]);
    else if (tag === 'bool') return this._encodeBool(data);
    else if (tag === 'objDesc') return this._encodeStr(data, tag);
    else throw new Error('Unsupported tag: ' + tag);
};
Node.prototype._isNumstr = function isNumstr(str) {
    return /^[0-9 ]*$/.test(str);
};
Node.prototype._isPrintstr = function isPrintstr(str) {
    return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

},{"../base/reporter":"2Vti8","../base/buffer":"1GNVB","minimalistic-assert":"8OvWh"}],"2Vti8":[function(require,module,exports) {
'use strict';
const inherits = require('inherits');
function Reporter(options) {
    this._reporterState = {
        obj: null,
        path: [],
        options: options || {
        },
        errors: []
    };
}
exports.Reporter = Reporter;
Reporter.prototype.isError = function isError(obj) {
    return obj instanceof ReporterError;
};
Reporter.prototype.save = function save() {
    const state = this._reporterState;
    return {
        obj: state.obj,
        pathLen: state.path.length
    };
};
Reporter.prototype.restore = function restore(data) {
    const state = this._reporterState;
    state.obj = data.obj;
    state.path = state.path.slice(0, data.pathLen);
};
Reporter.prototype.enterKey = function enterKey(key) {
    return this._reporterState.path.push(key);
};
Reporter.prototype.exitKey = function exitKey(index) {
    const state = this._reporterState;
    state.path = state.path.slice(0, index - 1);
};
Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
    const state = this._reporterState;
    this.exitKey(index);
    if (state.obj !== null) state.obj[key] = value;
};
Reporter.prototype.path = function path() {
    return this._reporterState.path.join('/');
};
Reporter.prototype.enterObject = function enterObject() {
    const state = this._reporterState;
    const prev = state.obj;
    state.obj = {
    };
    return prev;
};
Reporter.prototype.leaveObject = function leaveObject(prev) {
    const state = this._reporterState;
    const now = state.obj;
    state.obj = prev;
    return now;
};
Reporter.prototype.error = function error(msg) {
    let err;
    const state = this._reporterState;
    const inherited = msg instanceof ReporterError;
    if (inherited) err = msg;
    else err = new ReporterError(state.path.map(function(elem) {
        return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
    if (!state.options.partial) throw err;
    if (!inherited) state.errors.push(err);
    return err;
};
Reporter.prototype.wrapResult = function wrapResult(result) {
    const state = this._reporterState;
    if (!state.options.partial) return result;
    return {
        result: this.isError(result) ? null : result,
        errors: state.errors
    };
};
function ReporterError(path, msg) {
    this.path = path;
    this.rethrow(msg);
}
inherits(ReporterError, Error);
ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + ' at: ' + (this.path || '(shallow)');
    if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);
    if (!this.stack) try {
        // IE only adds stack when thrown
        throw new Error(this.message);
    } catch (e) {
        this.stack = e.stack;
    }
    return this;
};

},{"inherits":"bRL3M"}],"1GNVB":[function(require,module,exports) {
'use strict';
const inherits = require('inherits');
const Reporter = require('../base/reporter').Reporter;
const Buffer = require('safer-buffer').Buffer;
function DecoderBuffer(base, options) {
    Reporter.call(this, options);
    if (!Buffer.isBuffer(base)) {
        this.error('Input not Buffer');
        return;
    }
    this.base = base;
    this.offset = 0;
    this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;
DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
    if (data instanceof DecoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === 'object' && Buffer.isBuffer(data.base) && data.constructor.name === 'DecoderBuffer' && typeof data.offset === 'number' && typeof data.length === 'number' && typeof data.save === 'function' && typeof data.restore === 'function' && typeof data.isEmpty === 'function' && typeof data.readUInt8 === 'function' && typeof data.skip === 'function' && typeof data.raw === 'function';
    return isCompatible;
};
DecoderBuffer.prototype.save = function save() {
    return {
        offset: this.offset,
        reporter: Reporter.prototype.save.call(this)
    };
};
DecoderBuffer.prototype.restore = function restore(save) {
    // Return skipped data
    const res = new DecoderBuffer(this.base);
    res.offset = save.offset;
    res.length = this.offset;
    this.offset = save.offset;
    Reporter.prototype.restore.call(this, save.reporter);
    return res;
};
DecoderBuffer.prototype.isEmpty = function isEmpty() {
    return this.offset === this.length;
};
DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
    if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);
    else return this.error(fail || 'DecoderBuffer overrun');
};
DecoderBuffer.prototype.skip = function skip(bytes, fail) {
    if (!(this.offset + bytes <= this.length)) return this.error(fail || 'DecoderBuffer overrun');
    const res = new DecoderBuffer(this.base);
    // Share reporter state
    res._reporterState = this._reporterState;
    res.offset = this.offset;
    res.length = this.offset + bytes;
    this.offset += bytes;
    return res;
};
DecoderBuffer.prototype.raw = function raw(save) {
    return this.base.slice(save ? save.offset : this.offset, this.length);
};
function EncoderBuffer(value, reporter) {
    if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
            if (!EncoderBuffer.isEncoderBuffer(item)) item = new EncoderBuffer(item, reporter);
            this.length += item.length;
            return item;
        }, this);
    } else if (typeof value === 'number') {
        if (!(0 <= value && value <= 255)) return reporter.error('non-byte EncoderBuffer value');
        this.value = value;
        this.length = 1;
    } else if (typeof value === 'string') {
        this.value = value;
        this.length = Buffer.byteLength(value);
    } else if (Buffer.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
    } else return reporter.error('Unsupported type: ' + typeof value);
}
exports.EncoderBuffer = EncoderBuffer;
EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
    if (data instanceof EncoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === 'object' && data.constructor.name === 'EncoderBuffer' && typeof data.length === 'number' && typeof data.join === 'function';
    return isCompatible;
};
EncoderBuffer.prototype.join = function join(out, offset) {
    if (!out) out = Buffer.alloc(this.length);
    if (!offset) offset = 0;
    if (this.length === 0) return out;
    if (Array.isArray(this.value)) this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
    });
    else {
        if (typeof this.value === 'number') out[offset] = this.value;
        else if (typeof this.value === 'string') out.write(this.value, offset);
        else if (Buffer.isBuffer(this.value)) this.value.copy(out, offset);
        offset += this.length;
    }
    return out;
};

},{"inherits":"bRL3M","../base/reporter":"2Vti8","safer-buffer":"aLyFx"}],"i6Hqy":[function(require,module,exports) {
'use strict';
// Helper
function reverse(map) {
    const res = {
    };
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
}
exports.tagClass = {
    0: 'universal',
    1: 'application',
    2: 'context',
    3: 'private'
};
exports.tagClassByName = reverse(exports.tagClass);
exports.tag = {
    0: 'end',
    1: 'bool',
    2: 'int',
    3: 'bitstr',
    4: 'octstr',
    5: 'null_',
    6: 'objid',
    7: 'objDesc',
    8: 'external',
    9: 'real',
    10: 'enum',
    11: 'embed',
    12: 'utf8str',
    13: 'relativeOid',
    16: 'seq',
    17: 'set',
    18: 'numstr',
    19: 'printstr',
    20: 't61str',
    21: 'videostr',
    22: 'ia5str',
    23: 'utctime',
    24: 'gentime',
    25: 'graphstr',
    26: 'iso646str',
    27: 'genstr',
    28: 'unistr',
    29: 'charstr',
    30: 'bmpstr'
};
exports.tagByName = reverse(exports.tag);

},{}],"jRlrF":[function(require,module,exports) {
'use strict';
const inherits = require('inherits');
const DEREncoder = require('./der');
function PEMEncoder(entity) {
    DEREncoder.call(this, entity);
    this.enc = 'pem';
}
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;
PEMEncoder.prototype.encode = function encode(data, options) {
    const buf = DEREncoder.prototype.encode.call(this, data);
    const p = buf.toString('base64');
    const out = [
        '-----BEGIN ' + options.label + '-----'
    ];
    for(let i = 0; i < p.length; i += 64)out.push(p.slice(i, i + 64));
    out.push('-----END ' + options.label + '-----');
    return out.join('\n');
};

},{"inherits":"bRL3M","./der":"b1CZy"}],"awa6C":[function(require,module,exports) {
'use strict';
const decoders = exports;
decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":"foBr8","./pem":"iexo6"}],"foBr8":[function(require,module,exports) {
'use strict';
const inherits = require('inherits');
const bignum = require('bn.js');
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const Node = require('../base/node');
// Import DER constants
const der = require('../constants/der');
function DERDecoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new DERNode();
    this.tree._init(entity.body);
}
module.exports = DERDecoder;
DERDecoder.prototype.decode = function decode(data, options) {
    if (!DecoderBuffer.isDecoderBuffer(data)) data = new DecoderBuffer(data, options);
    return this.tree._decode(data, options);
};
// Tree methods
function DERNode(parent) {
    Node.call(this, 'der', parent);
}
inherits(DERNode, Node);
DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
    if (buffer.isEmpty()) return false;
    const state = buffer.save();
    const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    buffer.restore(state);
    return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;
};
DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
    const decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    let len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');
    // Failure
    if (buffer.isError(len)) return len;
    if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) return buffer.error('Failed to match tag: "' + tag + '"');
    if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    // Indefinite length... find END tag
    const state = buffer.save();
    const res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
    if (buffer.isError(res)) return res;
    len = buffer.offset - state.offset;
    buffer.restore(state);
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};
DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
    for(;;){
        const tag = derDecodeTag(buffer, fail);
        if (buffer.isError(tag)) return tag;
        const len = derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len)) return len;
        let res;
        if (tag.primitive || len !== null) res = buffer.skip(len);
        else res = this._skipUntilEnd(buffer, fail);
        // Failure
        if (buffer.isError(res)) return res;
        if (tag.tagStr === 'end') break;
    }
};
DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
    const result = [];
    while(!buffer.isEmpty()){
        const possibleEnd = this._peekTag(buffer, 'end');
        if (buffer.isError(possibleEnd)) return possibleEnd;
        const res = decoder.decode(buffer, 'der', options);
        if (buffer.isError(res) && possibleEnd) break;
        result.push(res);
    }
    return result;
};
DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
    if (tag === 'bitstr') {
        const unused = buffer.readUInt8();
        if (buffer.isError(unused)) return unused;
        return {
            unused: unused,
            data: buffer.raw()
        };
    } else if (tag === 'bmpstr') {
        const raw = buffer.raw();
        if (raw.length % 2 === 1) return buffer.error('Decoding of string type: bmpstr length mismatch');
        let str = '';
        for(let i = 0; i < raw.length / 2; i++)str += String.fromCharCode(raw.readUInt16BE(i * 2));
        return str;
    } else if (tag === 'numstr') {
        const numstr = buffer.raw().toString('ascii');
        if (!this._isNumstr(numstr)) return buffer.error("Decoding of string type: numstr unsupported characters");
        return numstr;
    } else if (tag === 'octstr') return buffer.raw();
    else if (tag === 'objDesc') return buffer.raw();
    else if (tag === 'printstr') {
        const printstr = buffer.raw().toString('ascii');
        if (!this._isPrintstr(printstr)) return buffer.error("Decoding of string type: printstr unsupported characters");
        return printstr;
    } else if (/str$/.test(tag)) return buffer.raw().toString();
    else return buffer.error('Decoding of string type: ' + tag + ' unsupported');
};
DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
    let result;
    const identifiers = [];
    let ident = 0;
    let subident = 0;
    while(!buffer.isEmpty()){
        subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 127;
        if ((subident & 128) === 0) {
            identifiers.push(ident);
            ident = 0;
        }
    }
    if (subident & 128) identifiers.push(ident);
    const first = identifiers[0] / 40 | 0;
    const second = identifiers[0] % 40;
    if (relative) result = identifiers;
    else result = [
        first,
        second
    ].concat(identifiers.slice(1));
    if (values) {
        let tmp = values[result.join(' ')];
        if (tmp === undefined) tmp = values[result.join('.')];
        if (tmp !== undefined) result = tmp;
    }
    return result;
};
DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
    const str = buffer.raw().toString();
    let year;
    let mon;
    let day;
    let hour;
    let min;
    let sec;
    if (tag === 'gentime') {
        year = str.slice(0, 4) | 0;
        mon = str.slice(4, 6) | 0;
        day = str.slice(6, 8) | 0;
        hour = str.slice(8, 10) | 0;
        min = str.slice(10, 12) | 0;
        sec = str.slice(12, 14) | 0;
    } else if (tag === 'utctime') {
        year = str.slice(0, 2) | 0;
        mon = str.slice(2, 4) | 0;
        day = str.slice(4, 6) | 0;
        hour = str.slice(6, 8) | 0;
        min = str.slice(8, 10) | 0;
        sec = str.slice(10, 12) | 0;
        if (year < 70) year = 2000 + year;
        else year = 1900 + year;
    } else return buffer.error('Decoding ' + tag + ' time is not supported yet');
    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};
DERNode.prototype._decodeNull = function decodeNull() {
    return null;
};
DERNode.prototype._decodeBool = function decodeBool(buffer) {
    const res = buffer.readUInt8();
    if (buffer.isError(res)) return res;
    else return res !== 0;
};
DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
    // Bigint, return as it is (assume big endian)
    const raw = buffer.raw();
    let res = new bignum(raw);
    if (values) res = values[res.toString(10)] || res;
    return res;
};
DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function') entity = entity(obj);
    return entity._getDecoder('der').tree;
};
// Utility methods
function derDecodeTag(buf, fail) {
    let tag = buf.readUInt8(fail);
    if (buf.isError(tag)) return tag;
    const cls = der.tagClass[tag >> 6];
    const primitive = (tag & 32) === 0;
    // Multi-octet tag - load
    if ((tag & 31) === 31) {
        let oct = tag;
        tag = 0;
        while((oct & 128) === 128){
            oct = buf.readUInt8(fail);
            if (buf.isError(oct)) return oct;
            tag <<= 7;
            tag |= oct & 127;
        }
    } else tag &= 31;
    const tagStr = der.tag[tag];
    return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
    };
}
function derDecodeLen(buf, primitive, fail) {
    let len = buf.readUInt8(fail);
    if (buf.isError(len)) return len;
    // Indefinite form
    if (!primitive && len === 128) return null;
    // Definite form
    if ((len & 128) === 0) // Short form
    return len;
    // Long form
    const num = len & 127;
    if (num > 4) return buf.error('length octect is too long');
    len = 0;
    for(let i = 0; i < num; i++){
        len <<= 8;
        const j = buf.readUInt8(fail);
        if (buf.isError(j)) return j;
        len |= j;
    }
    return len;
}

},{"inherits":"bRL3M","bn.js":"VopIn","../base/buffer":"1GNVB","../base/node":"l9Edp","../constants/der":"i6Hqy"}],"iexo6":[function(require,module,exports) {
'use strict';
const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;
const DERDecoder = require('./der');
function PEMDecoder(entity) {
    DERDecoder.call(this, entity);
    this.enc = 'pem';
}
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;
PEMDecoder.prototype.decode = function decode(data, options) {
    const lines = data.toString().split(/[\r\n]+/g);
    const label = options.label.toUpperCase();
    const re = /^-----(BEGIN|END) ([^-]+)-----$/;
    let start = -1;
    let end = -1;
    for(let i = 0; i < lines.length; i++){
        const match = lines[i].match(re);
        if (match === null) continue;
        if (match[2] !== label) continue;
        if (start === -1) {
            if (match[1] !== 'BEGIN') break;
            start = i;
        } else {
            if (match[1] !== 'END') break;
            end = i;
            break;
        }
    }
    if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);
    const base64 = lines.slice(start + 1, end).join('');
    // Remove excessive symbols
    base64.replace(/[^a-z0-9+/=]+/gi, '');
    const input = Buffer.from(base64, 'base64');
    return DERDecoder.prototype.decode.call(this, input, options);
};

},{"inherits":"bRL3M","safer-buffer":"aLyFx","./der":"foBr8"}],"3q4wA":[function(require,module,exports) {
'use strict';
const base = exports;
base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./reporter":"2Vti8","./buffer":"1GNVB","./node":"l9Edp"}],"oiTK8":[function(require,module,exports) {
'use strict';
const constants = exports;
// Helper
constants._reverse = function reverse(map) {
    const res = {
    };
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
};
constants.der = require('./der');

},{"./der":"i6Hqy"}],"Tf0QA":[function(require,module,exports) {
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen
'use strict';
var asn = require('asn1.js');
var Time = asn.define('Time', function() {
    this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
    });
});
var AttributeTypeValue = asn.define('AttributeTypeValue', function() {
    this.seq().obj(this.key('type').objid(), this.key('value').any());
});
var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function() {
    this.seq().obj(this.key('algorithm').objid(), this.key('parameters').optional(), this.key('curve').objid().optional());
});
var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function() {
    this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function() {
    this.setof(AttributeTypeValue);
});
var RDNSequence = asn.define('RDNSequence', function() {
    this.seqof(RelativeDistinguishedName);
});
var Name = asn.define('Name', function() {
    this.choice({
        rdnSequence: this.use(RDNSequence)
    });
});
var Validity = asn.define('Validity', function() {
    this.seq().obj(this.key('notBefore').use(Time), this.key('notAfter').use(Time));
});
var Extension = asn.define('Extension', function() {
    this.seq().obj(this.key('extnID').objid(), this.key('critical').bool().def(false), this.key('extnValue').octstr());
});
var TBSCertificate = asn.define('TBSCertificate', function() {
    this.seq().obj(this.key('version').explicit(0).int().optional(), this.key('serialNumber').int(), this.key('signature').use(AlgorithmIdentifier), this.key('issuer').use(Name), this.key('validity').use(Validity), this.key('subject').use(Name), this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo), this.key('issuerUniqueID').implicit(1).bitstr().optional(), this.key('subjectUniqueID').implicit(2).bitstr().optional(), this.key('extensions').explicit(3).seqof(Extension).optional());
});
var X509Certificate = asn.define('X509Certificate', function() {
    this.seq().obj(this.key('tbsCertificate').use(TBSCertificate), this.key('signatureAlgorithm').use(AlgorithmIdentifier), this.key('signatureValue').bitstr());
});
module.exports = X509Certificate;

},{"asn1.js":"iV1JX"}],"bvb6u":[function(require,module,exports) {
module.exports = JSON.parse("{\"2.16.840.1.101.3.4.1.1\":\"aes-128-ecb\",\"2.16.840.1.101.3.4.1.2\":\"aes-128-cbc\",\"2.16.840.1.101.3.4.1.3\":\"aes-128-ofb\",\"2.16.840.1.101.3.4.1.4\":\"aes-128-cfb\",\"2.16.840.1.101.3.4.1.21\":\"aes-192-ecb\",\"2.16.840.1.101.3.4.1.22\":\"aes-192-cbc\",\"2.16.840.1.101.3.4.1.23\":\"aes-192-ofb\",\"2.16.840.1.101.3.4.1.24\":\"aes-192-cfb\",\"2.16.840.1.101.3.4.1.41\":\"aes-256-ecb\",\"2.16.840.1.101.3.4.1.42\":\"aes-256-cbc\",\"2.16.840.1.101.3.4.1.43\":\"aes-256-ofb\",\"2.16.840.1.101.3.4.1.44\":\"aes-256-cfb\"}");

},{}],"bNDUb":[function(require,module,exports) {
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;
var evp = require('evp_bytestokey');
var ciphers = require('browserify-aes');
var Buffer = require('safe-buffer').Buffer;
module.exports = function(okey, password) {
    var key = okey.toString();
    var match = key.match(findProc);
    var decrypted;
    if (!match) {
        var match2 = key.match(fullRegex);
        decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64');
    } else {
        var suite = 'aes' + match[1];
        var iv = Buffer.from(match[2], 'hex');
        var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64');
        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher.update(cipherText));
        out.push(cipher.final());
        decrypted = Buffer.concat(out);
    }
    var tag = key.match(startRegex)[1];
    return {
        tag: tag,
        data: decrypted
    };
};

},{"evp_bytestokey":"1rd4d","browserify-aes":"hnlHj","safe-buffer":"eW7r9"}],"iadQk":[function(require,module,exports) {
module.exports = JSON.parse("{\"1.3.132.0.10\":\"secp256k1\",\"1.3.132.0.33\":\"p224\",\"1.2.840.10045.3.1.1\":\"p192\",\"1.2.840.10045.3.1.7\":\"p256\",\"1.3.132.0.34\":\"p384\",\"1.3.132.0.35\":\"p521\"}");

},{}],"vbFso":[function(require,module,exports) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer;
var BN = require('bn.js');
var EC = require('elliptic').ec;
var parseKeys = require('parse-asn1');
var curves = require('./curves.json');
function verify(sig, hash, key, signType, tag) {
    var pub = parseKeys(key);
    if (pub.type === 'ec') {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
        return ecVerify(sig, hash, pub);
    } else if (pub.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong public key type');
        return dsaVerify(sig, hash, pub);
    } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
    }
    hash = Buffer.concat([
        tag,
        hash
    ]);
    var len = pub.modulus.byteLength();
    var pad = [
        1
    ];
    var padNum = 0;
    while(hash.length + pad.length + 2 < len){
        pad.push(255);
        padNum++;
    }
    pad.push(0);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    pad = Buffer.from(pad);
    var red = BN.mont(pub.modulus);
    sig = new BN(sig).toRed(red);
    sig = sig.redPow(new BN(pub.publicExponent));
    sig = Buffer.from(sig.fromRed().toArray());
    var out = padNum < 8 ? 1 : 0;
    len = Math.min(sig.length, pad.length);
    if (sig.length !== pad.length) out = 1;
    i = -1;
    while(++i < len)out |= sig[i] ^ pad[i];
    return out === 0;
}
function ecVerify(sig, hash, pub) {
    var curveId = curves[pub.data.algorithm.curve.join('.')];
    if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'));
    var curve = new EC(curveId);
    var pubkey = pub.data.subjectPrivateKey.data;
    return curve.verify(hash, sig, pubkey);
}
function dsaVerify(sig, hash, pub) {
    var p = pub.data.p;
    var q = pub.data.q;
    var g = pub.data.g;
    var y = pub.data.pub_key;
    var unpacked = parseKeys.signature.decode(sig, 'der');
    var s = unpacked.s;
    var r = unpacked.r;
    checkValue(s, q);
    checkValue(r, q);
    var montp = BN.mont(p);
    var w = s.invm(q);
    var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
    return v.cmp(r) === 0;
}
function checkValue(b, q) {
    if (b.cmpn(0) <= 0) throw new Error('invalid sig');
    if (b.cmp(q) >= q) throw new Error('invalid sig');
}
module.exports = verify;

},{"safe-buffer":"eW7r9","bn.js":"dkoZR","elliptic":"1NKsH","parse-asn1":"4Szbv","./curves.json":"iadQk"}],"9Rcg1":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var elliptic = require('elliptic');
var BN = require('bn.js');
module.exports = function createECDH(curve) {
    return new ECDH(curve);
};
var aliases = {
    secp256k1: {
        name: 'secp256k1',
        byteLength: 32
    },
    secp224r1: {
        name: 'p224',
        byteLength: 28
    },
    prime256v1: {
        name: 'p256',
        byteLength: 32
    },
    prime192v1: {
        name: 'p192',
        byteLength: 24
    },
    ed25519: {
        name: 'ed25519',
        byteLength: 32
    },
    secp384r1: {
        name: 'p384',
        byteLength: 48
    },
    secp521r1: {
        name: 'p521',
        byteLength: 66
    }
};
aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
aliases.p384 = aliases.secp384r1;
aliases.p521 = aliases.secp521r1;
function ECDH(curve) {
    this.curveType = aliases[curve];
    if (!this.curveType) this.curveType = {
        name: curve
    };
    this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
    ;
    this.keys = void 0;
}
ECDH.prototype.generateKeys = function(enc, format) {
    this.keys = this.curve.genKeyPair();
    return this.getPublicKey(enc, format);
};
ECDH.prototype.computeSecret = function(other, inenc, enc) {
    inenc = inenc || 'utf8';
    if (!Buffer.isBuffer(other)) other = new Buffer(other, inenc);
    var otherPub = this.curve.keyFromPublic(other).getPublic();
    var out = otherPub.mul(this.keys.getPrivate()).getX();
    return formatReturnValue(out, enc, this.curveType.byteLength);
};
ECDH.prototype.getPublicKey = function(enc, format) {
    var key = this.keys.getPublic(format === 'compressed', true);
    if (format === 'hybrid') {
        if (key[key.length - 1] % 2) key[0] = 7;
        else key[0] = 6;
    }
    return formatReturnValue(key, enc);
};
ECDH.prototype.getPrivateKey = function(enc) {
    return formatReturnValue(this.keys.getPrivate(), enc);
};
ECDH.prototype.setPublicKey = function(pub, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(pub)) pub = new Buffer(pub, enc);
    this.keys._importPublic(pub);
    return this;
};
ECDH.prototype.setPrivateKey = function(priv, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(priv)) priv = new Buffer(priv, enc);
    var _priv = new BN(priv);
    _priv = _priv.toString(16);
    this.keys = this.curve.genKeyPair();
    this.keys._importPrivate(_priv);
    return this;
};
function formatReturnValue(bn, enc, len) {
    if (!Array.isArray(bn)) bn = bn.toArray();
    var buf = new Buffer(bn);
    if (len && buf.length < len) {
        var zeros = new Buffer(len - buf.length);
        zeros.fill(0);
        buf = Buffer.concat([
            zeros,
            buf
        ]);
    }
    if (!enc) return buf;
    else return buf.toString(enc);
}

},{"buffer":"fCgem","elliptic":"1NKsH","bn.js":"VopIn"}],"h9Rdh":[function(require,module,exports) {
exports.publicEncrypt = require('./publicEncrypt');
exports.privateDecrypt = require('./privateDecrypt');
exports.privateEncrypt = function privateEncrypt(key, buf) {
    return exports.publicEncrypt(key, buf, true);
};
exports.publicDecrypt = function publicDecrypt(key, buf) {
    return exports.privateDecrypt(key, buf, true);
};

},{"./publicEncrypt":"e6nSQ","./privateDecrypt":"jIkKI"}],"e6nSQ":[function(require,module,exports) {
var parseKeys = require('parse-asn1');
var randomBytes = require('randombytes');
var createHash = require('create-hash');
var mgf = require('./mgf');
var xor = require('./xor');
var BN = require('bn.js');
var withPublic = require('./withPublic');
var crt = require('browserify-rsa');
var Buffer = require('safe-buffer').Buffer;
module.exports = function publicEncrypt(publicKey, msg, reverse) {
    var padding;
    if (publicKey.padding) padding = publicKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = parseKeys(publicKey);
    var paddedMsg;
    if (padding === 4) paddedMsg = oaep(key, msg);
    else if (padding === 1) paddedMsg = pkcs1(key, msg, reverse);
    else if (padding === 3) {
        paddedMsg = new BN(msg);
        if (paddedMsg.cmp(key.modulus) >= 0) throw new Error('data too long for modulus');
    } else throw new Error('unknown padding');
    if (reverse) return crt(paddedMsg, key);
    else return withPublic(paddedMsg, key);
};
function oaep(key, msg) {
    var k = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = createHash('sha1').update(Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (mLen > k - hLen2 - 2) throw new Error('message too long');
    var ps = Buffer.alloc(k - mLen - hLen2 - 2);
    var dblen = k - hLen - 1;
    var seed = randomBytes(hLen);
    var maskedDb = xor(Buffer.concat([
        iHash,
        ps,
        Buffer.alloc(1, 1),
        msg
    ], dblen), mgf(seed, dblen));
    var maskedSeed = xor(seed, mgf(maskedDb, hLen));
    return new BN(Buffer.concat([
        Buffer.alloc(1),
        maskedSeed,
        maskedDb
    ], k));
}
function pkcs1(key, msg, reverse) {
    var mLen = msg.length;
    var k = key.modulus.byteLength();
    if (mLen > k - 11) throw new Error('message too long');
    var ps;
    if (reverse) ps = Buffer.alloc(k - mLen - 3, 255);
    else ps = nonZero(k - mLen - 3);
    return new BN(Buffer.concat([
        Buffer.from([
            0,
            reverse ? 1 : 2
        ]),
        ps,
        Buffer.alloc(1),
        msg
    ], k));
}
function nonZero(len) {
    var out = Buffer.allocUnsafe(len);
    var i = 0;
    var cache = randomBytes(len * 2);
    var cur = 0;
    var num;
    while(i < len){
        if (cur === cache.length) {
            cache = randomBytes(len * 2);
            cur = 0;
        }
        num = cache[cur++];
        if (num) out[i++] = num;
    }
    return out;
}

},{"parse-asn1":"4Szbv","randombytes":"8hjhE","create-hash":"2WyL8","./mgf":"e2JgG","./xor":"iaxu0","bn.js":"VopIn","./withPublic":"fFkPV","browserify-rsa":"e594P","safe-buffer":"eW7r9"}],"e2JgG":[function(require,module,exports) {
var createHash = require('create-hash');
var Buffer = require('safe-buffer').Buffer;
module.exports = function(seed, len) {
    var t = Buffer.alloc(0);
    var i = 0;
    var c;
    while(t.length < len){
        c = i2ops(i++);
        t = Buffer.concat([
            t,
            createHash('sha1').update(seed).update(c).digest()
        ]);
    }
    return t.slice(0, len);
};
function i2ops(c) {
    var out = Buffer.allocUnsafe(4);
    out.writeUInt32BE(c, 0);
    return out;
}

},{"create-hash":"2WyL8","safe-buffer":"eW7r9"}],"iaxu0":[function(require,module,exports) {
module.exports = function xor(a, b) {
    var len = a.length;
    var i = -1;
    while(++i < len)a[i] ^= b[i];
    return a;
};

},{}],"fFkPV":[function(require,module,exports) {
var BN = require('bn.js');
var Buffer = require('safe-buffer').Buffer;
function withPublic(paddedMsg, key) {
    return Buffer.from(paddedMsg.toRed(BN.mont(key.modulus)).redPow(new BN(key.publicExponent)).fromRed().toArray());
}
module.exports = withPublic;

},{"bn.js":"VopIn","safe-buffer":"eW7r9"}],"jIkKI":[function(require,module,exports) {
var parseKeys = require('parse-asn1');
var mgf = require('./mgf');
var xor = require('./xor');
var BN = require('bn.js');
var crt = require('browserify-rsa');
var createHash = require('create-hash');
var withPublic = require('./withPublic');
var Buffer = require('safe-buffer').Buffer;
module.exports = function privateDecrypt(privateKey, enc, reverse) {
    var padding;
    if (privateKey.padding) padding = privateKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = parseKeys(privateKey);
    var k = key.modulus.byteLength();
    if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) throw new Error('decryption error');
    var msg;
    if (reverse) msg = withPublic(new BN(enc), key);
    else msg = crt(enc, key);
    var zBuffer = Buffer.alloc(k - msg.length);
    msg = Buffer.concat([
        zBuffer,
        msg
    ], k);
    if (padding === 4) return oaep(key, msg);
    else if (padding === 1) return pkcs1(key, msg, reverse);
    else if (padding === 3) return msg;
    else throw new Error('unknown padding');
};
function oaep(key, msg) {
    var k = key.modulus.byteLength();
    var iHash = createHash('sha1').update(Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    if (msg[0] !== 0) throw new Error('decryption error');
    var maskedSeed = msg.slice(1, hLen + 1);
    var maskedDb = msg.slice(hLen + 1);
    var seed = xor(maskedSeed, mgf(maskedDb, hLen));
    var db = xor(maskedDb, mgf(seed, k - hLen - 1));
    if (compare(iHash, db.slice(0, hLen))) throw new Error('decryption error');
    var i = hLen;
    while(db[i] === 0)i++;
    if (db[i++] !== 1) throw new Error('decryption error');
    return db.slice(i);
}
function pkcs1(key, msg, reverse) {
    var p1 = msg.slice(0, 2);
    var i = 2;
    var status = 0;
    while(msg[i++] !== 0)if (i >= msg.length) {
        status++;
        break;
    }
    var ps = msg.slice(2, i - 1);
    if (p1.toString('hex') !== '0002' && !reverse || p1.toString('hex') !== '0001' && reverse) status++;
    if (ps.length < 8) status++;
    if (status) throw new Error('decryption error');
    return msg.slice(i);
}
function compare(a, b) {
    a = Buffer.from(a);
    b = Buffer.from(b);
    var dif = 0;
    var len = a.length;
    if (a.length !== b.length) {
        dif++;
        len = Math.min(a.length, b.length);
    }
    var i = -1;
    while(++i < len)dif += a[i] ^ b[i];
    return dif;
}

},{"parse-asn1":"4Szbv","./mgf":"e2JgG","./xor":"iaxu0","bn.js":"VopIn","browserify-rsa":"e594P","create-hash":"2WyL8","./withPublic":"fFkPV","safe-buffer":"eW7r9"}],"k3tsT":[function(require,module,exports) {
'use strict';
var global = arguments[3];
var process = require("process");
function oldBrowser() {
    throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11');
}
var safeBuffer = require('safe-buffer');
var randombytes = require('randombytes');
var Buffer = safeBuffer.Buffer;
var kBufferMaxLength = safeBuffer.kMaxLength;
var crypto = global.crypto || global.msCrypto;
var kMaxUint32 = Math.pow(2, 32) - 1;
function assertOffset(offset, length) {
    if (typeof offset !== 'number' || offset !== offset) throw new TypeError('offset must be a number');
    if (offset > kMaxUint32 || offset < 0) throw new TypeError('offset must be a uint32');
    if (offset > kBufferMaxLength || offset > length) throw new RangeError('offset out of range');
}
function assertSize(size, offset, length) {
    if (typeof size !== 'number' || size !== size) throw new TypeError('size must be a number');
    if (size > kMaxUint32 || size < 0) throw new TypeError('size must be a uint32');
    if (size + offset > length || size > kBufferMaxLength) throw new RangeError('buffer too small');
}
if (crypto && crypto.getRandomValues || false) {
    exports.randomFill = randomFill;
    exports.randomFillSync = randomFillSync;
} else {
    exports.randomFill = oldBrowser;
    exports.randomFillSync = oldBrowser;
}
function randomFill(buf, offset, size, cb) {
    if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    if (typeof offset === 'function') {
        cb = offset;
        offset = 0;
        size = buf.length;
    } else if (typeof size === 'function') {
        cb = size;
        size = buf.length - offset;
    } else if (typeof cb !== 'function') throw new TypeError('"cb" argument must be a function');
    assertOffset(offset, buf.length);
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size, cb);
}
function actualFill(buf, offset, size, cb) {
    var ourBuf = buf.buffer;
    var uint = new Uint8Array(ourBuf, offset, size);
    crypto.getRandomValues(uint);
    if (cb) {
        process.nextTick(function() {
            cb(null, buf);
        });
        return;
    }
    return buf;
    if (cb) {
        randombytes(size, function(err, bytes) {
            if (err) return cb(err);
            bytes.copy(buf, offset);
            cb(null, buf);
        });
        return;
    }
    var bytes1 = randombytes(size);
    bytes1.copy(buf, offset);
    return buf;
}
function randomFillSync(buf, offset, size) {
    if (typeof offset === 'undefined') offset = 0;
    if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    assertOffset(offset, buf.length);
    if (size === undefined) size = buf.length - offset;
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size);
}

},{"process":"d5jf4","safe-buffer":"eW7r9","randombytes":"8hjhE"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"lRvbi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "constraints", ()=>exports_constraints
);
parcelHelpers.export(exports, "initializers", ()=>exports_initializers
);
parcelHelpers.export(exports, "layers", ()=>exports_layers
);
parcelHelpers.export(exports, "metrics", ()=>exports_metrics
);
parcelHelpers.export(exports, "models", ()=>exports_models
);
parcelHelpers.export(exports, "regularizers", ()=>exports_regularizers
);
parcelHelpers.export(exports, "CallbackList", ()=>CallbackList
);
parcelHelpers.export(exports, "CustomCallback", ()=>CustomCallback
);
parcelHelpers.export(exports, "History", ()=>History
);
parcelHelpers.export(exports, "Callback", ()=>Callback
);
parcelHelpers.export(exports, "InputSpec", ()=>InputSpec
);
parcelHelpers.export(exports, "SymbolicTensor", ()=>SymbolicTensor
);
parcelHelpers.export(exports, "Model", ()=>Model
);
parcelHelpers.export(exports, "input", ()=>input
);
parcelHelpers.export(exports, "loadLayersModel", ()=>loadLayersModel
);
parcelHelpers.export(exports, "loadModel", ()=>loadModel
);
parcelHelpers.export(exports, "model", ()=>model
);
parcelHelpers.export(exports, "registerCallbackConstructor", ()=>registerCallbackConstructor
);
parcelHelpers.export(exports, "sequential", ()=>sequential
);
parcelHelpers.export(exports, "RNN", ()=>RNN
);
parcelHelpers.export(exports, "Sequential", ()=>Sequential
);
parcelHelpers.export(exports, "LayerVariable", ()=>LayerVariable
);
parcelHelpers.export(exports, "version_layers", ()=>version
);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var extendStatics = function(e1, t1) {
    return (extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(e, t) {
        e.__proto__ = t;
    } || function(e, t) {
        for(var n in t)t.hasOwnProperty(n) && (e[n] = t[n]);
    })(e1, t1);
};
function __extends(e, t) {
    function n() {
        this.constructor = e;
    }
    extendStatics(e, t), e.prototype = null === t ? Object.create(t) : (n.prototype = t.prototype, new n);
}
var _epsilon, __assign = function() {
    return (__assign = Object.assign || function(e) {
        for(var t, n = 1, r = arguments.length; n < r; n++)for(var i in t = arguments[n])Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
        return e;
    }).apply(this, arguments);
};
function __awaiter(e2, t2, n, r) {
    return new (n || (n = Promise))(function(i, a) {
        function o(e) {
            try {
                l(r.next(e));
            } catch (e3) {
                a(e3);
            }
        }
        function s(e) {
            try {
                l(r.throw(e));
            } catch (e4) {
                a(e4);
            }
        }
        function l(e) {
            e.done ? i(e.value) : new n(function(t) {
                t(e.value);
            }).then(o, s);
        }
        l((r = r.apply(e2, t2 || [])).next());
    });
}
function __generator(e5, t) {
    var n, r, i, a1, o = {
        label: 0,
        sent: function() {
            if (1 & i[0]) throw i[1];
            return i[1];
        },
        trys: [],
        ops: []
    };
    function s1(a2) {
        return function(s) {
            return (function(a) {
                if (n) throw new TypeError("Generator is already executing.");
                for(; o;)try {
                    if (n = 1, r && (i = 2 & a[0] ? r.return : a[0] ? r.throw || ((i = r.return) && i.call(r), 0) : r.next) && !(i = i.call(r, a[1])).done) return i;
                    switch(r = 0, i && (a = [
                        2 & a[0],
                        i.value
                    ]), a[0]){
                        case 0:
                        case 1:
                            i = a;
                            break;
                        case 4:
                            return o.label++, {
                                value: a[1],
                                done: !1
                            };
                        case 5:
                            o.label++, r = a[1], a = [
                                0
                            ];
                            continue;
                        case 7:
                            a = o.ops.pop(), o.trys.pop();
                            continue;
                        default:
                            if (!(i = (i = o.trys).length > 0 && i[i.length - 1]) && (6 === a[0] || 2 === a[0])) {
                                o = 0;
                                continue;
                            }
                            if (3 === a[0] && (!i || a[1] > i[0] && a[1] < i[3])) {
                                o.label = a[1];
                                break;
                            }
                            if (6 === a[0] && o.label < i[1]) {
                                o.label = i[1], i = a;
                                break;
                            }
                            if (i && o.label < i[2]) {
                                o.label = i[2], o.ops.push(a);
                                break;
                            }
                            i[2] && o.ops.pop(), o.trys.pop();
                            continue;
                    }
                    a = t.call(e5, o);
                } catch (e) {
                    a = [
                        6,
                        e
                    ], r = 0;
                } finally{
                    n = i = 0;
                }
                if (5 & a[0]) throw a[1];
                return {
                    value: a[0] ? a[1] : void 0,
                    done: !0
                };
            })([
                a2,
                s
            ]);
        };
    }
    return a1 = {
        next: s1(0),
        throw: s1(1),
        return: s1(2)
    }, "function" == typeof Symbol && (a1[Symbol.iterator] = function() {
        return this;
    }), a1;
}
function epsilon() {
    return null == _epsilon && (_epsilon = _tfjsCore.ENV.get("EPSILON")), _epsilon;
}
function imageDataFormat() {
    return "channelsLast";
}
var _nextUniqueTensorId = 0;
function getNextUniqueTensorId() {
    return _nextUniqueTensorId++;
}
var _uidPrefixes = {
};
function getUid(e) {
    return void 0 === e && (e = ""), e in _uidPrefixes || (_uidPrefixes[e] = 0), _uidPrefixes[e] += 1, e + _uidPrefixes[e].toString();
}
var scalarCache = {
    float32: {
    },
    int32: {
    }
}, DEFAULT_DTYPE = "float32";
function getScalar(e, t) {
    return void 0 === t && (t = DEFAULT_DTYPE), null == scalarCache[t][e] && (scalarCache[t][e] = _tfjsCore.scalar(e, t), _tfjsCore.keep(scalarCache[t][e])), scalarCache[t][e];
}
var AttributeError = function(e) {
    function t(n) {
        var r = e.call(this, n) || this;
        return Object.setPrototypeOf(r, t.prototype), r;
    }
    return __extends(t, e), t;
}(Error), RuntimeError = function(e) {
    function t(n) {
        var r = e.call(this, n) || this;
        return Object.setPrototypeOf(r, t.prototype), r;
    }
    return __extends(t, e), t;
}(Error), ValueError = function(e) {
    function t(n) {
        var r = e.call(this, n) || this;
        return Object.setPrototypeOf(r, t.prototype), r;
    }
    return __extends(t, e), t;
}(Error), NotImplementedError = function(e) {
    function t(n) {
        var r = e.call(this, n) || this;
        return Object.setPrototypeOf(r, t.prototype), r;
    }
    return __extends(t, e), t;
}(Error), AssertionError = function(e) {
    function t(n) {
        var r = e.call(this, n) || this;
        return Object.setPrototypeOf(r, t.prototype), r;
    }
    return __extends(t, e), t;
}(Error), IndexError = function(e) {
    function t(n) {
        var r = e.call(this, n) || this;
        return Object.setPrototypeOf(r, t.prototype), r;
    }
    return __extends(t, e), t;
}(Error);
function pyListRepeat(e, t) {
    if (Array.isArray(e)) {
        for(var n = [], r = 0; r < t; r++)n = n.concat(e);
        return n;
    }
    return (n = new Array(t)).fill(e), n;
}
function assert(e, t) {
    if (!e) throw new AssertionError(t);
}
function count(e, t) {
    for(var n = 0, r = 0, i = e; r < i.length; r++)i[r] === t && n++;
    return n;
}
function singletonOrArray(e) {
    return 1 === e.length ? e[0] : e;
}
function toList(e) {
    return Array.isArray(e) ? e : [
        e
    ];
}
function toSnakeCase(e) {
    var t = e.replace(/(.)([A-Z][a-z0-9]+)/g, "$1_$2").replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
    return "_" !== t[0] ? t : "private" + t;
}
function toCamelCase(e) {
    return e.length <= 1 ? e : -1 === e.indexOf("_") ? e : e.replace(/[_]+(\w|$)/g, function(e, t) {
        return t.toUpperCase();
    });
}
var _GLOBAL_CUSTOM_OBJECTS = {
};
function serializeKerasObject(e) {
    return null === e || void 0 === e ? null : {
        className: e.getClassName(),
        config: e.getConfig()
    };
}
function convertNDArrayScalarsInConfig(e6) {
    if (null != e6 && "object" == typeof e6) {
        if (Array.isArray(e6)) e6.forEach(function(e) {
            return convertNDArrayScalarsInConfig(e);
        });
        else for(var t = 0, n = Object.keys(e6); t < n.length; t++){
            var r = n[t], i = e6[r];
            null != i && "object" == typeof i && (Array.isArray(i) || "ndarray" !== i.type || "number" != typeof i.value ? convertNDArrayScalarsInConfig(i) : e6[r] = i.value);
        }
    }
}
function deserializeKerasObject(e, t, n, r, i) {
    if (void 0 === t && (t = {
    }), void 0 === n && (n = {
    }), void 0 === r && (r = "object"), void 0 === i && (i = !1), "string" == typeof e) {
        var a = e, o = void 0;
        if (a in n) o = n[a];
        else if (a in _GLOBAL_CUSTOM_OBJECTS) o = _GLOBAL_CUSTOM_OBJECTS[a];
        else if (null == (o = t[a])) throw new ValueError("Unknown " + r + ": " + e + ". This may be due to one of the following reasons:\n1. The " + r + " is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom " + r + " is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().");
        return o;
    }
    var s = e;
    if (null == s.className || null == s.config) throw new ValueError(r + ": Improper config format: " + JSON.stringify(s) + ".\n'className' and 'config' must set.");
    var l = s.className, u = void 0, c = void 0;
    if (l in n ? (u = (I = n.get(l))[0], c = I[1]) : l in _GLOBAL_CUSTOM_OBJECTS ? (u = (A = _GLOBAL_CUSTOM_OBJECTS.className)[0], c = A[1]) : l in t && (u = (C = t[l])[0], c = C[1]), null == u) throw new ValueError("Unknown " + r + ": " + l + ". This may be due to one of the following reasons:\n1. The " + r + " is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom " + r + " is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().");
    if (null != c) {
        for(var p = {
        }, h = 0, d = Object.keys(_GLOBAL_CUSTOM_OBJECTS); h < d.length; h++)p[b = d[h]] = _GLOBAL_CUSTOM_OBJECTS[b];
        for(var f = 0, g = Object.keys(n); f < g.length; f++)p[b = g[f]] = n[b];
        s.config.customObjects = p;
        for(var m = __assign({
        }, _GLOBAL_CUSTOM_OBJECTS), y = 0, v = Object.keys(n); y < v.length; y++){
            var b = v[y];
            _GLOBAL_CUSTOM_OBJECTS[b] = n[b];
        }
        convertNDArrayScalarsInConfig(s.config);
        var w = c(u, s.config, n, i);
        return _GLOBAL_CUSTOM_OBJECTS = __assign({
        }, m), w;
    }
    m = __assign({
    }, _GLOBAL_CUSTOM_OBJECTS);
    for(var z = 0, S = Object.keys(n); z < S.length; z++){
        b = S[z];
        _GLOBAL_CUSTOM_OBJECTS[b] = n[b];
    }
    var I, A, C;
    w = new u(s.config);
    return _GLOBAL_CUSTOM_OBJECTS = __assign({
    }, m), w;
}
function numberCompare(e, t) {
    return e < t ? -1 : e > t ? 1 : 0;
}
function reverseNumberCompare(e, t) {
    return -1 * numberCompare(e, t);
}
function stringToDType(e) {
    switch(e){
        case "float32":
            return "float32";
        default:
            throw new ValueError("Invalid dtype: " + e);
    }
}
function unique(e) {
    if (null == e) return e;
    for(var t = [], n = 0, r = e; n < r.length; n++){
        var i = r[n];
        -1 === t.indexOf(i) && t.push(i);
    }
    return t;
}
function isObjectEmpty(e) {
    if (null == e) throw new ValueError("Invalid value in obj: " + JSON.stringify(e));
    for(var t in e)if (e.hasOwnProperty(t)) return !1;
    return !0;
}
function checkStringTypeUnionValue(e, t, n) {
    if (null != n && e.indexOf(n) < 0) throw new ValueError(n + " is not a valid " + t + ".  Valid values are " + e + " or null/undefined.");
}
function checkArrayTypeAndLength(e7, t, n, r) {
    return void 0 === n && (n = 0), void 0 === r && (r = 1 / 0), assert(n >= 0), assert(r >= n), Array.isArray(e7) && e7.length >= n && e7.length <= r && e7.every(function(e) {
        return typeof e === t;
    });
}
function calcL2Norms(e, t) {
    return _tfjsCore.tidy(function() {
        return _tfjsCore.sqrt(_tfjsCore.sum(_tfjsCore.mulStrict(e, e), t, !0));
    });
}
var Constraint = function(e) {
    function t() {
        return null !== e && e.apply(this, arguments) || this;
    }
    return __extends(t, e), t.prototype.getConfig = function() {
        return {
        };
    }, t;
}(_tfjsCore.serialization.Serializable), MaxNorm = function(e8) {
    function t3(t) {
        var n = e8.call(this) || this;
        return n.defaultMaxValue = 2, n.defaultAxis = 0, n.maxValue = null != t.maxValue ? t.maxValue : n.defaultMaxValue, n.axis = null != t.axis ? t.axis : n.defaultAxis, n;
    }
    return __extends(t3, e8), t3.prototype.apply = function(e) {
        var t = this;
        return _tfjsCore.tidy(function() {
            var n = calcL2Norms(e, t.axis), r = _tfjsCore.clipByValue(n, 0, t.maxValue);
            return _tfjsCore.mul(e, _tfjsCore.div(r, _tfjsCore.add(getScalar(epsilon()), n)));
        });
    }, t3.prototype.getConfig = function() {
        return {
            maxValue: this.maxValue,
            axis: this.axis
        };
    }, t3.className = "MaxNorm", t3;
}(Constraint);
_tfjsCore.serialization.registerClass(MaxNorm);
var UnitNorm = function(e9) {
    function t4(t) {
        var n = e9.call(this) || this;
        return n.defaultAxis = 0, n.axis = null != t.axis ? t.axis : n.defaultAxis, n;
    }
    return __extends(t4, e9), t4.prototype.apply = function(e) {
        var t = this;
        return _tfjsCore.tidy(function() {
            return _tfjsCore.div(e, _tfjsCore.add(getScalar(epsilon()), calcL2Norms(e, t.axis)));
        });
    }, t4.prototype.getConfig = function() {
        return {
            axis: this.axis
        };
    }, t4.className = "UnitNorm", t4;
}(Constraint);
_tfjsCore.serialization.registerClass(UnitNorm);
var NonNeg = function(e10) {
    function t() {
        return null !== e10 && e10.apply(this, arguments) || this;
    }
    return __extends(t, e10), t.prototype.apply = function(e) {
        return _tfjsCore.relu(e);
    }, t.className = "NonNeg", t;
}(Constraint);
_tfjsCore.serialization.registerClass(NonNeg);
var MinMaxNorm = function(e11) {
    function t5(t) {
        var n = e11.call(this) || this;
        return n.defaultMinValue = 0, n.defaultMaxValue = 1, n.defaultRate = 1, n.defaultAxis = 0, n.minValue = null != t.minValue ? t.minValue : n.defaultMinValue, n.maxValue = null != t.maxValue ? t.maxValue : n.defaultMaxValue, n.rate = null != t.rate ? t.rate : n.defaultRate, n.axis = null != t.axis ? t.axis : n.defaultAxis, n;
    }
    return __extends(t5, e11), t5.prototype.apply = function(e) {
        var t = this;
        return _tfjsCore.tidy(function() {
            var n = calcL2Norms(e, t.axis), r = _tfjsCore.add(_tfjsCore.mul(getScalar(t.rate), _tfjsCore.clipByValue(n, t.minValue, t.maxValue)), _tfjsCore.mul(getScalar(1 - t.rate), n));
            return _tfjsCore.mul(e, _tfjsCore.div(r, _tfjsCore.add(getScalar(epsilon()), n)));
        });
    }, t5.prototype.getConfig = function() {
        return {
            minValue: this.minValue,
            maxValue: this.maxValue,
            rate: this.rate,
            axis: this.axis
        };
    }, t5.className = "MinMaxNorm", t5;
}(Constraint);
_tfjsCore.serialization.registerClass(MinMaxNorm);
var CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
    maxNorm: "MaxNorm",
    minMaxNorm: "MinMaxNorm",
    nonNeg: "NonNeg",
    unitNorm: "UnitNorm"
};
function serializeConstraint(e) {
    return serializeKerasObject(e);
}
function deserializeConstraint(e, t) {
    return void 0 === t && (t = {
    }), deserializeKerasObject(e, _tfjsCore.serialization.SerializationMap.getMap().classNameMap, t, "constraint");
}
function getConstraint(e) {
    return null == e ? null : "string" == typeof e ? deserializeConstraint({
        className: e in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ? CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[e] : e,
        config: {
        }
    }) : e instanceof Constraint ? e : deserializeConstraint(e);
}
function maxNorm(e) {
    return new MaxNorm(e);
}
function unitNorm(e) {
    return new UnitNorm(e);
}
function nonNeg() {
    return new NonNeg;
}
function minMaxNorm(e) {
    return new MinMaxNorm(e);
}
var exports_constraints = Object.freeze({
    maxNorm: maxNorm,
    unitNorm: unitNorm,
    nonNeg: nonNeg,
    minMaxNorm: minMaxNorm
}), VALID_DATA_FORMAT_VALUES = [
    "channelsFirst",
    "channelsLast"
], VALID_PADDING_MODE_VALUES = [
    "valid",
    "same",
    "causal"
], VALID_POOL_MODE_VALUES = [
    "max",
    "avg"
], VALID_BIDIRECTIONAL_MERGE_MODES = [
    "sum",
    "mul",
    "concat",
    "ave"
], nameMap = new Map;
function checkDataFormat(e) {
    checkStringTypeUnionValue(VALID_DATA_FORMAT_VALUES, "DataFormat", e);
}
function checkPaddingMode(e) {
    checkStringTypeUnionValue(VALID_PADDING_MODE_VALUES, "PaddingMode", e);
}
function checkPoolMode(e) {
    checkStringTypeUnionValue(VALID_POOL_MODE_VALUES, "PoolMode", e);
}
var _nameScopeStack = [], _nameScopeDivider = "/";
function nameScope(e, t) {
    _nameScopeStack.push(e);
    try {
        var n = t();
        return _nameScopeStack.pop(), n;
    } catch (e12) {
        throw _nameScopeStack.pop(), e12;
    }
}
function currentNameScopePrefix() {
    return 0 === _nameScopeStack.length ? "" : _nameScopeStack.join(_nameScopeDivider) + _nameScopeDivider;
}
function getScopedTensorName(e) {
    if (!isValidTensorName(e)) throw new Error("Not a valid tensor name: '" + e + "'");
    return currentNameScopePrefix() + e;
}
function getUniqueTensorName(e) {
    if (!isValidTensorName(e)) throw new Error("Not a valid tensor name: '" + e + "'");
    nameMap.has(e) || nameMap.set(e, 0);
    var t = nameMap.get(e);
    if (nameMap.set(e, nameMap.get(e) + 1), t > 0) {
        var n = e + "_" + t;
        return nameMap.set(n, 1), n;
    }
    return e;
}
var tensorNameRegex = new RegExp(/^[A-Za-z][-A-Za-z0-9\._\/]*$/);
function isValidTensorName(e) {
    return !!e.match(tensorNameRegex);
}
function isInteger(e) {
    return e === parseInt(e.toString(), 10);
}
function arrayProd(e, t, n) {
    null == t && (t = 0), null == n && (n = e.length);
    for(var r = 1, i = t; i < n; ++i)r *= e[i];
    return r;
}
function toArray1D(e) {
    return e = Array.isArray(e) ? new Float32Array(e) : e, _tfjsCore.tensor1d(e);
}
function min$1(e) {
    return _tfjsCore.min(toArray1D(e)).dataSync()[0];
}
function max$1(e) {
    return _tfjsCore.max(toArray1D(e)).dataSync()[0];
}
function range(e, t) {
    if (t < e) throw new ValueError("end (" + t + ") < begin (" + e + ") is forbidden.");
    for(var n = [], r = e; r < t; ++r)n.push(r);
    return n;
}
function cast$1(e, t) {
    return e.asType(t);
}
function expandDims$1(e, t) {
    void 0 === t && (t = -1);
    var n = e.shape.slice();
    return t < 0 && (t = n.length + t + 1), n.splice(t, 0, 1), e.reshape(n);
}
function repeat(e, t) {
    return _tfjsCore.tidy(function() {
        if (2 !== e.shape.length) throw new ValueError("repeat() expects a rank-2 tensor, but received a rank-" + e.shape.length + " tensor.");
        return tile$1(expandDims$1(e, 1), [
            1,
            t,
            1
        ]);
    });
}
function flatten(e) {
    var t = [
        arrayProd(e.shape)
    ];
    return e.reshape(t);
}
function batchFlatten(e) {
    if (e.rank <= 1) throw new ValueError("batchFlatten requires a minimum rank of 2. Got rank: " + e.rank + ".");
    var t = [
        e.shape[0],
        arrayProd(e.shape, 1)
    ];
    return e.reshape(t);
}
function sliceAlongFirstAxis(e, t, n) {
    return _tfjsCore.tidy(function() {
        switch(e.rank){
            case 1:
                return _tfjsCore.slice1d(e, t, n);
            case 2:
                return _tfjsCore.slice2d(e, [
                    t,
                    0
                ], [
                    n,
                    e.shape[1]
                ]);
            case 3:
                return _tfjsCore.slice3d(e, [
                    t,
                    0,
                    0
                ], [
                    n,
                    e.shape[1],
                    e.shape[2]
                ]);
            case 4:
                return _tfjsCore.slice4d(e, [
                    t,
                    0,
                    0,
                    0
                ], [
                    n,
                    e.shape[1],
                    e.shape[2],
                    e.shape[3]
                ]);
            default:
                throw new ValueError("sliceAlongFirstAxis() received an unsupported tensor rank: " + e.rank);
        }
    });
}
function sliceAlongLastAxis(e, t, n) {
    return _tfjsCore.tidy(function() {
        switch(e.rank){
            case 1:
                return _tfjsCore.slice1d(e, t, n);
            case 2:
                return _tfjsCore.slice2d(e, [
                    0,
                    t
                ], [
                    e.shape[0],
                    n
                ]);
            case 3:
                return _tfjsCore.slice3d(e, [
                    0,
                    0,
                    t
                ], [
                    e.shape[0],
                    e.shape[1],
                    n
                ]);
            case 4:
                return _tfjsCore.slice4d(e, [
                    0,
                    0,
                    0,
                    t
                ], [
                    e.shape[0],
                    e.shape[1],
                    e.shape[2],
                    n
                ]);
            default:
                throw new ValueError("sliceAlongLastAxis() received an unsupported tensor rank: " + e.rank);
        }
    });
}
function sliceAlongAxis(e, t, n, r) {
    return _tfjsCore.tidy(function() {
        switch(e.rank){
            case 1:
                return _tfjsCore.slice1d(e, t, n);
            case 2:
                switch(r){
                    case 1:
                        return sliceAlongFirstAxis(e, t, n);
                    case 2:
                        return sliceAlongLastAxis(e, t, n);
                    default:
                        throw new ValueError("The axis is not within the rank of the tensor " + r);
                }
            case 3:
                switch(r){
                    case 1:
                        return sliceAlongFirstAxis(e, t, n);
                    case 2:
                        return _tfjsCore.slice3d(e, [
                            0,
                            t,
                            0
                        ], [
                            e.shape[0],
                            n,
                            e.shape[2]
                        ]);
                    case 3:
                        return sliceAlongLastAxis(e, t, n);
                    default:
                        throw new ValueError("The axis is not within the rank of the tensor " + r);
                }
            case 4:
                switch(r){
                    case 1:
                        return sliceAlongFirstAxis(e, t, n);
                    case 2:
                        return _tfjsCore.slice4d(e, [
                            0,
                            t,
                            0,
                            0
                        ], [
                            e.shape[0],
                            n,
                            e.shape[2],
                            e.shape[3]
                        ]);
                    case 3:
                        return _tfjsCore.slice4d(e, [
                            0,
                            0,
                            t,
                            0
                        ], [
                            e.shape[0],
                            e.shape[1],
                            n,
                            e.shape[3]
                        ]);
                    case 4:
                        return sliceAlongLastAxis(e, t, n);
                    default:
                        throw new ValueError("The axis is not within the rank of the tensor " + r);
                }
            default:
                throw new ValueError("sliceAlongLastAxis() received an unsupported tensor rank: " + e.rank);
        }
    });
}
function concatenate(e, t) {
    var n;
    return void 0 === t && (t = -1), t < 0 && (t = 0 !== (n = e[0].rank) ? n : 0), t === e[0].rank && (t = -1), _tfjsCore.concat(e, t);
}
function concatAlongFirstAxis(e, t) {
    switch(e.rank){
        case 1:
            return _tfjsCore.concat1d([
                e,
                t
            ]);
        case 2:
            return _tfjsCore.concat2d([
                e,
                t
            ], 0);
        case 3:
            return _tfjsCore.concat3d([
                e,
                t
            ], 0);
        case 4:
            return _tfjsCore.concat4d([
                e,
                t
            ], 0);
        default:
            throw new ValueError("concatAlongFirstAxis() received an unsupported tensor rank: " + e.rank);
    }
}
function tile$1(e, t) {
    if (Array.isArray(t) || (t = [
        t
    ]), e.rank !== t.length) throw new ValueError("The length of input n (" + t.length + ") does not match the number of dimensions in input x (" + e.rank + ")");
    return _tfjsCore.tile(e, t);
}
function randomNormal$1(e, t, n, r, i) {
    return void 0 === t && (t = 0), void 0 === n && (n = 1), _tfjsCore.randomNormal(e, t, n, r, i);
}
function dot(e, t) {
    if (e.rank < 2 || t.rank < 2) throw new NotImplementedError("dot requires both inputs to be rank >= 2 but got x shape = " + e.shape + " and y shape = " + t.shape);
    if (t.rank >= 3 && (r = e.shape.slice(-1)[0]) !== (o = t.shape.slice(-2)[0])) throw new NotImplementedError("If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = " + e.shape + " and  y shape = " + t.shape);
    if (2 === e.rank && 2 === t.rank) return _tfjsCore.matMul(e, t);
    var n1 = e.shape.slice(), r = n1.pop();
    e = e.reshape([
        -1,
        r
    ]);
    var i = t.shape.slice(), a = i.pop(), o = i.pop(), s = i.concat([
        a
    ]), l = Array.from({
        length: t.rank
    }, function(e, n) {
        return 0 === n ? t.rank - 2 : n <= t.rank - 2 ? n - 1 : n;
    });
    t = t.transpose(l).reshape([
        o,
        -1
    ]);
    var u = n1.concat(s);
    return _tfjsCore.matMul(e, t).reshape(u);
}
function gather$1(e, t, n) {
    return _tfjsCore.tidy(function() {
        return t = Array.isArray(t) ? _tfjsCore.tensor1d(t, "int32") : t.toInt(), _tfjsCore.gather(e, t, n);
    });
}
function square(e) {
    return _tfjsCore.mulStrict(e, e);
}
function biasAdd(e, t, n) {
    return _tfjsCore.tidy(function() {
        if (null == n && (n = imageDataFormat()), checkDataFormat(n), 1 !== t.rank && t.rank !== e.rank) throw new ValueError("Unexpected bias dimensions: " + t.rank + "; expected it to be 1 or " + e.rank);
        var r, i = t.shape;
        if (5 === e.rank) "channelsFirst" === n ? r = 1 === i.length ? e.add(t.reshape([
            1,
            i[0],
            1,
            1,
            1
        ])) : e.add(t.reshape([
            1,
            i[3],
            i[0],
            i[1],
            i[2]
        ])) : "channelsLast" === n && (r = 1 === i.length ? e.add(t.reshape([
            1,
            1,
            1,
            1,
            i[0]
        ])) : e.add(t.reshape([
            1
        ].concat(i))));
        else if (4 === e.rank) "channelsFirst" === n ? r = 1 === i.length ? e.add(t.reshape([
            1,
            i[0],
            1,
            1
        ])) : e.add(t.reshape([
            1,
            i[2],
            i[0],
            i[1]
        ])) : "channelsLast" === n && (r = 1 === i.length ? e.add(t.reshape([
            1,
            1,
            1,
            i[0]
        ])) : e.add(t.reshape([
            1
        ].concat(i))));
        else if (3 === e.rank) "channelsFirst" === n ? r = 1 === i.length ? e.add(t.reshape([
            1,
            i[0],
            1
        ])) : e.add(t.reshape([
            1,
            i[1],
            i[0]
        ])) : "channelsLast" === n && (r = 1 === i.length ? e.add(t.reshape([
            1,
            1,
            i[0]
        ])) : e.add(t.reshape([
            1
        ].concat(i))));
        else {
            if (!(e.rank < 3)) throw new ValueError("Unsupported input rank by biasAdd: " + e.rank);
            r = e.add(t);
        }
        return r;
    });
}
function elu$1(e, t) {
    if (void 0 === t && (t = 1), 1 !== t) throw new NotImplementedError("Support for alpha values other than 1 (" + t + ") is not implemented yet.");
    return _tfjsCore.elu(e);
}
function softsign(e) {
    return _tfjsCore.tidy(function() {
        return _tfjsCore.div(e, _tfjsCore.add(getScalar(1), _tfjsCore.abs(e)));
    });
}
function dropout(e, t, n, r) {
    return _tfjsCore.tidy(function() {
        if (null != n && !_tfjsCore.util.arraysEqual(e.shape, n)) throw new NotImplementedError("Non-default noise shape is not implemented yet: " + JSON.stringify(n));
        if (null != r) throw new NotImplementedError("seed is not implemented for dropout yet.");
        var i = _tfjsCore.step(_tfjsCore.add(_tfjsCore.neg(t), _tfjsCore.randomUniform(e.shape, 0, 1, "float32")));
        return i = _tfjsCore.mul(_tfjsCore.div(getScalar(1), _tfjsCore.sub(getScalar(1), t)), i), _tfjsCore.mul(e, i);
    });
}
function hardSigmoid(e) {
    return _tfjsCore.tidy(function() {
        var t = _tfjsCore.add(getScalar(0.5), _tfjsCore.mul(getScalar(0.2), e));
        return _tfjsCore.clipByValue(t, 0, 1);
    });
}
function inTrainPhase(e, t, n) {
    return void 0 === n && (n = !1), n ? e() : t();
}
var VALID_FAN_MODE_VALUES = [
    "fanIn",
    "fanOut",
    "fanAvg"
], VALID_DISTRIBUTION_VALUES = [
    "normal",
    "uniform"
];
function checkFanMode(e) {
    checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, "FanMode", e);
}
function checkDistribution(e) {
    checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, "Distribution", e);
}
var Initializer = function(e) {
    function t() {
        return null !== e && e.apply(this, arguments) || this;
    }
    return __extends(t, e), t.prototype.fromConfigUsesCustomObjects = function() {
        return !1;
    }, t.prototype.getConfig = function() {
        return {
        };
    }, t;
}(_tfjsCore.serialization.Serializable), Zeros = function(e13) {
    function t6() {
        return null !== e13 && e13.apply(this, arguments) || this;
    }
    return __extends(t6, e13), t6.prototype.apply = function(e, t) {
        return _tfjsCore.zeros(e, t);
    }, t6.className = "Zeros", t6;
}(Initializer);
_tfjsCore.serialization.registerClass(Zeros);
var Ones = function(e14) {
    function t7() {
        return null !== e14 && e14.apply(this, arguments) || this;
    }
    return __extends(t7, e14), t7.prototype.apply = function(e, t) {
        return _tfjsCore.ones(e, t);
    }, t7.className = "Ones", t7;
}(Initializer);
_tfjsCore.serialization.registerClass(Ones);
var Constant = function(e15) {
    function t8(t) {
        var n = e15.call(this) || this;
        if ("object" != typeof t) throw new ValueError("Expected argument of type ConstantConfig but got " + t);
        if (void 0 === t.value) throw new ValueError("config must have value set but got " + t);
        return n.value = t.value, n;
    }
    return __extends(t8, e15), t8.prototype.apply = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            return _tfjsCore.mul(_tfjsCore.scalar(n.value), _tfjsCore.ones(e, t));
        });
    }, t8.prototype.getConfig = function() {
        return {
            value: this.value
        };
    }, t8.className = "Constant", t8;
}(Initializer);
_tfjsCore.serialization.registerClass(Constant);
var RandomUniform = function(e16) {
    function t9(t) {
        var n = e16.call(this) || this;
        return n.DEFAULT_MINVAL = -0.05, n.DEFAULT_MAXVAL = 0.05, n.minval = t.minval || n.DEFAULT_MINVAL, n.maxval = t.maxval || n.DEFAULT_MAXVAL, n.seed = t.seed, n;
    }
    return __extends(t9, e16), t9.prototype.apply = function(e, t) {
        return _tfjsCore.randomUniform(e, this.minval, this.maxval, t);
    }, t9.prototype.getConfig = function() {
        return {
            minval: this.minval,
            maxval: this.maxval,
            seed: this.seed
        };
    }, t9.className = "RandomUniform", t9;
}(Initializer);
_tfjsCore.serialization.registerClass(RandomUniform);
var RandomNormal = function(e17) {
    function t10(t) {
        var n = e17.call(this) || this;
        return n.DEFAULT_MEAN = 0, n.DEFAULT_STDDEV = 0.05, n.mean = t.mean || n.DEFAULT_MEAN, n.stddev = t.stddev || n.DEFAULT_STDDEV, n.seed = t.seed, n;
    }
    return __extends(t10, e17), t10.prototype.apply = function(e, t) {
        if ("float32" !== (t = t || "float32") && "int32" !== t) throw new NotImplementedError("randomNormal does not support dType " + t + ".");
        return randomNormal$1(e, this.mean, this.stddev, t, this.seed);
    }, t10.prototype.getConfig = function() {
        return {
            mean: this.mean,
            stddev: this.stddev,
            seed: this.seed
        };
    }, t10.className = "RandomNormal", t10;
}(Initializer);
_tfjsCore.serialization.registerClass(RandomNormal);
var TruncatedNormal = function(e18) {
    function t11(t) {
        var n = e18.call(this) || this;
        return n.DEFAULT_MEAN = 0, n.DEFAULT_STDDEV = 0.05, n.mean = t.mean || n.DEFAULT_MEAN, n.stddev = t.stddev || n.DEFAULT_STDDEV, n.seed = t.seed, n;
    }
    return __extends(t11, e18), t11.prototype.apply = function(e, t) {
        if ("float32" !== (t = t || "float32") && "int32" !== t) throw new NotImplementedError("truncatedNormal does not support dType " + t + ".");
        return _tfjsCore.truncatedNormal(e, this.mean, this.stddev, t, this.seed);
    }, t11.prototype.getConfig = function() {
        return {
            mean: this.mean,
            stddev: this.stddev,
            seed: this.seed
        };
    }, t11.className = "TruncatedNormal", t11;
}(Initializer);
_tfjsCore.serialization.registerClass(TruncatedNormal);
var Identity = function(e19) {
    function t12(t) {
        var n = e19.call(this) || this;
        return n.gain = null != t.gain ? _tfjsCore.scalar(t.gain) : getScalar(1), n;
    }
    return __extends(t12, e19), t12.prototype.apply = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            if (2 !== e.length || e[0] !== e[1]) throw new ValueError("Identity matrix initializer can only be used for 2D square matrices.");
            return _tfjsCore.mul(n.gain, _tfjsCore.eye(e[0]));
        });
    }, t12.prototype.getConfig = function() {
        return {
            gain: this.gain.get()
        };
    }, t12.className = "Identity", t12;
}(Initializer);
function computeFans(e, t) {
    var n, r;
    if (void 0 === t && (t = "channelsLast"), checkDataFormat(t), 2 === e.length) n = e[0], r = e[1];
    else if (-1 !== [
        3,
        4,
        5
    ].indexOf(e.length)) {
        if ("channelsFirst" === t) {
            var i = arrayProd(e, 2);
            n = e[1] * i, r = e[0] * i;
        } else if ("channelsLast" === t) {
            i = arrayProd(e, 0, e.length - 2);
            n = e[e.length - 2] * i, r = e[e.length - 1] * i;
        }
    } else {
        var a = arrayProd(e);
        n = Math.sqrt(a), r = Math.sqrt(a);
    }
    return [
        n,
        r
    ];
}
_tfjsCore.serialization.registerClass(Identity);
var VarianceScaling = function(e20) {
    function t13(t) {
        var n = e20.call(this) || this;
        if (t.scale < 0) throw new ValueError("scale must be a positive float. Got: " + t.scale);
        return n.scale = null == t.scale ? 1 : t.scale, n.mode = t.mode, checkFanMode(n.mode), n.distribution = t.distribution, checkDistribution(n.distribution), n.seed = t.seed, n;
    }
    return __extends(t13, e20), t13.prototype.apply = function(e, t) {
        var n = computeFans(e), r = n[0], i = n[1], a = this.scale;
        if ("fanIn" === this.mode ? a /= Math.max(1, r) : "fanOut" === this.mode ? a /= Math.max(1, i) : a /= Math.max(1, (r + i) / 2), "normal" === this.distribution) {
            var o = Math.sqrt(a);
            if ("float32" !== (t = t || "float32") && "int32" !== t) throw new NotImplementedError(this.getClassName() + " does not support dType " + t + ".");
            return _tfjsCore.truncatedNormal(e, 0, o, t, this.seed);
        }
        var s = Math.sqrt(3 * a);
        return _tfjsCore.randomUniform(e, -s, s, t);
    }, t13.prototype.getConfig = function() {
        return {
            scale: this.scale,
            mode: this.mode,
            distribution: this.distribution,
            seed: this.seed
        };
    }, t13.className = "VarianceScaling", t13;
}(Initializer);
_tfjsCore.serialization.registerClass(VarianceScaling);
var GlorotUniform = function(e) {
    function t14(t) {
        return e.call(this, {
            scale: 1,
            mode: "fanAvg",
            distribution: "uniform",
            seed: null == t ? null : t.seed
        }) || this;
    }
    return __extends(t14, e), t14.prototype.getClassName = function() {
        return VarianceScaling.className;
    }, t14.className = "GlorotUniform", t14;
}(VarianceScaling);
_tfjsCore.serialization.registerClass(GlorotUniform);
var GlorotNormal = function(e) {
    function t15(t) {
        return e.call(this, {
            scale: 1,
            mode: "fanAvg",
            distribution: "normal",
            seed: null == t ? null : t.seed
        }) || this;
    }
    return __extends(t15, e), t15.prototype.getClassName = function() {
        return VarianceScaling.className;
    }, t15.className = "GlorotNormal", t15;
}(VarianceScaling);
_tfjsCore.serialization.registerClass(GlorotNormal);
var HeNormal = function(e) {
    function t16(t) {
        return e.call(this, {
            scale: 2,
            mode: "fanIn",
            distribution: "normal",
            seed: null == t ? null : t.seed
        }) || this;
    }
    return __extends(t16, e), t16.prototype.getClassName = function() {
        return VarianceScaling.className;
    }, t16.className = "HeNormal", t16;
}(VarianceScaling);
_tfjsCore.serialization.registerClass(HeNormal);
var HeUniform = function(e) {
    function t17(t) {
        return e.call(this, {
            scale: 2,
            mode: "fanIn",
            distribution: "uniform",
            seed: null == t ? null : t.seed
        }) || this;
    }
    return __extends(t17, e), t17.prototype.getClassName = function() {
        return VarianceScaling.className;
    }, t17.className = "HeUniform", t17;
}(VarianceScaling);
_tfjsCore.serialization.registerClass(HeUniform);
var LeCunNormal = function(e) {
    function t18(t) {
        return e.call(this, {
            scale: 1,
            mode: "fanIn",
            distribution: "normal",
            seed: null == t ? null : t.seed
        }) || this;
    }
    return __extends(t18, e), t18.prototype.getClassName = function() {
        return VarianceScaling.className;
    }, t18.className = "LeCunNormal", t18;
}(VarianceScaling);
_tfjsCore.serialization.registerClass(LeCunNormal);
var LeCunUniform = function(e) {
    function t19(t) {
        return e.call(this, {
            scale: 1,
            mode: "fanIn",
            distribution: "uniform",
            seed: null == t ? null : t.seed
        }) || this;
    }
    return __extends(t19, e), t19.prototype.getClassName = function() {
        return VarianceScaling.className;
    }, t19.className = "LeCunNormal", t19;
}(VarianceScaling);
_tfjsCore.serialization.registerClass(LeCunUniform);
var Orthogonal = function(e21) {
    function t20(t) {
        var n = e21.call(this) || this;
        if (n.DEFAULT_GAIN = 1, n.gain = null == t.gain ? n.DEFAULT_GAIN : t.gain, n.seed = t.seed, null != n.seed) throw new NotImplementedError("Random seed is not implemented for Orthogonal Initializer yet.");
        return n;
    }
    return __extends(t20, e21), t20.prototype.apply = function(e, t21) {
        var n = this;
        return _tfjsCore.tidy(function() {
            if (2 !== e.length) throw new NotImplementedError("The Orthogonal Initializer does not support non-2D shapes yet.");
            e[0] * e[1] > 2000 && console.warn("Orthogonal initializer is being called on a matrix with more than 2000 (" + e[0] * e[1] + ") elements: Slowness may result.");
            var t = randomNormal$1(e[0] > e[1] ? [
                e[1],
                e[0]
            ] : e, 0, 1, "float32"), r = _tfjsCore.linalg.gramSchmidt(t);
            return e[0] > e[1] && (r = r.transpose()), _tfjsCore.mul(getScalar(n.gain), r);
        });
    }, t20.prototype.getConfig = function() {
        return {
            gain: this.gain,
            seed: this.seed
        };
    }, t20.className = "Orthogonal", t20;
}(Initializer);
_tfjsCore.serialization.registerClass(Orthogonal);
var INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
    constant: "Constant",
    glorotNormal: "GlorotNormal",
    glorotUniform: "GlorotUniform",
    heNormal: "HeNormal",
    heUniform: "HeUniform",
    identity: "Identity",
    leCunNormal: "LeCunNormal",
    leCunUniform: "LeCunUniform",
    ones: "Ones",
    orthogonal: "Orthogonal",
    randomNormal: "RandomNormal",
    randomUniform: "RandomUniform",
    truncatedNormal: "TruncatedNormal",
    varianceScaling: "VarianceScaling",
    zeros: "Zeros"
};
function deserializeInitializer(e, t) {
    return void 0 === t && (t = {
    }), deserializeKerasObject(e, _tfjsCore.serialization.SerializationMap.getMap().classNameMap, t, "initializer");
}
function serializeInitializer(e) {
    return serializeKerasObject(e);
}
function getInitializer(e) {
    if ("string" == typeof e) {
        var t = e in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[e] : e;
        return "GlorotNormal" === t ? new GlorotNormal : "GlorotUniform" === t ? new GlorotUniform : "HeNormal" === t ? new HeNormal : "HeUniform" === t ? new HeUniform : "LeCunNormal" === t ? new LeCunNormal : "LeCunUniform" === t ? new LeCunUniform : deserializeInitializer({
            className: t,
            config: {
            }
        });
    }
    return e instanceof Initializer ? e : deserializeInitializer(e);
}
function zeros$1() {
    return new Zeros;
}
function ones$1() {
    return new Ones;
}
function constant(e) {
    return new Constant(e);
}
function randomUniform$1(e) {
    return new RandomUniform(e);
}
function randomNormal$2(e) {
    return new RandomNormal(e);
}
function truncatedNormal$1(e) {
    return new TruncatedNormal(e);
}
function identity(e) {
    return new Identity(e);
}
function varianceScaling(e) {
    return new VarianceScaling(e);
}
function glorotUniform(e) {
    return new GlorotUniform(e);
}
function glorotNormal(e) {
    return new GlorotNormal(e);
}
function heNormal(e) {
    return new HeNormal(e);
}
function heUniform(e) {
    return new HeUniform(e);
}
function leCunNormal(e) {
    return new LeCunNormal(e);
}
function leCunUniform(e) {
    return new LeCunUniform(e);
}
function orthogonal(e) {
    return new Orthogonal(e);
}
var exports_initializers = Object.freeze({
    zeros: zeros$1,
    ones: ones$1,
    constant: constant,
    randomUniform: randomUniform$1,
    randomNormal: randomNormal$2,
    truncatedNormal: truncatedNormal$1,
    identity: identity,
    varianceScaling: varianceScaling,
    glorotUniform: glorotUniform,
    glorotNormal: glorotNormal,
    heNormal: heNormal,
    heUniform: heUniform,
    leCunNormal: leCunNormal,
    leCunUniform: leCunUniform,
    orthogonal: orthogonal
});
function isArrayOfShapes(e) {
    return Array.isArray(e) && Array.isArray(e[0]);
}
function normalizeShapeList(e) {
    return 0 === e.length ? [] : Array.isArray(e[0]) ? e : [
        e
    ];
}
function getExactlyOneTensor(e) {
    var t;
    if (Array.isArray(e)) {
        if (1 !== e.length) throw new ValueError("Expected Tensor length to be 1; got " + e.length);
        t = e[0];
    } else t = e;
    return t;
}
function getExactlyOneShape(e) {
    if (Array.isArray(e) && Array.isArray(e[0])) {
        if (1 === e.length) return e[0];
        throw new ValueError("Expected exactly 1 Shape; got " + e.length);
    }
    return e;
}
function countParamsInWeights(e22) {
    for(var t22 = 0, n = 0, r = e22; n < r.length; n++){
        var i = r[n];
        0 === i.shape.length ? t22 += 1 : t22 += i.shape.reduce(function(e, t) {
            return e * t;
        });
    }
    return t22;
}
var DEFAULT_VARIABLE_NAME_PREFIX = "Variable", LayerVariable = function() {
    function e23(e, t, n, r, i) {
        void 0 === t && (t = "float32"), void 0 === n && (n = DEFAULT_VARIABLE_NAME_PREFIX), void 0 === r && (r = !0), void 0 === i && (i = null), this.dtype = null == t ? "float32" : t, this.shape = e.shape, this.id = getNextUniqueTensorId(), n = null == n ? DEFAULT_VARIABLE_NAME_PREFIX : n, this.originalName = getScopedTensorName(n), this.name = getUniqueTensorName(this.originalName), this.trainable = r, this.constraint = i, this.val = _tfjsCore.variable(e, this.trainable, this.name, this.dtype);
    }
    return e23.prototype.read = function() {
        return this.assertNotDisposed(), this.val;
    }, e23.prototype.write = function(e) {
        return this.assertNotDisposed(), checkShapesMatch(this.val, e), this.val.id !== e.id && (this.val.assign(e), null != this.constraint && this.val.assign(this.constraint.apply(this.val))), this;
    }, e23.prototype.dispose = function() {
        this.assertNotDisposed(), this.val.dispose();
    }, e23.prototype.assertNotDisposed = function() {
        if (this.val.isDisposed) throw new Error("LayersVariable " + this.name + " is already disposed.");
    }, e23;
}();
function checkShapesMatch(e, t) {
    if (e.shape.toString() !== t.shape.toString()) throw new Error("Shape mismatch: " + JSON.stringify(e.shape) + " vs. " + JSON.stringify(t.shape));
}
function batchGetValue(e24) {
    return e24.map(function(e) {
        return e.read();
    });
}
function batchSetValue(e25) {
    e25.forEach(function(e) {
        e[0].write(e[1]);
    });
}
var InputSpec = function() {
    return function(e) {
        this.dtype = e.dtype, this.shape = e.shape, null != e.shape ? this.ndim = e.shape.length : this.ndim = e.ndim, this.maxNDim = e.maxNDim, this.minNDim = e.minNDim, this.axes = e.axes || {
        };
    };
}(), SymbolicTensor = function() {
    return function(e, t, n, r, i, a, o) {
        this.dtype = e, this.shape = t, this.sourceLayer = n, this.inputs = r, this.callArgs = i, this.outputTensorIndex = o, this.id = getNextUniqueTensorId(), null != a && (this.originalName = getScopedTensorName(a), this.name = getUniqueTensorName(this.originalName)), this.rank = t.length;
    };
}(), _nextNodeID = 0, Node = function() {
    function e26(e, t) {
        this.callArgs = t, this.id = _nextNodeID++, this.outboundLayer = e.outboundLayer, this.inboundLayers = e.inboundLayers, this.nodeIndices = e.nodeIndices, this.tensorIndices = e.tensorIndices, this.inputTensors = e.inputTensors, this.outputTensors = e.outputTensors, this.inputMasks = e.inputMasks, this.outputMasks = e.outputMasks, this.inputShapes = e.inputShapes, this.outputShapes = e.outputShapes;
        for(var n = 0, r = e.inboundLayers; n < r.length; n++){
            var i = r[n];
            null != i && i.outboundNodes.push(this);
        }
        e.outboundLayer.inboundNodes.push(this);
    }
    return e26.prototype.getConfig = function() {
        for(var e = [], t = 0, n = this.inboundLayers; t < n.length; t++){
            var r = n[t];
            null != r ? e.push(r.name) : e.push(null);
        }
        return {
            outboundLayer: this.outboundLayer ? this.outboundLayer.name : null,
            inboundLayers: e,
            nodeIndices: this.nodeIndices,
            tensorIndices: this.tensorIndices
        };
    }, e26;
}(), _nextLayerID = 0, Layer = function(e27) {
    function t23(t) {
        var n = e27.call(this) || this;
        n._callHook = null, n._addedWeightNames = [], n._stateful = !1, n.id = _nextLayerID++, n.activityRegularizer = null, n.inputSpec = null, n.supportsMasking = !1, n._trainableWeights = [], n._nonTrainableWeights = [], n._losses = [], n._updates = [], n._built = !1, n.inboundNodes = [], n.outboundNodes = [];
        var r = t.name;
        if (!r) {
            var i = n.getClassName();
            r = toSnakeCase(i) + "_" + getUid(i);
        }
        if (n.name = r, n.trainable = null == t.trainable || t.trainable, n.updatable = null == t.updatable || t.updatable, null != t.inputShape || null != t.batchInputShape) {
            var a = void 0;
            if (null != t.batchInputShape) a = t.batchInputShape;
            else if (null != t.inputShape) {
                var o = null;
                null != t.batchSize && (o = t.batchSize), a = [
                    o
                ].concat(t.inputShape);
            }
            n.batchInputShape = a;
            var s = t.dtype;
            null == s && (s = t.inputDType), null == s && (s = "float32"), n.dtype = s;
        }
        return null != t.weights ? n.initialWeights = t.weights : n.initialWeights = null, n._refCount = null, n.fastWeightInitDuringBuild = !1, n;
    }
    return __extends(t23, e27), t23.nodeKey = function(e, t) {
        return e.name + "_ib-" + t.toString();
    }, t23.prototype.getNodeAtIndex = function(e, t) {
        if (0 === this.inboundNodes.length) throw new RuntimeError("The layer has never been called and thus has no defined " + t + ".");
        if (this.inboundNodes.length <= e) throw new ValueError("Asked to get " + t + " at node " + e + ", but the layer has only " + this.inboundNodes.length + " inbound nodes.");
        return this.inboundNodes[e];
    }, t23.prototype.getInputAt = function(e) {
        return singletonOrArray(this.getNodeAtIndex(e, "input").inputTensors);
    }, t23.prototype.getOutputAt = function(e) {
        return singletonOrArray(this.getNodeAtIndex(e, "output").outputTensors);
    }, Object.defineProperty(t23.prototype, "input", {
        get: function() {
            if (this.inboundNodes.length > 1) throw new AttributeError("Layer " + this.name + ' has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use `getInputAt(nodeIndex)` instead.');
            if (0 === this.inboundNodes.length) throw new AttributeError("Layer " + this.name + " is not connected, no input to return.");
            return singletonOrArray(this.getNodeAtIndex(0, "input").inputTensors);
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t23.prototype, "output", {
        get: function() {
            if (0 === this.inboundNodes.length) throw new AttributeError("Layer " + this.name + " has no inbound nodes.");
            if (this.inboundNodes.length > 1) throw new AttributeError("Layer " + this.name + ' has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use `getOutputAt(nodeIndex)` instead.');
            return singletonOrArray(this.getNodeAtIndex(0, "output").outputTensors);
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t23.prototype, "losses", {
        get: function() {
            return this._losses;
        },
        enumerable: !0,
        configurable: !0
    }), t23.prototype.calculateLosses = function() {
        return this.losses.map(function(e) {
            return e();
        });
    }, Object.defineProperty(t23.prototype, "updates", {
        get: function() {
            return this._updates;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t23.prototype, "built", {
        get: function() {
            return this._built;
        },
        set: function(e) {
            this._built = e;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t23.prototype, "trainableWeights", {
        get: function() {
            return this.trainable ? this._trainableWeights : [];
        },
        set: function(e) {
            this._trainableWeights = e;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t23.prototype, "nonTrainableWeights", {
        get: function() {
            return this.trainable ? this._nonTrainableWeights : this._trainableWeights.concat(this._nonTrainableWeights);
        },
        set: function(e) {
            this._nonTrainableWeights = e;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t23.prototype, "weights", {
        get: function() {
            return this.trainableWeights.concat(this.nonTrainableWeights);
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t23.prototype, "stateful", {
        get: function() {
            return this._stateful;
        },
        enumerable: !0,
        configurable: !0
    }), t23.prototype.resetStates = function() {
        if (!this.stateful) throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.");
    }, t23.prototype.assertInputCompatibility = function(e) {
        if (e = toList(e), null != this.inputSpec && 0 !== this.inputSpec.length) {
            var t = toList(this.inputSpec);
            if (e.length !== t.length) throw new ValueError("Layer " + this.name + " expects " + t.length + " inputs, but it received " + e.length + " input tensors. Input received: " + e);
            for(var n = 0; n < e.length; n++){
                var r = e[n], i = t[n];
                if (null != i) {
                    var a = r.rank;
                    if (null != i.ndim && a !== i.ndim) throw new ValueError("Input " + n + " is incompatible with layer " + this.name + ": expected ndim=" + i.ndim + ", found ndim=" + a);
                    if (null != i.maxNDim && a > i.maxNDim) throw new ValueError("Input " + n + " is incompatible with layer " + this.name + ": expected max_ndim=" + i.maxNDim + ", found ndim=" + a);
                    if (null != i.minNDim && a < i.minNDim) throw new ValueError("Input " + n + " is incompatible with layer " + this.name + ": expected min_ndim=" + i.minNDim + ", found ndim=" + a + ".");
                    if (null != i.dtype && r.dtype !== i.dtype) throw new ValueError("Input " + n + " is incompatible with layer " + this.name + " : expected dtype=" + i.dtype + ", found dtype=" + r.dtype + ".");
                    if (i.axes) {
                        var o = r.shape;
                        for(var s in i.axes){
                            var l = Number(s), u = i.axes[s], c = l >= 0 ? o[l] : o[o.length + l];
                            if (null != u && -1 === [
                                u,
                                null
                            ].indexOf(c)) throw new ValueError("Input " + n + " is incompatible with layer " + this.name + ": expected axis " + l + " of input shape to have value " + u + " but got shape " + o + ".");
                        }
                    }
                    if (null != i.shape) for(var p = 0; p < i.shape.length; ++p){
                        var h = i.shape[p], d = r.shape[p];
                        if (null != h && null != d && h !== d) throw new ValueError("Input " + n + " is incompatible with layer " + this.name + ": expected shape=" + i.shape + ", found shape=${xShape}.");
                    }
                }
            }
        }
    }, t23.prototype.call = function(e, t) {
        return e;
    }, t23.prototype.invokeCallHook = function(e, t) {
        null != this._callHook && this._callHook(e, t);
    }, t23.prototype.setCallHook = function(e) {
        this._callHook = e;
    }, t23.prototype.clearCallHook = function() {
        this._callHook = null;
    }, t23.prototype.apply = function(e, t) {
        var n = this;
        t = t || {
        }, this.assertNotDisposed();
        for(var r1 = toList(e), i1 = !0, a3 = 0, o1 = r1; a3 < o1.length; a3++)if (!(o1[a3] instanceof SymbolicTensor)) {
            i1 = !1;
            break;
        }
        for(var s = !0, l3 = 0, u1 = r1; l3 < u1.length; l3++)if (u1[l3] instanceof SymbolicTensor) {
            s = !1;
            break;
        }
        if (i1 === s) throw new ValueError("Arguments to apply() must be all SymbolicTensors or all Tensors");
        return nameScope(this.name, function() {
            if (!n.built) {
                n.assertInputCompatibility(e);
                for(var i = [], a = 0, o = toList(e); a < o.length; a++){
                    var l = o[a];
                    i.push(l.shape);
                }
                n.build(singletonOrArray(i)), n.built = !0, n.initialWeights && n.setWeights(n.initialWeights), null === n._refCount && s && (n._refCount = 1);
            }
            if (n.assertInputCompatibility(e), s) {
                for(var u = [], c = 0, p = toList(g = n.call(e, t)); c < p.length; c++){
                    var h = p[c];
                    -1 !== r1.indexOf(h) && (h = h.clone()), u.push(h);
                }
                if (g = singletonOrArray(u), null != n.activityRegularizer) throw new NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
                return g;
            }
            var d = collectInputShape(e), f = n.computeOutputShape(d), g = void 0, m = guessOutputDType(e);
            if (n.warnOnIncompatibleInputShape(Array.isArray(e) ? d[0] : d), g = null != f && f.length > 0 && Array.isArray(f[0]) ? f.map(function(r, i) {
                return new SymbolicTensor(m, r, n, toList(e), t, n.name, i);
            }) : new SymbolicTensor(m, f, n, toList(e), t, n.name), n.addInboundNode(e, g, null, null, d, f, t), n._refCount++, null != n.activityRegularizer) throw new NotImplementedError("Layer invocation in the presence of activity regularizer(s) is not supported yet.");
            return g;
        });
    }, t23.prototype.warnOnIncompatibleInputShape = function(e) {
        if (null != this.batchInputShape) {
            if (e.length !== this.batchInputShape.length) console.warn("The rank of the input tensor provided (shape: " + JSON.stringify(e) + ") does not match that of the batchInputShape (" + JSON.stringify(this.batchInputShape) + ") of the layer " + this.name);
            else {
                var t = !1;
                this.batchInputShape.forEach(function(n, r) {
                    null != n && null != e[r] && e[r] !== n && (t = !0);
                }), t && console.warn("The shape of the input tensor (" + JSON.stringify(e) + ") does not match the expectation of layer " + this.name + ": " + JSON.stringify(this.batchInputShape));
            }
        }
    }, Object.defineProperty(t23.prototype, "outputShape", {
        get: function() {
            if (null == this.inboundNodes || 0 === this.inboundNodes.length) throw new AttributeError("The layer " + this.name + " has never been called and thus has no defined output shape.");
            for(var e = [], t = 0, n = this.inboundNodes; t < n.length; t++){
                var r = n[t], i = JSON.stringify(r.outputShapes);
                -1 === e.indexOf(i) && e.push(i);
            }
            if (1 === e.length) {
                var a = this.inboundNodes[0].outputShapes;
                return Array.isArray(a) && Array.isArray(a[0]) && 1 === a.length ? a[0] : a;
            }
            throw new AttributeError("The layer " + this.name + ' has multiple inbound nodes with different output shapes. Hence the notion of "outut shape" is ill-defined for the layer.');
        },
        enumerable: !0,
        configurable: !0
    }), t23.prototype.countParams = function() {
        if (!this.built) throw new RuntimeError("You tried to call countParams() on " + this.name + ", but the layer is not built yet. Build it first by calling build(batchInputShape).");
        return countParamsInWeights(this.weights);
    }, t23.prototype.build = function(e) {
        this.built = !0;
    }, t23.prototype.getWeights = function(e) {
        return void 0 === e && (e = !1), batchGetValue(e ? this.trainableWeights : this.weights);
    }, t23.prototype.setWeights = function(e) {
        var t = this;
        _tfjsCore.tidy(function() {
            var n = t.weights;
            if (n.length !== e.length) throw new ValueError('You called setWeights(weights) on layer "' + t.name + '" with a weight list of length ' + e.length + ", but the layer was expecting " + n.length + " weights. Provided weights: " + e + "...");
            if (0 !== n.length) {
                for(var r = [], i = batchGetValue(n), a = 0; a < i.length; ++a){
                    var o = i[a], s = n[a], l = e[a];
                    if (!_tfjsCore.util.arraysEqual(o.shape, l.shape)) throw new ValueError("Layer weight shape " + o.shape + " not compatible with provided weight shape " + l.shape);
                    r.push([
                        s,
                        l
                    ]);
                }
                batchSetValue(r);
            }
        });
    }, t23.prototype.addWeight = function(e, t, n, r, i, a, o) {
        if (-1 !== this._addedWeightNames.indexOf(e)) throw new ValueError("Duplicate weight name " + e + " for layer " + this.name);
        this._addedWeightNames.push(e), null == n && (n = "float32"), this.fastWeightInitDuringBuild && (r = getInitializer("zeros"));
        var s = r.apply(t, n), l = new LayerVariable(s, n, e, a, o);
        return s.dispose(), null != i && this.addLoss(function() {
            return i.apply(l.read());
        }), null == a && (a = !0), a ? this._trainableWeights.push(l) : this._nonTrainableWeights.push(l), l;
    }, t23.prototype.setFastWeightInitDuringBuild = function(e) {
        this.fastWeightInitDuringBuild = e;
    }, t23.prototype.addLoss = function(e) {
        var t;
        null == e || Array.isArray(e) && 0 === e.length || (e = toList(e), void 0 !== this._losses && null !== this._losses && (t = this.losses).push.apply(t, e));
    }, t23.prototype.computeOutputShape = function(e) {
        return e;
    }, t23.prototype.computeMask = function(e28, t) {
        var n = this;
        if (!this.supportsMasking) {
            if (null != t) {
                if (!Array.isArray(t)) throw new TypeError("Layer " + this.name + " does not support masking, but was passed an inputMask.");
                t.forEach(function(e) {
                    if (null != e) throw new TypeError("Layer " + n.name + " does not support masking, but was passed an inputMask.");
                });
            }
            return null;
        }
        return t;
    }, t23.prototype.addInboundNode = function(e, t, n, r, i, a, o) {
        void 0 === o && (o = null);
        var s = toList(e);
        t = toList(t), n = toList(n), r = toList(r), i = normalizeShapeList(i), a = normalizeShapeList(a);
        for(var l = [], u = [], c = [], p = 0, h = s; p < h.length; p++){
            var d = h[p];
            l.push(d.sourceLayer), u.push(d.nodeIndex), c.push(d.tensorIndex);
        }
        new Node({
            outboundLayer: this,
            inboundLayers: l,
            nodeIndices: u,
            tensorIndices: c,
            inputTensors: s,
            outputTensors: t,
            inputMasks: n,
            outputMasks: r,
            inputShapes: i,
            outputShapes: a
        }, o);
        for(var f = 0; f < t.length; f++)t[f].sourceLayer = this, t[f].nodeIndex = this.inboundNodes.length - 1, t[f].tensorIndex = f;
    }, t23.prototype.getConfig = function() {
        var e = {
            name: this.name,
            trainable: this.trainable
        };
        return null != this.batchInputShape && (e.batchInputShape = this.batchInputShape), null != this.dtype && (e.dtype = this.dtype), e;
    }, t23.prototype.disposeWeights = function() {
        return this.weights.forEach(function(e) {
            return e.dispose();
        }), this.weights.length;
    }, t23.prototype.assertNotDisposed = function() {
        if (0 === this._refCount) throw new Error("Layer '" + this.name + "' is already disposed.");
    }, t23.prototype.dispose = function() {
        if (!this.built) throw new Error("Cannot dispose Layer " + this.name + " because it has not been built yet.");
        if (null === this._refCount) throw new Error("Cannot dispose Layer " + this.name + " because it has not been used yet.");
        this.assertNotDisposed();
        var e = 0;
        return 0 == --this._refCount && (e = this.disposeWeights()), {
            refCountAfterDispose: this._refCount,
            numDisposedVariables: e
        };
    }, t23;
}(_tfjsCore.serialization.Serializable);
function collectInputShape(e) {
    for(var t = [], n = 0, r = e = toList(e); n < r.length; n++){
        var i = r[n];
        t.push(i.shape);
    }
    return singletonOrArray(t);
}
function guessOutputDType(e) {
    return "float32";
}
function getSourceInputs(e, t, n) {
    if ((null == t || null != n && n > 0) && (t = e.sourceLayer, n = e.nodeIndex), 0 === t.inboundNodes.length) return [
        e
    ];
    var r = t.inboundNodes[n];
    if (0 === r.inboundLayers.length) return r.inputTensors;
    for(var i = [], a = 0; a < r.inboundLayers.length; a++)for(var o = 0, s = getSourceInputs(r.inputTensors[a], r.inboundLayers[a], r.nodeIndices[a]); o < s.length; o++){
        var l = s[o];
        -1 === i.indexOf(l) && i.push(l);
    }
    return i;
}
var ModelLoggingVerbosity, InputLayer = function(e) {
    function t24(t) {
        var n = e.call(this, {
            dtype: t.dtype,
            name: null != t.name ? t.name : getUid("input").toString()
        }) || this;
        if (null == t.batchSize && (t.batchSize = null), null == t.sparse && (t.sparse = !1), n.trainable = !1, n.built = !0, n.sparse = t.sparse, null != t.inputShape && null != t.batchInputShape) throw new ValueError("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");
        var r = t.batchInputShape;
        if (null == r) {
            if (null == t.inputShape) throw new ValueError("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");
            r = [
                t.batchSize
            ].concat(t.inputShape);
        } else if (null != t.batchSize) throw new ValueError("Cannot specify batchSize if batchInputShape isspecified when creating an InputLayer.");
        var i = t.dtype || "float32";
        n.batchInputShape = r, n.dtype = i, n.inputSpec = [
            {
                shape: r
            }
        ];
        var a = new SymbolicTensor(n.dtype, n.batchInputShape, n, [], {
        }, n.name);
        return a.nodeIndex = 0, a.tensorIndex = 0, new Node({
            outboundLayer: n,
            inboundLayers: [],
            nodeIndices: [],
            tensorIndices: [],
            inputTensors: [
                a
            ],
            outputTensors: [
                a
            ],
            inputMasks: [
                null
            ],
            outputMasks: [
                null
            ],
            inputShapes: [
                r
            ],
            outputShapes: [
                r
            ]
        }), n;
    }
    return __extends(t24, e), t24.prototype.apply = function(e, t) {
        throw new ValueError("Cannot pass any input to an InputLayer's apply() method. InputLayer name: " + this.name);
    }, t24.prototype.dispose = function() {
        return {
            refCountAfterDispose: this._refCount,
            numDisposedVariables: 0
        };
    }, t24.prototype.getConfig = function() {
        return {
            batchInputShape: this.batchInputShape,
            dtype: this.dtype,
            sparse: this.sparse,
            name: this.name
        };
    }, t24.className = "InputLayer", t24;
}(Layer);
function Input(e) {
    if (null == e.batchShape && null == e.shape) throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");
    if (null != e.batchShape && null != e.shape) throw new ValueError("Please provide either a `shape` or `batchShape` argument to Input, but not both.");
    var t = e.batchShape;
    null != e.shape && null == t && (t = [
        null
    ].concat(e.shape));
    var n = e.dtype;
    return null == n && (n = "float32"), new InputLayer({
        batchInputShape: t,
        name: e.name,
        dtype: n,
        sparse: e.sparse
    }).inboundNodes[0].outputTensors[0];
}
function resolveScalarsInLogs(e) {
    return __awaiter(this, void 0, void 0, function() {
        var t, n, r, i, a, o, s, l;
        return __generator(this, function(u) {
            switch(u.label){
                case 0:
                    if (null == e) return [
                        2
                    ];
                    for(i in t = [], n = [], r = [], e)"number" != typeof (a = e[i]) && (o = a, t.push(o.data()), n.push(i), r.push(o));
                    return [
                        4,
                        Promise.all(t)
                    ];
                case 1:
                    for(s = u.sent(), l = 0; l < s.length; ++l)e[n[l]] = s[l][0];
                    return _tfjsCore.dispose(r), [
                        2
                    ];
            }
        });
    });
}
function disposeTensorsInLogs(e) {
    if (null != e) for(var t in e){
        var n = e[t];
        "number" != typeof n && n.dispose();
    }
}
_tfjsCore.serialization.registerClass(InputLayer), (function(e) {
    e[e.SILENT = 0] = "SILENT", e[e.VERBOSE = 1] = "VERBOSE";
})(ModelLoggingVerbosity || (ModelLoggingVerbosity = {
}));
var BaseCallback = function() {
    function e29() {
        this.validationData = null;
    }
    return e29.prototype.setParams = function(e) {
        this.params = e;
    }, e29.prototype.onEpochBegin = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                return [
                    2
                ];
            });
        });
    }, e29.prototype.onEpochEnd = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                return [
                    2
                ];
            });
        });
    }, e29.prototype.onBatchBegin = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                return [
                    2
                ];
            });
        });
    }, e29.prototype.onBatchEnd = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                return [
                    2
                ];
            });
        });
    }, e29.prototype.onTrainBegin = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                return [
                    2
                ];
            });
        });
    }, e29.prototype.onTrainEnd = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                return [
                    2
                ];
            });
        });
    }, e29.prototype.setModel = function(e) {
    }, e29;
}(), CallbackList = function() {
    function e30(e, t) {
        void 0 === t && (t = 10), null == e && (e = []), this.callbacks = e, this.queueLength = t;
    }
    return e30.prototype.append = function(e) {
        this.callbacks.push(e);
    }, e30.prototype.setParams = function(e) {
        for(var t = 0, n = this.callbacks; t < n.length; t++)n[t].setParams(e);
    }, e30.prototype.setModel = function(e) {
        for(var t = 0, n = this.callbacks; t < n.length; t++)n[t].setModel(e);
    }, e30.prototype.onEpochBegin = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            var n, r;
            return __generator(this, function(i) {
                switch(i.label){
                    case 0:
                        null == t && (t = {
                        }), n = 0, r = this.callbacks, i.label = 1;
                    case 1:
                        return n < r.length ? [
                            4,
                            r[n].onEpochBegin(e, t)
                        ] : [
                            3,
                            4
                        ];
                    case 2:
                        i.sent(), i.label = 3;
                    case 3:
                        return n++, [
                            3,
                            1
                        ];
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
    }, e30.prototype.onEpochEnd = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            var n, r;
            return __generator(this, function(i) {
                switch(i.label){
                    case 0:
                        null == t && (t = {
                        }), n = 0, r = this.callbacks, i.label = 1;
                    case 1:
                        return n < r.length ? [
                            4,
                            r[n].onEpochEnd(e, t)
                        ] : [
                            3,
                            4
                        ];
                    case 2:
                        i.sent(), i.label = 3;
                    case 3:
                        return n++, [
                            3,
                            1
                        ];
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
    }, e30.prototype.onBatchBegin = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            var n, r;
            return __generator(this, function(i) {
                switch(i.label){
                    case 0:
                        null == t && (t = {
                        }), n = 0, r = this.callbacks, i.label = 1;
                    case 1:
                        return n < r.length ? [
                            4,
                            r[n].onBatchBegin(e, t)
                        ] : [
                            3,
                            4
                        ];
                    case 2:
                        i.sent(), i.label = 3;
                    case 3:
                        return n++, [
                            3,
                            1
                        ];
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
    }, e30.prototype.onBatchEnd = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            var n, r;
            return __generator(this, function(i) {
                switch(i.label){
                    case 0:
                        null == t && (t = {
                        }), n = 0, r = this.callbacks, i.label = 1;
                    case 1:
                        return n < r.length ? [
                            4,
                            r[n].onBatchEnd(e, t)
                        ] : [
                            3,
                            4
                        ];
                    case 2:
                        i.sent(), i.label = 3;
                    case 3:
                        return n++, [
                            3,
                            1
                        ];
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
    }, e30.prototype.onTrainBegin = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            var t, n;
            return __generator(this, function(r) {
                switch(r.label){
                    case 0:
                        null == e && (e = {
                        }), t = 0, n = this.callbacks, r.label = 1;
                    case 1:
                        return t < n.length ? [
                            4,
                            n[t].onTrainBegin(e)
                        ] : [
                            3,
                            4
                        ];
                    case 2:
                        r.sent(), r.label = 3;
                    case 3:
                        return t++, [
                            3,
                            1
                        ];
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
    }, e30.prototype.onTrainEnd = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            var t, n;
            return __generator(this, function(r) {
                switch(r.label){
                    case 0:
                        null == e && (e = {
                        }), t = 0, n = this.callbacks, r.label = 1;
                    case 1:
                        return t < n.length ? [
                            4,
                            n[t].onTrainEnd(e)
                        ] : [
                            3,
                            4
                        ];
                    case 2:
                        r.sent(), r.label = 3;
                    case 3:
                        return t++, [
                            3,
                            1
                        ];
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
    }, e30;
}(), ModelTrainingYielder = function() {
    function e31(e) {
        this.yieldEvery = e, this.batchCount = 0, this.batchDurationsMillis = [], this.autoYieldEveryBatches = null, this.batchStartMillis = _tfjsCore.util.now();
    }
    return e31.prototype.maybeYieldOnBatch = function(t25) {
        return __awaiter(this, void 0, void 0, function() {
            var t26, n;
            return __generator(this, function(r) {
                switch(r.label){
                    case 0:
                        return "auto" !== this.yieldEvery ? [
                            3,
                            5
                        ] : (this.batchCount++, null != this.autoYieldEveryBatches ? [
                            3,
                            2
                        ] : (t26 = _tfjsCore.util.now(), [
                            4,
                            _tfjsCore.nextFrame()
                        ]));
                    case 1:
                        return r.sent(), this.batchCount > e31.SKIP_FIRST_BATCHES && (this.batchDurationsMillis.push(t26 - this.batchStartMillis), this.batchDurationsMillis.length >= e31.DECISION_BATCH_COUNT && (n = this.batchDurationsMillis.reduce(function(e, t) {
                            return e + t;
                        }) / this.batchDurationsMillis.length, this.autoYieldEveryBatches = Math.round(e31.THRESHOLD_MILLIS / n), this.autoYieldEveryBatches < 1 && (this.autoYieldEveryBatches = 1))), this.batchStartMillis = _tfjsCore.util.now(), this.lastYieldBatchCount = this.batchCount, [
                            3,
                            4
                        ];
                    case 2:
                        return this.batchCount - this.lastYieldBatchCount >= this.autoYieldEveryBatches ? [
                            4,
                            _tfjsCore.nextFrame()
                        ] : [
                            3,
                            4
                        ];
                    case 3:
                        r.sent(), this.lastYieldBatchCount = this.batchCount, r.label = 4;
                    case 4:
                        return [
                            3,
                            7
                        ];
                    case 5:
                        return "batch" !== this.yieldEvery ? [
                            3,
                            7
                        ] : [
                            4,
                            _tfjsCore.nextFrame()
                        ];
                    case 6:
                        r.sent(), r.label = 7;
                    case 7:
                        return [
                            2
                        ];
                }
            });
        });
    }, e31.prototype.maybeYieldOnEpoch = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                switch(e.label){
                    case 0:
                        return "epoch" !== this.yieldEvery ? [
                            3,
                            2
                        ] : [
                            4,
                            _tfjsCore.nextFrame()
                        ];
                    case 1:
                        e.sent(), e.label = 2;
                    case 2:
                        return [
                            2
                        ];
                }
            });
        });
    }, e31.SKIP_FIRST_BATCHES = 1, e31.DECISION_BATCH_COUNT = 2, e31.THRESHOLD_MILLIS = 16, e31;
}(), BaseLogger = function(e32) {
    function t27(t) {
        var n = e32.call(this) || this;
        return n.yieldEvery = t || "auto", n;
    }
    return __extends(t27, e32), t27.prototype.onTrainBegin = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                return this.autoYielder = new ModelTrainingYielder(this.yieldEvery), [
                    2
                ];
            });
        });
    }, t27.prototype.onEpochBegin = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                return this.seen = 0, this.totals = {
                }, [
                    2
                ];
            });
        });
    }, t27.prototype.onBatchEnd = function(e33, t) {
        return __awaiter(this, void 0, void 0, function() {
            var e, n2, r, i2, a = this;
            return __generator(this, function(o2) {
                switch(o2.label){
                    case 0:
                        return [
                            4,
                            this.autoYielder.maybeYieldOnBatch(t)
                        ];
                    case 1:
                        for(i2 in o2.sent(), null == t && (t = {
                        }), e = null == t.size ? 0 : t.size, this.seen += e, n2 = function(n) {
                            var i = t[n];
                            if ("number" == typeof i) r.totals.hasOwnProperty(n) || (r.totals[n] = 0), r.totals[n] = r.totals[n] + i * e;
                            else {
                                var o = void 0;
                                n in r.totals ? o = r.totals[n] : r.totals[n] = getScalar(0), r.totals[n] = _tfjsCore.tidy(function() {
                                    return _tfjsCore.add(a.totals[n], _tfjsCore.mul(i, getScalar(e)));
                                }), null != o && o.dispose();
                            }
                        }, r = this, t)n2(i2);
                        return [
                            2
                        ];
                }
            });
        });
    }, t27.prototype.onEpochEnd = function(e34, t) {
        return __awaiter(this, void 0, void 0, function() {
            var e, n, r, i, a, o = this;
            return __generator(this, function(s) {
                switch(s.label){
                    case 0:
                        return [
                            4,
                            this.autoYielder.maybeYieldOnEpoch()
                        ];
                    case 1:
                        if (s.sent(), null != t) for(e = function(e) {
                            if (null == n.totals[e]) return "continue";
                            "number" == typeof n.totals[e] ? t[e] = n.totals[e] / n.seen : _tfjsCore.tidy(function() {
                                t[e] = _tfjsCore.mul(_tfjsCore.div(getScalar(1), getScalar(o.seen)), o.totals[e]), o.totals[e].dispose(), _tfjsCore.keep(t[e]);
                            });
                        }, n = this, r = 0, i = this.params.metrics; r < i.length; r++)a = i[r], e(a);
                        return [
                            2
                        ];
                }
            });
        });
    }, t27;
}(BaseCallback), History = function(e35) {
    function t28() {
        return null !== e35 && e35.apply(this, arguments) || this;
    }
    return __extends(t28, e35), t28.prototype.onTrainBegin = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                return this.epoch = [], this.history = {
                }, [
                    2
                ];
            });
        });
    }, t28.prototype.onEpochEnd = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            var n;
            return __generator(this, function(r) {
                for(n in null == t && (t = {
                }), this.epoch.push(e), t)null == this.history[n] && (this.history[n] = []), this.history[n].push(t[n]);
                return [
                    2
                ];
            });
        });
    }, t28.prototype.syncData = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e, t, n, r, i, a, o, s, l;
            return __generator(this, function(u) {
                switch(u.label){
                    case 0:
                        for(r in e = [], t = [], n = [], this.history)for(i = this.history[r], a = 0; a < i.length; ++a)"number" != typeof i[a] && (o = i[a], e.push(o.data()), t.push(r), n.push(a));
                        return [
                            4,
                            Promise.all(e)
                        ];
                    case 1:
                        for(s = u.sent(), l = 0; l < s.length; ++l)this.history[t[l]][n[l]].dispose(), this.history[t[l]][n[l]] = s[l][0];
                        return [
                            2
                        ];
                }
            });
        });
    }, t28;
}(BaseCallback), CustomCallback = function(e36) {
    function t29(t) {
        var n = e36.call(this) || this;
        return n.trainBegin = t.onTrainBegin, n.trainEnd = t.onTrainEnd, n.epochBegin = t.onEpochBegin, n.epochEnd = t.onEpochEnd, n.batchBegin = t.onBatchBegin, n.batchEnd = t.onBatchEnd, n;
    }
    return __extends(t29, e36), t29.prototype.onEpochBegin = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(n) {
                switch(n.label){
                    case 0:
                        return null == this.epochBegin ? [
                            3,
                            3
                        ] : [
                            4,
                            resolveScalarsInLogs(t)
                        ];
                    case 1:
                        return n.sent(), [
                            4,
                            this.epochBegin(e, t)
                        ];
                    case 2:
                        n.sent(), n.label = 3;
                    case 3:
                        return [
                            2
                        ];
                }
            });
        });
    }, t29.prototype.onEpochEnd = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(n) {
                switch(n.label){
                    case 0:
                        return null == this.epochEnd ? [
                            3,
                            3
                        ] : [
                            4,
                            resolveScalarsInLogs(t)
                        ];
                    case 1:
                        return n.sent(), [
                            4,
                            this.epochEnd(e, t)
                        ];
                    case 2:
                        n.sent(), n.label = 3;
                    case 3:
                        return [
                            2
                        ];
                }
            });
        });
    }, t29.prototype.onBatchBegin = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(n) {
                switch(n.label){
                    case 0:
                        return null == this.batchBegin ? [
                            3,
                            3
                        ] : [
                            4,
                            resolveScalarsInLogs(t)
                        ];
                    case 1:
                        return n.sent(), [
                            4,
                            this.batchBegin(e, t)
                        ];
                    case 2:
                        n.sent(), n.label = 3;
                    case 3:
                        return [
                            2
                        ];
                }
            });
        });
    }, t29.prototype.onBatchEnd = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(n) {
                switch(n.label){
                    case 0:
                        return null == this.batchEnd ? [
                            3,
                            3
                        ] : [
                            4,
                            resolveScalarsInLogs(t)
                        ];
                    case 1:
                        return n.sent(), [
                            4,
                            this.batchEnd(e, t)
                        ];
                    case 2:
                        n.sent(), n.label = 3;
                    case 3:
                        return [
                            2
                        ];
                }
            });
        });
    }, t29.prototype.onTrainBegin = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                switch(t.label){
                    case 0:
                        return null == this.trainBegin ? [
                            3,
                            3
                        ] : [
                            4,
                            resolveScalarsInLogs(e)
                        ];
                    case 1:
                        return t.sent(), [
                            4,
                            this.trainBegin(e)
                        ];
                    case 2:
                        t.sent(), t.label = 3;
                    case 3:
                        return [
                            2
                        ];
                }
            });
        });
    }, t29.prototype.onTrainEnd = function(e) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                switch(t.label){
                    case 0:
                        return null == this.trainEnd ? [
                            3,
                            3
                        ] : [
                            4,
                            resolveScalarsInLogs(e)
                        ];
                    case 1:
                        return t.sent(), [
                            4,
                            this.trainEnd(e)
                        ];
                    case 2:
                        t.sent(), t.label = 3;
                    case 3:
                        return [
                            2
                        ];
                }
            });
        });
    }, t29;
}(BaseCallback);
function standardizeCallbacks(e37) {
    return null == e37 ? null : e37 instanceof BaseCallback ? [
        e37
    ] : Array.isArray(e37) && e37[0] instanceof BaseCallback ? e37 : toList(e37).map(function(e) {
        return new CustomCallback(e);
    });
}
var CallbackConstructorRegistry = function() {
    function e38() {
    }
    return e38.registerCallbackConstructor = function(t, n) {
        _tfjsCore.util.assert(t >= 0 && Number.isInteger(t), "Verbosity level is expected to be an integer >= 0, but got " + t), e38.checkForDuplicate(n), null == e38.constructors[t] && (e38.constructors[t] = []), e38.constructors[t].push(n);
    }, e38.checkForDuplicate = function(t) {
        for(var n in e38.constructors)e38.constructors[+n].forEach(function(e) {
            if (e === t) throw new ValueError("Duplicate callback constructor.");
        });
    }, e38.clear = function() {
        e38.constructors = {
        };
    }, e38.createCallbacks = function(t) {
        var n = [];
        for(var r in e38.constructors){
            var i = +r;
            t >= i && n.push.apply(n, e38.constructors[i]);
        }
        return n.map(function(e) {
            return new e;
        });
    }, e38.constructors = {
    }, e38;
}();
function configureCallbacks(e, t, n, r, i, a, o, s, l, u) {
    var c = new History, p = [
        new BaseLogger(t)
    ].concat(CallbackConstructorRegistry.createCallbacks(n));
    null != e && p.push.apply(p, e), p.push(c);
    var h = new CallbackList(p);
    return h.setParams({
        epochs: r,
        initialEpoch: i,
        samples: a,
        steps: o,
        batchSize: s,
        verbose: n,
        doValidation: l,
        metrics: u
    }), {
        callbackList: h,
        history: c
    };
}
function l2Normalize(e, t) {
    return _tfjsCore.tidy(function() {
        var n = _tfjsCore.sum(square(e), t, !0), r = _tfjsCore.mul(_tfjsCore.scalar(epsilon()), _tfjsCore.onesLike(e)), i = _tfjsCore.sqrt(_tfjsCore.maximum(n, r));
        return _tfjsCore.div(e, i);
    });
}
function meanSquaredError(e, t) {
    return _tfjsCore.tidy(function() {
        return _tfjsCore.mean(square(_tfjsCore.sub(t, e)), -1);
    });
}
function meanAbsoluteError(e, t) {
    return _tfjsCore.tidy(function() {
        return _tfjsCore.mean(_tfjsCore.abs(_tfjsCore.sub(t, e)), -1);
    });
}
function meanAbsolutePercentageError(e, t) {
    return _tfjsCore.tidy(function() {
        var n = _tfjsCore.sub(e, t), r = _tfjsCore.clipByValue(_tfjsCore.abs(e), epsilon(), Number.MAX_VALUE), i = _tfjsCore.abs(_tfjsCore.div(n, r));
        return _tfjsCore.mul(getScalar(100), _tfjsCore.mean(i, -1));
    });
}
function meanSquaredLogarithmicError(e, t) {
    return _tfjsCore.tidy(function() {
        var n = getScalar(1), r = _tfjsCore.clipByValue(t, epsilon(), Number.MAX_VALUE), i = _tfjsCore.log(_tfjsCore.add(n, r)), a = _tfjsCore.clipByValue(e, epsilon(), Number.MAX_VALUE), o = _tfjsCore.log(_tfjsCore.add(n, a));
        return _tfjsCore.mean(square(_tfjsCore.sub(i, o)), -1);
    });
}
function squaredHinge(e, t) {
    return _tfjsCore.tidy(function() {
        var n = getScalar(0), r = getScalar(1), i = _tfjsCore.maximum(n, _tfjsCore.sub(r, _tfjsCore.mul(e, t)));
        return _tfjsCore.mean(square(i), -1);
    });
}
function hinge(e, t) {
    return _tfjsCore.tidy(function() {
        var n = getScalar(0), r = getScalar(1), i = _tfjsCore.maximum(n, _tfjsCore.sub(r, _tfjsCore.mul(e, t)));
        return _tfjsCore.mean(i, -1);
    });
}
function categoricalHinge(e, t) {
    return _tfjsCore.tidy(function() {
        var n = getScalar(0), r = getScalar(1), i = _tfjsCore.sum(_tfjsCore.mul(e, t), -1), a = _tfjsCore.max(_tfjsCore.mul(_tfjsCore.sub(r, e), t), -1);
        return _tfjsCore.maximum(n, _tfjsCore.add(r, _tfjsCore.sub(a, i)));
    });
}
function logcosh(e, t) {
    return _tfjsCore.tidy(function() {
        var n = getScalar(Math.log(2)), r = _tfjsCore.sub(t, e), i = _tfjsCore.sub(_tfjsCore.add(r, _tfjsCore.softplus(_tfjsCore.mul(getScalar(-2), r))), n);
        return _tfjsCore.mean(i, -1);
    });
}
function categoricalCrossentropy(e, t, n) {
    return void 0 === n && (n = !1), _tfjsCore.tidy(function() {
        if (n) t = _tfjsCore.softmax(t);
        else {
            var r = _tfjsCore.sum(t, t.shape.length - 1, !0);
            t = _tfjsCore.div(t, r);
        }
        return t = _tfjsCore.clipByValue(t, epsilon(), 1 - epsilon()), _tfjsCore.neg(_tfjsCore.sum(_tfjsCore.mul(e.toFloat(), _tfjsCore.log(t)), t.shape.length - 1));
    });
}
function sparseCategoricalCrossentropy(e, t) {
    return _tfjsCore.tidy(function() {
        var n = _tfjsCore.floor(flatten(e)).toInt(), r = (t = _tfjsCore.clipByValue(t, epsilon(), 1 - epsilon())).shape;
        return categoricalCrossentropy(_tfjsCore.oneHot(n, r[r.length - 1]).reshape(r), t, !1);
    });
}
function sigmoidCrossEntropyWithLogits(e, t) {
    if (!_tfjsCore.util.arraysEqual(e.shape, t.shape)) throw new ValueError("logits and labels must have the same shape, but got shapes " + JSON.stringify(e.shape) + " and " + JSON.stringify(t.shape));
    return _tfjsCore.tidy(function() {
        var n = t.relu(), r = t.abs().neg();
        return n.sub(t.mul(e)).add(r.exp().log1p());
    });
}
function binaryCrossentropy(e, t) {
    return _tfjsCore.tidy(function() {
        var n;
        return n = _tfjsCore.clipByValue(t, epsilon(), 1 - epsilon()), n = _tfjsCore.log(_tfjsCore.div(n, _tfjsCore.sub(getScalar(1), n))), _tfjsCore.mean(sigmoidCrossEntropyWithLogits(e, n), -1);
    });
}
function kullbackLeiblerDivergence(e, t) {
    return _tfjsCore.tidy(function() {
        var n = _tfjsCore.clipByValue(e, epsilon(), 1), r = _tfjsCore.clipByValue(t, epsilon(), 1);
        return _tfjsCore.sum(_tfjsCore.mul(e, _tfjsCore.log(_tfjsCore.div(n, r))), -1);
    });
}
function poisson(e, t) {
    return _tfjsCore.tidy(function() {
        var n = _tfjsCore.log(_tfjsCore.add(getScalar(epsilon()), t));
        return _tfjsCore.mean(_tfjsCore.sub(t, _tfjsCore.mul(e, n)), -1);
    });
}
function cosineProximity(e, t) {
    return _tfjsCore.tidy(function() {
        var n = l2Normalize(e, -1), r = l2Normalize(t, -1), i = _tfjsCore.mul(n, r);
        return _tfjsCore.neg(_tfjsCore.sum(i, -1));
    });
}
function get(e) {
    var t = {
        meanSquaredError: meanSquaredError,
        meanAbsoluteError: meanAbsoluteError,
        meanAbsolutePercentageError: meanAbsolutePercentageError,
        meanSquaredLogarithmicError: meanSquaredLogarithmicError,
        squaredHinge: squaredHinge,
        hinge: hinge,
        categoricalHinge: categoricalHinge,
        logcosh: logcosh,
        categoricalCrossentropy: categoricalCrossentropy,
        sparseCategoricalCrossentropy: sparseCategoricalCrossentropy,
        binaryCrossentropy: binaryCrossentropy,
        kullbackLeiblerDivergence: kullbackLeiblerDivergence,
        poisson: poisson,
        cosineProximity: cosineProximity
    };
    if ("string" == typeof e) {
        if (e in t) return t[e];
        var n = "Unknown loss " + e;
        throw e.toLowerCase().includes("softmaxcrossentropy") && (n = "Unknown loss " + e + '. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy'), new ValueError(n);
    }
    return e;
}
function binaryAccuracy(e, t) {
    return _tfjsCore.tidy(function() {
        var n = _tfjsCore.mul(getScalar(0.5), _tfjsCore.onesLike(t)), r = cast$1(_tfjsCore.greater(t, n), e.dtype);
        return _tfjsCore.mean(_tfjsCore.equal(e, r), -1);
    });
}
function categoricalAccuracy(e, t) {
    return _tfjsCore.tidy(function() {
        return cast$1(_tfjsCore.equal(_tfjsCore.argMax(e, -1), _tfjsCore.argMax(t, -1)), "float32");
    });
}
function truePositives(e, t) {
    return _tfjsCore.tidy(function() {
        var n = getScalar(1);
        return _tfjsCore.logicalAnd(e.equal(n), t.equal(n)).sum().cast("float32");
    });
}
function falseNegatives(e, t) {
    return _tfjsCore.tidy(function() {
        var n = getScalar(1), r = getScalar(0);
        return _tfjsCore.logicalAnd(e.equal(n), t.equal(r)).sum().cast("float32");
    });
}
function falsePositives(e, t) {
    return _tfjsCore.tidy(function() {
        var n = getScalar(1), r = getScalar(0);
        return _tfjsCore.logicalAnd(e.equal(r), t.equal(n)).sum().cast("float32");
    });
}
function precision(e, t) {
    return _tfjsCore.tidy(function() {
        var n = getScalar(0), r = truePositives(e, t), i = falsePositives(e, t), a = r.add(i);
        return _tfjsCore.where(_tfjsCore.greater(a, n), r.div(a), n).cast("float32");
    });
}
function recall(e, t) {
    return _tfjsCore.tidy(function() {
        var n = getScalar(0), r = truePositives(e, t), i = falseNegatives(e, t), a = r.add(i);
        return _tfjsCore.where(_tfjsCore.greater(a, n), r.div(a), n).cast("float32");
    });
}
function binaryCrossentropy$1(e, t) {
    return binaryCrossentropy(e, t);
}
function sparseCategoricalAccuracy(e, t) {
    return e.rank === t.rank && (e = e.squeeze([
        e.rank - 1
    ])), (t = t.argMax(-1)).dtype !== e.dtype && (t = t.asType(e.dtype)), _tfjsCore.equal(e, t).asType("float32");
}
var mse$1 = meanSquaredError, MSE$1 = meanSquaredError, mae$1 = meanAbsoluteError, MAE$1 = meanAbsoluteError, mape$1 = meanAbsolutePercentageError, MAPE$1 = meanAbsolutePercentageError, categoricalCrossentropy$1 = categoricalCrossentropy, cosine$1 = cosineProximity, sparseCategoricalCrossentropy$1 = sparseCategoricalCrossentropy;
function get$1(e) {
    var t = {
        binaryAccuracy: binaryAccuracy,
        categoricalAccuracy: categoricalAccuracy,
        precision: precision,
        categoricalCrossentropy: categoricalCrossentropy$1,
        sparseCategoricalCrossentropy: sparseCategoricalCrossentropy$1,
        mse: mse$1,
        MSE: MSE$1,
        mae: mae$1,
        MAE: MAE$1,
        mape: mape$1,
        MAPE: MAPE$1,
        cosine: cosine$1
    };
    if ("string" == typeof e && e in t) return t[e];
    if ("string" != typeof e && null != e) return e;
    throw new ValueError("Unknown metric " + e);
}
function getOptimizer(e) {
    var t = {
        Adagrad: function() {
            return _tfjsCore.train.adagrad(0.01);
        },
        Adadelta: function() {
            return _tfjsCore.train.adadelta(1, 0.95, epsilon());
        },
        Adam: function() {
            return _tfjsCore.train.adam(0.001, 0.9, 0.999, epsilon());
        },
        Adamax: function() {
            return _tfjsCore.train.adamax(0.002, 0.9, 0.999, epsilon(), 0);
        },
        RMSProp: function() {
            return _tfjsCore.train.rmsprop(0.001, 0.9, 0, epsilon());
        },
        SGD: function() {
            return _tfjsCore.train.sgd(0.01);
        }
    };
    if (t.adagrad = t.Adagrad, t.adadelta = t.Adadelta, t.adam = t.Adam, t.adamax = t.Adamax, t.rmsprop = t.RMSProp, t.sgd = t.SGD, e in t) return t[e]();
    throw new ValueError("Unknown Optimizer " + e);
}
function printSummary(e39, t, n, r) {
    void 0 === r && (r = console.log);
    var i, a = isModelSequentialLike(e39), o = [
        "Layer (type)",
        "Output shape",
        "Param #"
    ];
    if (a ? (t = t || 65, n = n || [
        0.45,
        0.85,
        1
    ]) : (t = t || 98, n = n || [
        0.33,
        0.55,
        0.67,
        1
    ]), n[n.length - 1] <= 1 && (n = n.map(function(e) {
        return Math.floor(t * e);
    })), !a) for(var s in o.push("Receives inputs"), i = [], e39.nodesByDepth)i.push.apply(i, e39.nodesByDepth[s]);
    r("_".repeat(t)), printRow(o, n, r), r("=".repeat(t));
    for(var l = e39.layers, u = 0; u < l.length; ++u)a ? printLayerSummary(l[u], n, r) : printLayerSummaryWithConnections(l[u], n, i, r), r((u === l.length - 1 ? "=" : "_").repeat(t));
    e39.checkTrainableWeightsConsistency();
    var c = countTrainableParams(e39), p = countParamsInWeights(e39.nonTrainableWeights);
    r("Total params: " + (c + p)), r("Trainable params: " + c), r("Non-trainable params: " + p), r("_".repeat(t));
}
function countTrainableParams(e) {
    return null != e.collectedTrainableWeights ? countParamsInWeights(e.collectedTrainableWeights) : countParamsInWeights(e.trainableWeights);
}
function isModelSequentialLike(e) {
    var t = !0, n = [], r = [];
    for(var i in e.nodesByDepth)n.push(e.nodesByDepth[i]);
    for(var a = 0, o = n; a < o.length; a++){
        var s = o[a];
        if (s.length > 1 || 1 === s.length && s[0].inboundLayers.length > 1) {
            t = !1;
            break;
        }
        r.push.apply(r, s);
    }
    if (t) for(var l = 0, u = e.layers; l < u.length; l++){
        for(var c = !1, p = 0, h = u[l].inboundNodes; p < h.length; p++){
            var d = h[p];
            if (-1 !== r.indexOf(d)) {
                if (c) {
                    t = !1;
                    break;
                }
                c = !0;
            }
        }
        if (!t) break;
    }
    return t;
}
function printRow(e, t, n) {
    void 0 === n && (n = console.log);
    for(var r = "", i = 0; i < e.length; ++i)i > 0 && (r = r.slice(0, r.length - 1) + " "), r = (r += e[i]).slice(0, t[i]), r += " ".repeat(t[i] - r.length);
    n(r);
}
function printLayerSummary(e, t, n) {
    var r;
    try {
        r = JSON.stringify(e.outputShape);
    } catch (e40) {
        r = "multiple";
    }
    printRow([
        e.name + " (" + e.getClassName() + ")",
        r,
        e.countParams().toString()
    ], t, n);
}
function printLayerSummaryWithConnections(e, t, n, r) {
    var i;
    try {
        i = JSON.stringify(e.outputShape);
    } catch (e41) {
        i = "multiple";
    }
    for(var a = [], o = 0, s = e.inboundNodes; o < s.length; o++){
        var l = s[o];
        if (!(null != n && n.length > 0 && -1 === n.indexOf(l))) for(var u = 0; u < l.inboundLayers.length; ++u){
            var c = l.inboundLayers[u].name, p = l.nodeIndices[u], h = l.tensorIndices[u];
            a.push(c + "[" + p + "][" + h + "]");
        }
    }
    var d = e.name, f = e.getClassName(), g = 0 === a.length ? "" : a[0];
    printRow([
        d + " (" + f + ")",
        i,
        e.countParams().toString(),
        g
    ], t, r);
    for(u = 1; u < a.length; ++u)printRow([
        "",
        "",
        "",
        a[u]
    ], t, r);
}
function deserialize(e, t, n) {
    return void 0 === t && (t = {
    }), void 0 === n && (n = !1), deserializeKerasObject(e, _tfjsCore.serialization.SerializationMap.getMap().classNameMap, t, "layer", n);
}
function isArrayItemInputOrOutputName(e, t, n) {
    return ("inboundNodes" === e || "outputLayers" === e || "inputLayers" === e) && 0 === t && "string" == typeof n;
}
function convertPythonicToTs(e, t) {
    if (null === e) return null;
    if ("string" == typeof e) return toCamelCase(e);
    if ("number" == typeof e || "boolean" == typeof e) return e;
    if (e instanceof Array) {
        for(var n = [], r = e.length, i = 0; i < r; ++i){
            var a = e[i];
            isArrayItemInputOrOutputName(t, i, a) ? n.push(a) : n.push(convertPythonicToTs(a, t));
        }
        return n;
    }
    for(var o = {
    }, s = 0, l = Object.keys(e); s < l.length; s++){
        var u = l[s], c = e[u];
        if ("name" === u && "string" == typeof c) o[u] = c;
        else {
            var p = toCamelCase(u);
            o[p] = convertPythonicToTs(c, p);
        }
    }
    return o;
}
function convertTsToPythonic(e, t) {
    if (null === e || void 0 === e) return null;
    if ("string" == typeof e) return toSnakeCase(e);
    if ("number" == typeof e || "boolean" == typeof e) return e;
    if (e instanceof Array) {
        for(var n = [], r = e.length, i = 0; i < r; ++i){
            var a = e[i];
            isArrayItemInputOrOutputName(t, i, a) ? n.push(a) : n.push(convertTsToPythonic(a, t));
        }
        return n;
    }
    for(var o = {
    }, s = 0, l = Object.keys(e); s < l.length; s++){
        var u = l[s], c = e[u], p = toSnakeCase(u);
        o[p] = "name" !== u && "className" !== u || "string" != typeof c ? convertTsToPythonic(c, u) : c;
    }
    return o;
}
var version = "0.10.3";
function assertFeedCompatibility(e, t) {
    if (null == e.dtype || e.dtype === t.dtype) return t;
    try {
        return _tfjsCore.cast(t, e.dtype);
    } catch (n) {
        throw new ValueError("The dtype of the feed (" + t.dtype + ") can not be cast to the dtype of the key '" + e.name + "' (" + e.dtype + ").");
    }
}
var FeedDict = function() {
    function e42(t) {
        if (this.id2Value = {
        }, this.id2Mask = {
        }, this.name2Id = {
        }, t instanceof e42) for(var n in t.id2Value)this.id2Value[n] = t.id2Value[n], n in t.id2Mask && (this.id2Mask[n] = t.id2Mask[n]);
        else {
            if (null == t) return;
            for(var r = 0, i = t; r < i.length; r++){
                var a = i[r];
                this.add(a.key, a.value);
            }
        }
    }
    return e42.prototype.add = function(e, t, n) {
        if (null != this.id2Value[e.id]) throw new ValueError("Duplicate key: name=" + e.name + ", id=" + e.id);
        return this.id2Value[e.id] = assertFeedCompatibility(e, t), this.name2Id[e.name] = e.id, null != n && (this.id2Mask[e.id] = n), this;
    }, e42.prototype.addFeed = function(e) {
        this.add(e.key, e.value);
    }, e42.prototype.hasKey = function(e) {
        return null != this.id2Value[e.id];
    }, e42.prototype.names = function() {
        return Object.keys(this.name2Id);
    }, e42.prototype.getValue = function(e) {
        if (e instanceof SymbolicTensor) {
            if (null == this.id2Value[e.id]) throw new ValueError("Nonexistent key: " + e.name);
            return this.id2Value[e.id];
        }
        var t = this.name2Id[e];
        if (null == t) throw new ValueError("Feed dict has no SymbolicTensor name: " + e);
        return this.id2Value[t];
    }, e42.prototype.getMask = function(e) {
        if (e instanceof SymbolicTensor) {
            if (null == this.id2Value[e.id]) throw new ValueError("Nonexistent key: " + e.name);
            return this.id2Mask[e.id];
        }
        var t = this.name2Id[e];
        if (null == t) throw new ValueError("Feed dict has no SymbolicTensor name: " + e);
        return this.id2Mask[t];
    }, e42.prototype.disposeMasks = function() {
        null != this.id2Mask && _tfjsCore.dispose(this.id2Mask);
    }, e42;
}(), cachedSorted = {
}, cachedRecipientCounts = {
};
function execute(e43, t, n, r) {
    for(var i = null != n && n.training, a = Array.isArray(e43), o = a ? e43 : [
        e43
    ], s = o.map(function(e) {
        return e.name;
    }), l = [], u = t.names(), c = 0, p = s; c < p.length; c++){
        var h = p[c];
        -1 !== u.indexOf(h) ? l.push(t.getValue(h)) : l.push(null);
    }
    null != r && (r.maxNumTensors = -1 / 0, r.minNumTensors = 1 / 0);
    var d, f, g = s.join(",") + "|" + t.names().join(",");
    if (null == cachedSorted[g]) {
        var m = getTopologicalSortAndRecipientCounts(o, t);
        d = m.sorted, f = m.recipientCounts, cachedSorted[g] = d, cachedRecipientCounts[g] = f;
    }
    d = cachedSorted[g], f = {
    }, i || Object.assign(f, cachedRecipientCounts[g]);
    for(var y = new FeedDict(t), v = 0; v < d.length; ++v){
        if (null != r) {
            var b = _tfjsCore.memory().numTensors;
            b > r.maxNumTensors && (r.maxNumTensors = b), b < r.minNumTensors && (r.minNumTensors = b);
        }
        var w = d[v], z = w.sourceLayer;
        if (!(z instanceof InputLayer)) {
            for(var S = [], I = [], A = [], C = !1, N = 0, _ = w.inputs; N < _.length; N++){
                var E = _[N], k = y.getValue(E), L = y.getMask(E);
                S.push(k), I.push(L), null != L && (C = !0), i || (f[E.name]--, 0 !== f[E.name] || t.hasKey(E) || -1 !== s.indexOf(E.name) || k.isDisposed || A.push(k));
            }
            C && ((n = n || {
            }).mask = I[0]);
            var x = toList(z.apply(S, n)), T = null;
            z.supportsMasking && (T = z.computeMask(S, I));
            for(var D = getNodeOutputs(w), O = Array.isArray(D) ? D : [
                D
            ], R = 0; R < O.length; ++R){
                y.hasKey(O[R]) || y.add(O[R], x[R], Array.isArray(T) ? T[0] : T);
                var M = s.indexOf(O[R].name);
                -1 !== M && (l[M] = x[R]);
            }
            i || _tfjsCore.dispose(A);
        }
    }
    return y.disposeMasks(), a ? l : l[0];
}
function getTopologicalSortAndRecipientCounts(e, t30) {
    _tfjsCore.util.assert(null != e && e.length > 0, "Exepcted at least one fetch, got none");
    var n = [], r = {
    };
    if (1 === e.length) {
        var i = getTopologicalSortAndRecipientCountsForOneFetch(e[0], t30);
        n = i.sorted, r = i.recipientMap;
    } else for(var a = new Set, o = 0, s = e; o < s.length; o++){
        for(var l = getTopologicalSortAndRecipientCountsForOneFetch(s[o], t30), u = l.sorted, c = l.recipientMap, p = 0, h = u; p < h.length; p++){
            var d = h[p];
            a.has(d.name) || (n.push(d), a.add(d.name));
        }
        var f = function(e) {
            null == r[e] && (r[e] = new Set), c[e].forEach(function(t) {
                return r[e].add(t);
            });
        };
        for(var g in c)f(g);
    }
    return {
        sorted: n,
        recipientCounts: recipientMap2Counts(r)
    };
}
function recipientMap2Counts(e) {
    var t = {
    };
    for(var n in e)t[n] = e[n].size;
    return t;
}
function getTopologicalSortAndRecipientCountsForOneFetch(e, t) {
    for(var n = new Set, r = [], i = {
    }, a = 0, o = t.names(); a < o.length; a++){
        var s = o[a];
        n.add(s);
    }
    var l = [], u = [];
    for(l.push(e); l.length > 0;){
        var c = l[l.length - 1];
        if (n.has(c.name)) l.pop();
        else {
            var p = u[u.length - 1] === l.length - 1;
            if (0 === c.inputs.length || p) l.pop(), r.push(c), n.add(c.name), p && u.pop();
            else {
                u.push(l.length - 1);
                for(var h = 0, d = c.inputs; h < d.length; h++){
                    var f = d[h];
                    null == i[f.name] && (i[f.name] = new Set), i[f.name].add(c.name), n.has(f.name) || l.push(f);
                }
            }
        }
    }
    return {
        sorted: r,
        recipientMap: i
    };
}
function getNodeOutputs(e) {
    var t;
    if (1 === e.sourceLayer.inboundNodes.length) t = e.sourceLayer.output;
    else {
        for(var n = null, r = 0; r < e.sourceLayer.inboundNodes.length; ++r)for(var i = 0, a = e.sourceLayer.inboundNodes[r].outputTensors; i < a.length; i++)if (a[i].id === e.id) {
            n = r;
            break;
        }
        t = e.sourceLayer.getOutputAt(n);
    }
    return t;
}
function preprocessWeightsForLoading(e, t, n, r) {
    if (!n.startsWith("2.")) throw new ValueError("Unsupported Keras version in weights being loaded: " + n);
    return t;
}
function loadTensor(e, t, n) {
    var r = stringToDType(e);
    return _tfjsCore.Tensor.make(t, {
        values: 0 === t.length ? n : _tfjsCore.util.flatten(n)
    }, r);
}
function loadWeightsFromJson(e44, t, n) {
    void 0 === n && (n = !1);
    for(var r = e44.keras_version, i = e44.backend, a = t.map(function(e) {
        return e.name;
    }), o = {
    }, s = 0, l = t; s < l.length; s++)null != (b = l[s]).name && (null == o[b.name] && (o[b.name] = []), o[b.name].push(b));
    for(var u = e44.weights, c = [], p = 0; p < a.length; ++p){
        var h = a[p], d = u[h];
        null == d && (d = []);
        for(var f = [], g = 0; g < d.length; ++g){
            var m = d[g];
            f.push(new LayerVariable(loadTensor(m.dtype, m.shape, m.value)));
        }
        for(var y = 0, v = o[h]; y < v.length; y++){
            var b, w = (b = v[y]).weights;
            if ((f = preprocessWeightsForLoading(b, f, r, i)).length !== w.length) {
                if (!n) throw new ValueError("Layer #" + p + ' (named "' + b.name + '") expects ' + w.length + " weight(s), but the saved weights have " + f.length + " element(s).");
                console.warn("Skipping loading of weights of layer " + b.name + " due to mismatch in number of weights: (" + f.length + " vs " + w.length + ").");
            }
            for(var z = 0; z < f.length; ++z)!n || _tfjsCore.util.arraysEqual(w[z].shape, f[z].shape) ? c.push([
                w[z],
                f[z].read()
            ]) : console.warn("Skipping loading of weights for layer " + b.name + " due to mismatch in shape (" + w[z].shape + " vs " + f[z].shape + ")");
        }
    }
    batchSetValue(c);
}
function loadWeightsFromNamedTensorMap(e, t, n) {
    void 0 === n && (n = !0);
    for(var r = {
    }, i = 0, a = 0, o = t; a < o.length; a++)for(var s = 0, l = o[a].weights; s < l.length; s++){
        var u = l[s];
        if (null != r[u.originalName]) throw new ValueError("Duplicate weight name: " + u.originalName);
        r[u.originalName] = u, i++;
    }
    var c = [];
    for(var p in e){
        if (null != r[p]) c.push([
            r[p],
            e[p]
        ]);
        else if (n) throw new ValueError("Provided weight data has no target variable: " + p);
        delete r[p];
    }
    if (n) {
        var h = [];
        for(var d in r)h.push(d);
        if (h.length > 0) throw new ValueError(h.length + " of " + i + " weights are not set: " + h);
    }
    batchSetValue(c);
}
var Container = function(e45) {
    function t31(n3) {
        var r2 = e45.call(this, {
        }) || this;
        if (r2.containerNodes = new Set, r2.name = n3.name, null == r2.name) {
            var i = r2.getClassName().toLowerCase();
            r2.name = getUid(i);
        }
        if (r2.supportsMasking = !1, r2.trainable = !0, r2.updatable = !0, Array.isArray(n3.inputs) ? r2.inputs = n3.inputs.slice() : r2.inputs = [
            n3.inputs
        ], Array.isArray(n3.outputs) ? r2.outputs = n3.outputs.slice() : r2.outputs = [
            n3.outputs
        ], unique(r2.inputs).length !== r2.inputs.length) throw new ValueError("The list of inputs passed to the model is redundant. All inputs should only appear once. Found: " + r2.inputs.map(function(e) {
            return e.name;
        }));
        unique(r2.outputs).length !== r2.outputs.length && console.warn("The list of outputs passed to the model is redundant. All outputs should only appear once. Found: " + r2.outputs.map(function(e) {
            return e.name;
        })), r2.inputLayers = [], r2.inputLayersNodeIndices = [], r2.inputLayersTensorIndices = [], r2.outputLayers = [], r2.outputLayersNodeIndices = [], r2.outputLayersTensorIndices = [], r2.layers = [];
        for(var a4 = 0, o3 = r2.outputs; a4 < o3.length; a4++){
            var s = (N = o3[a4]).sourceLayer, l = N.nodeIndex, u = N.tensorIndex;
            r2.outputLayers.push(s), r2.outputLayersNodeIndices.push(l), r2.outputLayersTensorIndices.push(u);
        }
        for(var c1 = 0, p1 = r2.inputs; c1 < p1.length; c1++){
            s = (N = p1[c1]).sourceLayer, l = N.nodeIndex, u = N.tensorIndex;
            assert(0 === l, "input layer has >1 nodes"), assert(0 === u, "input layer has >1 tensors"), r2.inputLayers.push(s), r2.inputLayersNodeIndices.push(l), r2.inputLayersTensorIndices.push(u);
        }
        r2.inputNames = [], r2.outputNames = [], r2.feedInputShapes = [], r2.feedInputNames = [], r2.feedOutputNames = [];
        for(var h1 = 0; h1 < r2.inputLayers.length; h1++){
            if (!((s = r2.inputLayers[h1]) instanceof InputLayer)) throw new TypeError("Input layers to a Model must be InputLayer objects. Received inputs: " + n3.inputs + ". Input " + h1 + " (0-based) originates from layer type " + s.getClassName() + ".");
            r2.inputNames.push(s.name), r2.feedInputShapes.push(s.batchInputShape), r2.feedInputNames.push(s.name);
        }
        for(var d1 = 0, f1 = r2.outputLayers; d1 < f1.length; d1++){
            s = f1[d1];
            r2.outputNames.push(s.name);
        }
        r2.internalInputShapes = r2.inputs.map(function(e) {
            return e.shape;
        }), r2.internalOutputShapes = r2.outputs.map(function(e) {
            return e.shape;
        });
        for(var g = {
        }, m = {
        }, y = {
        }, v = {
        }, b = {
        }, w = [], z = function(e, n, i, a, o, s) {
            null != a && null != o && null != s || (a = e.sourceLayer, o = e.nodeIndex, s = e.tensorIndex);
            var l = a.inboundNodes[o];
            if (-1 !== i.indexOf(l)) throw new RuntimeError("The tensor " + e.name + ' at layer "' + a.name + '" is part of a cycle.');
            if (-1 === n.indexOf(l)) {
                r2.containerNodes.add(t31.nodeKey(a, o)), (a.id in b) || (b[a.id] = Object.keys(b).length), -1 === i.indexOf(l) && i.push(l);
                for(var u = l.inboundLayers.length, c = 0; c < u; c++){
                    var p = l.inputTensors[c], h = l.inboundLayers[c], d = l.nodeIndices[c], f = l.tensorIndices[c];
                    z(p, n, i, h, d, f);
                }
                for(n.push(l); i.indexOf(l) >= 0;)i.splice(i.indexOf(l), 1);
                w.push(l);
            }
        }, S = [], I = [], A = 0, C = r2.outputs; A < C.length; A++){
            var N = C[A];
            z(N, S, I);
        }
        for(var _ = 0, E = w.slice().reverse(); _ < E.length; _++){
            m[(K = E[_]).id] = K, K.id in g || (g[K.id] = 0);
            var k = g[K.id], L = null == y[K.outboundLayer.id] ? 0 : y[K.outboundLayer.id];
            k = Math.max(k, L), y[K.outboundLayer.id] = k, v[K.outboundLayer.id] = K.outboundLayer, g[K.id] = k;
            for(h1 = 0; h1 < K.inboundLayers.length; h1++){
                var x = K.inboundLayers[h1], T = (l = K.nodeIndices[h1], x.inboundNodes[l]), D = null == g[T.id] ? 0 : g[T.id];
                g[T.id] = Math.max(k + 1, D), m[T.id] = T;
            }
        }
        var O = {
        };
        for(var R in g)(k = g[R]) in O || (O[k] = []), O[k].push(m[R]);
        var M = {
        };
        for(var P in y)(k = y[P]) in M || (M[k] = []), M[k].push(v[P]);
        var F = Object.keys(M).map(function(e) {
            return parseInt(e, 10);
        }).sort(reverseNumberCompare);
        r2.layers = [];
        for(var V = 0, B = F; V < B.length; V++){
            var U = M[k = B[V]];
            U.sort(function(e, t) {
                var n = b[e.id], r = b[t.id];
                return n < r ? -1 : n > r ? 1 : 0;
            });
            for(var j = 0, W = U; j < W.length; j++){
                s = W[j];
                r2.layers.push(s);
            }
        }
        r2.layersByDepth = M, F = Object.keys(O).map(function(e) {
            return parseInt(e, 10);
        }).sort(reverseNumberCompare);
        for(var $ = r2.inputs.slice(), q = [], G = 0, H = F; G < H.length; G++)for(var J = 0, Z = O[k = H[G]]; J < Z.length; J++){
            var K;
            if (null != (s = (K = Z[J]).outboundLayer)) {
                for(var Y = 0, X = K.inputTensors; Y < X.length; Y++){
                    N = X[Y];
                    if (-1 === $.indexOf(N)) throw new RuntimeError("Graph disconnected: cannot obtain value for tensor " + N + ' at layer "' + s.name + '". The following previous layers were accessed without issue: ' + q);
                }
                for(var Q = 0, ee = K.outputTensors; Q < ee.length; Q++){
                    N = ee[Q];
                    $.push(N);
                }
                q.push(s.name);
            }
        }
        r2.nodesByDepth = O;
        for(var te = r2.layers.map(function(e) {
            return e.name;
        }), ne = function(e) {
            var t32 = te.filter(function(t) {
                return t === e;
            }).length;
            if (1 !== t32) throw new RuntimeError('The name "' + e + '" is used ' + t32 + " times in the model. All layer names should be unique. Layer names: " + JSON.stringify(te));
        }, re = 0, ie = te; re < ie.length; re++)ne(ie[re]);
        return r2.outboundNodes = [], r2.inboundNodes = [], new Node({
            outboundLayer: r2,
            inboundLayers: [],
            nodeIndices: [],
            tensorIndices: [],
            inputTensors: r2.inputs,
            outputTensors: r2.outputs,
            inputMasks: r2.inputs.map(function(e) {
                return null;
            }),
            outputMasks: r2.outputs.map(function(e) {
                return null;
            }),
            inputShapes: r2.inputs.map(function(e) {
                return e.shape;
            }),
            outputShapes: r2.outputs.map(function(e) {
                return e.shape;
            })
        }), r2.built = !0, r2._refCount = 1, r2;
    }
    return __extends(t31, e45), t31.prototype.assertNotDisposed = function() {
        if (0 === this._refCount) throw new Error("Container '" + this.name + "' is already disposed.");
    }, t31.prototype.dispose = function() {
        this.assertNotDisposed();
        var e = {
            refCountAfterDispose: null,
            numDisposedVariables: 0
        };
        if (0 == --this._refCount) for(var t = 0, n = this.layers; t < n.length; t++){
            var r = n[t];
            e.numDisposedVariables += r.dispose().numDisposedVariables;
        }
        return e.refCountAfterDispose = this._refCount, e;
    }, Object.defineProperty(t31.prototype, "trainableWeights", {
        get: function() {
            if (this._trainableWeights.length > 0) throw new ValueError("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");
            if (!this.trainable) return [];
            for(var e = [], t = 0, n = this.layers; t < n.length; t++){
                var r = n[t];
                e = e.concat(r.trainableWeights);
            }
            return e;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t31.prototype, "nonTrainableWeights", {
        get: function() {
            for(var e = [], t = 0, n = this.layers; t < n.length; t++){
                var r = n[t];
                e.push.apply(e, r.nonTrainableWeights);
            }
            if (!this.trainable) {
                for(var i = [], a = 0, o = this.layers; a < o.length; a++){
                    r = o[a];
                    i.push.apply(i, r.trainableWeights);
                }
                return i.concat(e);
            }
            return e;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t31.prototype, "weights", {
        get: function() {
            return this.trainableWeights.concat(this.nonTrainableWeights);
        },
        enumerable: !0,
        configurable: !0
    }), t31.prototype.loadWeights = function(e, t, n, r) {
        void 0 === t && (t = !1), void 0 === n && (n = !1), void 0 === r && (r = !0), n ? loadWeightsFromNamedTensorMap(e, this.layers, r) : loadWeightsFromJson(e, this.layers, t);
    }, t31.prototype.updatedConfig = function() {
        var e = this.getConfig();
        return {
            className: this.getClassName(),
            config: e,
            kerasVersion: "tfjs-layers " + version,
            backend: "TensorFlow.js"
        };
    }, t31.prototype.toJSON = function(e, t) {
        void 0 === t && (t = !0);
        var n = convertTsToPythonic(this.updatedConfig());
        return t ? JSON.stringify(n) : n;
    }, t31.prototype.call = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            e = toList(e);
            for(var r = new FeedDict, i = 0; i < n.inputs.length; ++i)r.add(n.inputs[i], e[i]);
            return execute(n.outputs, r, t);
        });
    }, t31.prototype.computeMask = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            var r;
            return e = toList(e), r = null == t ? pyListRepeat(null, e.length) : toList(t), n.runInternalGraph(e, r)[1];
        });
    }, t31.prototype.computeOutputShape = function(e46) {
        var t = normalizeShapeList(e46);
        if (t.length !== this.inputLayers.length) throw new ValueError("Invalid inputShape argument " + e46 + ": model has " + this.inputLayers.length + " tensor inputs.");
        for(var n = {
        }, r = 0; r < t.length; r++){
            var i = this.inputLayers[r], a = t[r];
            n[I = i.name + "_0_0"] = a;
        }
        var o = Object.keys(this.nodesByDepth).map(function(e) {
            return parseInt(e, 10);
        }).sort(reverseNumberCompare);
        if (o.length > 1) for(var s = 0, l = o; s < l.length; s++)for(var u = l[s], c = 0, p = this.nodesByDepth[u]; c < p.length; c++){
            var h = p[c];
            i = h.outboundLayer;
            if (-1 === this.inputLayers.map(function(e) {
                return e.id;
            }).indexOf(i.id)) {
                for(var d = [], f = 0; f < h.inboundLayers.length; f++){
                    var g = h.inboundLayers[f], m = h.nodeIndices[f], y = h.tensorIndices[f], v = n[I = g.name + "_" + m + "_" + y];
                    d.push(v);
                }
                var b = normalizeShapeList(i.computeOutputShape(singletonOrArray(d))), w = i.inboundNodes.indexOf(h);
                for(f = 0; f < b.length; f++)n[I = i.name + "_" + w + "_" + f] = b[f];
            }
        }
        var z = [], S = [];
        for(r = 0; r < this.outputLayers.length; r++){
            i = this.outputLayers[r], w = this.outputLayersNodeIndices[r], y = this.outputLayersTensorIndices[r];
            var I = i.name + "_" + w + "_" + y;
            S.push(I);
        }
        for(r = 0; r < S.length; r++){
            var A = S[r];
            assert(A in n), z.push(n[A]);
        }
        return singletonOrArray(z);
    }, t31.prototype.runInternalGraph = function(e47, t) {
        null == t && (t = pyListRepeat(null, e47.length));
        for(var n = {
        }, r = 0; r < this.inputs.length; ++r){
            var i = this.inputs[r], a = e47[r], o = t[r];
            n[i.id] = [
                a,
                o
            ];
        }
        for(var s = 0, l = Object.keys(this.nodesByDepth).map(function(e) {
            return parseInt(e, 10);
        }).sort(reverseNumberCompare); s < l.length; s++)for(var u = l[s], c = 0, p = this.nodesByDepth[u]; c < p.length; c++){
            for(var h = p[c], d = h.outboundLayer, f = h.inputTensors, g = h.outputTensors, m = new Array, y = 0, v = f; y < v.length; y++)(i = v[y]).id in n && m.push(n[i.id]);
            if (m.length === f.length) {
                var b = {
                }, w = void 0, z = void 0, S = void 0, I = void 0;
                if (null != h.callArgs && (b = h.callArgs), 1 === m.length) {
                    var A = m[0], C = A[0], N = A[1];
                    null == b.mask && (b.mask = N), S = toList(d.call(C, b)), I = toList(d.computeMask(C, N)), w = [
                        C
                    ], z = [
                        N
                    ];
                } else w = m.map(function(e) {
                    return e[0];
                }), z = m.map(function(e) {
                    return e[1];
                }), null == b.mask && (b.mask = z), S = toList(d.call(w, b)), I = toList(d.computeMask(w, z));
                if (d.activityRegularizer) throw new NotImplementedError("Model invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");
                for(r = 0; r < g.length; ++r){
                    i = g[r], a = S[r], o = I[r];
                    n[i.id] = [
                        a,
                        o
                    ];
                }
            }
        }
        for(var _ = [], E = [], k = [], L = 0, x = this.outputs; L < x.length; L++){
            assert((i = x[L]).id in n, "Could not compute output " + i.name + " : " + i.id);
            var T = n[i.id], D = T[0];
            o = T[1];
            k.push(D.shape), _.push(D), E.push(o);
        }
        return [
            _,
            E,
            k
        ];
    }, t31.prototype.buildNodeConversionMap = function(e) {
        for(var n, r = {
        }, i = 0, a = this.layers; i < a.length; i++){
            var o = a[i];
            n = o instanceof t31 ? 1 : 0;
            for(var s = 0; s < o.inboundNodes.length; s++){
                var l = t31.nodeKey(o, s);
                this.containerNodes.has(l) && (r[l] = n, n += 1);
            }
        }
        return r;
    }, t31.prototype.getLayer = function(e, t) {
        if (null != t) {
            if (this.layers.length <= t) throw new ValueError("Was asked to retrieve layer at index " + t + ", but model only has " + this.layers.length + " layer(s).");
            return this.layers[t];
        }
        if (null == e) throw new ValueError("Provide either a layer name or layer index");
        for(var n = 0, r = this.layers; n < r.length; n++){
            var i = r[n];
            if (i.name === e) return i;
        }
        throw new ValueError("No such layer: " + e);
    }, t31.prototype.calculateLosses = function() {
        var e = this;
        return _tfjsCore.tidy(function() {
            for(var n = [], r = 0, i = e.layers; r < i.length; r++)for(var a = i[r], o = 0; o < a.inboundNodes.length; ++o){
                var s = t31.nodeKey(a, o);
                e.containerNodes.has(s) && n.push.apply(n, a.calculateLosses());
            }
            return n;
        });
    }, t31.prototype.getConfig = function() {
        for(var e = {
            name: this.name
        }, n = this.buildNodeConversionMap(this.layers), r = [], i = 0, a = this.layers; i < a.length; i++){
            for(var o = (b = a[i]).getClassName(), s = b.getConfig(), l = [], u = 0; u < b.inboundNodes.length; u++){
                var c = b.inboundNodes[u], p = t31.nodeKey(b, u), h = {
                };
                if (this.containerNodes.has(p)) {
                    if (c.callArgs) try {
                        JSON.stringify(c.callArgs), h = c.callArgs;
                    } catch (e) {
                        console.warn("Layer " + b.name + " was passed non-serializable keyword arguments: " + c.callArgs + ". They will not be included in the serialized model (and thus will be missing at deserialization time)."), h = {
                        };
                    }
                    if (c.inboundLayers.length > 0) {
                        for(var d = [], f = 0; f < c.inboundLayers.length; f++){
                            var g = c.inboundLayers[f], m = c.nodeIndices[f], y = c.tensorIndices[f];
                            null == (z = n[t31.nodeKey(g, m)]) && (z = 0), d.push([
                                g.name,
                                z,
                                y,
                                h
                            ]);
                        }
                        l.push(d);
                    }
                }
            }
            r.push({
                name: b.name,
                className: o,
                config: s,
                inboundNodes: l
            });
        }
        e.layers = r;
        var v = [];
        for(f = 0; f < this.inputLayers.length; f++){
            var b = this.inputLayers[f];
            m = this.inputLayersNodeIndices[f], p = t31.nodeKey(b, m);
            if (this.containerNodes.has(p)) {
                null !== (z = n[p]) && void 0 !== z || (z = 0);
                y = this.inputLayersTensorIndices[f];
                v.push([
                    b.name,
                    z,
                    y
                ]);
            }
        }
        e.inputLayers = v;
        var w = [];
        for(f = 0; f < this.outputLayers.length; f++){
            b = this.outputLayers[f], m = this.outputLayersNodeIndices[f], p = t31.nodeKey(b, m);
            if (this.containerNodes.has(p)) {
                var z;
                null !== (z = n[p]) && void 0 !== z || (z = 0);
                y = this.outputLayersTensorIndices[f];
                w.push([
                    b.name,
                    z,
                    y
                ]);
            }
        }
        return e.outputLayers = w, e;
    }, t31.fromConfig = function(e48, t33, n4, r3) {
        void 0 === n4 && (n4 = {
        }), void 0 === r3 && (r3 = !1);
        var i = {
        }, a5 = {
        };
        function o(e, t) {
            e.name in a5 ? a5[e.name].push(t) : a5[e.name] = [
                t
            ];
        }
        function s2(e, t) {
            for(var n, r = [], a = 0, s = t; a < s.length; a++){
                var l = s[a], u = l[0], c = l[1], p = l[2];
                if (3 === l.length) n = {
                };
                else {
                    if (4 !== l.length) throw new ValueError("Improperly formatted model config for layer " + JSON.stringify(e) + ": " + JSON.stringify(l));
                    n = l[3];
                }
                if (!(u in i)) return void o(e, t);
                var h = i[u];
                if (h.inboundNodes.length <= c) return void o(e, t);
                var d = h.inboundNodes[c];
                r.push(d.outputTensors[p]);
            }
            r.length > 0 && e.apply(singletonOrArray(r), n);
        }
        function l4(e) {
            var n = e.name, a = deserialize(e, null != t33.customObjects ? t33.customObjects : {
            });
            a.setFastWeightInitDuringBuild(r3), i[n] = a;
            for(var s = 0, l = e.inboundNodes; s < l.length; s++){
                var u = l[s];
                if (!(u instanceof Array)) throw new ValueError("Corrupted configuration, expected array for nodeData: " + u);
                o(a, u);
            }
        }
        for(var u2 = t33.name, c2 = t33.layers, p = 0, h2 = c2; p < h2.length; p++)l4(g = h2[p]);
        for(; !isObjectEmpty(a5);)for(var d2 = 0, f = c2; d2 < f.length; d2++){
            var g = f[d2];
            if ((k = i[g.name]).name in a5) {
                var m = a5[k.name];
                delete a5[k.name];
                for(var y = 0, v = m; y < v.length; y++)s2(k, v[y]);
            }
        }
        for(var b = [], w = [], z = 0, S = t33.inputLayers; z < S.length; z++){
            var I = (g = S[z])[0], A = g[1], C = g[2];
            assert(I in i);
            var N = (k = i[I]).inboundNodes[A].outputTensors;
            b.push(N[C]);
        }
        for(var _ = 0, E = t33.outputLayers; _ < E.length; _++){
            I = (g = E[_])[0], A = g[1], C = g[2];
            assert(I in i);
            var k;
            N = (k = i[I]).inboundNodes[A].outputTensors;
            w.push(N[C]);
        }
        return new e48({
            inputs: b,
            outputs: w,
            name: u2
        });
    }, Object.defineProperty(t31.prototype, "stateful", {
        get: function() {
            if (this._stateful) throw new ValueError("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");
            for(var e = 0, t = this.layers; e < t.length; e++){
                if (t[e].stateful) return !0;
            }
            return !1;
        },
        enumerable: !0,
        configurable: !0
    }), t31.prototype.resetStates = function() {
        var e49 = this;
        _tfjsCore.tidy(function() {
            e49.layers.forEach(function(e) {
                e.stateful && e.resetStates();
            });
        });
    }, t31;
}(Layer), DEFAULT_VALIDATION_BATCH_SIZE = 32;
function standardizeDataIteratorOutput(e, t) {
    if (e.outputs.length > 1) throw new NotImplementedError("Support for training a model with multiple output tensors with a dataset object is not implemented yet.");
    _tfjsCore.util.assert(Array.isArray(t) && 2 === t.length, "Dataset iterator for fitDataset() is expected to generate an Array of length 2: `[xs, ys]`, but instead generates " + t);
    var n = t, r = n[0], i = n[1];
    if (r instanceof _tfjsCore.Tensor) return _tfjsCore.util.assert(1 === e.inputs.length, "Model has multiple " + e.inputs.length + " inputs, hence it expects the input dataset to generate a dictionary of tensors  (with keys " + JSON.stringify(e.inputNames) + ", but received a single tensor."), _tfjsCore.util.assert(r.shape[0] === i.shape[0], "Mismatch in batch size between x and y tensors (" + r.shape[0] + " vs. " + i.shape[0] + ")"), [
        r,
        i
    ];
    var a = void 0;
    for(var o = [], s = 0, l = e.inputNames; s < l.length; s++){
        var u = l[s];
        if (null == r[u]) throw new ValueError("The feature data generated by the dataset lacks the required input key '" + u + "'.");
        o.push(r[u]), null == a ? a = r[u].shape[0] : _tfjsCore.util.assert(r[u].shape[0] === a, "Mismatch in batch size between x and y tensors (" + r[u].shape[0] + " vs. " + i.shape[0] + ")");
    }
    return o.concat(i);
}
function standardizeTensorValidationData(e) {
    if (3 === e.length) throw new NotImplementedError("Validation with sample weights is not implemented yet.");
    return {
        xs: e[0],
        ys: e[1]
    };
}
function fitDataset(e50, t, n) {
    return __awaiter(this, void 0, void 0, function() {
        var r, i, a, o, s, l, u, c, p, h, d, f, g, m, y, v, b, w, z, S, I, A, C, N, _, E, k;
        return __generator(this, function(L) {
            switch(L.label){
                case 0:
                    if (r = null != n.batchesPerEpoch, _tfjsCore.util.assert(null != e50.optimizer, "You must compile a model before training/testing. Use Model.compile(modelCompileConfig)."), _tfjsCore.util.assert(null != n, "For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."), _tfjsCore.util.assert(null != n.epochs && n.epochs > 0 && Number.isInteger(n.epochs), "For fitDataset(), config.epochs is expected to be a positive integer, but got " + n.epochs), _tfjsCore.util.assert(!r || n.batchesPerEpoch > 0 && Number.isInteger(n.batchesPerEpoch), "For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got " + n.batchesPerEpoch), _tfjsCore.util.assert(null == n.validationSplit, "`validationSplit` is not supported by `fitDataset()`. Use validationData instead."), e50.isTraining) throw new Error("Cannot start training because another fit() call is ongoing.");
                    e50.isTraining = !0, L.label = 1;
                case 1:
                    return L.trys.push([
                        1,
                        ,
                        22,
                        23
                    ]), i = null != n.validationData, a = void 0, o = void 0, i && (isDatasetObject(n.validationData) ? _tfjsCore.util.assert(null == n.validationBatches || n.validationBatches > 0 && Number.isInteger(n.validationBatches), "For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got " + n.validationBatches) : (s = standardizeTensorValidationData(n.validationData), a = s.xs, o = s.ys)), l = e50.makeTrainFunction(), u = e50.getDedupedMetricsNames(), c = void 0, c = i ? u.slice().concat(u.map(function(e) {
                        return "val_" + e;
                    })) : u.slice(), p = standardizeCallbacks(n.callbacks), h = null == n.verbose ? 1 : n.verbose, d = configureCallbacks(p, n.yieldEvery, h, n.epochs, null, null, getStepsPerEpoch(t, n), null, i, c), f = d.callbackList, g = d.history, f.setModel(e50), e50.history = g, [
                        4,
                        f.onTrainBegin()
                    ];
                case 2:
                    return L.sent(), e50.stopTraining_ = !1, m = null == n.initialEpoch ? 0 : n.initialEpoch, [
                        4,
                        t.iterator()
                    ];
                case 3:
                    y = L.sent(), L.label = 4;
                case 4:
                    return m < n.epochs ? (v = {
                    }, [
                        4,
                        f.onEpochBegin(m)
                    ]) : [
                        3,
                        19
                    ];
                case 5:
                    return L.sent(), b = 0, w = 0, r ? [
                        3,
                        7
                    ] : [
                        4,
                        t.iterator()
                    ];
                case 6:
                    y = L.sent(), L.label = 7;
                case 7:
                    return !r || b < n.batchesPerEpoch ? [
                        4,
                        y.next()
                    ] : [
                        3,
                        17
                    ];
                case 8:
                    return z = L.sent(), r && z.done ? (console.warn("You provided `batchesPerEpoch` as " + n.batchesPerEpoch + ", but your dataset iterator ran out of data after " + b + " batches; interrupting training. Make sure that your dataset can generate at least `batchesPerEpoch * epochs` batches (in this case, " + n.batchesPerEpoch * n.epochs + " batches). You may need to use the repeat() function when building your dataset."), [
                        3,
                        17
                    ]) : null == z.value ? [
                        3,
                        11
                    ] : (S = standardizeDataIteratorOutput(e50, z.value), (I = {
                    }).batch = w, I.size = S[0].shape[0], [
                        4,
                        f.onBatchBegin(w, I)
                    ]);
                case 9:
                    for(L.sent(), A = l(S), _tfjsCore.dispose(S), k = 0; k < u.length; ++k)C = u[k], N = A[k], I[C] = N, _tfjsCore.keep(N);
                    return [
                        4,
                        f.onBatchEnd(w, I)
                    ];
                case 10:
                    L.sent(), disposeTensorsInLogs(I), w++, b++, L.label = 11;
                case 11:
                    return (r ? b >= n.batchesPerEpoch : z.done) ? i ? (_ = void 0, isDatasetObject(n.validationData) ? (E = toList, [
                        4,
                        e50.evaluateDataset(n.validationData, {
                            batches: n.validationBatches
                        })
                    ]) : [
                        3,
                        13
                    ]) : [
                        3,
                        15
                    ] : [
                        3,
                        16
                    ];
                case 12:
                    return _ = E.apply(void 0, [
                        L.sent()
                    ]), [
                        3,
                        14
                    ];
                case 13:
                    _ = toList(e50.evaluate(a, o, {
                        batchSize: null == n.validationBatchSize ? DEFAULT_VALIDATION_BATCH_SIZE : n.validationBatchSize,
                        verbose: 0
                    })), L.label = 14;
                case 14:
                    for(k = 0; k < e50.metricsNames.length; ++k)v["val_" + e50.metricsNames[k]] = _[k];
                    L.label = 15;
                case 15:
                    return [
                        3,
                        17
                    ];
                case 16:
                    return e50.stopTraining_ ? [
                        3,
                        17
                    ] : [
                        3,
                        7
                    ];
                case 17:
                    return [
                        4,
                        f.onEpochEnd(m, v)
                    ];
                case 18:
                    return L.sent(), m++, e50.stopTraining_ ? [
                        3,
                        19
                    ] : [
                        3,
                        4
                    ];
                case 19:
                    return [
                        4,
                        f.onTrainEnd()
                    ];
                case 20:
                    return L.sent(), [
                        4,
                        e50.history.syncData()
                    ];
                case 21:
                    return L.sent(), [
                        2,
                        e50.history
                    ];
                case 22:
                    return e50.isTraining = !1, [
                        7
                    ];
                case 23:
                    return [
                        2
                    ];
            }
        });
    });
}
function getStepsPerEpoch(e, t) {
    var n = null;
    return null != t.batchesPerEpoch ? n = t.batchesPerEpoch : Number.isFinite(e.size) && (n = e.size), n;
}
function isDatasetObject(e) {
    return "function" == typeof e.iterator;
}
function isLazyIteratorObject(e) {
    return "function" == typeof e.next;
}
function evaluateDataset(e, t34, n5) {
    return __awaiter(this, void 0, void 0, function() {
        var r, i, a, o, s3, l, u, c3, p2, h3;
        return __generator(this, function(d3) {
            switch(d3.label){
                case 0:
                    if (r = null != (n5 = n5 || {
                    }).batches, i = e.testFunction, a = [], n5.verbose > 0) throw new NotImplementedError("Verbose mode is not implemented yet.");
                    return _tfjsCore.util.assert(!r || n5.batches > 0 && Number.isInteger(n5.batches), "Test loop expects `batches` to be a positive integer, but received " + JSON.stringify(n5.batches)), isLazyIteratorObject(t34) ? (s3 = t34, [
                        3,
                        3
                    ]) : [
                        3,
                        1
                    ];
                case 1:
                    return [
                        4,
                        t34.iterator()
                    ];
                case 2:
                    s3 = d3.sent(), d3.label = 3;
                case 3:
                    o = s3, l = 0, u = 0, c3 = function() {
                        var t35, s, c, p, h, d;
                        return __generator(this, function(f) {
                            switch(f.label){
                                case 0:
                                    return [
                                        4,
                                        o.next()
                                    ];
                                case 1:
                                    if ((t35 = f.sent()).value) {
                                        if (s = standardizeDataIteratorOutput(e, t35.value), c = _tfjsCore.tidy(function() {
                                            return i(s);
                                        }), _tfjsCore.dispose(s), 0 === u) for(d = 0; d < c.length; ++d)a.push(getScalar(0));
                                        for(p = s[0].shape[0], h = function(e) {
                                            var t = c[e], n = a[e];
                                            a[e] = _tfjsCore.tidy(function() {
                                                return _tfjsCore.add(a[e], _tfjsCore.mul(getScalar(p), t));
                                            }), u > 0 && _tfjsCore.dispose(n);
                                        }, d = 0; d < c.length; ++d)h(d);
                                        _tfjsCore.dispose(c), l += p, ++u;
                                    }
                                    return t35.done ? (r && console.warn("Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least `batches` batches (in this case, " + n5.batches + " batches). You may need to use the repeat() function when building your dataset."), [
                                        2,
                                        "break"
                                    ]) : [
                                        2
                                    ];
                            }
                        });
                    }, d3.label = 4;
                case 4:
                    return !r || u < n5.batches ? [
                        5,
                        c3()
                    ] : [
                        3,
                        6
                    ];
                case 5:
                    return "break" === d3.sent() ? [
                        3,
                        6
                    ] : [
                        3,
                        4
                    ];
                case 6:
                    for(p2 = function(e) {
                        var t = a[e];
                        a[e] = _tfjsCore.tidy(function() {
                            return _tfjsCore.div(a[e], getScalar(l));
                        }), _tfjsCore.dispose(t);
                    }, h3 = 0; h3 < a.length; ++h3)p2(h3);
                    return [
                        2,
                        singletonOrArray(a)
                    ];
            }
        });
    });
}
function checkBatchSize(e) {
    _tfjsCore.util.assert(e > 0 && Number.isInteger(e), "batchSize is required to be a positive integer, but got " + e);
}
function sliceArrays(e51, t, n) {
    return null == e51 ? [
        null
    ] : Array.isArray(e51) ? e51.map(function(e) {
        return sliceAlongFirstAxis(e, t, n - t);
    }) : sliceAlongFirstAxis(e51, t, n - t);
}
function sliceArraysByIndices(e52, t) {
    return _tfjsCore.tidy(function() {
        return null == e52 ? null : Array.isArray(e52) ? e52.map(function(e) {
            return sliceArraysByIndices(e, t);
        }) : gather$1(e52, "int32" === t.dtype ? t : t.toInt());
    });
}
function makeBatches(e, t) {
    for(var n = [], r = 0, i = null; r < e;)(i = r + t) >= e && (i = e), n.push([
        r,
        i
    ]), r = i;
    return n;
}
function fitLoop(e, t, n, r, i, a6, o4, s4, l, u, c4, p3, h4, d4, f2, g1) {
    return __awaiter(this, void 0, void 0, function() {
        var m, y1, v1, b1, w1, z1, S, I;
        return __generator(this, function(A) {
            switch(A.label){
                case 0:
                    if (null == i && (i = 32), null == a6 && (a6 = 1), null == c4 && (c4 = !0), null == h4 && (h4 = 0), m = !1, null != l && null != u && (m = !0), null != f2 && (m = !0, null == d4)) throw new ValueError("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");
                    return null != (y1 = e.checkNumSamples(n, i, d4, "steps_per_epoch")) && (v1 = range(0, y1)), null == o4 && (o4 = 1), b1 = configureCallbacks(s4, g1, o4, a6, h4, y1, d4, i, m, p3), w1 = b1.callbackList, z1 = b1.history, w1.setModel(e), e.history = z1, [
                        4,
                        w1.onTrainBegin()
                    ];
                case 1:
                    A.sent(), e.stopTraining_ = !1, S = function(a7) {
                        var o, s, p, h5, f3;
                        return __generator(this, function(g2) {
                            switch(g2.label){
                                case 0:
                                    return [
                                        4,
                                        w1.onEpochBegin(a7)
                                    ];
                                case 1:
                                    if (g2.sent(), o = {
                                    }, null == d4) return [
                                        3,
                                        2
                                    ];
                                    throw new NotImplementedError("stepsPerEpoch mode is not implemented yet.");
                                case 2:
                                    if ("batch" === c4) throw new NotImplementedError("batch shuffling is not implemneted yet");
                                    c4 && _tfjsCore.util.shuffle(v1), s = _tfjsCore.tensor1d(v1), p = makeBatches(y1, i), h5 = function(a) {
                                        var c;
                                        return __generator(this, function(h6) {
                                            switch(h6.label){
                                                case 0:
                                                    return c = {
                                                    }, [
                                                        4,
                                                        w1.onBatchBegin(a, c)
                                                    ];
                                                case 1:
                                                    return h6.sent(), _tfjsCore.tidy(function() {
                                                        var h = p[a][0], d = p[a][1], f = sliceAlongFirstAxis(s, h, d - h);
                                                        c.batch = a, c.size = d - h;
                                                        for(var g = sliceArraysByIndices(n, f), y = t(g), v = 0; v < r.length; ++v){
                                                            var b = r[v], w = y[v];
                                                            c[b] = w, _tfjsCore.keep(w);
                                                        }
                                                        if (a === p.length - 1 && m) {
                                                            var z = e.testLoop(l, u, i);
                                                            for(v = 0; v < r.length; ++v){
                                                                b = r[v], w = z[v];
                                                                _tfjsCore.keep(w), o["val_" + b] = w;
                                                            }
                                                        }
                                                    }), [
                                                        4,
                                                        w1.onBatchEnd(a, c)
                                                    ];
                                                case 2:
                                                    return h6.sent(), disposeTensorsInLogs(c), e.stopTraining_ ? [
                                                        2,
                                                        "break"
                                                    ] : [
                                                        2
                                                    ];
                                            }
                                        });
                                    }, f3 = 0, g2.label = 3;
                                case 3:
                                    return f3 < p.length ? [
                                        5,
                                        h5(f3)
                                    ] : [
                                        3,
                                        6
                                    ];
                                case 4:
                                    if ("break" === g2.sent()) return [
                                        3,
                                        6
                                    ];
                                    g2.label = 5;
                                case 5:
                                    return ++f3, [
                                        3,
                                        3
                                    ];
                                case 6:
                                    s.dispose(), g2.label = 7;
                                case 7:
                                    return [
                                        4,
                                        w1.onEpochEnd(a7, o)
                                    ];
                                case 8:
                                    return g2.sent(), e.stopTraining_ ? [
                                        2,
                                        "break"
                                    ] : [
                                        2
                                    ];
                            }
                        });
                    }, I = h4, A.label = 2;
                case 2:
                    return I < a6 ? [
                        5,
                        S(I)
                    ] : [
                        3,
                        5
                    ];
                case 3:
                    if ("break" === A.sent()) return [
                        3,
                        5
                    ];
                    A.label = 4;
                case 4:
                    return ++I, [
                        3,
                        2
                    ];
                case 5:
                    return [
                        4,
                        w1.onTrainEnd()
                    ];
                case 6:
                    return A.sent(), [
                        4,
                        e.history.syncData()
                    ];
                case 7:
                    return A.sent(), [
                        2,
                        e.history
                    ];
            }
        });
    });
}
function fitTensors(e53, t, n, r) {
    return void 0 === r && (r = {
    }), __awaiter(this, void 0, void 0, function() {
        var i, a, o, s, l, u, c, p, h, d, f, g, m, y, v, b, w, z, S;
        return __generator(this, function(I) {
            switch(I.label){
                case 0:
                    if (e53.isTraining) throw new Error("Cannot start training because another fit() call is ongoing.");
                    e53.isTraining = !0, I.label = 1;
                case 1:
                    if (I.trys.push([
                        1,
                        ,
                        3,
                        4
                    ]), checkBatchSize(c = null == r.batchSize ? 32 : r.batchSize), p = e53.standardizeUserData(t, n, !1, c), i = p[0], a = p[1], h = !1, d = void 0, null != r.validationData && r.validationData.length > 0) {
                        if (h = !0, 2 !== r.validationData.length) throw 3 === r.validationData.length ? new NotImplementedError("validationData including sample weights is not supported yet.") : new ValueError("When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; " + r.validationData + " is invalid.");
                        o = r.validationData[0], s = r.validationData[1], f = e53.standardizeUserData(o, s, !0, c), l = f[0], u = f[1], d = l.concat(u);
                    } else null != r.validationSplit && r.validationSplit > 0 && r.validationSplit < 1 ? (h = !0, g = Math.floor(i[0].shape[0] * (1 - r.validationSplit)), m = i[0].shape[0], l = sliceArrays(i, g, m), i = sliceArrays(i, 0, g), u = sliceArrays(a, g, m), a = sliceArrays(a, 0, g), d = l.concat(u)) : null != r.validationSteps && (h = !0);
                    return y = i.concat(a), e53.checkTrainableWeightsConsistency(), v = e53.makeTrainFunction(), b = e53.getDedupedMetricsNames(), w = void 0, z = void 0, h ? (e53.makeTestFunction(), w = e53.testFunction, z = b.slice().concat(b.map(function(e) {
                        return "val_" + e;
                    }))) : (w = null, d = [], z = b.slice()), S = standardizeCallbacks(r.callbacks), [
                        4,
                        fitLoop(e53, v, y, b, c, r.epochs, r.verbose, S, w, d, r.shuffle, z, r.initialEpoch, null, null, r.yieldEvery)
                    ];
                case 2:
                    return [
                        2,
                        I.sent()
                    ];
                case 3:
                    return e53.isTraining = !1, disposeNewTensors(i, t), disposeNewTensors(a, n), disposeNewTensors(l, o), disposeNewTensors(u, s), [
                        7
                    ];
                case 4:
                    return [
                        2
                    ];
            }
        });
    });
}
function ensureTensorsRank2OrHigher(e) {
    var t = [];
    e instanceof _tfjsCore.Tensor && (e = [
        e
    ]);
    for(var n = 0; n < e.length; ++n){
        var r = e[n];
        if (1 === r.rank) t.push(expandDims$1(r, 1));
        else {
            if (0 === r.rank) throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");
            t.push(r);
        }
    }
    return t;
}
function disposeNewTensors(e54, t) {
    if (null != e54) {
        var n = [];
        if (t instanceof _tfjsCore.Tensor) n.push(t.id);
        else if (Array.isArray(t)) t.forEach(function(e) {
            return n.push(e.id);
        });
        else if (null != t) for(var r in t){
            var i = t[r];
            n.push(i.id);
        }
        var a = [];
        if (e54 instanceof _tfjsCore.Tensor) -1 === n.indexOf(e54.id) && a.push(e54);
        else if (Array.isArray(e54)) e54.forEach(function(e) {
            -1 === n.indexOf(e.id) && a.push(e);
        });
        else if (null != e54) for(var o in e54){
            var s = e54[o];
            -1 === n.indexOf(s.id) && a.push(s);
        }
        a.forEach(function(e) {
            e.isDisposed || e.dispose();
        });
    }
}
function isDataTensor(e) {
    return e instanceof _tfjsCore.Tensor;
}
function isDataArray(e) {
    return Array.isArray(e);
}
function isDataDict(e) {
    return !isDataTensor(e) && !isDataArray(e);
}
function standardizeInputData(e, t, n, r, i) {
    if (void 0 === r && (r = !0), void 0 === i && (i = ""), null == t || 0 === t.length) {
        if (null != e) {
            var a = !1;
            if (isDataArray(e) && e.length > 0) a = !0;
            else if (isDataDict(e)) {
                for(var o in e)if (e.hasOwnProperty(o)) {
                    a = !0;
                    break;
                }
            } else a = !0;
            if (a) throw new ValueError("Error when checking model " + i + " expected no data, but got " + e);
        }
        return [];
    }
    if (null == e) return t.map(function(e) {
        return null;
    });
    var s;
    if (isDataDict(e)) {
        s = [];
        for(var l = 0, u = t; l < u.length; l++){
            var c = u[l];
            if (null == e[c]) throw new ValueError('No data provided for "' + c + '". Need data for each key in: ' + t);
            s.push(e[c]);
        }
    } else if (isDataArray(e)) {
        if (e.length !== t.length) throw new ValueError("Error when checking model " + i + ": the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see " + t.length + " Tensor(s), but instead got the following list of Tensor(s): " + e);
        s = e;
    } else {
        if (t.length > 1) throw new ValueError("The model " + i + " expects " + t.length + " Tensor(s), but only received one Tensor. Found: Tensor with shape " + e.shape);
        s = [
            e
        ];
    }
    if (s = ensureTensorsRank2OrHigher(s), null != n) {
        for(var p = 0; p < t.length; ++p)if (null != n[p]) {
            var h = s[p];
            if (h.shape.length !== n[p].length) throw new ValueError("Error when checking " + i + ": expected " + t[p] + " to have " + n[p].length + " dimension(s). but got array with shape " + h.shape);
            for(var d = 0; d < n[p].length; ++d)if (0 !== d || r) {
                var f = h.shape[d], g = n[p][d];
                if (null != g && g >= 0 && f !== g) throw new ValueError("Error when checking " + i + ": expected " + t[p] + " to have shape [" + n[p] + "], but got array with shape [" + h.shape + "].");
            }
        }
    }
    return s;
}
function checkArrayLengths(e55, t, n) {
    var r = unique(e55.map(function(e) {
        return e.shape[0];
    }));
    r.sort();
    var i = unique(t.map(function(e) {
        return e.shape[0];
    }));
    if (i.sort(), r.length > 1) throw new ValueError("All input Tensors (x) should have the same number of samples. Got array shapes: " + JSON.stringify(e55.map(function(e) {
        return e.shape;
    })));
    if (i.length > 1) throw new ValueError("All target Tensors (y) should have the same number of samples. Got array shapes: " + JSON.stringify(t.map(function(e) {
        return e.shape;
    })));
    if (r.length > 0 && i.length > 0 && !_tfjsCore.util.arraysEqual(r, i)) throw new ValueError("Input Tensors should have the same number of samples as target Tensors. Found " + r[0] + " input sample(s) and " + i[0] + " target sample(s).");
}
function checkLossAndTargetCompatibility(e, t, n) {
    for(var r = [
        meanSquaredError,
        binaryCrossentropy,
        categoricalCrossentropy
    ], i = 0; i < e.length; ++i){
        var a = e[i], o = t[i], s = n[i];
        if (null != o) {
            if (o === categoricalCrossentropy && 1 === a.shape[a.shape.length - 1]) throw new ValueError("You are passing a target array of shape " + a.shape + " while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].");
            if (-1 !== r.indexOf(o)) for(var l = a.shape.slice(1), u = s.slice(1), c = 0; c < l.length; ++c){
                var p = l[c], h = u[c];
                if (null != h && p !== h) throw new ValueError("A target Tensor with shape " + a.shape + " was passed for an output of shape " + s + ", while using a loss function that expects targets to have the same shape as the output.");
            }
        }
    }
}
function checkInputData(e, t, n, r, i) {
    var a;
    if (void 0 === r && (r = !0), void 0 === i && (i = ""), Array.isArray(e)) {
        if (e.length !== t.length) throw new ValueError("Error when checking model " + i + ": the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see " + t.length + " Tensor(s), but instead got " + e.length + " Tensors(s).");
        a = e;
    } else {
        if (t.length > 1) throw new ValueError("The model expects " + t.length + " " + i + " Tensors, but only received one Tensor. Found: array with shape " + JSON.stringify(e.shape) + ".");
        a = [
            e
        ];
    }
    if (null != n) {
        for(var o = 0; o < t.length; ++o)if (null != n[o]) {
            var s = a[o];
            if (s.shape.length !== n[o].length) throw new ValueError("Error when checking " + i + ": expected " + t[o] + " to have " + n[o].length + " dimension(s), but got array with shape " + JSON.stringify(s.shape));
            for(var l = 0; l < n[o].length; ++l)if (0 !== l || r) {
                var u = s.shape[l], c = n[o][l];
                if (null != c && c !== u) throw new ValueError("Error when checking " + i + ": expected " + t[o] + " to have shape " + JSON.stringify(n[o]) + " but got array with shape " + JSON.stringify(s.shape) + ".");
            }
        }
    }
}
function collectMetrics(e, t) {
    if (null == e || Array.isArray(e) && 0 === e.length) return t.map(function(e) {
        return [];
    });
    if (Array.isArray(e)) return t.map(function(t) {
        return e;
    });
    if (null != e) {
        for(var n = [], r = 0, i = t; r < i.length; r++){
            var a = i[r], o = e.hasOwnProperty(a) ? e[a] : [];
            Array.isArray(o) || (o = [
                o
            ]), n.push(o);
        }
        return n;
    }
    throw new TypeError("Type of metrics argument not understood. Expected an Array or Object, found: " + e);
}
var Model = function(e56) {
    function t36(t) {
        var n = e56.call(this, t) || this;
        return n.isTraining = !1, n;
    }
    return __extends(t36, e56), t36.prototype.summary = function(e, t, n) {
        if (void 0 === n && (n = console.log), !this.built) throw new ValueError("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");
        printSummary(this, e, t, n);
    }, t36.prototype.compile = function(e57) {
        var t = this;
        if (null == e57.loss && (e57.loss = []), this.loss = e57.loss, "string" == typeof e57.optimizer) this.optimizer = getOptimizer(e57.optimizer);
        else {
            if (!(e57.optimizer instanceof _tfjsCore.Optimizer)) throw new ValueError("User-defined optimizer must be an instance of tf.Optimizer.");
            this.optimizer = e57.optimizer;
        }
        var n6 = [];
        if (Array.isArray(e57.loss) || "string" == typeof e57.loss || "function" == typeof e57.loss) {
            if (Array.isArray(e57.loss)) {
                if (e57.loss.length !== this.outputs.length) throw new ValueError("When passing an Array as loss, it should have one entry per model output. The model has " + this.outputs.length + " output(s), but you passed loss=" + e57.loss + ".");
                var r = e57.loss;
                n6 = r.map(function(e) {
                    return get(e);
                });
            } else {
                var i = get(e57.loss);
                this.outputs.forEach(function(e) {
                    n6.push(i);
                });
            }
        } else {
            for(var a in e57.loss = e57.loss, e57.loss)if (-1 === this.outputNames.indexOf(a)) throw new ValueError('Unknown entry in loss dictionary: "' + a + '". Only expected the following keys: ' + this.outputNames);
            for(var o = 0, s = this.outputNames; o < s.length; o++){
                var l = s[o];
                null == e57.loss[l] && console.warn('Output "' + l + '" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ' + l + " during training"), n6.push(get(e57.loss[l]));
            }
        }
        this.lossFunctions = n6, this.feedOutputNames = [], this.feedOutputShapes = [], this.feedLossFns = [];
        for(var u3 = 0; u3 < this.outputs.length; ++u3){
            var c = this.internalOutputShapes[u3], p = this.outputNames[u3];
            this.feedOutputNames.push(p), this.feedOutputShapes.push(c), this.feedLossFns.push(this.lossFunctions[u3]);
        }
        var h = [];
        this.metrics = e57.metrics, this.metricsNames = [
            "loss"
        ], this.metricsTensors = [], nameScope("loss", function() {
            for(var e = 0; e < t.outputs.length; ++e)if (-1 === h.indexOf(e)) {
                var n = t.lossFunctions[e];
                t.outputs.length > 1 && (t.metricsTensors.push([
                    n,
                    e
                ]), t.metricsNames.push(t.outputNames[e] + "_loss"));
            }
        });
        var d = collectMetrics(e57.metrics, this.outputNames);
        nameScope("metric", function() {
            for(var e58 = function(e59) {
                if (-1 !== h.indexOf(e59)) return "continue";
                !function(n8) {
                    for(var r4, i, a, o5 = function(n9) {
                        if (-1 !== [
                            "accuracy",
                            "acc",
                            "crossentropy",
                            "ce"
                        ].indexOf(n9)) {
                            var o = t.internalOutputShapes[e59];
                            1 === o[o.length - 1] || t.lossFunctions[e59] === binaryCrossentropy ? -1 !== [
                                "accuracy",
                                "acc"
                            ].indexOf(n9) ? i = binaryAccuracy : -1 !== [
                                "crossentropy",
                                "ce"
                            ].indexOf(n9) && (i = binaryCrossentropy$1) : t.lossFunctions[e59] === sparseCategoricalCrossentropy ? -1 !== [
                                "accuracy",
                                "acc"
                            ].indexOf(n9) ? i = sparseCategoricalAccuracy : -1 !== [
                                "crossentropy",
                                "ce"
                            ].indexOf(n9) && (i = sparseCategoricalCrossentropy$1) : -1 !== [
                                "accuracy",
                                "acc"
                            ].indexOf(n9) ? i = categoricalAccuracy : -1 !== [
                                "crossentropy",
                                "ce"
                            ].indexOf(n9) && (i = categoricalCrossentropy$1);
                            var s = void 0;
                            -1 !== [
                                "accuracy",
                                "acc"
                            ].indexOf(n9) ? s = "acc" : -1 !== [
                                "crossentropy",
                                "ce"
                            ].indexOf(n9) && (s = "ce"), a = i, r4 = "" + s;
                        } else {
                            var l = get$1(n9);
                            a = l, r4 = "" + n9;
                        }
                        var u;
                        nameScope(r4, function() {
                            u = a;
                        }), (function(e, n, r) {
                            t.outputNames.length > 1 && (n = t.outputNames[e] + "_" + n), t.metricsNames.push(n), t.metricsTensors.push([
                                r,
                                e
                            ]);
                        })(e59, r4, u);
                    }, s5 = 0, l5 = n8; s5 < l5.length; s5++)o5(l5[s5]);
                }(d[e59]);
            }, n7 = 0; n7 < t.outputs.length; ++n7)e58(n7);
        }), this.collectedTrainableWeights = this.trainableWeights;
    }, t36.prototype.checkTrainableWeightsConsistency = function() {
        null != this.collectedTrainableWeights && this.trainableWeights.length !== this.collectedTrainableWeights.length && console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?");
    }, t36.prototype.evaluate = function(e, t, n) {
        void 0 === n && (n = {
        });
        var r = null == n.batchSize ? 32 : n.batchSize;
        checkBatchSize(r);
        var i = this.standardizeUserData(e, t, !0, r);
        try {
            var a = i[0].concat(i[1]);
            this.makeTestFunction();
            var o = this.testFunction;
            return singletonOrArray(this.testLoop(o, a, r, n.verbose, n.steps));
        } finally{
            disposeNewTensors(i[0], e), disposeNewTensors(i[1], t);
        }
    }, t36.prototype.evaluateDataset = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(n) {
                return this.makeTestFunction(), [
                    2,
                    evaluateDataset(this, e, t)
                ];
            });
        });
    }, t36.prototype.checkNumSamples = function(e, t, n, r) {
        var i;
        if (void 0 === r && (r = "steps"), null != n) {
            if (i = null, null != t) throw new ValueError("If " + r + " is set, batchSize must be null or undefined.Got batchSize = " + t);
        } else {
            if (null == e) throw new ValueError("Either the input data should have a defined shape, or " + r + " shoud be specified.");
            i = Array.isArray(e) ? e[0].shape[0] : e.shape[0];
        }
        return i;
    }, t36.prototype.execute = function(e, t) {
        if (Array.isArray(t) && 0 === t.length) throw new ValueError("`outputs` is an empty Array, which is not allowed.");
        var n = Array.isArray(t), r = n ? t : [
            t
        ], i = this.retrieveSymbolicTensors(r), a = new FeedDict;
        if (e instanceof _tfjsCore.Tensor && (e = [
            e
        ]), Array.isArray(e)) {
            if (e.length !== this.inputs.length) throw new ValueError("The number of inputs provided (" + e.length + ") does not match the number of inputs of this model (" + this.inputs.length + ").");
            for(var o = 0; o < this.inputs.length; ++o)a.add(this.inputs[o], e[o]);
        } else for(var s = 0, l = this.inputs; s < l.length; s++){
            var u = l[s], c = e[u.name];
            if (null == c) throw new ValueError("No value is provided for the model's input " + u.name);
            a.add(u, c);
        }
        var p = execute(i, a);
        return n ? p : p[0];
    }, t36.prototype.retrieveSymbolicTensors = function(e60) {
        for(var t37 = pyListRepeat(null, e60.length), n = e60.length, r = 0, i = this.layers; r < i.length; r++){
            for(var a = i[r], o = Array.isArray(a.output) ? a.output : [
                a.output
            ], s = o.map(function(e) {
                return e.name;
            }), l = 0; l < e60.length; ++l){
                var u = s.indexOf(e60[l]);
                if (-1 !== u && (t37[l] = o[u], n--), 0 === n) break;
            }
            if (0 === n) break;
        }
        if (n > 0) {
            var c = [];
            throw t37.forEach(function(t, n) {
                null == t && c.push(e60[n]);
            }), new ValueError("Cannot find SymbolicTensors for output name(s): " + JSON.stringify(c));
        }
        return t37;
    }, t36.prototype.predictLoop = function(e61, t, n10) {
        var r = this;
        return void 0 === t && (t = 32), void 0 === n10 && (n10 = !1), _tfjsCore.tidy(function() {
            var i3 = r.checkNumSamples(e61);
            if (n10) throw new NotImplementedError("Verbose predictLoop() is not implemented yet.");
            for(var a = makeBatches(i3, t), o6 = r.outputs.map(function(e) {
                return [];
            }), s6 = function(t) {
                _tfjsCore.tidy(function() {
                    var n = a[t][0], i = a[t][1], o = sliceArrays(e61, n, i), s = [];
                    if (Array.isArray(o)) for(var l = 0; l < o.length; ++l)s.push({
                        key: r.inputs[l],
                        value: o[l]
                    });
                    else s.push({
                        key: r.inputs[0],
                        value: o
                    });
                    var u = new FeedDict(s);
                    return execute(r.outputs, u);
                }).forEach(function(e, t) {
                    return o6[t].push(e);
                });
            }, l6 = 0; l6 < a.length; ++l6)s6(l6);
            return singletonOrArray(o6.map(function(e) {
                return _tfjsCore.concat(e, 0);
            }));
        });
    }, t36.prototype.predict = function(e, t) {
        void 0 === t && (t = {
        });
        var n = ensureTensorsRank2OrHigher(e);
        checkInputData(n, this.inputNames, this.feedInputShapes, !1);
        try {
            var r = null == t.batchSize ? 32 : t.batchSize;
            return checkBatchSize(r), this.predictLoop(n, r);
        } finally{
            disposeNewTensors(n, e);
        }
    }, t36.prototype.predictOnBatch = function(e) {
        return checkInputData(e, this.inputNames, this.feedInputShapes, !0), this.predictLoop(e, e.shape[0]);
    }, t36.prototype.standardizeUserData = function(e, t, n, r) {
        if (void 0 === n && (n = !0), null == this.optimizer) throw new RuntimeError("You must compile a model before training/testing. Use Model.compile(modelCompileArgs).");
        for(var i = [], a = 0; a < this.feedOutputShapes.length; ++a){
            var o = this.feedOutputShapes[a];
            this.feedLossFns[a] === sparseCategoricalCrossentropy ? i.push(o.slice(0, o.length - 1).concat([
                1
            ])) : i.push(o);
        }
        if (checkArrayLengths(e = standardizeInputData(e, this.feedInputNames, this.feedInputShapes, !1, "input"), t = standardizeInputData(t, this.feedOutputNames, i, !1, "target"), null), checkLossAndTargetCompatibility(t, this.feedLossFns, this.feedOutputShapes), this.stateful && null != r && r > 0 && e[0].shape[0] % r != 0) throw new ValueError("In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size " + r + ". Found: " + e[0].shape[0] + " sample(s).");
        return [
            e,
            t,
            null
        ];
    }, t36.prototype.testLoop = function(e, t, n, r, i) {
        var a = this;
        return void 0 === r && (r = 0), _tfjsCore.tidy(function() {
            var o = a.checkNumSamples(t, n, i, "steps"), s = [];
            if (r > 0) throw new NotImplementedError("Verbose mode is not implemented yet.");
            if (null != i) throw new NotImplementedError("steps mode in testLoop() is not implemented yet");
            for(var l = makeBatches(o, n), u = _tfjsCore.tensor1d(range(0, o)), c = 0; c < l.length; ++c){
                var p = l[c][0], h = l[c][1], d = sliceAlongFirstAxis(u, p, h - p), f = sliceArraysByIndices(t, d), g = e(f);
                if (0 === c) for(var m = 0; m < g.length; ++m)s.push(getScalar(0));
                for(m = 0; m < g.length; ++m){
                    var y = g[m];
                    s[m] = _tfjsCore.add(s[m], _tfjsCore.mul(getScalar(h - p), y));
                }
            }
            for(m = 0; m < s.length; ++m)s[m] = _tfjsCore.div(s[m], getScalar(o));
            return s;
        });
    }, t36.prototype.getDedupedMetricsNames = function() {
        for(var e = this.metricsNames, t = [], n = 0; n < e.length; ++n){
            var r = e[n], i = r;
            if (count(e, r) > 1) i += "_" + count(e.slice(0, n), r);
            t.push(i);
        }
        return t;
    }, t36.prototype.makeTrainFunction = function() {
        var e62 = this;
        return function(t38) {
            var n = t38.slice(0, e62.inputs.length), r = t38.slice(e62.inputs.length, e62.inputs.length + e62.outputs.length), i = [], a8 = e62.collectedTrainableWeights.map(function(e) {
                return e.read();
            });
            return [
                e62.optimizer.minimize(function() {
                    for(var t = [], a = 0; a < e62.inputs.length; ++a)t.push({
                        key: e62.inputs[a],
                        value: n[a]
                    });
                    var o, s = new FeedDict(t), l = execute(e62.outputs, s, {
                        training: !0
                    });
                    for(a = 0; a < e62.lossFunctions.length; ++a){
                        var u = (0, e62.lossFunctions[a])(r[a], l[a]);
                        _tfjsCore.mean(u), o = 0 === a ? u : _tfjsCore.add(o, u);
                    }
                    for(a = 0; a < e62.metricsTensors.length; ++a){
                        var c = e62.metricsTensors[a][0], p = e62.metricsTensors[a][1], h = _tfjsCore.mean(c(r[p], l[p]));
                        _tfjsCore.keep(h), i.push(h);
                    }
                    return o = _tfjsCore.mean(o), e62.calculateLosses().forEach(function(e) {
                        o = _tfjsCore.add(o, e);
                    }), o;
                }, !0, a8)
            ].concat(i);
        };
    }, t36.prototype.makeTestFunction = function() {
        var e = this;
        this.testFunction = function(t) {
            return _tfjsCore.tidy(function() {
                for(var n, r = [], i = t.slice(0, e.inputs.length), a = t.slice(e.inputs.length, e.inputs.length + e.outputs.length), o = [], s = 0; s < e.inputs.length; ++s)o.push({
                    key: e.inputs[s],
                    value: i[s]
                });
                var l = new FeedDict(o), u = execute(e.outputs, l);
                for(s = 0; s < e.lossFunctions.length; ++s){
                    var c = e.lossFunctions[s], p = _tfjsCore.mean(c(a[s], u[s]));
                    n = 0 === s ? p : _tfjsCore.add(n, p), r.push(n);
                }
                for(s = 0; s < e.metricsTensors.length; ++s){
                    var h = e.metricsTensors[s][0], d = e.metricsTensors[s][1], f = _tfjsCore.mean(h(a[d], u[d]));
                    r.push(f);
                }
                return r;
            });
        };
    }, t36.prototype.fit = function(e, t, n) {
        return void 0 === n && (n = {
        }), __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(r) {
                return [
                    2,
                    fitTensors(this, e, t, n)
                ];
            });
        });
    }, t36.prototype.fitDataset = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(n) {
                return [
                    2,
                    fitDataset(this, e, t)
                ];
            });
        });
    }, t36.prototype.trainOnBatch = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            var n, r, i, a, o, s, l, u, c, p, h;
            return __generator(this, function(d) {
                switch(d.label){
                    case 0:
                        n = this.standardizeUserData(e, t), r = n[0], i = n[1], a = this.makeTrainFunction(), o = a(r.concat(i)), s = [], l = 0, u = o, d.label = 1;
                    case 1:
                        return l < u.length ? (c = u[l], h = (p = s).push, [
                            4,
                            c.data()
                        ]) : [
                            3,
                            4
                        ];
                    case 2:
                        h.apply(p, [
                            d.sent()[0]
                        ]), d.label = 3;
                    case 3:
                        return l++, [
                            3,
                            1
                        ];
                    case 4:
                        return _tfjsCore.dispose(o), [
                            2,
                            singletonOrArray(s)
                        ];
                }
            });
        });
    }, t36.prototype.getNamedWeights = function(e) {
        for(var t = {
        }, n = null != e && e.trainableOnly, r = n ? this.trainableWeights : this.weights, i = this.getWeights(n), a = 0; a < r.length; ++a)n && !r[a].trainable || (t[r[a].originalName] = i[a]);
        return t;
    }, Object.defineProperty(t36.prototype, "stopTraining", {
        set: function(e) {
            this.stopTraining_ = e;
        },
        enumerable: !0,
        configurable: !0
    }), t36.prototype.save = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            var n, r, i, a, o;
            return __generator(this, function(s) {
                switch(s.label){
                    case 0:
                        if ("string" == typeof e) {
                            if (0 === (n = _tfjsCore.io.getSaveHandlers(e)).length) throw new ValueError("Cannot find any save handlers for URL '" + e + "'");
                            if (n.length > 1) throw new ValueError("Found more than one (" + n.length + ") save handlers for URL '" + e + "'");
                            e = n[0];
                        }
                        if (null == e.save) throw new ValueError("Model.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
                        return [
                            4,
                            _tfjsCore.io.encodeWeights(this.getNamedWeights(t))
                        ];
                    case 1:
                        return r = s.sent(), i = !1, a = null, o = this.toJSON(a, i), [
                            2,
                            e.save({
                                modelTopology: o,
                                weightData: r.data,
                                weightSpecs: r.specs
                            })
                        ];
                }
            });
        });
    }, t36.className = "Model", t36;
}(Container);
function modelFromJSON(e63, t) {
    return __awaiter(this, void 0, void 0, function() {
        var n, r, i, a, o, s, l, u, c, p;
        return __generator(this, function(h) {
            switch(h.label){
                case 0:
                    return "modelTopology" in e63 || (e63 = {
                        modelTopology: e63
                    }), null != (n = e63.modelTopology).model_config && (n = n.model_config), r = convertPythonicToTs(n), i = deserialize(r, t), null == e63.weightsManifest ? [
                        3,
                        2
                    ] : [
                        4,
                        _tfjsCore.io.loadWeights(e63.weightsManifest, e63.pathPrefix, i.weights.map(function(e) {
                            return e.originalName;
                        }))
                    ];
                case 1:
                    for(a = h.sent(), o = {
                    }, s = 0, l = i.weights; s < l.length; s++)u = l[s], o[u.originalName] = a[u.originalName];
                    c = null, p = !0, i.loadWeights(o, c, p), h.label = 2;
                case 2:
                    return [
                        2,
                        i
                    ];
            }
        });
    });
}
function loadModelInternal(e, t) {
    return __awaiter(this, void 0, void 0, function() {
        var n;
        return __generator(this, function(r) {
            if (null == t && (t = {
            }), "string" == typeof e) {
                if (0 === (n = _tfjsCore.io.getLoadHandlers(e)).length) n.push(_tfjsCore.io.browserHTTPRequest(e, null, null, null, t.onProgress));
                else if (n.length > 1) throw new ValueError("Found more than one (" + n.length + ") load handlers for URL '" + e + "'");
                e = n[0];
            }
            return [
                2,
                loadModelFromIOHandler(e, void 0, t)
            ];
        });
    });
}
function loadModelFromIOHandler(e, t, n) {
    return __awaiter(this, void 0, void 0, function() {
        var r, i, a, o, s, l, u;
        return __generator(this, function(c) {
            switch(c.label){
                case 0:
                    if (null == n && (n = {
                    }), null == e.load) throw new ValueError("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
                    return [
                        4,
                        e.load()
                    ];
                case 1:
                    if (r = c.sent(), null != (i = r.modelTopology).model_config && (i = i.model_config), a = null == n.strict || n.strict, o = null != r.weightData && null != r.weightSpecs && a, s = deserialize(convertPythonicToTs(i), t, o), null != r.weightData) {
                        if (null == r.weightSpecs) throw new ValueError("Model artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.");
                        l = !1, u = !0, s.loadWeights(_tfjsCore.io.decodeWeights(r.weightData, r.weightSpecs), l, u, a);
                    }
                    return [
                        2,
                        s
                    ];
            }
        });
    });
}
_tfjsCore.serialization.registerClass(Model);
var Sequential = function(e64) {
    function t39(t) {
        var n = e64.call(this, {
            inputs: [],
            outputs: []
        }) || this;
        if (t = t || {
        }, n.trainable = !0, n._updatable = !0, n.built = !1, n.name = null != t.name ? t.name : getUid("sequential_"), null != t.layers) for(var r = 0, i = t.layers; r < i.length; r++){
            var a = i[r];
            n.add(a);
        }
        return n;
    }
    return __extends(t39, e64), t39.prototype.checkShape = function(e65) {
        if (e65.inboundNodes[0].outputTensors[0].shape.some(function(e) {
            return e < 0;
        })) throw new ValueError("Negative dimension size caused by adding layer " + e65.name + " with input shape [" + e65.inboundNodes[0].inputTensors[0].shape + "]");
    }, t39.prototype.add = function(e66) {
        var n, r = e66 instanceof t39 || e66 instanceof Model;
        if (r) {
            if (1 !== (n = e66).outputs.length) throw new ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
            if (1 !== n.inputs.length) throw new ValueError("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.");
        }
        if (0 === this.outputs.length) {
            if (0 === e66.inboundNodes.length) {
                if (null == e66.batchInputShape) throw new ValueError("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");
                var i = Input({
                    batchShape: e66.batchInputShape,
                    dtype: e66.dtype,
                    name: e66.name + "_input"
                });
                e66.apply(i);
            }
            if (r) this.outputs = n.outputs, this.inputs = n.inputs;
            else {
                if (1 !== e66.inboundNodes.length) throw new ValueError("A layer added to a Sequential model must not already be connected somewhere else. Model received layer " + e66.name + " which has " + e66.inboundNodes.length + " pre-existing inbound connections.");
                if (1 !== e66.inboundNodes[0].outputTensors.length) throw new ValueError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
                this.checkShape(e66), this.outputs = [
                    e66.inboundNodes[0].outputTensors[0]
                ], this.inputs = getSourceInputs(this.outputs[0]);
            }
            this.inboundNodes = [], new Node({
                outboundLayer: this,
                inboundLayers: [],
                nodeIndices: [],
                tensorIndices: [],
                inputTensors: this.inputs,
                outputTensors: this.outputs,
                inputMasks: pyListRepeat(null, this.inputs.length),
                outputMasks: [
                    null
                ],
                inputShapes: this.inputs.map(function(e) {
                    return e.shape;
                }),
                outputShapes: this.outputs[0].shape
            });
        } else {
            var a = e66.apply(this.outputs[0]);
            if (Array.isArray(a)) throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");
            this.checkShape(e66), this.outputs = [
                a
            ], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [
                this.outputs[0].shape
            ];
        }
        this.layers.push(e66), this.built = !1;
    }, t39.prototype.pop = function() {
        if (0 === this.layers.length) throw new TypeError("There are no layers in the model.");
        if (this.layers.pop(), 0 === this.layers.length) this.outputs = [], this.inboundNodes = [], this.outboundNodes = [];
        else {
            var e = this.layers.length - 1;
            this.layers[e].outboundNodes = [], this.outputs = [
                this.layers[e].output
            ], this.inboundNodes[0].outputTensors = this.outputs, this.inboundNodes[0].outputShapes = [
                this.outputs[0].shape
            ];
        }
    }, t39.prototype.call = function(e, t) {
        return null == this.model && this.build(), this.model.call(e, t);
    }, t39.prototype.build = function(e) {
        if (getExactlyOneShape(e), 0 === this.inputs.length || 0 === this.outputs.length) throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");
        this.model = new Model({
            inputs: this.inputs,
            outputs: this.outputs[0],
            name: this.name + "_model"
        }), this.model.trainable = this.trainable, this.model.updatable = this.updatable, this.supportsMasking = this.model.supportsMasking, this.inputLayers = this.model.inputLayers, this.inputLayersNodeIndices = this.model.inputLayersNodeIndices, this.inputLayersTensorIndices = this.model.inputLayersTensorIndices, this.outputLayers = this.model.outputLayers, this.outputLayersNodeIndices = this.model.outputLayersNodeIndices, this.outputLayersTensorIndices = this.model.outputLayersTensorIndices, this.nodesByDepth = this.model.nodesByDepth, this.containerNodes = this.model.containerNodes, this.outputNames = this.model.outputNames, this.inputNames = this.model.inputNames, this.built = !0;
    }, t39.prototype.countParams = function() {
        return this.built || this.build(), e64.prototype.countParams.call(this);
    }, t39.prototype.summary = function(t, n, r) {
        void 0 === r && (r = console.log), this.built || this.build(), e64.prototype.summary.call(this, t, n, r);
    }, t39.prototype.setWeights = function(e) {
        null == this.model && this.build(), this.model.setWeights(e);
    }, Object.defineProperty(t39.prototype, "updatable", {
        get: function() {
            return this._updatable;
        },
        set: function(e) {
            this.built && (this.model.updatable = e), this._updatable = e;
        },
        enumerable: !0,
        configurable: !0
    }), t39.prototype.evaluate = function(e, t, n) {
        if (void 0 === n && (n = {
        }), !this.built) throw new RuntimeError("The model needs to be compiled before being used.");
        return this.model.evaluate(e, t, n);
    }, t39.prototype.evaluateDataset = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(n) {
                if (!this.built) throw new RuntimeError("The model needs to be compiled before being used.");
                return [
                    2,
                    this.model.evaluateDataset(e, t)
                ];
            });
        });
    }, t39.prototype.predict = function(e, t) {
        return void 0 === t && (t = {
        }), null == this.model && this.build(), this.model.predict(e, t);
    }, t39.prototype.predictOnBatch = function(e) {
        return null == this.model && this.build(), this.model.predictOnBatch(e);
    }, t39.prototype.compile = function(e) {
        this.build(), this.model.compile(e), this.optimizer = this.model.optimizer, this.loss = this.model.loss, this.metrics = this.model.metrics, this.metricsTensors = this.model.metricsTensors, this.metricsNames = this.model.metricsNames;
    }, t39.prototype.fit = function(e, t, n) {
        return void 0 === n && (n = {
        }), __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(r) {
                if (!this.built) throw new RuntimeError("The model needs to be compiled before being used.");
                return [
                    2,
                    this.model.fit(e, t, n)
                ];
            });
        });
    }, t39.prototype.fitDataset = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(n) {
                if (!this.built) throw new RuntimeError("The model needs to be compiled before being used.");
                return [
                    2,
                    this.model.fitDataset(e, t)
                ];
            });
        });
    }, t39.prototype.trainOnBatch = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(n) {
                return [
                    2,
                    this.model.trainOnBatch(e, t)
                ];
            });
        });
    }, t39.fromConfig = function(e, n, r, i) {
        var a;
        void 0 === r && (r = {
        }), void 0 === i && (i = !1);
        var o = {
        };
        if (n instanceof Array) {
            if (null == n[0].className || "Merge" === n[0].className) throw new ValueError("Legacy serialization format not supported yet.");
            a = n;
        } else _tfjsCore.util.assert(null != n.layers, "When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."), a = n.layers, delete n.layers, o = n;
        var s = new e(o);
        if (!(s instanceof t39)) throw new NotImplementedError("Sequential.fromConfig called on non-Sequential input: " + s);
        for(var l = 0, u = a; l < u.length; l++){
            var c = deserialize(u[l], void 0, i);
            i && c.setFastWeightInitDuringBuild(!0), s.add(c);
        }
        return s;
    }, Object.defineProperty(t39.prototype, "stopTraining", {
        set: function(e) {
            this.model.stopTraining = e;
        },
        enumerable: !0,
        configurable: !0
    }), t39.prototype.getConfig = function() {
        for(var e = [], t = 0, n = this.layers; t < n.length; t++){
            var r = n[t];
            e.push({
                className: r.getClassName(),
                config: r.getConfig()
            });
        }
        return e;
    }, t39.className = "Sequential", t39;
}(Model);
function model(e) {
    return new Model(e);
}
function sequential(e) {
    return new Sequential(e);
}
function loadModel(e, t) {
    return void 0 === t && (t = !0), _tfjsCore.deprecationWarn("tf.loadModel() is deprecated and will be removed in TensorFlow.js 1.0. Please switch to tf.loadLayersModel()."), loadModelInternal(e, {
        strict: t
    });
}
function loadLayersModel(e, t) {
    return null == t && (t = {
    }), loadModelInternal(e, t);
}
function input(e) {
    return Input(e);
}
function registerCallbackConstructor(e, t) {
    CallbackConstructorRegistry.registerCallbackConstructor(e, t);
}
_tfjsCore.serialization.registerClass(Sequential);
var Activation = function(e) {
    function t() {
        return null !== e && e.apply(this, arguments) || this;
    }
    return __extends(t, e), t.prototype.getConfig = function() {
        return {
        };
    }, t;
}(_tfjsCore.serialization.Serializable), Elu = function(e67) {
    function t40() {
        return null !== e67 && e67.apply(this, arguments) || this;
    }
    return __extends(t40, e67), t40.prototype.apply = function(e, t) {
        return void 0 === t && (t = 1), elu$1(e, t);
    }, t40.className = "elu", t40;
}(Activation);
_tfjsCore.serialization.registerClass(Elu);
var Selu = function(e68) {
    function t() {
        return null !== e68 && e68.apply(this, arguments) || this;
    }
    return __extends(t, e68), t.prototype.apply = function(e) {
        return _tfjsCore.selu(e);
    }, t.className = "selu", t;
}(Activation);
_tfjsCore.serialization.registerClass(Selu);
var Relu = function(e69) {
    function t() {
        return null !== e69 && e69.apply(this, arguments) || this;
    }
    return __extends(t, e69), t.prototype.apply = function(e) {
        return _tfjsCore.relu(e);
    }, t.className = "relu", t;
}(Activation);
_tfjsCore.serialization.registerClass(Relu);
var Relu6 = function(e70) {
    function t() {
        return null !== e70 && e70.apply(this, arguments) || this;
    }
    return __extends(t, e70), t.prototype.apply = function(e) {
        return _tfjsCore.tidy(function() {
            return _tfjsCore.minimum(getScalar(6), _tfjsCore.relu(e));
        });
    }, t.className = "relu6", t;
}(Activation);
_tfjsCore.serialization.registerClass(Relu6);
var Linear = function(e71) {
    function t() {
        return null !== e71 && e71.apply(this, arguments) || this;
    }
    return __extends(t, e71), t.prototype.apply = function(e) {
        return e;
    }, t.className = "linear", t;
}(Activation);
_tfjsCore.serialization.registerClass(Linear);
var Sigmoid = function(e72) {
    function t() {
        return null !== e72 && e72.apply(this, arguments) || this;
    }
    return __extends(t, e72), t.prototype.apply = function(e) {
        return _tfjsCore.sigmoid(e);
    }, t.className = "sigmoid", t;
}(Activation);
_tfjsCore.serialization.registerClass(Sigmoid);
var HardSigmoid = function(e73) {
    function t() {
        return null !== e73 && e73.apply(this, arguments) || this;
    }
    return __extends(t, e73), t.prototype.apply = function(e) {
        return hardSigmoid(e);
    }, t.className = "hardSigmoid", t;
}(Activation);
_tfjsCore.serialization.registerClass(HardSigmoid);
var Softplus = function(e74) {
    function t() {
        return null !== e74 && e74.apply(this, arguments) || this;
    }
    return __extends(t, e74), t.prototype.apply = function(e) {
        return _tfjsCore.softplus(e);
    }, t.className = "softplus", t;
}(Activation);
_tfjsCore.serialization.registerClass(Softplus);
var Softsign = function(e75) {
    function t() {
        return null !== e75 && e75.apply(this, arguments) || this;
    }
    return __extends(t, e75), t.prototype.apply = function(e) {
        return softsign(e);
    }, t.className = "softsign", t;
}(Activation);
_tfjsCore.serialization.registerClass(Softsign);
var Tanh = function(e76) {
    function t() {
        return null !== e76 && e76.apply(this, arguments) || this;
    }
    return __extends(t, e76), t.prototype.apply = function(e) {
        return _tfjsCore.tanh(e);
    }, t.className = "tanh", t;
}(Activation);
_tfjsCore.serialization.registerClass(Tanh);
var Softmax = function(e77) {
    function t41() {
        return null !== e77 && e77.apply(this, arguments) || this;
    }
    return __extends(t41, e77), t41.prototype.apply = function(e, t) {
        return void 0 === t && (t = -1), _tfjsCore.softmax(e, t);
    }, t41.className = "softmax", t41;
}(Activation);
function serializeActivation(e) {
    return e.getClassName();
}
function deserializeActivation(e, t) {
    return void 0 === t && (t = {
    }), deserializeKerasObject(e, _tfjsCore.serialization.SerializationMap.getMap().classNameMap, t, "activation");
}
function getActivation(e) {
    return null == e ? deserializeActivation({
        className: "linear",
        config: {
        }
    }) : "string" == typeof e ? deserializeActivation({
        className: e,
        config: {
        }
    }) : e instanceof Activation ? e : deserializeActivation(e);
}
_tfjsCore.serialization.registerClass(Softmax);
var Regularizer = function(e) {
    function t() {
        return null !== e && e.apply(this, arguments) || this;
    }
    return __extends(t, e), t;
}(_tfjsCore.serialization.Serializable), L1L2 = function(e78) {
    function t42(t) {
        var n = e78.call(this) || this, r = null == t || null == t.l1 ? 0.01 : t.l1, i = null == t || null == t.l2 ? 0.01 : t.l2;
        return n.hasL1 = 0 !== r, n.hasL2 = 0 !== i, n.l1 = getScalar(r), n.l2 = getScalar(i), n;
    }
    return __extends(t42, e78), t42.prototype.apply = function(e) {
        var t = this;
        return _tfjsCore.tidy(function() {
            var n = _tfjsCore.zeros([
                1
            ]);
            return t.hasL1 && (n = _tfjsCore.add(n, _tfjsCore.sum(_tfjsCore.mul(t.l1, _tfjsCore.abs(e))))), t.hasL2 && (n = _tfjsCore.add(n, _tfjsCore.sum(_tfjsCore.mul(t.l2, square(e))))), n.asScalar();
        });
    }, t42.prototype.getConfig = function() {
        return {
            l1: this.l1.dataSync()[0],
            l2: this.l2.dataSync()[0]
        };
    }, t42.fromConfig = function(e, t) {
        return new e({
            l1: t.l1,
            l2: t.l2
        });
    }, t42.className = "L1L2", t42;
}(Regularizer);
function l1(e) {
    return new L1L2({
        l1: null != e ? e.l1 : null,
        l2: 0
    });
}
function l2(e) {
    return new L1L2({
        l2: null != e ? e.l2 : null,
        l1: 0
    });
}
_tfjsCore.serialization.registerClass(L1L2);
var REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {
    l1l2: "L1L2"
};
function serializeRegularizer(e) {
    return serializeKerasObject(e);
}
function deserializeRegularizer(e, t) {
    return void 0 === t && (t = {
    }), deserializeKerasObject(e, _tfjsCore.serialization.SerializationMap.getMap().classNameMap, t, "regularizer");
}
function getRegularizer(e) {
    return null == e ? null : "string" == typeof e ? deserializeRegularizer({
        className: e in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[e] : e,
        config: {
        }
    }) : e instanceof Regularizer ? e : deserializeRegularizer(e);
}
var ReLU = function(e79) {
    function t43(t) {
        var n = e79.call(this, null == t ? {
        } : t) || this;
        return n.supportsMasking = !0, null != t && (n.maxValue = t.maxValue), n;
    }
    return __extends(t43, e79), t43.prototype.call = function(e, t) {
        e = getExactlyOneTensor(e);
        var n = _tfjsCore.relu(e);
        return null != this.maxValue && (n = _tfjsCore.clipByValue(n, 0, this.maxValue)), n;
    }, t43.prototype.computeOutputShape = function(e) {
        return e;
    }, t43.prototype.getConfig = function() {
        var t = {
            maxValue: this.maxValue
        }, n = e79.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t43.className = "ReLU", t43;
}(Layer);
_tfjsCore.serialization.registerClass(ReLU);
var LeakyReLU = function(e80) {
    function t44(t) {
        var n = e80.call(this, null == t ? {
        } : t) || this;
        return n.DEFAULT_ALPHA = 0.3, null == t && (t = {
        }), n.alpha = null == t.alpha ? n.DEFAULT_ALPHA : t.alpha, n;
    }
    return __extends(t44, e80), t44.prototype.call = function(e, t) {
        var n = getExactlyOneTensor(e);
        return _tfjsCore.leakyRelu(n, this.alpha);
    }, t44.prototype.computeOutputShape = function(e) {
        return e;
    }, t44.prototype.getConfig = function() {
        var t = {
            alpha: this.alpha
        }, n = e80.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t44.className = "LeakyReLU", t44;
}(Layer);
_tfjsCore.serialization.registerClass(LeakyReLU);
var PReLU = function(e81) {
    function t45(t) {
        var n = e81.call(this, null == t ? {
        } : t) || this;
        if (n.DEFAULT_ALPHA_INITIALIZER = "zeros", null == t && (t = {
        }), n.supportsMasking = !0, n.alphaInitializer = getInitializer(t.alphaInitializer || n.DEFAULT_ALPHA_INITIALIZER), n.alphaRegularizer = getRegularizer(t.alphaRegularizer), n.alphaConstraint = getConstraint(t.alphaConstraint), null == t.sharedAxes) n.sharedAxes = null;
        else if (Array.isArray(t.sharedAxes)) n.sharedAxes = t.sharedAxes;
        else {
            if ("number" != typeof t.sharedAxes) throw new ValueError("Expected sharedAxes to be a number or an array of numbers, but got " + t.sharedAxes);
            n.sharedAxes = [
                t.sharedAxes
            ];
        }
        return n;
    }
    return __extends(t45, e81), t45.prototype.build = function(e) {
        var t = (e = getExactlyOneShape(e)).slice(1);
        if (null != this.sharedAxes) for(var n = 0, r = this.sharedAxes; n < r.length; n++)t[(a = r[n]) - 1] = 1;
        this.alpha = this.addWeight("alpha", t, "float32", this.alphaInitializer, this.alphaRegularizer, !0, this.alphaConstraint);
        var i = {
        };
        if (null != this.sharedAxes) for(var a = 1; a < e.length; ++a)i[a] = e[a];
        this.inputSpec = [
            new InputSpec({
                ndim: e.length,
                axes: i
            })
        ], this.built = !0;
    }, t45.prototype.call = function(e, t) {
        return e = getExactlyOneTensor(e), _tfjsCore.prelu(e, this.alpha.read());
    }, t45.prototype.getConfig = function() {
        var t = {
            alphaInitializer: serializeInitializer(this.alphaInitializer),
            alphaRegularizer: serializeRegularizer(this.alphaRegularizer),
            alphaConstraint: serializeConstraint(this.alphaConstraint),
            sharedAxes: this.sharedAxes
        }, n = e81.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t45.className = "PReLU", t45;
}(Layer);
_tfjsCore.serialization.registerClass(PReLU);
var ELU = function(e82) {
    function t46(t) {
        var n = e82.call(this, null == t ? {
        } : t) || this;
        if (n.DEFAULT_ALPHA = 1, null == t && (t = {
        }), null != t.alpha && t.alpha !== n.DEFAULT_ALPHA) throw new NotImplementedError("Non-default alpha value (" + t.alpha + ") is not supported by the ELU layer yet.");
        return n.alpha = null == t.alpha ? n.DEFAULT_ALPHA : t.alpha, n;
    }
    return __extends(t46, e82), t46.prototype.call = function(e, t) {
        var n = getExactlyOneTensor(e);
        return _tfjsCore.elu(n);
    }, t46.prototype.computeOutputShape = function(e) {
        return e;
    }, t46.prototype.getConfig = function() {
        var t = {
            alpha: this.alpha
        }, n = e82.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t46.className = "ELU", t46;
}(Layer);
_tfjsCore.serialization.registerClass(ELU);
var ThresholdedReLU = function(e83) {
    function t47(t) {
        var n = e83.call(this, null == t ? {
        } : t) || this;
        return n.DEFAULT_THETA = 1, null == t && (t = {
        }), n.theta = null == t.theta ? n.DEFAULT_THETA : t.theta, n.thetaTensor = getScalar(n.theta), n;
    }
    return __extends(t47, e83), t47.prototype.call = function(e, t) {
        var n = getExactlyOneTensor(e);
        return n.mul(cast$1(n.greater(this.thetaTensor), "float32"));
    }, t47.prototype.computeOutputShape = function(e) {
        return e;
    }, t47.prototype.getConfig = function() {
        var t = {
            theta: this.theta
        }, n = e83.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t47.className = "ThresholdedReLU", t47;
}(Layer);
_tfjsCore.serialization.registerClass(ThresholdedReLU);
var Softmax$1 = function(e84) {
    function t48(t) {
        var n = e84.call(this, null == t ? {
        } : t) || this;
        return n.DEFAULT_AXIS = 1, null == t && (t = {
        }), n.softmax = (new Softmax).apply, n.axis = null == t.axis ? n.DEFAULT_AXIS : t.axis, n;
    }
    return __extends(t48, e84), t48.prototype.call = function(e, t) {
        var n = getExactlyOneTensor(e);
        return this.softmax(n, this.axis);
    }, t48.prototype.computeOutputShape = function(e) {
        return e;
    }, t48.prototype.getConfig = function() {
        var t = {
            axis: this.axis
        }, n = e84.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t48.className = "Softmax", t48;
}(Layer);
function normalizeArray(e, t, n) {
    if ("number" == typeof e) return pyListRepeat(e, t);
    if (e.length !== t) throw new ValueError("The " + n + " argument must be a tuple of " + t + " integers. Received: " + e.length + " elements.");
    for(var r = 0; r < t; ++r){
        var i = e[r];
        if (!isInteger(i)) throw new ValueError("The " + n + " argument must be a tuple of " + t + " integers. Received: " + JSON.stringify(e) + " including a non-integer number " + i);
    }
    return e;
}
function convOutputLength(e, t, n, r, i) {
    var a;
    return void 0 === i && (i = 1), null == e ? e : (a = "same" === n ? e : e - (t + (t - 1) * (i - 1)) + 1, Math.floor((a + r - 1) / r));
}
function deconvLength(e, t, n, r) {
    if (null == e) return null;
    if ("valid" === r) e = e * t + max$1([
        n - t,
        0
    ]);
    else {
        if ("same" !== r) throw new ValueError("Unsupport padding mode: " + r + ".");
        e *= t;
    }
    return e;
}
function preprocessConv2DInput(e, t) {
    return _tfjsCore.tidy(function() {
        return checkDataFormat(t), "channelsFirst" === t ? _tfjsCore.transpose(e, [
            0,
            2,
            3,
            1
        ]) : e;
    });
}
function conv1dWithBias(e, t, n, r, i, a, o) {
    return void 0 === r && (r = 1), void 0 === i && (i = "valid"), void 0 === o && (o = 1), _tfjsCore.tidy(function() {
        if (null == a && (a = imageDataFormat()), checkDataFormat(a), 3 !== e.shape.length) throw new ValueError("The input of a conv1dWithBias operation should be 3, but is " + e.shape.length + " instead.");
        if (3 !== t.shape.length) throw new ValueError("The kernel for a conv1dWithBias operation should be 3, but is " + t.shape.length + " instead");
        if (null != n && 1 !== n.shape.length) throw new ValueError("The bias for a conv1dWithBias operation should be 1, but is " + t.shape.length + " instead");
        if ("channelsFirst" === a && (e = _tfjsCore.transpose(e, [
            0,
            2,
            1
        ])), "causal" === i) throw new NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
        var s = _tfjsCore.conv1d(e, t, r, "same" === i ? "same" : "valid", "NWC", o);
        return null != n && (s = biasAdd(s, n)), s;
    });
}
function conv2dWithBias(e, t, n, r, i, a, o) {
    return void 0 === r && (r = [
        1,
        1
    ]), void 0 === i && (i = "valid"), _tfjsCore.tidy(function() {
        if (null == a && (a = imageDataFormat()), checkDataFormat(a), 3 !== e.rank && 4 !== e.rank) throw new ValueError("conv2dWithBias expects input to be of rank 3 or 4, but received " + e.rank + ".");
        if (3 !== t.rank && 4 !== t.rank) throw new ValueError("conv2dWithBias expects kernel to be of rank 3 or 4, but received " + e.rank + ".");
        var s = preprocessConv2DInput(e, a);
        if ("causal" === i) throw new NotImplementedError("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");
        return s = _tfjsCore.conv2d(s, t, r, "same" === i ? "same" : "valid", "NHWC", o), null != n && (s = biasAdd(s, n)), "channelsFirst" === a && (s = _tfjsCore.transpose(s, [
            0,
            3,
            1,
            2
        ])), s;
    });
}
_tfjsCore.serialization.registerClass(Softmax$1);
var BaseConv = function(e85) {
    function t49(n, r) {
        var i = e85.call(this, r) || this;
        if (i.bias = null, i.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", i.DEFAULT_BIAS_INITIALIZER = "zeros", t49.verifyArgs(r), i.rank = n, 1 !== i.rank && 2 !== i.rank) throw new NotImplementedError("Convolution layer for rank other than 1 or 2 (" + i.rank + ") is not implemented yet.");
        if (i.kernelSize = normalizeArray(r.kernelSize, n, "kernelSize"), i.strides = normalizeArray(null == r.strides ? 1 : r.strides, n, "strides"), i.padding = null == r.padding ? "valid" : r.padding, checkPaddingMode(i.padding), i.dataFormat = null == r.dataFormat ? "channelsLast" : r.dataFormat, checkDataFormat(i.dataFormat), i.activation = getActivation(r.activation), i.useBias = null == r.useBias || r.useBias, i.biasInitializer = getInitializer(r.biasInitializer || i.DEFAULT_BIAS_INITIALIZER), i.biasConstraint = getConstraint(r.biasConstraint), i.biasRegularizer = getRegularizer(r.biasRegularizer), i.activityRegularizer = getRegularizer(r.activityRegularizer), i.dilationRate = normalizeArray(null == r.dilationRate ? 1 : r.dilationRate, n, "dilationRate"), 1 === i.rank && Array.isArray(i.dilationRate) && 1 !== i.dilationRate.length) throw new ValueError("dilationRate must be a number or an array of a single number for 1D convolution, but received " + JSON.stringify(i.dilationRate));
        if (2 === i.rank) {
            if ("number" == typeof i.dilationRate) i.dilationRate = [
                i.dilationRate,
                i.dilationRate
            ];
            else if (2 !== i.dilationRate.length) throw new ValueError("dilationRate must be a number or array of two numbers for 2D convolution, but received " + JSON.stringify(i.dilationRate));
        }
        return i;
    }
    return __extends(t49, e85), t49.verifyArgs = function(e) {
        if (assert("kernelSize" in e, "required key 'kernelSize' not in config"), "number" != typeof e.kernelSize && !checkArrayTypeAndLength(e.kernelSize, "number", 1, 2)) throw new ValueError("BaseConv expects config.kernelSize to be number or number[] with length 1 or 2, but received " + JSON.stringify(e.kernelSize) + ".");
    }, t49.prototype.getConfig = function() {
        var t = {
            kernelSize: this.kernelSize,
            strides: this.strides,
            padding: this.padding,
            dataFormat: this.dataFormat,
            dilationRate: this.dilationRate,
            activation: serializeActivation(this.activation),
            useBias: this.useBias,
            biasInitializer: serializeInitializer(this.biasInitializer),
            biasRegularizer: serializeRegularizer(this.biasRegularizer),
            activityRegularizer: serializeRegularizer(this.activityRegularizer),
            biasConstraint: serializeConstraint(this.biasConstraint)
        }, n = e85.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t49;
}(Layer), Conv = function(e86) {
    function t50(n, r) {
        var i = e86.call(this, n, r) || this;
        return i.kernel = null, t50.verifyArgs(r), i.filters = r.filters, i.kernelInitializer = getInitializer(r.kernelInitializer || i.DEFAULT_KERNEL_INITIALIZER), i.kernelConstraint = getConstraint(r.kernelConstraint), i.kernelRegularizer = getRegularizer(r.kernelRegularizer), i;
    }
    return __extends(t50, e86), t50.prototype.build = function(e) {
        e = getExactlyOneShape(e);
        var t = "channelsFirst" === this.dataFormat ? 1 : e.length - 1;
        if (null == e[t]) throw new ValueError("The channel dimension of the input should be defined. Found " + e[t]);
        var n, r = e[t], i = this.kernelSize.concat([
            r,
            this.filters
        ]);
        this.kernel = this.addWeight("kernel", i, null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [
            this.filters
        ], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [
            {
                ndim: this.rank + 2,
                axes: (n = {
                }, n[t] = r, n)
            }
        ], this.built = !0;
    }, t50.prototype.call = function(e, t51) {
        var n = this;
        return _tfjsCore.tidy(function() {
            var t;
            e = getExactlyOneTensor(e);
            var r = null == n.bias ? null : n.bias.read();
            if (1 === n.rank) t = conv1dWithBias(e, n.kernel.read(), r, n.strides[0], n.padding, n.dataFormat, n.dilationRate[0]);
            else if (2 === n.rank) t = conv2dWithBias(e, n.kernel.read(), r, n.strides, n.padding, n.dataFormat, n.dilationRate);
            else if (3 === n.rank) throw new NotImplementedError("3D convolution is not implemented yet.");
            return null != n.activation && (t = n.activation.apply(t)), t;
        });
    }, t50.prototype.computeOutputShape = function(e) {
        e = getExactlyOneShape(e);
        for(var t = [], n = "channelsLast" === this.dataFormat ? e.slice(1, e.length - 1) : e.slice(2), r = 0; r < n.length; ++r){
            var i = convOutputLength(n[r], this.kernelSize[r], this.padding, this.strides[r], "number" == typeof this.dilationRate ? this.dilationRate : this.dilationRate[r]);
            t.push(i);
        }
        var a = [
            e[0]
        ];
        return "channelsLast" === this.dataFormat ? (a = a.concat(t)).push(this.filters) : (a.push(this.filters), a = a.concat(t)), a;
    }, t50.prototype.getConfig = function() {
        var t = {
            filters: this.filters,
            kernelInitializer: serializeInitializer(this.kernelInitializer),
            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
            kernelConstraint: serializeConstraint(this.kernelConstraint)
        }, n = e86.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t50.verifyArgs = function(e) {
        if (!("filters" in e) || "number" != typeof e.filters || e.filters < 1) throw new ValueError("Convolution layer expected config.filters to be a 'number' > 0 but got " + JSON.stringify(e.filters));
    }, t50;
}(BaseConv), Conv2D = function(e87) {
    function t52(n) {
        var r = e87.call(this, 2, n) || this;
        return t52.verifyArgs(n), r;
    }
    return __extends(t52, e87), t52.prototype.getConfig = function() {
        var t = e87.prototype.getConfig.call(this);
        return delete t.rank, t;
    }, t52.verifyArgs = function(e) {
        if ("number" != typeof e.kernelSize && !checkArrayTypeAndLength(e.kernelSize, "number", 1, 2)) throw new ValueError("Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received " + JSON.stringify(e.kernelSize) + ".");
    }, t52.className = "Conv2D", t52;
}(Conv);
_tfjsCore.serialization.registerClass(Conv2D);
var Conv2DTranspose = function(e88) {
    function t53(t) {
        var n = e88.call(this, t) || this;
        if (n.inputSpec = [
            new InputSpec({
                ndim: 4
            })
        ], "same" !== n.padding && "valid" !== n.padding) throw new ValueError("Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode " + n.padding);
        return n;
    }
    return __extends(t53, e88), t53.prototype.build = function(e) {
        if (4 !== (e = getExactlyOneShape(e)).length) throw new ValueError("Input should have rank 4; Received input shape: " + JSON.stringify(e));
        var t = "channelsFirst" === this.dataFormat ? 1 : e.length - 1;
        if (null == e[t]) throw new ValueError("The channel dimension of the inputs should be defined. Found `None`.");
        var n, r = e[t], i = this.kernelSize.concat([
            this.filters,
            r
        ]);
        this.kernel = this.addWeight("kernel", i, "float32", this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [
            this.filters
        ], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint)), this.inputSpec = [
            new InputSpec({
                ndim: 4,
                axes: (n = {
                }, n[t] = r, n)
            })
        ], this.built = !0;
    }, t53.prototype.call = function(e, t54) {
        var n = this;
        return _tfjsCore.tidy(function() {
            var t = getExactlyOneTensor(e);
            if (4 !== t.shape.length) throw new ValueError("Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-" + t.shape.length);
            var r, i, a = t.shape, o = a[0];
            "channelsFirst" === n.dataFormat ? (r = 2, i = 3) : (r = 1, i = 2);
            var s = a[r], l = a[i], u = n.kernelSize[0], c = n.kernelSize[1], p = n.strides[0], h = n.strides[1], d = [
                o,
                deconvLength(s, p, u, n.padding),
                deconvLength(l, h, c, n.padding),
                n.filters
            ];
            "channelsLast" !== n.dataFormat && (t = _tfjsCore.transpose(t, [
                0,
                2,
                3,
                1
            ]));
            var f = _tfjsCore.conv2dTranspose(t, n.kernel.read(), d, n.strides, n.padding);
            return "channelsLast" !== n.dataFormat && (f = _tfjsCore.transpose(f, [
                0,
                3,
                1,
                2
            ])), null != n.bias && (f = biasAdd(f, n.bias.read(), n.dataFormat)), null != n.activation && (f = n.activation.apply(f)), f;
        });
    }, t53.prototype.computeOutputShape = function(e) {
        var t, n, r, i = (e = getExactlyOneShape(e)).slice();
        "channelsFirst" === this.dataFormat ? (t = 1, n = 2, r = 3) : (t = 3, n = 1, r = 2);
        var a = this.kernelSize[0], o = this.kernelSize[1], s = this.strides[0], l = this.strides[1];
        return i[t] = this.filters, i[n] = deconvLength(i[n], s, a, this.padding), i[r] = deconvLength(i[r], l, o, this.padding), i;
    }, t53.prototype.getConfig = function() {
        var t = e88.prototype.getConfig.call(this);
        return delete t.dilationRate, t;
    }, t53.className = "Conv2DTranspose", t53;
}(Conv2D);
_tfjsCore.serialization.registerClass(Conv2DTranspose);
var SeparableConv = function(e89) {
    function t55(t, n) {
        var r = e89.call(this, t, n) || this;
        if (r.DEFAULT_DEPTHWISE_INITIALIZER = "glorotUniform", r.DEFAULT_POINTWISE_INITIALIZER = "glorotUniform", r.depthwiseKernel = null, r.pointwiseKernel = null, null == n.filters) throw new ValueError("The `filters` configuration field is required by SeparableConv, but is unspecified.");
        if (null != n.kernelInitializer || null != n.kernelRegularizer || null != n.kernelConstraint) throw new ValueError("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");
        if (null != n.padding && "same" !== n.padding && "valid" !== n.padding) throw new ValueError("SeparableConv" + r.rank + "D supports only padding modes: 'same' and 'valid', but received " + JSON.stringify(n.padding));
        return r.depthMultiplier = null == n.depthMultiplier ? 1 : n.depthMultiplier, r.depthwiseInitializer = getInitializer(n.depthwiseInitializer || r.DEFAULT_DEPTHWISE_INITIALIZER), r.depthwiseRegularizer = getRegularizer(n.depthwiseRegularizer), r.depthwiseConstraint = getConstraint(n.depthwiseConstraint), r.pointwiseInitializer = getInitializer(n.depthwiseInitializer || r.DEFAULT_POINTWISE_INITIALIZER), r.pointwiseRegularizer = getRegularizer(n.pointwiseRegularizer), r.pointwiseConstraint = getConstraint(n.pointwiseConstraint), r;
    }
    return __extends(t55, e89), t55.prototype.build = function(e) {
        if ((e = getExactlyOneShape(e)).length < this.rank + 2) throw new ValueError("Inputs to SeparableConv" + this.rank + "D should have rank " + (this.rank + 2) + ", but received input shape: " + JSON.stringify(e));
        var t = "channelsFirst" === this.dataFormat ? 1 : e.length - 1;
        if (null == e[t] || e[t] < 0) throw new ValueError("The channel dimension of the inputs should be defined, but found " + JSON.stringify(e[t]));
        for(var n = e[t], r = this.kernelSize.concat([
            n,
            this.depthMultiplier
        ]), i = [], a = 0; a < this.rank; ++a)i.push(1);
        i.push(n * this.depthMultiplier, this.filters);
        var o;
        this.depthwiseKernel = this.addWeight("depthwise_kernel", r, "float32", this.depthwiseInitializer, this.depthwiseRegularizer, !0, this.depthwiseConstraint), this.pointwiseKernel = this.addWeight("pointwise_kernel", i, "float32", this.pointwiseInitializer, this.pointwiseRegularizer, !0, this.pointwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [
            this.filters
        ], "float32", this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.inputSpec = [
            new InputSpec({
                ndim: this.rank + 2,
                axes: (o = {
                }, o[t] = n, o)
            })
        ], this.built = !0;
    }, t55.prototype.call = function(e, t56) {
        var n = this;
        return _tfjsCore.tidy(function() {
            var t;
            if (e = getExactlyOneTensor(e), 1 === n.rank) throw new NotImplementedError("1D separable convolution is not implemented yet.");
            return 2 === n.rank && ("channelsFirst" === n.dataFormat && (e = _tfjsCore.transpose(e, [
                0,
                2,
                3,
                1
            ])), t = _tfjsCore.separableConv2d(e, n.depthwiseKernel.read(), n.pointwiseKernel.read(), n.strides, n.padding, n.dilationRate, "NHWC")), n.useBias && (t = biasAdd(t, n.bias.read(), n.dataFormat)), null != n.activation && (t = n.activation.apply(t)), "channelsFirst" === n.dataFormat && (t = _tfjsCore.transpose(t, [
                0,
                3,
                1,
                2
            ])), t;
        });
    }, t55.prototype.getConfig = function() {
        var t = e89.prototype.getConfig.call(this);
        return delete t.rank, delete t.kernelInitializer, delete t.kernelRegularizer, delete t.kernelConstraint, t.depthwiseInitializer = serializeInitializer(this.depthwiseInitializer), t.pointwiseInitializer = serializeInitializer(this.pointwiseInitializer), t.depthwiseRegularizer = serializeRegularizer(this.depthwiseRegularizer), t.pointwiseRegularizer = serializeRegularizer(this.pointwiseRegularizer), t.depthwiseConstraint = serializeConstraint(this.depthwiseConstraint), t.pointwiseConstraint = serializeConstraint(this.pointwiseConstraint), t;
    }, t55.className = "SeparableConv", t55;
}(Conv), SeparableConv2D = function(e) {
    function t57(t) {
        return e.call(this, 2, t) || this;
    }
    return __extends(t57, e), t57.className = "SeparableConv2D", t57;
}(SeparableConv);
_tfjsCore.serialization.registerClass(SeparableConv2D);
var Conv1D = function(e90) {
    function t58(n) {
        var r = e90.call(this, 1, n) || this;
        return t58.verifyArgs(n), r.inputSpec = [
            {
                ndim: 3
            }
        ], r;
    }
    return __extends(t58, e90), t58.prototype.getConfig = function() {
        var t = e90.prototype.getConfig.call(this);
        return delete t.rank, delete t.dataFormat, t;
    }, t58.verifyArgs = function(e) {
        if ("number" != typeof e.kernelSize && !checkArrayTypeAndLength(e.kernelSize, "number", 1, 1)) throw new ValueError("Conv1D expects config.kernelSize to be number or number[] with length 1, but received " + JSON.stringify(e.kernelSize) + ".");
    }, t58.className = "Conv1D", t58;
}(Conv);
_tfjsCore.serialization.registerClass(Conv1D);
var Cropping2D = function(e91) {
    function t59(t) {
        var n = e91.call(this, t) || this;
        return "number" == typeof t.cropping ? n.cropping = [
            [
                t.cropping,
                t.cropping
            ],
            [
                t.cropping,
                t.cropping
            ]
        ] : "number" == typeof t.cropping[0] ? n.cropping = [
            [
                t.cropping[0],
                t.cropping[0]
            ],
            [
                t.cropping[1],
                t.cropping[1]
            ]
        ] : n.cropping = t.cropping, n.dataFormat = void 0 === t.dataFormat ? "channelsLast" : t.dataFormat, n.inputSpec = [
            {
                ndim: 4
            }
        ], n;
    }
    return __extends(t59, e91), t59.prototype.computeOutputShape = function(e) {
        return "channelsFirst" === this.dataFormat ? [
            e[0],
            e[1],
            e[2] - this.cropping[0][0] - this.cropping[0][1],
            e[3] - this.cropping[1][0] - this.cropping[1][1]
        ] : [
            e[0],
            e[1] - this.cropping[0][0] - this.cropping[0][1],
            e[2] - this.cropping[1][0] - this.cropping[1][1],
            e[3]
        ];
    }, t59.prototype.call = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            return e = getExactlyOneTensor(e), "channelsLast" === n.dataFormat ? sliceAlongAxis(sliceAlongAxis(e, n.cropping[0][0], e.shape[1] - n.cropping[0][0] - n.cropping[0][1], 2), n.cropping[1][0], e.shape[2] - n.cropping[1][1] - n.cropping[1][0], 3) : sliceAlongAxis(sliceAlongAxis(e, n.cropping[0][0], e.shape[2] - n.cropping[0][0] - n.cropping[0][1], 3), n.cropping[1][0], e.shape[3] - n.cropping[1][1] - n.cropping[1][0], 4);
        });
    }, t59.prototype.getConfig = function() {
        var t = {
            cropping: this.cropping,
            dataFormat: this.dataFormat
        }, n = e91.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t59.className = "Cropping2D", t59;
}(Layer);
_tfjsCore.serialization.registerClass(Cropping2D);
var UpSampling2D = function(e92) {
    function t60(t) {
        var n = e92.call(this, t) || this;
        return n.DEFAULT_SIZE = [
            2,
            2
        ], n.inputSpec = [
            {
                ndim: 4
            }
        ], n.size = null == t.size ? n.DEFAULT_SIZE : t.size, n.dataFormat = null == t.dataFormat ? "channelsLast" : t.dataFormat, n;
    }
    return __extends(t60, e92), t60.prototype.computeOutputShape = function(e) {
        if ("channelsFirst" === this.dataFormat) {
            var t = null == e[2] ? null : this.size[0] * e[2], n = null == e[3] ? null : this.size[1] * e[3];
            return [
                e[0],
                e[1],
                t,
                n
            ];
        }
        t = null == e[1] ? null : this.size[0] * e[1], n = null == e[2] ? null : this.size[1] * e[2];
        return [
            e[0],
            t,
            n,
            e[3]
        ];
    }, t60.prototype.call = function(e, t61) {
        var n = this;
        return _tfjsCore.tidy(function() {
            var t = getExactlyOneTensor(e), r = t.shape;
            if ("channelsFirst" === n.dataFormat) {
                t = _tfjsCore.transpose(t, [
                    0,
                    2,
                    3,
                    1
                ]);
                var i = n.size[0] * r[2], a = n.size[1] * r[3], o = t.resizeNearestNeighbor([
                    i,
                    a
                ]);
                return _tfjsCore.transpose(o, [
                    0,
                    3,
                    1,
                    2
                ]);
            }
            i = n.size[0] * r[1], a = n.size[1] * r[2];
            return t.resizeNearestNeighbor([
                i,
                a
            ]);
        });
    }, t60.prototype.getConfig = function() {
        var t = {
            size: this.size,
            dataFormat: this.dataFormat
        }, n = e92.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t60.className = "UpSampling2D", t60;
}(Layer);
function depthwiseConv2d$1(e, t, n, r, i, a) {
    return void 0 === n && (n = [
        1,
        1
    ]), void 0 === r && (r = "valid"), _tfjsCore.tidy(function() {
        null == i && (i = imageDataFormat()), checkDataFormat(i);
        var o = preprocessConv2DInput(e, i);
        if (4 !== e.rank) throw new ValueError("Input for depthwiseConv2d is required to be 4-D, but is instead " + e.rank + "-D");
        if (4 !== t.rank) throw new ValueError("depthwiseKernel is required to be 4-D, but is instead " + t.rank + "-D");
        return o = _tfjsCore.depthwiseConv2d(o, t, n, "same" === r ? "same" : "valid", "NHWC", a), "channelsFirst" === i && (o = _tfjsCore.transpose(o, [
            0,
            3,
            1,
            2
        ])), o;
    });
}
_tfjsCore.serialization.registerClass(UpSampling2D);
var DepthwiseConv2D = function(e93) {
    function t62(t) {
        var n = e93.call(this, 2, t) || this;
        return n.depthwiseKernel = null, n.depthMultiplier = null == t.depthMultiplier ? 1 : t.depthMultiplier, n.depthwiseInitializer = getInitializer(t.depthwiseInitializer || n.DEFAULT_KERNEL_INITIALIZER), n.depthwiseConstraint = getConstraint(t.depthwiseConstraint), n.depthwiseRegularizer = getRegularizer(t.depthwiseRegularizer), n;
    }
    return __extends(t62, e93), t62.prototype.build = function(e) {
        if ((e = getExactlyOneShape(e)).length < 4) throw new ValueError("Inputs to DepthwiseConv2D should have rank 4. Received input shape: " + JSON.stringify(e) + ".");
        var t = "channelsFirst" === this.dataFormat ? 1 : 3;
        if (null == e[t] || e[t] < 0) throw new ValueError("The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (" + e[t] + ").");
        var n = e[t], r = [
            this.kernelSize[0],
            this.kernelSize[1],
            n,
            this.depthMultiplier
        ];
        this.depthwiseKernel = this.addWeight("depthwise_kernel", r, null, this.depthwiseInitializer, this.depthwiseRegularizer, !0, this.depthwiseConstraint), this.useBias ? this.bias = this.addWeight("bias", [
            n * this.depthMultiplier
        ], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
    }, t62.prototype.call = function(e, t63) {
        var n = this;
        return _tfjsCore.tidy(function() {
            var t = depthwiseConv2d$1(e = getExactlyOneTensor(e), n.depthwiseKernel.read(), n.strides, n.padding, n.dataFormat, null);
            return n.useBias && (t = biasAdd(t, n.bias.read(), n.dataFormat)), null != n.activation && (t = n.activation.apply(t)), t;
        });
    }, t62.prototype.computeOutputShape = function(e) {
        e = getExactlyOneShape(e);
        var t = "channelsFirst" === this.dataFormat ? e[2] : e[1], n = "channelsFirst" === this.dataFormat ? e[3] : e[2], r = "channelsFirst" === this.dataFormat ? e[1] * this.depthMultiplier : e[3] * this.depthMultiplier, i = convOutputLength(t, this.kernelSize[0], this.padding, this.strides[0]), a = convOutputLength(n, this.kernelSize[1], this.padding, this.strides[1]);
        return "channelsFirst" === this.dataFormat ? [
            e[0],
            r,
            i,
            a
        ] : [
            e[0],
            i,
            a,
            r
        ];
    }, t62.prototype.getConfig = function() {
        var t = e93.prototype.getConfig.call(this);
        return t.depthMultiplier = this.depthMultiplier, t.depthwiseInitializer = serializeInitializer(this.depthwiseInitializer), t.depthwiseRegularizer = serializeRegularizer(this.depthwiseRegularizer), t.depthwiseConstraint = serializeConstraint(this.depthwiseRegularizer), t;
    }, t62.className = "DepthwiseConv2D", t62;
}(BaseConv);
_tfjsCore.serialization.registerClass(DepthwiseConv2D);
var Dropout = function(e94) {
    function t64(t) {
        var n = e94.call(this, t) || this;
        if (n.rate = Math.max(Math.min(t.rate, 1), 0), n.rateScalar = getScalar(n.rate), n.noiseShape = t.noiseShape, n.seed = t.seed, null != n.seed) throw new NotImplementedError("Non-default seed is not implemented in Dropout layer yet: " + n.seed);
        return n.supportsMasking = !0, n;
    }
    return __extends(t64, e94), t64.prototype.getNoiseShape = function(e) {
        if (null == this.noiseShape) return this.noiseShape;
        for(var t = e.shape, n = [], r = 0; r < this.noiseShape.length; ++r)n.push(null == this.noiseShape[r] ? t[r] : this.noiseShape[r]);
        return n;
    }, t64.prototype.call = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            n.invokeCallHook(e, t);
            var r = getExactlyOneTensor(e);
            if (null != n.noiseShape && !_tfjsCore.util.arraysEqual(r.shape, n.noiseShape)) throw new NotImplementedError("Non-default noise shape is not implemented in Dropout layer yet: " + JSON.stringify(n.noiseShape));
            if (0 < n.rate && n.rate < 1) {
                var i = null != t.training && t.training, a = n.getNoiseShape(r);
                return inTrainPhase(function() {
                    return dropout(r, n.rateScalar, a, n.seed);
                }, function() {
                    return r;
                }, i);
            }
            return e;
        });
    }, t64.prototype.getConfig = function() {
        var t = {
            rate: this.rate,
            noiseShape: this.noiseShape,
            seed: this.seed
        }, n = e94.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t64.prototype.dispose = function() {
        var t = e94.prototype.dispose.call(this);
        return this.rateScalar.isDisposed || (this.rateScalar.dispose(), t.numDisposedVariables++), t;
    }, t64.className = "Dropout", t64;
}(Layer);
_tfjsCore.serialization.registerClass(Dropout);
var Dense = function(e95) {
    function t65(t) {
        var n = e95.call(this, t) || this;
        if (n.activation = null, n.useBias = !0, n.kernel = null, n.bias = null, n.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", n.DEFAULT_BIAS_INITIALIZER = "zeros", null == t.batchInputShape && null == t.inputShape && null != t.inputDim) {
            var r = null;
            null != t.batchSize && (r = t.batchSize), n.batchInputShape = [
                r,
                t.inputDim
            ];
        }
        return n.units = t.units, n.activation = getActivation(t.activation), null != t.useBias && (n.useBias = t.useBias), n.kernelInitializer = getInitializer(t.kernelInitializer || n.DEFAULT_KERNEL_INITIALIZER), n.biasInitializer = getInitializer(t.biasInitializer || n.DEFAULT_BIAS_INITIALIZER), n.kernelConstraint = getConstraint(t.kernelConstraint), n.biasConstraint = getConstraint(t.biasConstraint), n.kernelRegularizer = getRegularizer(t.kernelRegularizer), n.biasRegularizer = getRegularizer(t.biasRegularizer), n.activityRegularizer = getRegularizer(t.activityRegularizer), n.supportsMasking = !0, n.inputSpec = [
            {
                minNDim: 2
            }
        ], n;
    }
    return __extends(t65, e95), t65.prototype.build = function(e) {
        var t, n = (e = getExactlyOneShape(e))[e.length - 1];
        null == this.kernel && (this.kernel = this.addWeight("kernel", [
            n,
            this.units
        ], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.useBias && (this.bias = this.addWeight("bias", [
            this.units
        ], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint))), this.inputSpec = [
            {
                minNDim: 2,
                axes: (t = {
                }, t[-1] = n, t)
            }
        ], this.built = !0;
    }, t65.prototype.computeOutputShape = function(e) {
        var t = (e = getExactlyOneShape(e)).slice();
        return t[t.length - 1] = this.units, t;
    }, t65.prototype.call = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            n.invokeCallHook(e, t);
            var r = dot(getExactlyOneTensor(e), n.kernel.read());
            return null != n.bias && (r = biasAdd(r, n.bias.read())), null != n.activation && (r = n.activation.apply(r)), r;
        });
    }, t65.prototype.getConfig = function() {
        var t = {
            units: this.units,
            activation: serializeActivation(this.activation),
            useBias: this.useBias,
            kernelInitializer: serializeInitializer(this.kernelInitializer),
            biasInitializer: serializeInitializer(this.biasInitializer),
            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
            biasRegularizer: serializeRegularizer(this.biasRegularizer),
            activityRegularizer: serializeRegularizer(this.activityRegularizer),
            kernelConstraint: serializeConstraint(this.kernelConstraint),
            biasConstraint: serializeConstraint(this.biasConstraint)
        }, n = e95.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t65.className = "Dense", t65;
}(Layer);
_tfjsCore.serialization.registerClass(Dense);
var Flatten = function(e96) {
    function t66(t) {
        var n = e96.call(this, t || {
        }) || this;
        return n.inputSpec = [
            {
                minNDim: 3
            }
        ], n;
    }
    return __extends(t66, e96), t66.prototype.computeOutputShape = function(e) {
        for(var t = 0, n = (e = getExactlyOneShape(e)).slice(1); t < n.length; t++){
            if (null == n[t]) throw new ValueError('The shape of the input to "Flatten" is not fully defined (got ' + e.slice(1) + '). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.');
        }
        return [
            e[0],
            arrayProd(e, 1)
        ];
    }, t66.prototype.call = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            return n.invokeCallHook(e, t), batchFlatten(getExactlyOneTensor(e));
        });
    }, t66.className = "Flatten", t66;
}(Layer);
_tfjsCore.serialization.registerClass(Flatten);
var Activation$1 = function(e97) {
    function t67(t) {
        var n = e97.call(this, t) || this;
        return n.supportsMasking = !0, n.activation = getActivation(t.activation), n;
    }
    return __extends(t67, e97), t67.prototype.call = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            n.invokeCallHook(e, t);
            var r = getExactlyOneTensor(e);
            return n.activation.apply(r);
        });
    }, t67.prototype.getConfig = function() {
        var t = {
            activation: serializeActivation(this.activation)
        }, n = e97.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t67.className = "Activation", t67;
}(Layer);
_tfjsCore.serialization.registerClass(Activation$1);
var RepeatVector = function(e98) {
    function t68(t) {
        var n = e98.call(this, t) || this;
        return n.n = t.n, n.inputSpec = [
            {
                ndim: 2
            }
        ], n;
    }
    return __extends(t68, e98), t68.prototype.computeOutputShape = function(e) {
        return [
            e[0],
            this.n,
            e[1]
        ];
    }, t68.prototype.call = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            return repeat(e = getExactlyOneTensor(e), n.n);
        });
    }, t68.prototype.getConfig = function() {
        var t = {
            n: this.n
        }, n = e98.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t68.className = "RepeatVector", t68;
}(Layer);
_tfjsCore.serialization.registerClass(RepeatVector);
var Reshape = function(e99) {
    function t69(t) {
        var n = e99.call(this, t) || this;
        n.targetShape = t.targetShape;
        for(var r = 0; r < n.targetShape.length; ++r)n.isUnknown(n.targetShape[r]) && (n.targetShape[r] = null);
        return n;
    }
    return __extends(t69, e99), t69.prototype.isUnknown = function(e) {
        return e < 0 || null == e;
    }, t69.prototype.fixUnknownDimension = function(e, t) {
        for(var n = "Total size of new array must be unchanged.", r = t.slice(), i = 1, a = null, o = 0; o < r.length; ++o){
            var s = r[o];
            if (this.isUnknown(s)) {
                if (null !== a) throw new ValueError("Can only specifiy one unknown dimension.");
                a = o;
            } else i *= s;
        }
        var l = arrayProd(e);
        if (null !== a) {
            if (0 === i || l % i != 0) throw new ValueError(n);
            r[a] = l / i;
        } else if (l !== i) throw new ValueError(n);
        return r;
    }, t69.prototype.computeOutputShape = function(e) {
        for(var t = !1, n = 0; n < e.length; ++n)if (this.isUnknown(e[n])) {
            t = !0;
            break;
        }
        return t ? e.slice(0, 1).concat(this.targetShape) : e.slice(0, 1).concat(this.fixUnknownDimension(e.slice(1), this.targetShape));
    }, t69.prototype.call = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            n.invokeCallHook(e, t);
            var r = getExactlyOneTensor(e), i = r.shape, a = i.slice(0, 1).concat(n.fixUnknownDimension(i.slice(1), n.targetShape));
            return r.reshape(a);
        });
    }, t69.prototype.getConfig = function() {
        var t = {
            targetShape: this.targetShape
        }, n = e99.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t69.className = "Reshape", t69;
}(Layer);
_tfjsCore.serialization.registerClass(Reshape);
var Permute = function(e100) {
    function t70(t) {
        var n = e100.call(this, t) || this;
        if (null == t.dims) throw new Error("Required configuration field `dims` is missing during Permute constructor call.");
        if (!Array.isArray(t.dims)) throw new Error("Permute constructor requires `dims` to be an Array, but received " + t.dims + " instead.");
        var r = range(1, t.dims.length + 1);
        if (!_tfjsCore.util.arraysEqual(t.dims.slice().sort(), r)) throw new Error("Invalid permutation `dims`: " + JSON.stringify(t.dims) + " `dims` must contain consecutive integers starting from 1.");
        return n.dims = t.dims, n.dimsIncludingBatch = [
            0
        ].concat(n.dims), n.inputSpec = [
            new InputSpec({
                ndim: n.dims.length + 1
            })
        ], n;
    }
    return __extends(t70, e100), t70.prototype.computeOutputShape = function(e) {
        var t = (e = getExactlyOneShape(e)).slice();
        return this.dims.forEach(function(n, r) {
            t[r + 1] = e[n];
        }), t;
    }, t70.prototype.call = function(e, t) {
        return _tfjsCore.transpose(getExactlyOneTensor(e), this.dimsIncludingBatch);
    }, t70.prototype.getConfig = function() {
        var t = {
            dims: this.dims
        }, n = e100.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t70.className = "Permute", t70;
}(Layer);
_tfjsCore.serialization.registerClass(Permute);
var Embedding = function(e101) {
    function t71(t) {
        var n = e101.call(this, t) || this;
        if (n.embeddings = null, n.DEFAULT_EMBEDDINGS_INITIALIZER = "randomUniform", null == t.batchInputShape && null == t.inputShape) {
            var r = null;
            null != t.batchSize && (r = t.batchSize), null == t.inputLength ? n.batchInputShape = [
                r,
                null
            ] : n.batchInputShape = [
                r
            ].concat(toList(t.inputLength));
        }
        return n.inputDim = t.inputDim, n.outputDim = t.outputDim, n.embeddingsInitializer = getInitializer(t.embeddingsInitializer || n.DEFAULT_EMBEDDINGS_INITIALIZER), n.embeddingsRegularizer = getRegularizer(t.embeddingsRegularizer), n.activityRegularizer = getRegularizer(t.activityRegularizer), n.embeddingsConstraint = getConstraint(t.embeddingsConstraint), n.maskZero = t.maskZero, n.supportsMasking = t.maskZero, n.inputLength = t.inputLength, n;
    }
    return __extends(t71, e101), t71.prototype.build = function(e) {
        this.embeddings = this.addWeight("embeddings", [
            this.inputDim,
            this.outputDim
        ], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, !0, this.embeddingsConstraint), this.built = !0;
    }, t71.prototype.warnOnIncompatibleInputShape = function(e) {
    }, t71.prototype.computeMask = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            return n.maskZero ? (e = getExactlyOneTensor(e), _tfjsCore.notEqual(e, _tfjsCore.zerosLike(e))) : null;
        });
    }, t71.prototype.computeOutputShape = function(e) {
        if (e = getExactlyOneShape(e), null == this.inputLength) return e.concat([
            this.outputDim
        ]);
        var t = toList(this.inputLength);
        if (t.length !== e.length - 1) throw new ValueError('"inputLength" is ' + this.inputLength + ", but received input shape has shape " + e);
        for(var n = 0, r = 0; r < t.length; ++r){
            var i = t[r], a = e[r + 1];
            if (null != i && null != a && i !== a) throw new ValueError('"inputLength" is ' + this.inputLength + ", but received input shape has shape " + e);
            null == i && (t[n] = a), n++;
        }
        return [
            e[0]
        ].concat(t, [
            this.outputDim
        ]);
    }, t71.prototype.call = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            n.invokeCallHook(e, t);
            var r = getExactlyOneTensor(e);
            return "int32" !== r.dtype && (r = cast$1(r, "int32")), gather$1(n.embeddings.read(), r.as1D()).reshape(getExactlyOneShape(n.computeOutputShape(r.shape)));
        });
    }, t71.prototype.getConfig = function() {
        var t = {
            inputDim: this.inputDim,
            outputDim: this.outputDim,
            embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),
            embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),
            activityRegularizer: serializeRegularizer(this.activityRegularizer),
            embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),
            maskZero: this.maskZero,
            inputLength: this.inputLength
        }, n = e101.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t71.className = "Embedding", t71;
}(Layer);
_tfjsCore.serialization.registerClass(Embedding);
var Merge = function(e102) {
    function t72(t) {
        var n = e102.call(this, t || {
        }) || this;
        return n.supportsMasking = !0, n;
    }
    return __extends(t72, e102), t72.prototype.mergeFunction = function(e) {
        throw new NotImplementedError;
    }, t72.prototype.computeElementwiseOpOutputShape = function(e, t) {
        if (null == e || null == t) return null;
        if (e.length < t.length) return this.computeElementwiseOpOutputShape(t, e);
        if (0 === t.length) return e;
        for(var n = e.slice(0, e.length - t.length), r = 0; r < t.length; ++r){
            var i = e[e.length - t.length + r], a = t[r];
            if (null == i || null == a || i < 0 || a < 0) n.push(null);
            else if (1 === i) n.push(a);
            else if (1 === a) n.push(i);
            else {
                if (i !== a) throw new ValueError("Operands could not be broadcast together with shapes " + JSON.stringify(e) + " " + JSON.stringify(t));
                n.push(i);
            }
        }
        return n;
    }, t72.prototype.build = function(e103) {
        if (Array.isArray(e103) && !Array.isArray(e103[0]) && (e103 = [
            getExactlyOneShape(e103)
        ]), e103.length < 2) throw new ValueError("A merge layer should be called on an Array of at least 2 inputs. Got " + e103.length + " input(s).");
        for(var t = [], n = 0, r = e103; n < r.length; n++)null != (o = r[n]) && null !== o[0] && t.push(o[0]);
        if ((t = unique(t)).length > 1) throw new ValueError("Can not merge tensors with different batch sizes. Got tensors with shapes: " + JSON.stringify(e103) + ".");
        for(var i = null == e103[0] ? null : e103[0].slice(1), a = 1; a < e103.length; ++a){
            var o = null == e103[a] ? null : e103[a].slice(1);
            i = this.computeElementwiseOpOutputShape(i, o);
        }
        var s = e103.map(function(e) {
            return e.length;
        });
        -1 === e103.indexOf(null) && 1 === unique(s).length ? this.reshapeRequired = !1 : this.reshapeRequired = !0;
    }, t72.prototype.call = function(e104, t73) {
        var n = this;
        return _tfjsCore.tidy(function() {
            if (e104, n.reshapeRequired) {
                var t = [], r = e104.map(function(e) {
                    return e.rank;
                });
                if (-1 === r.indexOf(null)) {
                    for(var i = max$1(r), a = 0, o = e104; a < o.length; a++){
                        for(var s = (h = o[a]).rank, l = 0; l < i - s; ++l)h = expandDims$1(h, 1);
                        t.push(h);
                    }
                    return n.mergeFunction(t);
                }
                for(var u = !1, c = 0, p = e104; c < p.length; c++){
                    var h;
                    if (null == (s = (h = p[c]).rank)) {
                        var d = h.shape, f = d[0], g = d.slice(1).concat([
                            f
                        ]), m = h.reshape([
                            f
                        ].concat(arrayProd(d.slice(1))));
                        m = (m = _tfjsCore.transpose(m, [
                            1,
                            0
                        ])).reshape(g), t.push(m), u = !0;
                    } else if (s > 1) {
                        var y = range(1, s).concat([
                            0
                        ]);
                        t.push(_tfjsCore.transpose(h, y)), u = !0;
                    } else t.push(h);
                }
                var v = n.mergeFunction(t), b = v.rank;
                if (u) {
                    if (null == b) {
                        var w = v.shape;
                        g = [
                            f = w[w.length - 1]
                        ].concat(w.slice(0, w.length - 1));
                        v = _tfjsCore.transpose(v.reshape([
                            -1,
                            f
                        ]), [
                            1,
                            0
                        ]).reshape(g);
                    } else if (b > 1) {
                        y = [
                            b - 1
                        ].concat(range(0, b - 1));
                        v = _tfjsCore.transpose(v, y);
                    }
                }
                return v;
            }
            return n.mergeFunction(e104);
        });
    }, t72.prototype.computeOutputShape = function(e) {
        var t;
        t = null == e[0] ? null : e[0].slice(1);
        for(var n = 1; n < e.length; ++n){
            var r = null == e[n] ? null : e[n].slice(1);
            t = this.computeElementwiseOpOutputShape(t, r);
        }
        for(var i = [], a = 0, o = e; a < o.length; a++)null != (r = o[a]) && null !== r[0] && i.push(r[0]);
        return t = 1 === (i = unique(i)).length ? i.concat(t) : [
            null
        ].concat(t);
    }, t72.prototype.computeMask = function(e105, t) {
        return _tfjsCore.tidy(function() {
            if (null == t) return null;
            if (!Array.isArray(t)) throw new ValueError("`mask` should be an Array");
            if (!Array.isArray(e105)) throw new ValueError("`inputs` should be an Array");
            if (t.length !== e105.length) throw new ValueError("The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (" + e105.length + " vs " + t.length + ")");
            if (t.every(function(e) {
                return null == e;
            })) return null;
            for(var n = (t = t.map(function(e) {
                return null == e ? e : _tfjsCore.expandDims(e, 0);
            }))[0], r = 1; r < t.length - 1; ++r)n = _tfjsCore.logicalAnd(n, t[r]);
            return n;
        });
    }, t72;
}(Layer), Add = function(e106) {
    function t74(t) {
        return e106.call(this, t) || this;
    }
    return __extends(t74, e106), t74.prototype.mergeFunction = function(e) {
        return _tfjsCore.tidy(function() {
            for(var t = e[0].clone(), n = 1; n < e.length; ++n)t = _tfjsCore.add(t, e[n]);
            return t;
        });
    }, t74.className = "Add", t74;
}(Merge);
_tfjsCore.serialization.registerClass(Add);
var Multiply = function(e107) {
    function t75(t) {
        return e107.call(this, t) || this;
    }
    return __extends(t75, e107), t75.prototype.mergeFunction = function(e) {
        return _tfjsCore.tidy(function() {
            for(var t = e[0].clone(), n = 1; n < e.length; ++n)t = _tfjsCore.mul(t, e[n]);
            return t;
        });
    }, t75.className = "Multiply", t75;
}(Merge);
_tfjsCore.serialization.registerClass(Multiply);
var Average = function(e108) {
    function t76(t) {
        return e108.call(this, t) || this;
    }
    return __extends(t76, e108), t76.prototype.mergeFunction = function(e) {
        return _tfjsCore.tidy(function() {
            for(var t = e[0].clone(), n = 1; n < e.length; ++n)t = _tfjsCore.add(t, e[n]);
            return _tfjsCore.mul(getScalar(1 / e.length), t);
        });
    }, t76.className = "Average", t76;
}(Merge);
_tfjsCore.serialization.registerClass(Average);
var Maximum = function(e109) {
    function t77(t) {
        return e109.call(this, t) || this;
    }
    return __extends(t77, e109), t77.prototype.mergeFunction = function(e) {
        return _tfjsCore.tidy(function() {
            for(var t = e[0], n = 1; n < e.length; ++n)t = _tfjsCore.maximum(t, e[n]);
            return t;
        });
    }, t77.className = "Maximum", t77;
}(Merge);
_tfjsCore.serialization.registerClass(Maximum);
var Minimum = function(e110) {
    function t78(t) {
        return e110.call(this, t) || this;
    }
    return __extends(t78, e110), t78.prototype.mergeFunction = function(e) {
        return _tfjsCore.tidy(function() {
            for(var t = e[0], n = 1; n < e.length; ++n)t = _tfjsCore.minimum(t, e[n]);
            return t;
        });
    }, t78.className = "Minimum", t78;
}(Merge);
_tfjsCore.serialization.registerClass(Minimum);
var Concatenate = function(e111) {
    function t79(t) {
        var n = e111.call(this, t) || this;
        return n.DEFAULT_AXIS = -1, null == t && (t = {
        }), n.axis = null == t.axis ? n.DEFAULT_AXIS : t.axis, n.supportsMasking = !0, n.reshapeRequired = !1, n;
    }
    return __extends(t79, e111), t79.prototype.build = function(e) {
        if (!Array.isArray(e) || !Array.isArray(e[0]) || 1 === e.length) throw new ValueError("A `Concatenate` layer should be called on a list of at least 2 inputs");
        for(var t = !0, n = 0, r = e; n < r.length; n++)if (null != (c = r[n])) {
            t = !1;
            break;
        }
        if (!t) {
            for(var i = [], a = 0; a < e.length; ++a){
                var o = e[a].slice();
                o.splice(this.axis, 1);
                for(var s = !1, l = 0, u = i; l < u.length; l++){
                    var c = u[l];
                    if (_tfjsCore.util.arraysEqual(c, o)) {
                        s = !0;
                        break;
                    }
                }
                s || i.push(o);
            }
            if (i.length > 1) throw new ValueError("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: " + JSON.stringify(e));
        }
    }, t79.prototype.mergeFunction = function(e) {
        var t = this;
        return _tfjsCore.tidy(function() {
            return concatenate(e, t.axis);
        });
    }, t79.prototype.computeOutputShape = function(e) {
        if (!Array.isArray(e) || !Array.isArray(e[0])) throw new ValueError("A `Concatenate` layer should be called on a list of inputs.");
        for(var t = e, n = t[0].slice(), r = this.axis < 0 ? n.length + this.axis : this.axis, i = 0, a = t.slice(1); i < a.length; i++){
            var o = a[i];
            if (null == n[r] || null == o[r]) {
                n[r] = null;
                break;
            }
            n[r] += o[r];
        }
        return n;
    }, t79.prototype.computeMask = function(e112, t) {
        var n = this;
        if (null == t) return null;
        if (!Array.isArray(t)) throw new ValueError("`mask` should be an array for Concatenate");
        if (!Array.isArray(e112)) throw new ValueError("`inputs` should be an array for Concatenate");
        if (t.length !== e112.length) throw new ValueError("Mismatch in the length of mask (" + t.length + ") and the legnth of inputs (" + e112.length + ")");
        return _tfjsCore.tidy(function() {
            var r = !0;
            if (t.forEach(function(e) {
                null == e || (r = !1);
            }), r) return null;
            for(var i = [], a = 0; a < e112.length; ++a)null == t[a] ? i.push(_tfjsCore.onesLike(e112[a]).asType("bool")) : t[a].rank < e112[a].rank ? i.push(_tfjsCore.expandDims(t[a], -1)) : i.push(t[a]);
            var o = _tfjsCore.concat(i, n.axis);
            return _tfjsCore.all(o, -1, !1);
        });
    }, t79.prototype.getConfig = function() {
        var t = {
            axis: this.axis
        }, n = e111.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t79.className = "Concatenate", t79;
}(Merge);
function interpretAxis(e, t) {
    for(; e < 0;)e += t;
    return e;
}
function batchDot(e, t, n11) {
    if (e.shape.length > 3 || t.shape.length > 3) throw new NotImplementedError("batchDot is not implemented for tensors of 4D or higher rank yet");
    if (_tfjsCore.util.assert(e.shape.length >= 2, "batchDot requires the rank of x to be >= 2, but got " + e.shape.length), _tfjsCore.util.assert(e.shape.length >= 2, "batchDot requires the rank of y to be >= 2, but got " + t.shape.length), "number" == typeof n11 && (n11 = [
        n11,
        n11
    ]), "complex64" === e.dtype || "complex64" === t.dtype) throw new NotImplementedError("batchDot is not implemented for complex64-type Tensors yet.");
    var r = e.shape.length, i = t.shape.length;
    null == n11 && (n11 = [
        r - 1,
        i - 2
    ]);
    var a = n11;
    return _tfjsCore.tidy(function() {
        var n, o;
        if (r > i) {
            n = r - i;
            for(var s = [], l = 0; l < n; ++l)s.push(1);
            t = t.reshape(t.shape.concat(s));
        } else if (i > r) {
            n = i - r;
            for(s = [], l = 0; l < n; ++l)s.push(1);
            e = e.reshape(e.shape.concat(s));
        } else n = 0;
        if (2 === e.shape.length && 2 === t.shape.length) o = a[0] === a[1] ? e.mulStrict(t).sum(a[0]) : e.transpose([
            1,
            0
        ]).mulStrict(t).sum(a[1]);
        else {
            var u = a[0] !== e.shape.length - 1, c = a[1] === t.shape.length - 1;
            o = e.matMul(t, u, c);
        }
        if (n > 0) {
            var p = void 0, h = [];
            for(l = p = r > i ? r + i - 3 : r - 1; l < p + n; ++l)h.push(l);
            o = o.squeeze(h);
        }
        return 1 === o.shape.length && (o = o.expandDims(1)), o;
    });
}
_tfjsCore.serialization.registerClass(Concatenate);
var Dot = function(e113) {
    function t80(t) {
        var n = e113.call(this, t) || this;
        return n.axes = t.axes, n.normalize = null != t.normalize && t.normalize, n.supportsMasking = !0, n.reshapeRequired = !1, n;
    }
    return __extends(t80, e113), t80.prototype.build = function(e) {
        _tfjsCore.util.assert(Array.isArray(e) && 2 === e.length && Array.isArray(e[0]) && Array.isArray(e[1]), "A `Dot` layer should be called on a list of exactly 2 inputs.");
        var t = e[0], n = e[1];
        if (t.length > 3 || n.length > 3) throw new NotImplementedError("Dot layer does not support tensors of 4D or higher rank yet.");
        var r = this.interpretAxes(t, n);
        if (t[r[0]] !== n[r[1]]) throw new ValueError("Dimension incompatibility: " + t[r[0]] + " !== " + n[r[1]]);
    }, t80.prototype.mergeFunction = function(e) {
        if (2 !== e.length) throw new ValueError("A `Dot` layer must be called on exactly 2 inputs, but received " + e.length + " input(s).");
        var t81, n = e[0], r = e[1];
        return t81 = Array.isArray(this.axes) ? this.axes.map(function(t, n) {
            return interpretAxis(t, e[n].shape.length);
        }) : [
            interpretAxis(this.axes, n.shape.length),
            interpretAxis(this.axes, r.shape.length)
        ], this.normalize && (n = l2Normalize(n, t81[0]), r = l2Normalize(r, t81[1])), batchDot(n, r, t81);
    }, t80.prototype.interpretAxes = function(e, t) {
        return Array.isArray(this.axes) ? this.axes : [
            interpretAxis(this.axes, e.length),
            interpretAxis(this.axes, t.length)
        ];
    }, t80.prototype.computeOutputShape = function(e) {
        _tfjsCore.util.assert(Array.isArray(e) && 2 === e.length && Array.isArray(e[0]) && Array.isArray(e[1]), "A `Dot` layer should be called on a list of exactly 2 inputs.");
        var t = e[0].slice(), n = e[1].slice();
        if (t.length > 3 || n.length > 3) throw new NotImplementedError("Dot layer does not support tensors of 4D or higher rank yet.");
        var r = this.interpretAxes(t, n);
        t.splice(r[0], 1), n.splice(r[1], 1), n.splice(0, 1);
        var i = t.concat(n);
        return 1 === i.length && i.push(1), i;
    }, t80.prototype.computeMask = function(e, t) {
        return null;
    }, t80.prototype.getConfig = function() {
        var t = {
            axes: this.axes,
            normalize: this.normalize
        }, n = e113.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t80.className = "Dot", t80;
}(Merge);
function batchNormalization(e, t, n, r, i, a) {
    var o;
    if (void 0 === a && (a = 0.001), 2 === e.rank) o = _tfjsCore.batchNorm2d(e, t, n, r, i, a);
    else if (3 === e.rank) o = _tfjsCore.batchNorm3d(e, t, n, r, i, a);
    else {
        if (4 !== e.rank) throw new NotImplementedError("batchNormalization is not implemented for array of rank " + e.rank + " yet");
        o = _tfjsCore.batchNorm4d(e, t, n, r, i, a);
    }
    return o;
}
function regularNormalizeBatchInTraining(e, t, n, r, i) {
    return void 0 === i && (i = 0.001), _tfjsCore.tidy(function() {
        var a = _tfjsCore.moments(e, r), o = a.mean, s = a.variance;
        return [
            batchNormalization(e, o, s, n, t, i),
            o,
            s
        ];
    });
}
function broadcastNormalizeBatchInTraining(e, t, n, r, i) {
    return void 0 === i && (i = 0.001), _tfjsCore.tidy(function() {
        for(var a = _tfjsCore.moments(e, r), o = a.mean, s = a.variance, l = [], u = 0, c = range(0, e.rank); u < c.length; u++){
            var p = c[u];
            -1 !== r.indexOf(p) ? l.push(1) : l.push(e.shape[p]);
        }
        var h = o.reshape(l), d = s.reshape(l), f = null == t ? null : t.reshape(l), g = null == n ? null : n.reshape(l);
        return [
            batchNormalization(e, h, d, g, f, i),
            o,
            s
        ];
    });
}
function normalizeBatchInTraining(e, t, n, r, i) {
    return void 0 === i && (i = 0.001), _tfjsCore.util.arraysEqual(r.slice().sort(), range(0, e.rank - 1)) ? regularNormalizeBatchInTraining(e, t, n, r, i) : broadcastNormalizeBatchInTraining(e, t, n, r, i);
}
_tfjsCore.serialization.registerClass(Dot);
var BatchNormalization = function(e114) {
    function t82(t) {
        var n = this;
        return null == t && (t = {
        }), (n = e114.call(this, t) || this).supportsMasking = !0, n.axis = null == t.axis ? -1 : t.axis, n.momentum = null == t.momentum ? 0.99 : t.momentum, n.epsilon = null == t.epsilon ? 0.001 : t.epsilon, n.center = null == t.center || t.center, n.scale = null == t.scale || t.scale, n.betaInitializer = getInitializer(t.betaInitializer || "zeros"), n.gammaInitializer = getInitializer(t.gammaInitializer || "ones"), n.movingMeanInitializer = getInitializer(t.movingMeanInitializer || "zeros"), n.movingVarianceInitializer = getInitializer(t.movingVarianceInitializer || "ones"), n.betaConstraint = getConstraint(t.betaConstraint), n.gammaConstraint = getConstraint(t.gammaConstraint), n.betaRegularizer = getRegularizer(t.betaRegularizer), n.gammaRegularizer = getRegularizer(t.gammaRegularizer), n;
    }
    return __extends(t82, e114), t82.prototype.build = function(e) {
        e = getExactlyOneShape(e);
        var t = this.axis >= 0 ? this.axis : this.axis + e.length, n = e[t];
        if (null == n) throw new ValueError("Axis " + t + " of input tensor should have a defined dimension but the layer received an input with shape " + JSON.stringify(e) + ".");
        this.inputSpec = [
            new InputSpec({
                ndim: e.length,
                axes: (r = {
                }, r[t] = n, r)
            })
        ];
        var r, i = [
            n
        ];
        this.scale && (this.gamma = this.addWeight("gamma", i, null, this.gammaInitializer, this.gammaRegularizer, !0, this.gammaConstraint)), this.center && (this.beta = this.addWeight("beta", i, null, this.betaInitializer, this.betaRegularizer, !0, this.betaConstraint)), this.movingMean = this.addWeight("moving_mean", i, null, this.movingMeanInitializer, null, !1), this.movingVariance = this.addWeight("moving_variance", i, null, this.movingVarianceInitializer, null, !1), this.built = !0;
    }, t82.prototype.call = function(e115, t83) {
        var n12 = this;
        return _tfjsCore.tidy(function() {
            var r5 = null != t83.training && t83.training, i4 = getExactlyOneTensor(e115), a9 = i4.shape, o = a9.length, s = range(0, o), l = n12.axis >= 0 ? n12.axis : n12.axis + o;
            s.splice(l, 1);
            var u = pyListRepeat(1, o);
            u[l] = a9[l];
            var c = s.slice();
            c.sort();
            var p = !_tfjsCore.util.arraysEqual(c, range(0, o).slice(0, o - 1));
            if (!r5) return (function() {
                if (p) {
                    var e = n12.movingMean.read().reshape(u), t = n12.movingVariance.read().reshape(u), r = n12.center ? n12.beta.read().reshape(u) : null, a = n12.scale ? n12.gamma.read().reshape(u) : null;
                    return batchNormalization(i4, e, t, r, a, n12.epsilon);
                }
                return batchNormalization(i4, n12.movingMean.read(), n12.movingVariance.read(), null == n12.beta ? null : n12.beta.read(), null == n12.gamma ? null : n12.gamma.read(), n12.epsilon);
            })();
            var h = normalizeBatchInTraining(i4, n12.gamma.read(), n12.beta.read(), s, n12.epsilon), d = h[0], f = h[1], g = h[2], m = function(e, t, n) {
                _tfjsCore.tidy(function() {
                    var r = getScalar(1).sub(getScalar(n)), i = e.read(), a = i.sub(t).mul(r);
                    e.write(i.sub(a));
                });
            };
            return m(n12.movingMean, f, n12.momentum), m(n12.movingVariance, g, n12.momentum), d;
        });
    }, t82.prototype.getConfig = function() {
        var t = {
            axis: this.axis,
            momentum: this.momentum,
            epsilon: this.epsilon,
            center: this.center,
            scale: this.scale,
            betaInitializer: serializeInitializer(this.betaInitializer),
            gammaInitializer: serializeInitializer(this.gammaInitializer),
            movingMeanInitializer: serializeInitializer(this.movingMeanInitializer),
            movingVarianceInitializer: serializeInitializer(this.movingVarianceInitializer),
            betaRegularizer: serializeRegularizer(this.betaRegularizer),
            gammaRegularizer: serializeRegularizer(this.gammaRegularizer),
            betaConstraint: serializeConstraint(this.betaConstraint),
            gammaConstraint: serializeConstraint(this.gammaConstraint)
        }, n = e114.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t82.className = "BatchNormalization", t82;
}(Layer);
function spatial2dPadding(e, t, n) {
    return _tfjsCore.tidy(function() {
        if (4 !== e.rank) throw new ValueError("temporalPadding expects input tensor to be 4-D, but received a " + e.rank + "-D tensor.");
        if (null == t && (t = [
            [
                1,
                1
            ],
            [
                1,
                1
            ]
        ]), 2 !== t.length || 2 !== t[0].length || 2 !== t[1].length) throw new ValueError("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");
        if (null == n && (n = imageDataFormat()), "channelsLast" !== n && "channelsFirst" !== n) throw new ValueError("Unknown data format: " + n + ". Supported data formats are 'channelsLast' and 'channelsFirst.");
        var r;
        return r = "channelsFirst" === n ? [
            [
                0,
                0
            ],
            [
                0,
                0
            ],
            t[0],
            t[1]
        ] : [
            [
                0,
                0
            ],
            t[0],
            t[1],
            [
                0,
                0
            ]
        ], _tfjsCore.pad(e, r);
    });
}
_tfjsCore.serialization.registerClass(BatchNormalization);
var ZeroPadding2D = function(e116) {
    function t84(t) {
        var n = this;
        if (null == t && (t = {
        }), (n = e116.call(this, t) || this).dataFormat = null == t.dataFormat ? imageDataFormat() : t.dataFormat, null == t.padding) n.padding = [
            [
                1,
                1
            ],
            [
                1,
                1
            ]
        ];
        else if ("number" == typeof t.padding) n.padding = [
            [
                t.padding,
                t.padding
            ],
            [
                t.padding,
                t.padding
            ]
        ];
        else {
            if (t.padding = t.padding, 2 !== t.padding.length) throw new ValueError("ZeroPadding2D expects padding to be a length-2 array, but received a length-" + t.padding.length + " array.");
            var r = void 0, i = void 0;
            if ("number" == typeof t.padding[0]) r = [
                t.padding[0],
                t.padding[0]
            ], i = [
                t.padding[1],
                t.padding[1]
            ];
            else {
                if (t.padding = t.padding, 2 !== t.padding[0].length) throw new ValueError("ZeroPadding2D expects height padding to be a length-2 array, but received a length-" + t.padding[0].length + " array.");
                if (r = t.padding[0], 2 !== t.padding[1].length) throw new ValueError("ZeroPadding2D expects width padding to be a length-2 array, but received a length-" + t.padding[1].length + " array.");
                i = t.padding[1];
            }
            n.padding = [
                r,
                i
            ];
        }
        return n.inputSpec = [
            new InputSpec({
                ndim: 4
            })
        ], n;
    }
    return __extends(t84, e116), t84.prototype.computeOutputShape = function(e) {
        var t, n;
        return e = getExactlyOneShape(e), "channelsFirst" === this.dataFormat ? (t = null != e[2] && e[2] >= 0 ? e[2] + this.padding[0][0] + this.padding[0][1] : null, n = null != e[3] && e[3] >= 0 ? e[3] + this.padding[1][0] + this.padding[1][1] : null, [
            e[0],
            e[1],
            t,
            n
        ]) : (t = null != e[1] && e[1] >= 0 ? e[1] + this.padding[0][0] + this.padding[0][1] : null, n = null != e[2] && e[2] >= 0 ? e[2] + this.padding[1][0] + this.padding[1][1] : null, [
            e[0],
            t,
            n,
            e[3]
        ]);
    }, t84.prototype.call = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            return spatial2dPadding(getExactlyOneTensor(e), n.padding, n.dataFormat);
        });
    }, t84.prototype.getConfig = function() {
        var t = {
            padding: this.padding,
            dataFormat: this.dataFormat
        }, n = e116.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t84.className = "ZeroPadding2D", t84;
}(Layer);
function pool2d(e, t, n, r, i, a) {
    return _tfjsCore.tidy(function() {
        var o;
        checkDataFormat(i), checkPoolMode(a), checkPaddingMode(r), null == n && (n = [
            1,
            1
        ]), null == r && (r = "valid"), null == i && (i = imageDataFormat()), null == a && (a = "max"), e = preprocessConv2DInput(e, i);
        var s = "same" === r ? "same" : "valid";
        return o = "max" === a ? _tfjsCore.maxPool(e, t, n, s) : _tfjsCore.avgPool(e, t, n, s), "channelsFirst" === i && (o = _tfjsCore.transpose(o, [
            0,
            3,
            1,
            2
        ])), o;
    });
}
_tfjsCore.serialization.registerClass(ZeroPadding2D);
var Pooling1D = function(e117) {
    function t85(t) {
        var n = this;
        if (null == t.poolSize && (t.poolSize = 2), n = e117.call(this, t) || this, "number" == typeof t.poolSize) n.poolSize = [
            t.poolSize
        ];
        else {
            if (!Array.isArray(t.poolSize) || 1 !== t.poolSize.length || "number" != typeof t.poolSize[0]) throw new ValueError("poolSize for 1D convolutional layer must be a number or an Array of a single number, but received " + JSON.stringify(t.poolSize));
            n.poolSize = t.poolSize;
        }
        if (null == t.strides) n.strides = n.poolSize;
        else if ("number" == typeof t.strides) n.strides = [
            t.strides
        ];
        else {
            if (!Array.isArray(t.strides) || 1 !== t.strides.length || "number" != typeof t.strides[0]) throw new ValueError("strides for 1D convolutional layer must be a number or an Array of a single number, but received " + JSON.stringify(t.strides));
            n.strides = t.strides;
        }
        return n.padding = null == t.padding ? "valid" : t.padding, checkPaddingMode(n.padding), n.inputSpec = [
            new InputSpec({
                ndim: 3
            })
        ], n;
    }
    return __extends(t85, e117), t85.prototype.computeOutputShape = function(e) {
        var t = convOutputLength((e = getExactlyOneShape(e))[1], this.poolSize[0], this.padding, this.strides[0]);
        return [
            e[0],
            t,
            e[2]
        ];
    }, t85.prototype.call = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            n.invokeCallHook(e, t), e = expandDims$1(getExactlyOneTensor(e), 2);
            var r = n.poolingFunction(getExactlyOneTensor(e), [
                n.poolSize[0],
                1
            ], [
                n.strides[0],
                1
            ], n.padding, "channelsLast");
            return _tfjsCore.squeeze(r, [
                2
            ]);
        });
    }, t85.prototype.getConfig = function() {
        var t = {
            poolSize: this.poolSize,
            padding: this.padding,
            strides: this.strides
        }, n = e117.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t85;
}(Layer), MaxPooling1D = function(e118) {
    function t86(t) {
        return e118.call(this, t) || this;
    }
    return __extends(t86, e118), t86.prototype.poolingFunction = function(e, t, n, r, i) {
        return checkDataFormat(i), checkPaddingMode(r), pool2d(e, t, n, r, i, "max");
    }, t86.className = "MaxPooling1D", t86;
}(Pooling1D);
_tfjsCore.serialization.registerClass(MaxPooling1D);
var AveragePooling1D = function(e119) {
    function t87(t) {
        return e119.call(this, t) || this;
    }
    return __extends(t87, e119), t87.prototype.poolingFunction = function(e, t, n, r, i) {
        return checkDataFormat(i), checkPaddingMode(r), pool2d(e, t, n, r, i, "avg");
    }, t87.className = "AveragePooling1D", t87;
}(Pooling1D);
_tfjsCore.serialization.registerClass(AveragePooling1D);
var Pooling2D = function(e120) {
    function t88(t) {
        var n = this;
        if (null == t.poolSize && (t.poolSize = [
            2,
            2
        ]), (n = e120.call(this, t) || this).poolSize = Array.isArray(t.poolSize) ? t.poolSize : [
            t.poolSize,
            t.poolSize
        ], null == t.strides) n.strides = n.poolSize;
        else if (Array.isArray(t.strides)) {
            if (2 !== t.strides.length) throw new ValueError("If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length " + t.strides.length + ".");
            n.strides = t.strides;
        } else n.strides = [
            t.strides,
            t.strides
        ];
        return n.padding = null == t.padding ? "valid" : t.padding, n.dataFormat = null == t.dataFormat ? "channelsLast" : t.dataFormat, checkDataFormat(n.dataFormat), checkPaddingMode(n.padding), n.inputSpec = [
            new InputSpec({
                ndim: 4
            })
        ], n;
    }
    return __extends(t88, e120), t88.prototype.computeOutputShape = function(e) {
        e = getExactlyOneShape(e);
        var t = "channelsFirst" === this.dataFormat ? e[2] : e[1], n = "channelsFirst" === this.dataFormat ? e[3] : e[2];
        return t = convOutputLength(t, this.poolSize[0], this.padding, this.strides[0]), n = convOutputLength(n, this.poolSize[1], this.padding, this.strides[1]), "channelsFirst" === this.dataFormat ? [
            e[0],
            e[1],
            t,
            n
        ] : [
            e[0],
            t,
            n,
            e[3]
        ];
    }, t88.prototype.call = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            return n.invokeCallHook(e, t), n.poolingFunction(getExactlyOneTensor(e), n.poolSize, n.strides, n.padding, n.dataFormat);
        });
    }, t88.prototype.getConfig = function() {
        var t = {
            poolSize: this.poolSize,
            padding: this.padding,
            strides: this.strides,
            dataFormat: this.dataFormat
        }, n = e120.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t88;
}(Layer), MaxPooling2D = function(e121) {
    function t89(t) {
        return e121.call(this, t) || this;
    }
    return __extends(t89, e121), t89.prototype.poolingFunction = function(e, t, n, r, i) {
        return checkDataFormat(i), checkPaddingMode(r), pool2d(e, t, n, r, i, "max");
    }, t89.className = "MaxPooling2D", t89;
}(Pooling2D);
_tfjsCore.serialization.registerClass(MaxPooling2D);
var AveragePooling2D = function(e122) {
    function t90(t) {
        return e122.call(this, t) || this;
    }
    return __extends(t90, e122), t90.prototype.poolingFunction = function(e, t, n, r, i) {
        return checkDataFormat(i), checkPaddingMode(r), pool2d(e, t, n, r, i, "avg");
    }, t90.className = "AveragePooling2D", t90;
}(Pooling2D);
_tfjsCore.serialization.registerClass(AveragePooling2D);
var GlobalPooling1D = function(e123) {
    function t91(t) {
        var n = e123.call(this, t) || this;
        return n.inputSpec = [
            new InputSpec({
                ndim: 3
            })
        ], n;
    }
    return __extends(t91, e123), t91.prototype.computeOutputShape = function(e) {
        return [
            e[0],
            e[2]
        ];
    }, t91.prototype.call = function(e, t) {
        throw new NotImplementedError;
    }, t91;
}(Layer), GlobalAveragePooling1D = function(e124) {
    function t92(t) {
        return e124.call(this, t || {
        }) || this;
    }
    return __extends(t92, e124), t92.prototype.call = function(e, t93) {
        return _tfjsCore.tidy(function() {
            var t = getExactlyOneTensor(e);
            return _tfjsCore.mean(t, 1);
        });
    }, t92.className = "GlobalAveragePooling1D", t92;
}(GlobalPooling1D);
_tfjsCore.serialization.registerClass(GlobalAveragePooling1D);
var GlobalMaxPooling1D = function(e125) {
    function t94(t) {
        return e125.call(this, t || {
        }) || this;
    }
    return __extends(t94, e125), t94.prototype.call = function(e, t95) {
        return _tfjsCore.tidy(function() {
            var t = getExactlyOneTensor(e);
            return _tfjsCore.max(t, 1);
        });
    }, t94.className = "GlobalMaxPooling1D", t94;
}(GlobalPooling1D);
_tfjsCore.serialization.registerClass(GlobalMaxPooling1D);
var GlobalPooling2D = function(e126) {
    function t96(t) {
        var n = e126.call(this, t) || this;
        return n.dataFormat = null == t.dataFormat ? "channelsLast" : t.dataFormat, checkDataFormat(n.dataFormat), n.inputSpec = [
            new InputSpec({
                ndim: 4
            })
        ], n;
    }
    return __extends(t96, e126), t96.prototype.computeOutputShape = function(e) {
        return "channelsLast" === this.dataFormat ? [
            e[0],
            e[3]
        ] : [
            e[0],
            e[1]
        ];
    }, t96.prototype.call = function(e, t) {
        throw new NotImplementedError;
    }, t96.prototype.getConfig = function() {
        var t = {
            dataFormat: this.dataFormat
        }, n = e126.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t96;
}(Layer), GlobalAveragePooling2D = function(e127) {
    function t97() {
        return null !== e127 && e127.apply(this, arguments) || this;
    }
    return __extends(t97, e127), t97.prototype.call = function(e, t98) {
        var n = this;
        return _tfjsCore.tidy(function() {
            var t = getExactlyOneTensor(e);
            return "channelsLast" === n.dataFormat ? _tfjsCore.mean(t, [
                1,
                2
            ]) : _tfjsCore.mean(t, [
                2,
                3
            ]);
        });
    }, t97.className = "GlobalAveragePooling2D", t97;
}(GlobalPooling2D);
_tfjsCore.serialization.registerClass(GlobalAveragePooling2D);
var GlobalMaxPooling2D = function(e128) {
    function t99() {
        return null !== e128 && e128.apply(this, arguments) || this;
    }
    return __extends(t99, e128), t99.prototype.call = function(e, t100) {
        var n = this;
        return _tfjsCore.tidy(function() {
            var t = getExactlyOneTensor(e);
            return "channelsLast" === n.dataFormat ? _tfjsCore.max(t, [
                1,
                2
            ]) : _tfjsCore.max(t, [
                2,
                3
            ]);
        });
    }, t99.className = "GlobalMaxPooling2D", t99;
}(GlobalPooling2D);
function standardizeArgs(e129, t, n, r) {
    if (Array.isArray(e129)) {
        if (null != t || null != n) throw new ValueError("When inputs is an array, neither initialState or constants should be provided");
        null != r && (n = e129.slice(e129.length - r, e129.length), e129 = e129.slice(0, e129.length - r)), e129.length > 1 && (t = e129.slice(1, e129.length)), e129 = e129[0];
    }
    function i(e) {
        return null == e || Array.isArray(e) ? e : [
            e
        ];
    }
    return {
        inputs: e129,
        initialState: t = i(t),
        constants: n = i(n)
    };
}
function rnn(e130, t101, n13, r6, i, a10, o, s) {
    return void 0 === r6 && (r6 = !1), void 0 === o && (o = !1), void 0 === s && (s = !1), _tfjsCore.tidy(function() {
        var l = t101.shape.length;
        if (l < 3) throw new ValueError("Input should be at least 3D, but is " + l + "D.");
        var u = [
            1,
            0
        ].concat(range(2, l));
        if (t101 = _tfjsCore.transpose(t101, u), null != a10) throw new NotImplementedError("The rnn() functoin of the deeplearn.js backend does not support constants yet.");
        o && console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."), null != i && ((i = i.asType("bool").asType("float32")).rank === l - 1 && (i = _tfjsCore.expandDims(i, -1)), i = _tfjsCore.transpose(i, u)), r6 && (t101 = _tfjsCore.reverse(t101, 0), null != i && (i = _tfjsCore.reverse(i, 0)));
        var c, p, h = [], d = n13, f = t101.shape[0], g = _tfjsCore.unstack(t101);
        null != i && (p = _tfjsCore.unstack(i));
        for(var m, y = function(t102) {
            var n14 = g[t102], r = _tfjsCore.tidy(function() {
                return e130(n14, d);
            });
            if (null == i) c = r[0], d = r[1];
            else {
                var a = _tfjsCore.tidy(function() {
                    var e = p[t102], n = _tfjsCore.onesLike(e).sub(e);
                    return {
                        output: r[0].mul(e).addStrict(d[0].mul(n)),
                        newStates: d.map(function(t, i) {
                            return r[1][i].mul(e).addStrict(t.mul(n));
                        })
                    };
                });
                c = a.output, d = a.newStates;
            }
            s && h.push(c);
        }, v = 0; v < f; ++v)y(v);
        if (s) m = _tfjsCore.stack(h, 1);
        return [
            c,
            m,
            d
        ];
    });
}
_tfjsCore.serialization.registerClass(GlobalMaxPooling2D);
var RNN = function(e131) {
    function t103(t) {
        var n, r = e131.call(this, t) || this;
        if (null == t.cell) throw new ValueError("cell property is missing for the constructor of RNN.");
        if (null == (n = Array.isArray(t.cell) ? new StackedRNNCells({
            cells: t.cell
        }) : t.cell).stateSize) throw new ValueError("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");
        return r.cell = n, r.returnSequences = null != t.returnSequences && t.returnSequences, r.returnState = null != t.returnState && t.returnState, r.goBackwards = null != t.goBackwards && t.goBackwards, r._stateful = null != t.stateful && t.stateful, r.unroll = null != t.unroll && t.unroll, r.supportsMasking = !0, r.inputSpec = [
            new InputSpec({
                ndim: 3
            })
        ], r.stateSpec = null, r.states_ = null, r.numConstants = null, r.keptStates = [], r;
    }
    return __extends(t103, e131), t103.prototype.getStates = function() {
        return null == this.states_ ? range(0, Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1).map(function(e) {
            return null;
        }) : this.states_;
    }, t103.prototype.setStates = function(e) {
        this.states_ = e;
    }, t103.prototype.computeOutputShape = function(e) {
        isArrayOfShapes(e) && (e = e[0]);
        var t = this.cell.stateSize;
        Array.isArray(t) || (t = [
            t
        ]);
        var n, r = t[0];
        if (n = this.returnSequences ? [
            e[0],
            e[1],
            r
        ] : [
            e[0],
            r
        ], this.returnState) {
            for(var i = [], a = 0, o = t; a < o.length; a++){
                var s = o[a];
                i.push([
                    e[0],
                    s
                ]);
            }
            return [
                n
            ].concat(i);
        }
        return n;
    }, t103.prototype.computeMask = function(e132, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            Array.isArray(t) && (t = t[0]);
            var e = n.returnSequences ? t : null;
            if (n.returnState) {
                var r = n.states.map(function(e) {
                    return null;
                });
                return [
                    e
                ].concat(r);
            }
            return e;
        });
    }, Object.defineProperty(t103.prototype, "states", {
        get: function() {
            if (null == this.states_) {
                for(var e = Array.isArray(this.cell.stateSize) ? this.cell.stateSize.length : 1, t = [], n = 0; n < e; ++n)t.push(null);
                return t;
            }
            return this.states_;
        },
        set: function(e) {
            this.states_ = e;
        },
        enumerable: !0,
        configurable: !0
    }), t103.prototype.build = function(e133) {
        if (null != this.numConstants) throw new NotImplementedError("Constants support is not implemented in RNN yet.");
        isArrayOfShapes(e133) && (e133 = e133[0]);
        var t = this.stateful ? e133[0] : null, n = e133[e133.length - 1];
        this.inputSpec[0] = new InputSpec({
            shape: [
                t,
                null,
                n
            ]
        });
        var r, i = [
            e133[0]
        ].concat(e133.slice(2));
        if (this.cell.build(i), r = Array.isArray(this.cell.stateSize) ? this.cell.stateSize : [
            this.cell.stateSize
        ], null != this.stateSpec) {
            if (!_tfjsCore.util.arraysEqual(this.stateSpec.map(function(e) {
                return e.shape[e.shape.length - 1];
            }), r)) throw new ValueError("An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=" + this.stateSpec + "; However cell.stateSize is " + this.cell.stateSize);
        } else this.stateSpec = r.map(function(e) {
            return new InputSpec({
                shape: [
                    null,
                    e
                ]
            });
        });
        this.stateful && this.resetStates();
    }, t103.prototype.resetStates = function(e134, t) {
        var n = this;
        void 0 === t && (t = !1), _tfjsCore.tidy(function() {
            if (!n.stateful) throw new AttributeError("Cannot call resetStates() on an RNN Layer that is not stateful.");
            var r = n.inputSpec[0].shape[0];
            if (null == r) throw new ValueError("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");
            if (null == n.states_) Array.isArray(n.cell.stateSize) ? n.states_ = n.cell.stateSize.map(function(e) {
                return _tfjsCore.zeros([
                    r,
                    e
                ]);
            }) : n.states_ = [
                _tfjsCore.zeros([
                    r,
                    n.cell.stateSize
                ])
            ];
            else if (null == e134) _tfjsCore.dispose(n.states_), null != n.keptStates && (_tfjsCore.dispose(n.keptStates), n.keptStates = []), Array.isArray(n.cell.stateSize) ? n.states_ = n.cell.stateSize.map(function(e) {
                return _tfjsCore.zeros([
                    r,
                    e
                ]);
            }) : n.states_[0] = _tfjsCore.zeros([
                r,
                n.cell.stateSize
            ]);
            else {
                if (Array.isArray(e134) || (e134 = [
                    e134
                ]), e134.length !== n.states_.length) throw new ValueError("Layer " + n.name + " expects " + n.states_.length + " state(s), but it received " + e134.length + " state value(s). Input received: " + e134);
                !0 === t ? n.keptStates.push(n.states_.slice()) : _tfjsCore.dispose(n.states_);
                for(var i = 0; i < n.states_.length; ++i){
                    var a = e134[i], o = Array.isArray(n.cell.stateSize) ? n.cell.stateSize[i] : n.cell.stateSize, s = [
                        r,
                        o
                    ];
                    if (!_tfjsCore.util.arraysEqual(a.shape, s)) throw new ValueError("State " + i + " is incompatible with layer " + n.name + ": expected shape=" + s + ", received shape=" + a.shape);
                    n.states_[i] = a;
                }
            }
            n.states_.forEach(function(e) {
                return _tfjsCore.keep(e);
            });
        });
    }, t103.prototype.apply = function(t, n) {
        var r = null == n ? null : n.initialState, i = null == n ? null : n.constants;
        null == n && (n = {
        });
        var a = standardizeArgs(t, r, i, this.numConstants);
        t = a.inputs, r = a.initialState, i = a.constants;
        var o = [], s = [];
        if (null != r) {
            n.initialState = r, o = o.concat(r), this.stateSpec = [];
            for(var l = 0, u = r; l < u.length; l++){
                var c = u[l];
                this.stateSpec.push(new InputSpec({
                    shape: c.shape
                }));
            }
            s = s.concat(this.stateSpec);
        }
        if (null != i && (n.constants = i, o = o.concat(i), this.numConstants = i.length), o[0] instanceof SymbolicTensor) {
            var p = [
                t
            ].concat(o), h = this.inputSpec.concat(s), d = this.inputSpec;
            this.inputSpec = h;
            var f = e131.prototype.apply.call(this, p, n);
            return this.inputSpec = d, f;
        }
        return e131.prototype.apply.call(this, t, n);
    }, t103.prototype.call = function(e135, t104) {
        var n = this;
        return _tfjsCore.tidy(function() {
            var r7 = null == t104 ? null : t104.mask, i = null == t104 ? null : t104.training, a = null == t104 ? null : t104.initialState;
            e135 = getExactlyOneTensor(e135), null == a && (a = n.stateful ? n.states_ : n.getInitialState(e135));
            var o = Array.isArray(n.cell.stateSize) ? n.cell.stateSize.length : 1;
            if (a.length !== o) throw new ValueError("RNN Layer has " + o + " state(s) but was passed " + a.length + " initial state(s).");
            n.unroll && console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");
            var s = {
                training: i
            }, l = rnn(function(e, t) {
                var r = n.cell.call([
                    e
                ].concat(t), s);
                return [
                    r[0],
                    r.slice(1)
                ];
            }, e135, a, n.goBackwards, r7, null, n.unroll, n.returnSequences), u = l[0], c = l[1], p = l[2];
            n.stateful && n.resetStates(p, i);
            var h = n.returnSequences ? c : u;
            return n.returnState ? [
                h
            ].concat(p) : h;
        });
    }, t103.prototype.getInitialState = function(e136) {
        var t = this;
        return _tfjsCore.tidy(function() {
            var n = _tfjsCore.zeros(e136.shape);
            return n = expandDims$1(n = _tfjsCore.sum(n, [
                1,
                2
            ])), Array.isArray(t.cell.stateSize) ? t.cell.stateSize.map(function(e) {
                return e > 1 ? tile$1(n, [
                    1,
                    e
                ]) : n;
            }) : t.cell.stateSize > 1 ? [
                tile$1(n, [
                    1,
                    t.cell.stateSize
                ])
            ] : [
                n
            ];
        });
    }, Object.defineProperty(t103.prototype, "trainableWeights", {
        get: function() {
            return this.trainable ? this.cell.trainableWeights : [];
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t103.prototype, "nonTrainableWeights", {
        get: function() {
            return this.trainable ? this.cell.nonTrainableWeights : this.cell.weights;
        },
        enumerable: !0,
        configurable: !0
    }), t103.prototype.setFastWeightInitDuringBuild = function(t) {
        e131.prototype.setFastWeightInitDuringBuild.call(this, t), null != this.cell && this.cell.setFastWeightInitDuringBuild(t);
    }, t103.prototype.getConfig = function() {
        var t = {
            returnSequences: this.returnSequences,
            returnState: this.returnState,
            goBackwards: this.goBackwards,
            stateful: this.stateful,
            unroll: this.unroll
        };
        null != this.numConstants && (t.numConstants = this.numConstants);
        var n = this.cell.getConfig();
        t.cell = {
            className: this.cell.getClassName(),
            config: n
        };
        var r = e131.prototype.getConfig.call(this);
        return Object.assign(t, r), t;
    }, t103.className = "RNN", t103;
}(Layer);
_tfjsCore.serialization.registerClass(RNN);
var RNNCell = function(e) {
    function t() {
        return null !== e && e.apply(this, arguments) || this;
    }
    return __extends(t, e), t;
}(Layer), SimpleRNNCell = function(e137) {
    function t105(t) {
        var n = e137.call(this, t) || this;
        return n.DEFAULT_ACTIVATION = "tanh", n.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", n.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", n.DEFAULT_BIAS_INITIALIZER = "zeros", n.units = t.units, n.activation = getActivation(null == t.activation ? n.DEFAULT_ACTIVATION : t.activation), n.useBias = null == t.useBias || t.useBias, n.kernelInitializer = getInitializer(t.kernelInitializer || n.DEFAULT_KERNEL_INITIALIZER), n.recurrentInitializer = getInitializer(t.recurrentInitializer || n.DEFAULT_RECURRENT_INITIALIZER), n.biasInitializer = getInitializer(t.biasInitializer || n.DEFAULT_BIAS_INITIALIZER), n.kernelRegularizer = getRegularizer(t.kernelRegularizer), n.recurrentRegularizer = getRegularizer(t.recurrentRegularizer), n.biasRegularizer = getRegularizer(t.biasRegularizer), n.kernelConstraint = getConstraint(t.kernelConstraint), n.recurrentConstraint = getConstraint(t.recurrentConstraint), n.biasConstraint = getConstraint(t.biasConstraint), n.dropout = min$1([
            1,
            max$1([
                0,
                null == t.dropout ? 0 : t.dropout
            ])
        ]), n.recurrentDropout = min$1([
            1,
            max$1([
                0,
                null == t.recurrentDropout ? 0 : t.recurrentDropout
            ])
        ]), n.stateSize = n.units, n.dropoutMask = null, n.recurrentDropoutMask = null, n;
    }
    return __extends(t105, e137), t105.prototype.build = function(e) {
        e = getExactlyOneShape(e), this.kernel = this.addWeight("kernel", [
            e[e.length - 1],
            this.units
        ], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [
            this.units,
            this.units
        ], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [
            this.units
        ], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
    }, t105.prototype.call = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            if (2 !== e.length) throw new ValueError("SimpleRNNCell expects 2 input Tensors, got " + e.length + ".");
            var r = e[1];
            e = e[0];
            var i, a = null != t.training && t.training;
            0 < n.dropout && n.dropout < 1 && null == n.dropoutMask && (n.dropoutMask = generateDropoutMask(function() {
                return _tfjsCore.onesLike(e);
            }, n.dropout, a)), 0 < n.recurrentDropout && n.recurrentDropout < 1 && null == n.recurrentDropoutMask && (n.recurrentDropoutMask = generateDropoutMask(function() {
                return _tfjsCore.onesLike(r);
            }, n.recurrentDropout, a));
            var o = n.dropoutMask, s = n.recurrentDropoutMask;
            i = dot(null != o ? _tfjsCore.mul(e, o) : e, n.kernel.read()), null != n.bias && (i = biasAdd(i, n.bias.read())), null != s && (r = _tfjsCore.mul(r, s));
            var l = _tfjsCore.add(i, dot(r, n.recurrentKernel.read()));
            return null != n.activation && (l = n.activation.apply(l)), [
                l,
                l
            ];
        });
    }, t105.prototype.getConfig = function() {
        var t = {
            units: this.units,
            activation: serializeActivation(this.activation),
            useBias: this.useBias,
            kernelInitializer: serializeInitializer(this.kernelInitializer),
            recurrentInitializer: serializeInitializer(this.recurrentInitializer),
            biasInitializer: serializeInitializer(this.biasInitializer),
            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
            recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),
            biasRegularizer: serializeRegularizer(this.biasRegularizer),
            activityRegularizer: serializeRegularizer(this.activityRegularizer),
            kernelConstraint: serializeConstraint(this.kernelConstraint),
            recurrentConstraint: serializeConstraint(this.recurrentConstraint),
            biasConstraint: serializeConstraint(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout
        }, n = e137.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t105.className = "SimpleRNNCell", t105;
}(RNNCell);
_tfjsCore.serialization.registerClass(SimpleRNNCell);
var SimpleRNN = function(e) {
    function t106(t) {
        return t.cell = new SimpleRNNCell(t), e.call(this, t) || this;
    }
    return __extends(t106, e), t106.prototype.call = function(t, n) {
        var r = this;
        return _tfjsCore.tidy(function() {
            null != r.cell.dropoutMask && (_tfjsCore.dispose(r.cell.dropoutMask), r.cell.dropoutMask = null), null != r.cell.recurrentDropoutMask && (_tfjsCore.dispose(r.cell.recurrentDropoutMask), r.cell.recurrentDropoutMask = null);
            var i = null == n ? null : n.mask, a = null == n ? null : n.training, o = null == n ? null : n.initialState;
            return e.prototype.call.call(r, t, {
                mask: i,
                training: a,
                initialState: o
            });
        });
    }, Object.defineProperty(t106.prototype, "units", {
        get: function() {
            return this.cell.units;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t106.prototype, "activation", {
        get: function() {
            return this.cell.activation;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t106.prototype, "useBias", {
        get: function() {
            return this.cell.useBias;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t106.prototype, "kernelInitializer", {
        get: function() {
            return this.cell.kernelInitializer;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t106.prototype, "recurrentInitializer", {
        get: function() {
            return this.cell.recurrentInitializer;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t106.prototype, "biasInitializer", {
        get: function() {
            return this.cell.biasInitializer;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t106.prototype, "kernelRegularizer", {
        get: function() {
            return this.cell.kernelRegularizer;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t106.prototype, "recurrentRegularizer", {
        get: function() {
            return this.cell.recurrentRegularizer;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t106.prototype, "biasRegularizer", {
        get: function() {
            return this.cell.biasRegularizer;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t106.prototype, "kernelConstraint", {
        get: function() {
            return this.cell.kernelConstraint;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t106.prototype, "recurrentConstraint", {
        get: function() {
            return this.cell.recurrentConstraint;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t106.prototype, "biasConstraint", {
        get: function() {
            return this.cell.biasConstraint;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t106.prototype, "dropout", {
        get: function() {
            return this.cell.dropout;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t106.prototype, "recurrentDropout", {
        get: function() {
            return this.cell.recurrentDropout;
        },
        enumerable: !0,
        configurable: !0
    }), t106.prototype.getConfig = function() {
        var t = {
            units: this.units,
            activation: serializeActivation(this.activation),
            useBias: this.useBias,
            kernelInitializer: serializeInitializer(this.kernelInitializer),
            recurrentInitializer: serializeInitializer(this.recurrentInitializer),
            biasInitializer: serializeInitializer(this.biasInitializer),
            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
            recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),
            biasRegularizer: serializeRegularizer(this.biasRegularizer),
            activityRegularizer: serializeRegularizer(this.activityRegularizer),
            kernelConstraint: serializeConstraint(this.kernelConstraint),
            recurrentConstraint: serializeConstraint(this.recurrentConstraint),
            biasConstraint: serializeConstraint(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout
        }, n = e.prototype.getConfig.call(this);
        return delete n.cell, Object.assign(t, n), t;
    }, t106.className = "SimpleRNN", t106;
}(RNN);
_tfjsCore.serialization.registerClass(SimpleRNN);
var GRUCell = function(e138) {
    function t107(t) {
        var n = e138.call(this, t) || this;
        return n.DEFAULT_ACTIVATION = "tanh", n.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", n.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", n.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", n.DEFAULT_BIAS_INITIALIZER = "zeros", n.units = t.units, n.activation = getActivation(void 0 === t.activation ? n.DEFAULT_ACTIVATION : t.activation), n.recurrentActivation = getActivation(void 0 === t.recurrentActivation ? n.DEFAULT_RECURRENT_ACTIVATION : t.recurrentActivation), n.useBias = null == t.useBias || t.useBias, n.kernelInitializer = getInitializer(t.kernelInitializer || n.DEFAULT_KERNEL_INITIALIZER), n.recurrentInitializer = getInitializer(t.recurrentInitializer || n.DEFAULT_RECURRENT_INITIALIZER), n.biasInitializer = getInitializer(t.biasInitializer || n.DEFAULT_BIAS_INITIALIZER), n.kernelRegularizer = getRegularizer(t.kernelRegularizer), n.recurrentRegularizer = getRegularizer(t.recurrentRegularizer), n.biasRegularizer = getRegularizer(t.biasRegularizer), n.kernelConstraint = getConstraint(t.kernelConstraint), n.recurrentConstraint = getConstraint(t.recurrentConstraint), n.biasConstraint = getConstraint(t.biasConstraint), n.dropout = min$1([
            1,
            max$1([
                0,
                null == t.dropout ? 0 : t.dropout
            ])
        ]), n.recurrentDropout = min$1([
            1,
            max$1([
                0,
                null == t.recurrentDropout ? 0 : t.recurrentDropout
            ])
        ]), n.implementation = t.implementation, n.stateSize = n.units, n.dropoutMask = null, n.recurrentDropoutMask = null, n;
    }
    return __extends(t107, e138), t107.prototype.build = function(e) {
        var t = (e = getExactlyOneShape(e))[e.length - 1];
        this.kernel = this.addWeight("kernel", [
            t,
            3 * this.units
        ], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [
            this.units,
            3 * this.units
        ], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias ? this.bias = this.addWeight("bias", [
            3 * this.units
        ], null, this.biasInitializer, this.biasRegularizer, !0, this.biasConstraint) : this.bias = null, this.built = !0;
    }, t107.prototype.call = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            if (2 !== e.length) throw new ValueError("GRUCell expects 2 input Tensors (inputs, h, c), got " + e.length + ".");
            var r = null != t.training && t.training, i = e[1];
            e = e[0], 0 < n.dropout && n.dropout < 1 && null == n.dropoutMask && (n.dropoutMask = generateDropoutMask(function() {
                return _tfjsCore.onesLike(e);
            }, n.dropout, r, 3)), 0 < n.recurrentDropout && n.recurrentDropout < 1 && null == n.recurrentDropoutMask && (n.recurrentDropoutMask = generateDropoutMask(function() {
                return _tfjsCore.onesLike(i);
            }, n.recurrentDropout, r, 3));
            var a, o, s, l = n.dropoutMask, u = n.recurrentDropoutMask;
            0 < n.dropout && n.dropout < 1 && (e = _tfjsCore.mul(e, l[0]));
            var c = dot(e, n.kernel.read());
            n.useBias && (c = biasAdd(c, n.bias.read())), 0 < n.recurrentDropout && n.recurrentDropout < 1 && (i = _tfjsCore.mul(i, u[0]));
            var p = n.recurrentKernel.read(), h = _tfjsCore.split(p, [
                2 * n.units,
                n.units
            ], p.rank - 1), d = h[0], f = h[1], g = dot(i, d), m = _tfjsCore.split(c, 3, c.rank - 1), y = m[0], v = m[1], b = m[2], w = _tfjsCore.split(g, 2, g.rank - 1), z = w[0], S = w[1];
            a = n.recurrentActivation.apply(_tfjsCore.add(y, z)), o = n.recurrentActivation.apply(_tfjsCore.add(v, S));
            var I = dot(_tfjsCore.mul(o, i), f);
            s = n.activation.apply(_tfjsCore.add(b, I));
            var A = _tfjsCore.add(_tfjsCore.mul(a, i), _tfjsCore.mul(_tfjsCore.add(getScalar(1), _tfjsCore.neg(a)), s));
            return [
                A,
                A
            ];
        });
    }, t107.prototype.getConfig = function() {
        var t = {
            units: this.units,
            activation: serializeActivation(this.activation),
            recurrentActivation: serializeActivation(this.recurrentActivation),
            useBias: this.useBias,
            kernelInitializer: serializeInitializer(this.kernelInitializer),
            recurrentInitializer: serializeInitializer(this.recurrentInitializer),
            biasInitializer: serializeInitializer(this.biasInitializer),
            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
            recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),
            biasRegularizer: serializeRegularizer(this.biasRegularizer),
            activityRegularizer: serializeRegularizer(this.activityRegularizer),
            kernelConstraint: serializeConstraint(this.kernelConstraint),
            recurrentConstraint: serializeConstraint(this.recurrentConstraint),
            biasConstraint: serializeConstraint(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation
        }, n = e138.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t107.className = "GRUCell", t107;
}(RNNCell);
_tfjsCore.serialization.registerClass(GRUCell);
var GRU = function(e139) {
    function t108(t) {
        return 0 === t.implementation && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), t.cell = new GRUCell(t), e139.call(this, t) || this;
    }
    return __extends(t108, e139), t108.prototype.call = function(t, n) {
        var r = this;
        return _tfjsCore.tidy(function() {
            null != r.cell.dropoutMask && (_tfjsCore.dispose(r.cell.dropoutMask), r.cell.dropoutMask = null), null != r.cell.recurrentDropoutMask && (_tfjsCore.dispose(r.cell.recurrentDropoutMask), r.cell.recurrentDropoutMask = null);
            var i = null == n ? null : n.mask, a = null == n ? null : n.training, o = null == n ? null : n.initialState;
            return e139.prototype.call.call(r, t, {
                mask: i,
                training: a,
                initialState: o
            });
        });
    }, Object.defineProperty(t108.prototype, "units", {
        get: function() {
            return this.cell.units;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t108.prototype, "activation", {
        get: function() {
            return this.cell.activation;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t108.prototype, "recurrentActivation", {
        get: function() {
            return this.cell.recurrentActivation;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t108.prototype, "useBias", {
        get: function() {
            return this.cell.useBias;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t108.prototype, "kernelInitializer", {
        get: function() {
            return this.cell.kernelInitializer;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t108.prototype, "recurrentInitializer", {
        get: function() {
            return this.cell.recurrentInitializer;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t108.prototype, "biasInitializer", {
        get: function() {
            return this.cell.biasInitializer;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t108.prototype, "kernelRegularizer", {
        get: function() {
            return this.cell.kernelRegularizer;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t108.prototype, "recurrentRegularizer", {
        get: function() {
            return this.cell.recurrentRegularizer;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t108.prototype, "biasRegularizer", {
        get: function() {
            return this.cell.biasRegularizer;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t108.prototype, "kernelConstraint", {
        get: function() {
            return this.cell.kernelConstraint;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t108.prototype, "recurrentConstraint", {
        get: function() {
            return this.cell.recurrentConstraint;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t108.prototype, "biasConstraint", {
        get: function() {
            return this.cell.biasConstraint;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t108.prototype, "dropout", {
        get: function() {
            return this.cell.dropout;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t108.prototype, "recurrentDropout", {
        get: function() {
            return this.cell.recurrentDropout;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t108.prototype, "implementation", {
        get: function() {
            return this.cell.implementation;
        },
        enumerable: !0,
        configurable: !0
    }), t108.prototype.getConfig = function() {
        var t = {
            units: this.units,
            activation: serializeActivation(this.activation),
            recurrentActivation: serializeActivation(this.recurrentActivation),
            useBias: this.useBias,
            kernelInitializer: serializeInitializer(this.kernelInitializer),
            recurrentInitializer: serializeInitializer(this.recurrentInitializer),
            biasInitializer: serializeInitializer(this.biasInitializer),
            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
            recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),
            biasRegularizer: serializeRegularizer(this.biasRegularizer),
            activityRegularizer: serializeRegularizer(this.activityRegularizer),
            kernelConstraint: serializeConstraint(this.kernelConstraint),
            recurrentConstraint: serializeConstraint(this.recurrentConstraint),
            biasConstraint: serializeConstraint(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation
        }, n = e139.prototype.getConfig.call(this);
        return delete n.cell, Object.assign(t, n), t;
    }, t108.fromConfig = function(e, t) {
        return 0 === t.implmentation && (t.implementation = 1), new e(t);
    }, t108.className = "GRU", t108;
}(RNN);
_tfjsCore.serialization.registerClass(GRU);
var LSTMCell = function(e140) {
    function t109(t) {
        var n = e140.call(this, t) || this;
        return n.DEFAULT_ACTIVATION = "tanh", n.DEFAULT_RECURRENT_ACTIVATION = "hardSigmoid", n.DEFAULT_KERNEL_INITIALIZER = "glorotNormal", n.DEFAULT_RECURRENT_INITIALIZER = "orthogonal", n.DEFAULT_BIAS_INITIALIZER = "zeros", n.units = t.units, n.activation = getActivation(void 0 === t.activation ? n.DEFAULT_ACTIVATION : t.activation), n.recurrentActivation = getActivation(void 0 === t.recurrentActivation ? n.DEFAULT_RECURRENT_ACTIVATION : t.recurrentActivation), n.useBias = null == t.useBias || t.useBias, n.kernelInitializer = getInitializer(t.kernelInitializer || n.DEFAULT_KERNEL_INITIALIZER), n.recurrentInitializer = getInitializer(t.recurrentInitializer || n.DEFAULT_RECURRENT_INITIALIZER), n.biasInitializer = getInitializer(t.biasInitializer || n.DEFAULT_BIAS_INITIALIZER), n.unitForgetBias = t.unitForgetBias, n.kernelRegularizer = getRegularizer(t.kernelRegularizer), n.recurrentRegularizer = getRegularizer(t.recurrentRegularizer), n.biasRegularizer = getRegularizer(t.biasRegularizer), n.kernelConstraint = getConstraint(t.kernelConstraint), n.recurrentConstraint = getConstraint(t.recurrentConstraint), n.biasConstraint = getConstraint(t.biasConstraint), n.dropout = min$1([
            1,
            max$1([
                0,
                null == t.dropout ? 0 : t.dropout
            ])
        ]), n.recurrentDropout = min$1([
            1,
            max$1([
                0,
                null == t.recurrentDropout ? 0 : t.recurrentDropout
            ])
        ]), n.implementation = t.implementation, n.stateSize = [
            n.units,
            n.units
        ], n.dropoutMask = null, n.recurrentDropoutMask = null, n;
    }
    return __extends(t109, e140), t109.prototype.build = function(e141) {
        var t110, n15, r8 = (e141 = getExactlyOneShape(e141))[e141.length - 1];
        if (this.kernel = this.addWeight("kernel", [
            r8,
            4 * this.units
        ], null, this.kernelInitializer, this.kernelRegularizer, !0, this.kernelConstraint), this.recurrentKernel = this.addWeight("recurrent_kernel", [
            this.units,
            4 * this.units
        ], null, this.recurrentInitializer, this.recurrentRegularizer, !0, this.recurrentConstraint), this.useBias) {
            if (this.unitForgetBias) {
                var i = this.biasInitializer, a = this.units;
                t110 = new ((n15 = (function(e) {
                    function t() {
                        return null !== e && e.apply(this, arguments) || this;
                    }
                    return __extends(t, e), t.prototype.apply = function(e, t) {
                        var n = i.apply([
                            a
                        ]), r = (new Ones).apply([
                            a
                        ]), o = i.apply([
                            2 * a
                        ]);
                        return concatAlongFirstAxis(concatAlongFirstAxis(n, r), o);
                    }, t;
                }(Initializer))).className = "CustomInit", n15);
            } else t110 = this.biasInitializer;
            this.bias = this.addWeight("bias", [
                4 * this.units
            ], null, t110, this.biasRegularizer, !0, this.biasConstraint);
        } else this.bias = null;
        this.built = !0;
    }, t109.prototype.call = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            var r = null != t.training && t.training;
            if (3 !== e.length) throw new ValueError("LSTMCell expects 3 input Tensors (inputs, h, c), got " + e.length + ".");
            var i = e[1], a = e[2];
            e = e[0], 0 < n.dropout && n.dropout < 1 && null == n.dropoutMask && (n.dropoutMask = generateDropoutMask(function() {
                return _tfjsCore.onesLike(e);
            }, n.dropout, r, 4)), 0 < n.recurrentDropout && n.recurrentDropout < 1 && null == n.recurrentDropoutMask && (n.recurrentDropoutMask = generateDropoutMask(function() {
                return _tfjsCore.onesLike(i);
            }, n.recurrentDropout, r, 4));
            var o, s, l, u, c = n.dropoutMask, p = n.recurrentDropoutMask;
            0 < n.dropout && n.dropout < 1 && (e = _tfjsCore.mul(e, c[0]));
            var h = dot(e, n.kernel.read());
            0 < n.recurrentDropout && n.recurrentDropout < 1 && (i = _tfjsCore.mul(i, p[0])), h = _tfjsCore.add(h, dot(i, n.recurrentKernel.read())), n.useBias && (h = biasAdd(h, n.bias.read()));
            var d = _tfjsCore.split(h, 4, h.rank - 1), f = d[0], g = d[1], m = d[2], y = d[3];
            o = n.recurrentActivation.apply(f), s = n.recurrentActivation.apply(g), l = _tfjsCore.add(_tfjsCore.mul(s, a), _tfjsCore.mul(o, n.activation.apply(m))), u = n.recurrentActivation.apply(y);
            var v = _tfjsCore.mul(u, n.activation.apply(l));
            return [
                v,
                v,
                l
            ];
        });
    }, t109.prototype.getConfig = function() {
        var t = {
            units: this.units,
            activation: serializeActivation(this.activation),
            recurrentActivation: serializeActivation(this.recurrentActivation),
            useBias: this.useBias,
            kernelInitializer: serializeInitializer(this.kernelInitializer),
            recurrentInitializer: serializeInitializer(this.recurrentInitializer),
            biasInitializer: serializeInitializer(this.biasInitializer),
            unitForgetBias: this.unitForgetBias,
            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
            recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),
            biasRegularizer: serializeRegularizer(this.biasRegularizer),
            activityRegularizer: serializeRegularizer(this.activityRegularizer),
            kernelConstraint: serializeConstraint(this.kernelConstraint),
            recurrentConstraint: serializeConstraint(this.recurrentConstraint),
            biasConstraint: serializeConstraint(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation
        }, n = e140.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t109.className = "LSTMCell", t109;
}(RNNCell);
_tfjsCore.serialization.registerClass(LSTMCell);
var LSTM = function(e142) {
    function t111(t) {
        return 0 === t.implementation && console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."), t.cell = new LSTMCell(t), e142.call(this, t) || this;
    }
    return __extends(t111, e142), t111.prototype.call = function(t, n) {
        var r = this;
        return _tfjsCore.tidy(function() {
            null != r.cell.dropoutMask && (_tfjsCore.dispose(r.cell.dropoutMask), r.cell.dropoutMask = null), null != r.cell.recurrentDropoutMask && (_tfjsCore.dispose(r.cell.recurrentDropoutMask), r.cell.recurrentDropoutMask = null);
            var i = null == n ? null : n.mask, a = null == n ? null : n.training, o = null == n ? null : n.initialState;
            return e142.prototype.call.call(r, t, {
                mask: i,
                training: a,
                initialState: o
            });
        });
    }, Object.defineProperty(t111.prototype, "units", {
        get: function() {
            return this.cell.units;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t111.prototype, "activation", {
        get: function() {
            return this.cell.activation;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t111.prototype, "recurrentActivation", {
        get: function() {
            return this.cell.recurrentActivation;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t111.prototype, "useBias", {
        get: function() {
            return this.cell.useBias;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t111.prototype, "kernelInitializer", {
        get: function() {
            return this.cell.kernelInitializer;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t111.prototype, "recurrentInitializer", {
        get: function() {
            return this.cell.recurrentInitializer;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t111.prototype, "biasInitializer", {
        get: function() {
            return this.cell.biasInitializer;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t111.prototype, "unitForgetBias", {
        get: function() {
            return this.cell.unitForgetBias;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t111.prototype, "kernelRegularizer", {
        get: function() {
            return this.cell.kernelRegularizer;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t111.prototype, "recurrentRegularizer", {
        get: function() {
            return this.cell.recurrentRegularizer;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t111.prototype, "biasRegularizer", {
        get: function() {
            return this.cell.biasRegularizer;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t111.prototype, "kernelConstraint", {
        get: function() {
            return this.cell.kernelConstraint;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t111.prototype, "recurrentConstraint", {
        get: function() {
            return this.cell.recurrentConstraint;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t111.prototype, "biasConstraint", {
        get: function() {
            return this.cell.biasConstraint;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t111.prototype, "dropout", {
        get: function() {
            return this.cell.dropout;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t111.prototype, "recurrentDropout", {
        get: function() {
            return this.cell.recurrentDropout;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t111.prototype, "implementation", {
        get: function() {
            return this.cell.implementation;
        },
        enumerable: !0,
        configurable: !0
    }), t111.prototype.getConfig = function() {
        var t = {
            units: this.units,
            activation: serializeActivation(this.activation),
            recurrentActivation: serializeActivation(this.recurrentActivation),
            useBias: this.useBias,
            kernelInitializer: serializeInitializer(this.kernelInitializer),
            recurrentInitializer: serializeInitializer(this.recurrentInitializer),
            biasInitializer: serializeInitializer(this.biasInitializer),
            unitForgetBias: this.unitForgetBias,
            kernelRegularizer: serializeRegularizer(this.kernelRegularizer),
            recurrentRegularizer: serializeRegularizer(this.recurrentRegularizer),
            biasRegularizer: serializeRegularizer(this.biasRegularizer),
            activityRegularizer: serializeRegularizer(this.activityRegularizer),
            kernelConstraint: serializeConstraint(this.kernelConstraint),
            recurrentConstraint: serializeConstraint(this.recurrentConstraint),
            biasConstraint: serializeConstraint(this.biasConstraint),
            dropout: this.dropout,
            recurrentDropout: this.recurrentDropout,
            implementation: this.implementation
        }, n = e142.prototype.getConfig.call(this);
        return delete n.cell, Object.assign(t, n), t;
    }, t111.fromConfig = function(e, t) {
        return 0 === t.implmentation && (t.implementation = 1), new e(t);
    }, t111.className = "LSTM", t111;
}(RNN);
_tfjsCore.serialization.registerClass(LSTM);
var StackedRNNCells = function(e143) {
    function t112(t) {
        var n = e143.call(this, t) || this;
        return n.cells = t.cells, n;
    }
    return __extends(t112, e143), Object.defineProperty(t112.prototype, "stateSize", {
        get: function() {
            for(var e = [], t = 0, n = this.cells.slice().reverse(); t < n.length; t++){
                var r = n[t];
                Array.isArray(r.stateSize) ? e.push.apply(e, r.stateSize) : e.push(r.stateSize);
            }
            return e;
        },
        enumerable: !0,
        configurable: !0
    }), t112.prototype.call = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            for(var r = e.slice(1), i = [], a = 0, o = n.cells.slice().reverse(); a < o.length; a++){
                var s = o[a];
                Array.isArray(s.stateSize) ? i.push(r.splice(0, s.stateSize.length)) : i.push(r.splice(0, 1));
            }
            i.reverse();
            for(var l, u = [], c = 0; c < n.cells.length; ++c){
                s = n.cells[c];
                r = i[c], l = 0 === c ? [
                    e[0]
                ].concat(r) : [
                    l[0]
                ].concat(r), l = s.call(l, t), u.push(l.slice(1));
            }
            r = [];
            for(var p = 0, h = u.slice().reverse(); p < h.length; p++){
                var d = h[p];
                r.push.apply(r, d);
            }
            return [
                l[0]
            ].concat(r);
        });
    }, t112.prototype.build = function(e) {
        var t;
        isArrayOfShapes(e) && (e = e[0]);
        for(var n = 0, r = this.cells; n < r.length; n++){
            var i = r[n];
            i.build(e), t = Array.isArray(i.stateSize) ? i.stateSize[0] : i.stateSize, e = [
                e[0],
                t
            ];
        }
        this.built = !0;
    }, t112.prototype.getConfig = function() {
        for(var t = [], n = 0, r = this.cells; n < r.length; n++){
            var i = r[n];
            t.push({
                className: this.getClassName(),
                config: i.getConfig()
            });
        }
        var a = {
            cells: t
        }, o = e143.prototype.getConfig.call(this);
        return Object.assign(a, o), a;
    }, t112.fromConfig = function(e, t, n) {
        void 0 === n && (n = {
        });
        for(var r = [], i = 0, a = t.cells; i < a.length; i++){
            var o = a[i];
            r.push(deserialize(o, n));
        }
        return new e({
            cells: r
        });
    }, Object.defineProperty(t112.prototype, "trainableWeights", {
        get: function() {
            if (!this.trainable) return [];
            for(var e = [], t = 0, n = this.cells; t < n.length; t++){
                var r = n[t];
                e.push.apply(e, r.trainableWeights);
            }
            return e;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t112.prototype, "nonTrainableWeights", {
        get: function() {
            for(var e = [], t = 0, n = this.cells; t < n.length; t++){
                var r = n[t];
                e.push.apply(e, r.nonTrainableWeights);
            }
            if (!this.trainable) {
                for(var i = [], a = 0, o = this.cells; a < o.length; a++){
                    r = o[a];
                    i.push.apply(i, r.trainableWeights);
                }
                return i.concat(e);
            }
            return e;
        },
        enumerable: !0,
        configurable: !0
    }), t112.prototype.getWeights = function() {
        for(var e = [], t = 0, n = this.cells; t < n.length; t++){
            var r = n[t];
            e.push.apply(e, r.weights);
        }
        return batchGetValue(e);
    }, t112.prototype.setWeights = function(e) {
        for(var t = [], n = 0, r = this.cells; n < r.length; n++)for(var i = r[n], a = i.weights.length, o = e.splice(a), s = 0; s < i.weights.length; ++s)t.push([
            i.weights[s],
            o[s]
        ]);
        batchSetValue(t);
    }, t112.className = "StackedRNNCells", t112;
}(RNNCell);
function generateDropoutMask(e144, t, n, r) {
    function i() {
        return dropout(e144(), getScalar(t));
    }
    if (void 0 === n && (n = null), void 0 === r && (r = 1), r > 1) {
        for(var a = [], o = 0; o < r; o++)a.push(inTrainPhase(i, e144, n));
        return a.forEach(function(e) {
            return _tfjsCore.keep(e);
        }), a;
    }
    return _tfjsCore.keep(inTrainPhase(i, e144, n));
}
_tfjsCore.serialization.registerClass(StackedRNNCells);
var Wrapper = function(e145) {
    function t113(t) {
        var n = e145.call(this, t) || this;
        return n.layer = t.layer, n;
    }
    return __extends(t113, e145), t113.prototype.build = function(e) {
        this.built = !0;
    }, Object.defineProperty(t113.prototype, "trainable", {
        get: function() {
            return null != this.layer && this.layer.trainable;
        },
        set: function(e) {
            null != this.layer && (this.layer.trainable = e);
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t113.prototype, "trainableWeights", {
        get: function() {
            return this.layer.trainableWeights;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t113.prototype, "nonTrainableWeights", {
        get: function() {
            return this.layer.nonTrainableWeights;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t113.prototype, "updates", {
        get: function() {
            return this.layer._updates;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t113.prototype, "losses", {
        get: function() {
            return this.layer.losses;
        },
        enumerable: !0,
        configurable: !0
    }), t113.prototype.getWeights = function() {
        return this.layer.getWeights();
    }, t113.prototype.setWeights = function(e) {
        this.layer.setWeights(e);
    }, t113.prototype.getConfig = function() {
        var t = {
            layer: {
                className: this.layer.getClassName(),
                config: this.layer.getConfig()
            }
        }, n = e145.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t113.prototype.setFastWeightInitDuringBuild = function(t) {
        e145.prototype.setFastWeightInitDuringBuild.call(this, t), null != this.layer && this.layer.setFastWeightInitDuringBuild(t);
    }, t113.fromConfig = function(e, t, n) {
        void 0 === n && (n = {
        });
        var r = deserialize(t.layer, n);
        delete t.layer;
        var i = {
            layer: r
        };
        return Object.assign(i, t), new e(i);
    }, t113;
}(Layer), TimeDistributed = function(e146) {
    function t114(t) {
        var n = e146.call(this, t) || this;
        return n.supportsMasking = !0, n;
    }
    return __extends(t114, e146), t114.prototype.build = function(t) {
        if ((t = getExactlyOneShape(t)).length < 3) throw new ValueError("TimeDistributed layer expects an input shape >= 3D, but received input shape " + JSON.stringify(t));
        this.inputSpec = [
            {
                shape: t
            }
        ];
        var n = [
            t[0]
        ].concat(t.slice(2));
        this.layer.built || (this.layer.build(n), this.layer.built = !0), e146.prototype.build.call(this, t);
    }, t114.prototype.computeOutputShape = function(e) {
        var t = [
            (e = getExactlyOneShape(e))[0]
        ].concat(e.slice(2)), n = this.layer.computeOutputShape(t), r = e[1];
        return [
            n[0],
            r
        ].concat(n.slice(1));
    }, t114.prototype.call = function(e147, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            return rnn(function(e, r) {
                return [
                    getExactlyOneTensor(n.layer.call(e, t)),
                    []
                ];
            }, e147 = getExactlyOneTensor(e147), [], !1, null, null, !1, !0)[1];
        });
    }, t114.className = "TimeDistributed", t114;
}(Wrapper);
function checkBidirectionalMergeMode(e) {
    checkStringTypeUnionValue(VALID_BIDIRECTIONAL_MERGE_MODES, "BidirectionalMergeMode", e);
}
_tfjsCore.serialization.registerClass(TimeDistributed);
var Bidirectional = function(e148) {
    function t115(t) {
        var n = e148.call(this, t) || this, r = t.layer.getConfig();
        if (n.forwardLayer = deserialize({
            className: t.layer.getClassName(),
            config: r
        }), r.goBackwards = !0 !== r.goBackwards, n.backwardLayer = deserialize({
            className: t.layer.getClassName(),
            config: r
        }), n.forwardLayer.name = "forward_" + n.forwardLayer.name, n.backwardLayer.name = "backward_" + n.backwardLayer.name, checkBidirectionalMergeMode(t.mergeMode), n.mergeMode = t.mergeMode, t.weights) throw new NotImplementedError("weights support is not implemented for Bidirectional layer yet.");
        return n._stateful = t.layer.stateful, n.returnSequences = t.layer.returnSequences, n.returnState = t.layer.returnState, n.supportsMasking = !0, n._trainable = !0, n.inputSpec = t.layer.inputSpec, n.numConstants = null, n;
    }
    return __extends(t115, e148), Object.defineProperty(t115.prototype, "trainable", {
        get: function() {
            return this._trainable;
        },
        set: function(e) {
            this._trainable = e, null != this.forwardLayer && (this.forwardLayer.trainable = e), null != this.backwardLayer && (this.backwardLayer.trainable = e);
        },
        enumerable: !0,
        configurable: !0
    }), t115.prototype.getWeights = function() {
        return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights());
    }, t115.prototype.setWeights = function(e) {
        var t = e.length, n = Math.floor(t / 2);
        this.forwardLayer.setWeights(e.slice(0, n)), this.backwardLayer.setWeights(e.slice(n));
    }, t115.prototype.computeOutputShape = function(e) {
        var t, n, r, i = this.forwardLayer.computeOutputShape(e);
        return Array.isArray(i) && Array.isArray(i[0]) || (i = [
            i
        ]), this.returnState ? (r = i.slice(1), t = i[0]) : t = i[0], "concat" === this.mergeMode ? (t[t.length - 1] *= 2, n = [
            t
        ]) : n = null == this.mergeMode ? [
            t,
            t.slice()
        ] : [
            t
        ], this.returnState ? null == this.mergeMode ? n.concat(r).concat(r.slice()) : [
            t
        ].concat(r).concat(r.slice()) : singletonOrArray(n);
    }, t115.prototype.apply = function(t, n) {
        var r = null == n ? null : n.initialState, i = null == n ? null : n.constants;
        null == n && (n = {
        });
        var a = standardizeArgs(t, r, i, this.numConstants);
        if (t = a.inputs, r = a.initialState, i = a.constants, Array.isArray(t) && (r = t.slice(1), t = t[0]), (null == r || 0 === r.length) && null == i) return e148.prototype.apply.call(this, t, n);
        var o = [], s = [];
        if (null != r) {
            var l = r.length;
            if (l % 2 > 0) throw new ValueError("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");
            n.initialState = r, o.push.apply(o, r);
            var u = r.map(function(e) {
                return new InputSpec({
                    shape: e.shape
                });
            });
            this.forwardLayer.stateSpec = u.slice(0, l / 2), this.backwardLayer.stateSpec = u.slice(l / 2), s.push.apply(s, u);
        }
        if (null != i) throw new NotImplementedError("Support for constants in Bidirectional layers is not implemented yet.");
        for(var c = o[0] instanceof SymbolicTensor, p = 0, h = o; p < h.length; p++){
            if (h[p] instanceof SymbolicTensor !== c) throw new ValueError("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");
        }
        if (c) {
            var d = [
                t
            ].concat(o), f = this.inputSpec.concat(s), g = this.inputSpec;
            this.inputSpec = f;
            var m = e148.prototype.apply.call(this, d, n);
            return this.inputSpec = g, m;
        }
        return e148.prototype.apply.call(this, t, n);
    }, t115.prototype.call = function(e, t) {
        var n = this;
        return _tfjsCore.tidy(function() {
            if (null != t.mask) throw new NotImplementedError("The support for masking is not implemented for Bidirectional layers yet.");
            var r, i, a, o, s = t.initialState;
            if (null == s) r = n.forwardLayer.call(e, t), i = n.backwardLayer.call(e, t);
            else {
                var l = s.slice(0, s.length / 2), u = s.slice(s.length / 2);
                r = n.forwardLayer.call(e, Object.assign(t, {
                    initialState: l
                })), i = n.backwardLayer.call(e, Object.assign(t, {
                    initialState: u
                }));
            }
            return n.returnState && (Array.isArray(r) && (a = r.slice(1).concat(i.slice(1))), r = r[0], i = i[0]), n.returnSequences && (i = _tfjsCore.reverse(i, 1)), "concat" === n.mergeMode ? o = concatenate([
                r,
                i
            ]) : "sum" === n.mergeMode ? o = _tfjsCore.add(r, i) : "ave" === n.mergeMode ? o = _tfjsCore.mul(getScalar(0.5), _tfjsCore.add(r, i)) : "mul" === n.mergeMode ? o = _tfjsCore.mul(r, i) : null == n.mergeMode && (o = [
                r,
                i
            ]), n.returnState ? null == n.mergeMode ? o.concat(a) : [
                o
            ].concat(a) : o;
        });
    }, t115.prototype.resetStates = function(e) {
        this.forwardLayer.resetStates(), this.backwardLayer.resetStates();
    }, t115.prototype.build = function(e) {
        var t = this;
        nameScope(this.forwardLayer.name, function() {
            t.forwardLayer.build(e);
        }), nameScope(this.backwardLayer.name, function() {
            t.backwardLayer.build(e);
        }), this.built = !0;
    }, Object.defineProperty(t115.prototype, "trainableWeights", {
        get: function() {
            return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights);
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(t115.prototype, "nonTrainableWeights", {
        get: function() {
            return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights);
        },
        enumerable: !0,
        configurable: !0
    }), t115.prototype.setFastWeightInitDuringBuild = function(t) {
        e148.prototype.setFastWeightInitDuringBuild.call(this, t), null != this.forwardLayer && this.forwardLayer.setFastWeightInitDuringBuild(t), null != this.backwardLayer && this.backwardLayer.setFastWeightInitDuringBuild(t);
    }, t115.prototype.getConfig = function() {
        var t = {
            mergeMode: this.mergeMode
        }, n = e148.prototype.getConfig.call(this);
        return Object.assign(t, n), t;
    }, t115.fromConfig = function(e, t) {
        var n = deserialize(t.layer);
        if (delete t.layer, null != t.numConstants) throw new NotImplementedError("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");
        var r = t;
        return r.layer = n, new e(r);
    }, t115.className = "Bidirectional", t115;
}(Wrapper);
function inputLayer(e) {
    return new InputLayer(e);
}
function elu$2(e) {
    return new ELU(e);
}
function reLU(e) {
    return new ReLU(e);
}
function leakyReLU(e) {
    return new LeakyReLU(e);
}
function prelu$1(e) {
    return new PReLU(e);
}
function softmax$1(e) {
    return new Softmax$1(e);
}
function thresholdedReLU(e) {
    return new ThresholdedReLU(e);
}
function conv1d$2(e) {
    return new Conv1D(e);
}
function conv2d$2(e) {
    return new Conv2D(e);
}
function conv2dTranspose$1(e) {
    return new Conv2DTranspose(e);
}
function separableConv2d$1(e) {
    return new SeparableConv2D(e);
}
function cropping2D(e) {
    return new Cropping2D(e);
}
function upSampling2d(e) {
    return new UpSampling2D(e);
}
function depthwiseConv2d$2(e) {
    return new DepthwiseConv2D(e);
}
function activation(e) {
    return new Activation$1(e);
}
function dense(e) {
    return new Dense(e);
}
function dropout$1(e) {
    return new Dropout(e);
}
function flatten$1(e) {
    return new Flatten(e);
}
function repeatVector(e) {
    return new RepeatVector(e);
}
function reshape(e) {
    return new Reshape(e);
}
function permute(e) {
    return new Permute(e);
}
function embedding(e) {
    return new Embedding(e);
}
function add$2(e) {
    return new Add(e);
}
function average$1(e) {
    return new Average(e);
}
function concatenate$2(e) {
    return new Concatenate(e);
}
function maximum$2(e) {
    return new Maximum(e);
}
function minimum$2(e) {
    return new Minimum(e);
}
function multiply$1(e) {
    return new Multiply(e);
}
function dot$1(e) {
    return new Dot(e);
}
function batchNormalization$1(e) {
    return new BatchNormalization(e);
}
function zeroPadding2d(e) {
    return new ZeroPadding2D(e);
}
function averagePooling1d(e) {
    return new AveragePooling1D(e);
}
function avgPool1d(e) {
    return averagePooling1d(e);
}
function avgPooling1d(e) {
    return averagePooling1d(e);
}
function averagePooling2d(e) {
    return new AveragePooling2D(e);
}
function avgPool2d(e) {
    return averagePooling2d(e);
}
function avgPooling2d(e) {
    return averagePooling2d(e);
}
function globalAveragePooling1d(e) {
    return new GlobalAveragePooling1D(e);
}
function globalAveragePooling2d(e) {
    return new GlobalAveragePooling2D(e);
}
function globalMaxPooling1d(e) {
    return new GlobalMaxPooling1D(e);
}
function globalMaxPooling2d(e) {
    return new GlobalMaxPooling2D(e);
}
function maxPooling1d(e) {
    return new MaxPooling1D(e);
}
function maxPooling2d(e) {
    return new MaxPooling2D(e);
}
function gru(e) {
    return new GRU(e);
}
function gruCell(e) {
    return new GRUCell(e);
}
function lstm(e) {
    return new LSTM(e);
}
function lstmCell(e) {
    return new LSTMCell(e);
}
function simpleRNN(e) {
    return new SimpleRNN(e);
}
function simpleRNNCell(e) {
    return new SimpleRNNCell(e);
}
function rnn$1(e) {
    return new RNN(e);
}
function stackedRNNCells(e) {
    return new StackedRNNCells(e);
}
function bidirectional(e) {
    return new Bidirectional(e);
}
function timeDistributed(e) {
    return new TimeDistributed(e);
}
_tfjsCore.serialization.registerClass(Bidirectional);
var globalMaxPool1d = globalMaxPooling1d, globalMaxPool2d = globalMaxPooling2d, maxPool1d = maxPooling1d, maxPool2d = maxPooling2d, exports_layers = Object.freeze({
    inputLayer: inputLayer,
    elu: elu$2,
    reLU: reLU,
    leakyReLU: leakyReLU,
    prelu: prelu$1,
    softmax: softmax$1,
    thresholdedReLU: thresholdedReLU,
    conv1d: conv1d$2,
    conv2d: conv2d$2,
    conv2dTranspose: conv2dTranspose$1,
    separableConv2d: separableConv2d$1,
    cropping2D: cropping2D,
    upSampling2d: upSampling2d,
    depthwiseConv2d: depthwiseConv2d$2,
    activation: activation,
    dense: dense,
    dropout: dropout$1,
    flatten: flatten$1,
    repeatVector: repeatVector,
    reshape: reshape,
    permute: permute,
    embedding: embedding,
    add: add$2,
    average: average$1,
    concatenate: concatenate$2,
    maximum: maximum$2,
    minimum: minimum$2,
    multiply: multiply$1,
    dot: dot$1,
    batchNormalization: batchNormalization$1,
    zeroPadding2d: zeroPadding2d,
    averagePooling1d: averagePooling1d,
    avgPool1d: avgPool1d,
    avgPooling1d: avgPooling1d,
    averagePooling2d: averagePooling2d,
    avgPool2d: avgPool2d,
    avgPooling2d: avgPooling2d,
    globalAveragePooling1d: globalAveragePooling1d,
    globalAveragePooling2d: globalAveragePooling2d,
    globalMaxPooling1d: globalMaxPooling1d,
    globalMaxPooling2d: globalMaxPooling2d,
    maxPooling1d: maxPooling1d,
    maxPooling2d: maxPooling2d,
    gru: gru,
    gruCell: gruCell,
    lstm: lstm,
    lstmCell: lstmCell,
    simpleRNN: simpleRNN,
    simpleRNNCell: simpleRNNCell,
    rnn: rnn$1,
    stackedRNNCells: stackedRNNCells,
    bidirectional: bidirectional,
    timeDistributed: timeDistributed,
    globalMaxPool1d: globalMaxPool1d,
    globalMaxPool2d: globalMaxPool2d,
    maxPool1d: maxPool1d,
    maxPool2d: maxPool2d,
    Layer: Layer,
    RNN: RNN,
    RNNCell: RNNCell,
    input: input
});
function binaryAccuracy$1(e, t) {
    return binaryAccuracy(e, t);
}
function binaryCrossentropy$2(e, t) {
    return binaryCrossentropy$1(e, t);
}
function sparseCategoricalAccuracy$1(e, t) {
    return sparseCategoricalAccuracy(e, t);
}
function categoricalAccuracy$1(e, t) {
    return categoricalAccuracy(e, t);
}
function categoricalCrossentropy$2(e, t) {
    return categoricalCrossentropy$1(e, t);
}
function precision$1(e, t) {
    return precision(e, t);
}
function recall$1(e, t) {
    return recall(e, t);
}
function cosineProximity$1(e, t) {
    return cosineProximity(e, t);
}
function meanAbsoluteError$1(e, t) {
    return meanAbsoluteError(e, t);
}
function meanAbsolutePercentageError$1(e, t) {
    return meanAbsolutePercentageError(e, t);
}
function MAPE$2(e, t) {
    return meanAbsolutePercentageError(e, t);
}
function mape$2(e, t) {
    return meanAbsolutePercentageError(e, t);
}
function meanSquaredError$1(e, t) {
    return meanSquaredError(e, t);
}
function MSE$2(e, t) {
    return meanSquaredError(e, t);
}
function mse$2(e, t) {
    return meanSquaredError(e, t);
}
var exports_metrics = Object.freeze({
    binaryAccuracy: binaryAccuracy$1,
    binaryCrossentropy: binaryCrossentropy$2,
    sparseCategoricalAccuracy: sparseCategoricalAccuracy$1,
    categoricalAccuracy: categoricalAccuracy$1,
    categoricalCrossentropy: categoricalCrossentropy$2,
    precision: precision$1,
    recall: recall$1,
    cosineProximity: cosineProximity$1,
    meanAbsoluteError: meanAbsoluteError$1,
    meanAbsolutePercentageError: meanAbsolutePercentageError$1,
    MAPE: MAPE$2,
    mape: mape$2,
    meanSquaredError: meanSquaredError$1,
    MSE: MSE$2,
    mse: mse$2
}), exports_models = Object.freeze({
    modelFromJSON: modelFromJSON
});
function l1l2(e) {
    return new L1L2(e);
}
function l1$1(e) {
    return l1(e);
}
function l2$1(e) {
    return l2(e);
}
var exports_regularizers = Object.freeze({
    l1l2: l1l2,
    l1: l1$1,
    l2: l2$1
}), Callback = function(e149) {
    function t116() {
        var t = null !== e149 && e149.apply(this, arguments) || this;
        return t.model = null, t;
    }
    return __extends(t116, e149), t116.prototype.setModel = function(e) {
        if (!(e instanceof Model)) throw new Error("model must be a Model, not some other Container");
        this.model = e;
    }, t116;
}(BaseCallback);

},{"@tensorflow/tfjs-core":"djGzH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h4Rqn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "loadFrozenModel", ()=>loadFrozenModel$2
);
parcelHelpers.export(exports, "loadGraphModel", ()=>loadGraphModel
);
parcelHelpers.export(exports, "FrozenModel", ()=>FrozenModel
);
parcelHelpers.export(exports, "loadTfHubModule", ()=>loadTfHubModule
);
parcelHelpers.export(exports, "GraphModel", ()=>FrozenModel
);
parcelHelpers.export(exports, "FrozenModelJSON", ()=>FrozenModel$1
);
parcelHelpers.export(exports, "version_converter", ()=>version
);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var global = arguments[3];
var Buffer = require("buffer").Buffer;
var __assign = Object.assign || function(e) {
    for(var t, a = 1, r = arguments.length; a < r; a++)for(var n in t = arguments[a])Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
    return e;
};
function __awaiter(e1, t1, a, r) {
    return new (a || (a = Promise))(function(n, o) {
        function s(e) {
            try {
                p(r.next(e));
            } catch (e2) {
                o(e2);
            }
        }
        function i(e) {
            try {
                p(r.throw(e));
            } catch (e3) {
                o(e3);
            }
        }
        function p(e) {
            e.done ? n(e.value) : new a(function(t) {
                t(e.value);
            }).then(s, i);
        }
        p((r = r.apply(e1, t1 || [])).next());
    });
}
function __generator(e4, t) {
    var a, r, n, o1, s = {
        label: 0,
        sent: function() {
            if (1 & n[0]) throw n[1];
            return n[1];
        },
        trys: [],
        ops: []
    };
    function i1(o2) {
        return function(i) {
            return (function(o) {
                if (a) throw new TypeError("Generator is already executing.");
                for(; s;)try {
                    if (a = 1, r && (n = r[2 & o[0] ? "return" : o[0] ? "throw" : "next"]) && !(n = n.call(r, o[1])).done) return n;
                    switch(r = 0, n && (o = [
                        0,
                        n.value
                    ]), o[0]){
                        case 0:
                        case 1:
                            n = o;
                            break;
                        case 4:
                            return s.label++, {
                                value: o[1],
                                done: !1
                            };
                        case 5:
                            s.label++, r = o[1], o = [
                                0
                            ];
                            continue;
                        case 7:
                            o = s.ops.pop(), s.trys.pop();
                            continue;
                        default:
                            if (!(n = (n = s.trys).length > 0 && n[n.length - 1]) && (6 === o[0] || 2 === o[0])) {
                                s = 0;
                                continue;
                            }
                            if (3 === o[0] && (!n || o[1] > n[0] && o[1] < n[3])) {
                                s.label = o[1];
                                break;
                            }
                            if (6 === o[0] && s.label < n[1]) {
                                s.label = n[1], n = o;
                                break;
                            }
                            if (n && s.label < n[2]) {
                                s.label = n[2], s.ops.push(o);
                                break;
                            }
                            n[2] && s.ops.pop(), s.trys.pop();
                            continue;
                    }
                    o = t.call(e4, s);
                } catch (e) {
                    o = [
                        6,
                        e
                    ], r = 0;
                } finally{
                    a = n = 0;
                }
                if (5 & o[0]) throw o[1];
                return {
                    value: o[0] ? o[1] : void 0,
                    done: !0
                };
            })([
                o2,
                i
            ]);
        };
    }
    return o1 = {
        next: i1(0),
        throw: i1(1),
        return: i1(2)
    }, "function" == typeof Symbol && (o1[Symbol.iterator] = function() {
        return this;
    }), o1;
}
var commonjsGlobal = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {
};
function createCommonjsModule(e, t) {
    return e(t = {
        exports: {
        }
    }, t.exports), t.exports;
}
var aspromise = asPromise;
function asPromise(e5, t2) {
    for(var a1 = new Array(arguments.length - 1), r = 0, n1 = 2, o = !0; n1 < arguments.length;)a1[r++] = arguments[n1++];
    return new Promise(function(n, s) {
        a1[r] = function(e) {
            if (o) {
                if (o = !1, e) s(e);
                else {
                    for(var t = new Array(arguments.length - 1), a = 0; a < t.length;)t[a++] = arguments[a];
                    n.apply(null, t);
                }
            }
        };
        try {
            e5.apply(t2 || null, a1);
        } catch (e) {
            o && (o = !1, s(e));
        }
    });
}
var base64_1 = createCommonjsModule(function(e6, t3) {
    var a2 = t3;
    a2.length = function(e) {
        var t = e.length;
        if (!t) return 0;
        for(var a = 0; --t % 4 > 1 && "=" === e.charAt(t);)++a;
        return Math.ceil(3 * e.length) / 4 - a;
    };
    for(var r1 = new Array(64), n2 = new Array(123), o3 = 0; o3 < 64;)n2[r1[o3] = o3 < 26 ? o3 + 65 : o3 < 52 ? o3 + 71 : o3 < 62 ? o3 - 4 : o3 - 59 | 43] = o3++;
    a2.encode = function(e, t, a) {
        for(var n, o = null, s = [], i = 0, p = 0; t < a;){
            var u = e[t++];
            switch(p){
                case 0:
                    s[i++] = r1[u >> 2], n = (3 & u) << 4, p = 1;
                    break;
                case 1:
                    s[i++] = r1[n | u >> 4], n = (15 & u) << 2, p = 2;
                    break;
                case 2:
                    s[i++] = r1[n | u >> 6], s[i++] = r1[63 & u], p = 0;
            }
            i > 8191 && ((o || (o = [])).push(String.fromCharCode.apply(String, s)), i = 0);
        }
        return p && (s[i++] = r1[n], s[i++] = 61, 1 === p && (s[i++] = 61)), o ? (i && o.push(String.fromCharCode.apply(String, s.slice(0, i))), o.join("")) : String.fromCharCode.apply(String, s.slice(0, i));
    };
    a2.decode = function(e, t, a) {
        for(var r, o = a, s = 0, i = 0; i < e.length;){
            var p = e.charCodeAt(i++);
            if (61 === p && s > 1) break;
            if (void 0 === (p = n2[p])) throw Error("invalid encoding");
            switch(s){
                case 0:
                    r = p, s = 1;
                    break;
                case 1:
                    t[a++] = r << 2 | (48 & p) >> 4, r = p, s = 2;
                    break;
                case 2:
                    t[a++] = (15 & r) << 4 | (60 & p) >> 2, r = p, s = 3;
                    break;
                case 3:
                    t[a++] = (3 & r) << 6 | p, s = 0;
            }
        }
        if (1 === s) throw Error("invalid encoding");
        return a - o;
    }, a2.test = function(e) {
        return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(e);
    };
}), eventemitter = EventEmitter;
function EventEmitter() {
    this._listeners = {
    };
}
EventEmitter.prototype.on = function(e, t, a) {
    return (this._listeners[e] || (this._listeners[e] = [])).push({
        fn: t,
        ctx: a || this
    }), this;
}, EventEmitter.prototype.off = function(e, t) {
    if (void 0 === e) this._listeners = {
    };
    else if (void 0 === t) this._listeners[e] = [];
    else for(var a = this._listeners[e], r = 0; r < a.length;)a[r].fn === t ? a.splice(r, 1) : ++r;
    return this;
}, EventEmitter.prototype.emit = function(e) {
    var t = this._listeners[e];
    if (t) {
        for(var a = [], r = 1; r < arguments.length;)a.push(arguments[r++]);
        for(r = 0; r < t.length;)t[r].fn.apply(t[r++].ctx, a);
    }
    return this;
};
var float_1 = factory(factory);
function factory(e7) {
    return "undefined" != typeof Float32Array ? (function() {
        var t = new Float32Array([
            -0
        ]), a = new Uint8Array(t.buffer), r2 = 128 === a[3];
        function n(e, r, n) {
            t[0] = e, r[n] = a[0], r[n + 1] = a[1], r[n + 2] = a[2], r[n + 3] = a[3];
        }
        function o(e, r, n) {
            t[0] = e, r[n] = a[3], r[n + 1] = a[2], r[n + 2] = a[1], r[n + 3] = a[0];
        }
        function s(e, r) {
            return a[0] = e[r], a[1] = e[r + 1], a[2] = e[r + 2], a[3] = e[r + 3], t[0];
        }
        function i(e, r) {
            return a[3] = e[r], a[2] = e[r + 1], a[1] = e[r + 2], a[0] = e[r + 3], t[0];
        }
        e7.writeFloatLE = r2 ? n : o, e7.writeFloatBE = r2 ? o : n, e7.readFloatLE = r2 ? s : i, e7.readFloatBE = r2 ? i : s;
    })() : (function() {
        function t4(e, t, a, r) {
            var n = t < 0 ? 1 : 0;
            if (n && (t = -t), 0 === t) e(1 / t > 0 ? 0 : 2147483648, a, r);
            else if (isNaN(t)) e(2143289344, a, r);
            else if (t > 340282346638528860000000000000000000000) e((n << 31 | 2139095040) >>> 0, a, r);
            else if (t < 0.000000000000000000000000000000000000011754943508222875) e((n << 31 | Math.round(t / 0.000000000000000000000000000000000000000000001401298464324817)) >>> 0, a, r);
            else {
                var o = Math.floor(Math.log(t) / Math.LN2);
                e((n << 31 | o + 127 << 23 | 8388607 & Math.round(t * Math.pow(2, -o) * 8388608)) >>> 0, a, r);
            }
        }
        function a3(e, t, a) {
            var r = e(t, a), n = 2 * (r >> 31) + 1, o = r >>> 23 & 255, s = 8388607 & r;
            return 255 === o ? s ? NaN : n * (1 / 0) : 0 === o ? 0.000000000000000000000000000000000000000000001401298464324817 * n * s : n * Math.pow(2, o - 150) * (s + 8388608);
        }
        e7.writeFloatLE = t4.bind(null, writeUintLE), e7.writeFloatBE = t4.bind(null, writeUintBE), e7.readFloatLE = a3.bind(null, readUintLE), e7.readFloatBE = a3.bind(null, readUintBE);
    })(), "undefined" != typeof Float64Array ? (function() {
        var t = new Float64Array([
            -0
        ]), a = new Uint8Array(t.buffer), r3 = 128 === a[7];
        function n(e, r, n) {
            t[0] = e, r[n] = a[0], r[n + 1] = a[1], r[n + 2] = a[2], r[n + 3] = a[3], r[n + 4] = a[4], r[n + 5] = a[5], r[n + 6] = a[6], r[n + 7] = a[7];
        }
        function o(e, r, n) {
            t[0] = e, r[n] = a[7], r[n + 1] = a[6], r[n + 2] = a[5], r[n + 3] = a[4], r[n + 4] = a[3], r[n + 5] = a[2], r[n + 6] = a[1], r[n + 7] = a[0];
        }
        function s(e, r) {
            return a[0] = e[r], a[1] = e[r + 1], a[2] = e[r + 2], a[3] = e[r + 3], a[4] = e[r + 4], a[5] = e[r + 5], a[6] = e[r + 6], a[7] = e[r + 7], t[0];
        }
        function i(e, r) {
            return a[7] = e[r], a[6] = e[r + 1], a[5] = e[r + 2], a[4] = e[r + 3], a[3] = e[r + 4], a[2] = e[r + 5], a[1] = e[r + 6], a[0] = e[r + 7], t[0];
        }
        e7.writeDoubleLE = r3 ? n : o, e7.writeDoubleBE = r3 ? o : n, e7.readDoubleLE = r3 ? s : i, e7.readDoubleBE = r3 ? i : s;
    })() : (function() {
        function t5(e, t, a, r, n, o) {
            var s = r < 0 ? 1 : 0;
            if (s && (r = -r), 0 === r) e(0, n, o + t), e(1 / r > 0 ? 0 : 2147483648, n, o + a);
            else if (isNaN(r)) e(0, n, o + t), e(2146959360, n, o + a);
            else if (r > 179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) e(0, n, o + t), e((s << 31 | 2146435072) >>> 0, n, o + a);
            else {
                var i;
                if (r < 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014) e((i = r / 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005) >>> 0, n, o + t), e((s << 31 | i / 4294967296) >>> 0, n, o + a);
                else {
                    var p = Math.floor(Math.log(r) / Math.LN2);
                    1024 === p && (p = 1023), e(4503599627370496 * (i = r * Math.pow(2, -p)) >>> 0, n, o + t), e((s << 31 | p + 1023 << 20 | 1048576 * i & 1048575) >>> 0, n, o + a);
                }
            }
        }
        function a4(e, t, a, r, n) {
            var o = e(r, n + t), s = e(r, n + a), i = 2 * (s >> 31) + 1, p = s >>> 20 & 2047, u = 4294967296 * (1048575 & s) + o;
            return 2047 === p ? u ? NaN : i * (1 / 0) : 0 === p ? 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005 * i * u : i * Math.pow(2, p - 1075) * (u + 4503599627370496);
        }
        e7.writeDoubleLE = t5.bind(null, writeUintLE, 0, 4), e7.writeDoubleBE = t5.bind(null, writeUintBE, 4, 0), e7.readDoubleLE = a4.bind(null, readUintLE, 0, 4), e7.readDoubleBE = a4.bind(null, readUintBE, 4, 0);
    })(), e7;
}
function writeUintLE(e, t, a) {
    t[a] = 255 & e, t[a + 1] = e >>> 8 & 255, t[a + 2] = e >>> 16 & 255, t[a + 3] = e >>> 24;
}
function writeUintBE(e, t, a) {
    t[a] = e >>> 24, t[a + 1] = e >>> 16 & 255, t[a + 2] = e >>> 8 & 255, t[a + 3] = 255 & e;
}
function readUintLE(e, t) {
    return (e[t] | e[t + 1] << 8 | e[t + 2] << 16 | e[t + 3] << 24) >>> 0;
}
function readUintBE(e, t) {
    return (e[t] << 24 | e[t + 1] << 16 | e[t + 2] << 8 | e[t + 3]) >>> 0;
}
var inquire_1 = inquire;
function inquire(moduleName) {
    try {
        var mod$$1 = eval("quire".replace(/^/, "re"))(moduleName);
        if (mod$$1 && (mod$$1.length || Object.keys(mod$$1).length)) return mod$$1;
    } catch (e) {
    }
    return null;
}
var utf8_1 = createCommonjsModule(function(e8, t6) {
    var a5 = t6;
    a5.length = function(e) {
        for(var t = 0, a = 0, r = 0; r < e.length; ++r)(a = e.charCodeAt(r)) < 128 ? t += 1 : a < 2048 ? t += 2 : 55296 == (64512 & a) && 56320 == (64512 & e.charCodeAt(r + 1)) ? (++r, t += 4) : t += 3;
        return t;
    }, a5.read = function(e, t, a) {
        if (a - t < 1) return "";
        for(var r, n = null, o = [], s = 0; t < a;)(r = e[t++]) < 128 ? o[s++] = r : r > 191 && r < 224 ? o[s++] = (31 & r) << 6 | 63 & e[t++] : r > 239 && r < 365 ? (r = ((7 & r) << 18 | (63 & e[t++]) << 12 | (63 & e[t++]) << 6 | 63 & e[t++]) - 65536, o[s++] = 55296 + (r >> 10), o[s++] = 56320 + (1023 & r)) : o[s++] = (15 & r) << 12 | (63 & e[t++]) << 6 | 63 & e[t++], s > 8191 && ((n || (n = [])).push(String.fromCharCode.apply(String, o)), s = 0);
        return n ? (s && n.push(String.fromCharCode.apply(String, o.slice(0, s))), n.join("")) : String.fromCharCode.apply(String, o.slice(0, s));
    }, a5.write = function(e, t, a) {
        for(var r, n, o = a, s = 0; s < e.length; ++s)(r = e.charCodeAt(s)) < 128 ? t[a++] = r : r < 2048 ? (t[a++] = r >> 6 | 192, t[a++] = 63 & r | 128) : 55296 == (64512 & r) && 56320 == (64512 & (n = e.charCodeAt(s + 1))) ? (r = 65536 + ((1023 & r) << 10) + (1023 & n), ++s, t[a++] = r >> 18 | 240, t[a++] = r >> 12 & 63 | 128, t[a++] = r >> 6 & 63 | 128, t[a++] = 63 & r | 128) : (t[a++] = r >> 12 | 224, t[a++] = r >> 6 & 63 | 128, t[a++] = 63 & r | 128);
        return a - o;
    };
}), pool_1 = pool;
function pool(e, t, a6) {
    var r = a6 || 8192, n = r >>> 1, o = null, s = r;
    return function(a) {
        if (a < 1 || a > n) return e(a);
        s + a > r && (o = e(r), s = 0);
        var i = t.call(o, s, s += a);
        return 7 & s && (s = 1 + (7 | s)), i;
    };
}
var longbits = LongBits;
function LongBits(e, t) {
    this.lo = e >>> 0, this.hi = t >>> 0;
}
var zero = LongBits.zero = new LongBits(0, 0);
zero.toNumber = function() {
    return 0;
}, zero.zzEncode = zero.zzDecode = function() {
    return this;
}, zero.length = function() {
    return 1;
};
var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
LongBits.fromNumber = function(e) {
    if (0 === e) return zero;
    var t = e < 0;
    t && (e = -e);
    var a = e >>> 0, r = (e - a) / 4294967296 >>> 0;
    return t && (r = ~r >>> 0, a = ~a >>> 0, ++a > 4294967295 && (a = 0, ++r > 4294967295 && (r = 0))), new LongBits(a, r);
}, LongBits.from = function(e) {
    if ("number" == typeof e) return LongBits.fromNumber(e);
    if (minimal.isString(e)) {
        if (!minimal.Long) return LongBits.fromNumber(parseInt(e, 10));
        e = minimal.Long.fromString(e);
    }
    return e.low || e.high ? new LongBits(e.low >>> 0, e.high >>> 0) : zero;
}, LongBits.prototype.toNumber = function(e) {
    if (!e && this.hi >>> 31) {
        var t = 1 + ~this.lo >>> 0, a = ~this.hi >>> 0;
        return t || (a = a + 1 >>> 0), -(t + 4294967296 * a);
    }
    return this.lo + 4294967296 * this.hi;
}, LongBits.prototype.toLong = function(e) {
    return minimal.Long ? new minimal.Long(0 | this.lo, 0 | this.hi, Boolean(e)) : {
        low: 0 | this.lo,
        high: 0 | this.hi,
        unsigned: Boolean(e)
    };
};
var charCodeAt = String.prototype.charCodeAt;
LongBits.fromHash = function(e) {
    return e === zeroHash ? zero : new LongBits((charCodeAt.call(e, 0) | charCodeAt.call(e, 1) << 8 | charCodeAt.call(e, 2) << 16 | charCodeAt.call(e, 3) << 24) >>> 0, (charCodeAt.call(e, 4) | charCodeAt.call(e, 5) << 8 | charCodeAt.call(e, 6) << 16 | charCodeAt.call(e, 7) << 24) >>> 0);
}, LongBits.prototype.toHash = function() {
    return String.fromCharCode(255 & this.lo, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, 255 & this.hi, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
}, LongBits.prototype.zzEncode = function() {
    var e = this.hi >> 31;
    return this.hi = ((this.hi << 1 | this.lo >>> 31) ^ e) >>> 0, this.lo = (this.lo << 1 ^ e) >>> 0, this;
}, LongBits.prototype.zzDecode = function() {
    var e = -(1 & this.lo);
    return this.lo = ((this.lo >>> 1 | this.hi << 31) ^ e) >>> 0, this.hi = (this.hi >>> 1 ^ e) >>> 0, this;
}, LongBits.prototype.length = function() {
    var e = this.lo, t = (this.lo >>> 28 | this.hi << 4) >>> 0, a = this.hi >>> 24;
    return 0 === a ? 0 === t ? e < 16384 ? e < 128 ? 1 : 2 : e < 2097152 ? 3 : 4 : t < 16384 ? t < 128 ? 5 : 6 : t < 2097152 ? 7 : 8 : a < 128 ? 9 : 10;
};
var minimal = createCommonjsModule(function(e9, t7) {
    var a7 = t7;
    function r4(e, t, a) {
        for(var r = Object.keys(t), n = 0; n < r.length; ++n)void 0 !== e[r[n]] && a || (e[r[n]] = t[r[n]]);
        return e;
    }
    function n3(e10) {
        function t(e, a) {
            if (!(this instanceof t)) return new t(e, a);
            Object.defineProperty(this, "message", {
                get: function() {
                    return e;
                }
            }), Error.captureStackTrace ? Error.captureStackTrace(this, t) : Object.defineProperty(this, "stack", {
                value: (new Error).stack || ""
            }), a && r4(this, a);
        }
        return (t.prototype = Object.create(Error.prototype)).constructor = t, Object.defineProperty(t.prototype, "name", {
            get: function() {
                return e10;
            }
        }), t.prototype.toString = function() {
            return this.name + ": " + this.message;
        }, t;
    }
    a7.asPromise = aspromise, a7.base64 = base64_1, a7.EventEmitter = eventemitter, a7.float = float_1, a7.inquire = inquire_1, a7.utf8 = utf8_1, a7.pool = pool_1, a7.LongBits = longbits, a7.global = "undefined" != typeof window && window || void 0 !== commonjsGlobal && commonjsGlobal || "undefined" != typeof self && self || commonjsGlobal, a7.emptyArray = Object.freeze ? Object.freeze([]) : [], a7.emptyObject = Object.freeze ? Object.freeze({
    }) : {
    }, a7.isNode = Boolean(a7.global.process && a7.global.process.versions && a7.global.process.versions.node), a7.isInteger = Number.isInteger || function(e) {
        return "number" == typeof e && isFinite(e) && Math.floor(e) === e;
    }, a7.isString = function(e) {
        return "string" == typeof e || e instanceof String;
    }, a7.isObject = function(e) {
        return e && "object" == typeof e;
    }, a7.isset = a7.isSet = function(e, t) {
        var a = e[t];
        return !(null == a || !e.hasOwnProperty(t)) && ("object" != typeof a || (Array.isArray(a) ? a.length : Object.keys(a).length) > 0);
    }, a7.Buffer = (function() {
        try {
            var e = a7.inquire("buffer").Buffer;
            return e.prototype.utf8Write ? e : null;
        } catch (e) {
            return null;
        }
    })(), a7._Buffer_from = null, a7._Buffer_allocUnsafe = null, a7.newBuffer = function(e) {
        return "number" == typeof e ? a7.Buffer ? a7._Buffer_allocUnsafe(e) : new a7.Array(e) : a7.Buffer ? a7._Buffer_from(e) : "undefined" == typeof Uint8Array ? e : new Uint8Array(e);
    }, a7.Array = "undefined" != typeof Uint8Array ? Uint8Array : Array, a7.Long = a7.global.dcodeIO && a7.global.dcodeIO.Long || a7.global.Long || a7.inquire("long"), a7.key2Re = /^true|false|0|1$/, a7.key32Re = /^-?(?:0|[1-9][0-9]*)$/, a7.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/, a7.longToHash = function(e) {
        return e ? a7.LongBits.from(e).toHash() : a7.LongBits.zeroHash;
    }, a7.longFromHash = function(e, t) {
        var r = a7.LongBits.fromHash(e);
        return a7.Long ? a7.Long.fromBits(r.lo, r.hi, t) : r.toNumber(Boolean(t));
    }, a7.merge = r4, a7.lcFirst = function(e) {
        return e.charAt(0).toLowerCase() + e.substring(1);
    }, a7.newError = n3, a7.ProtocolError = n3("ProtocolError"), a7.oneOfGetter = function(e11) {
        for(var t = {
        }, a8 = 0; a8 < e11.length; ++a8)t[e11[a8]] = 1;
        return function() {
            for(var e = Object.keys(this), a = e.length - 1; a > -1; --a)if (1 === t[e[a]] && void 0 !== this[e[a]] && null !== this[e[a]]) return e[a];
        };
    }, a7.oneOfSetter = function(e) {
        return function(t) {
            for(var a = 0; a < e.length; ++a)e[a] !== t && delete this[e[a]];
        };
    }, a7.toJSONOptions = {
        longs: String,
        enums: String,
        bytes: String,
        json: !0
    }, a7._configure = function() {
        var e = a7.Buffer;
        e ? (a7._Buffer_from = e.from !== Uint8Array.from && e.from || function(t, a) {
            return new e(t, a);
        }, a7._Buffer_allocUnsafe = e.allocUnsafe || function(t) {
            return new e(t);
        }) : a7._Buffer_from = a7._Buffer_allocUnsafe = null;
    };
}), writer = Writer, BufferWriter, LongBits$1 = minimal.LongBits, base64 = minimal.base64, utf8 = minimal.utf8;
function Op(e, t, a) {
    this.fn = e, this.len = t, this.next = void 0, this.val = a;
}
function noop() {
}
function State(e) {
    this.head = e.head, this.tail = e.tail, this.len = e.len, this.next = e.states;
}
function Writer() {
    this.len = 0, this.head = new Op(noop, 0, 0), this.tail = this.head, this.states = null;
}
function writeByte(e, t, a) {
    t[a] = 255 & e;
}
function writeVarint32(e, t, a) {
    for(; e > 127;)t[a++] = 127 & e | 128, e >>>= 7;
    t[a] = e;
}
function VarintOp(e, t) {
    this.len = e, this.next = void 0, this.val = t;
}
function writeVarint64(e, t, a) {
    for(; e.hi;)t[a++] = 127 & e.lo | 128, e.lo = (e.lo >>> 7 | e.hi << 25) >>> 0, e.hi >>>= 7;
    for(; e.lo > 127;)t[a++] = 127 & e.lo | 128, e.lo = e.lo >>> 7;
    t[a++] = e.lo;
}
function writeFixed32(e, t, a) {
    t[a] = 255 & e, t[a + 1] = e >>> 8 & 255, t[a + 2] = e >>> 16 & 255, t[a + 3] = e >>> 24;
}
Writer.create = minimal.Buffer ? function() {
    return (Writer.create = function() {
        return new BufferWriter;
    })();
} : function() {
    return new Writer;
}, Writer.alloc = function(e) {
    return new minimal.Array(e);
}, minimal.Array !== Array && (Writer.alloc = minimal.pool(Writer.alloc, minimal.Array.prototype.subarray)), Writer.prototype._push = function(e, t, a) {
    return this.tail = this.tail.next = new Op(e, t, a), this.len += t, this;
}, VarintOp.prototype = Object.create(Op.prototype), VarintOp.prototype.fn = writeVarint32, Writer.prototype.uint32 = function(e) {
    return this.len += (this.tail = this.tail.next = new VarintOp((e >>>= 0) < 128 ? 1 : e < 16384 ? 2 : e < 2097152 ? 3 : e < 268435456 ? 4 : 5, e)).len, this;
}, Writer.prototype.int32 = function(e) {
    return e < 0 ? this._push(writeVarint64, 10, LongBits$1.fromNumber(e)) : this.uint32(e);
}, Writer.prototype.sint32 = function(e) {
    return this.uint32((e << 1 ^ e >> 31) >>> 0);
}, Writer.prototype.uint64 = function(e) {
    var t = LongBits$1.from(e);
    return this._push(writeVarint64, t.length(), t);
}, Writer.prototype.int64 = Writer.prototype.uint64, Writer.prototype.sint64 = function(e) {
    var t = LongBits$1.from(e).zzEncode();
    return this._push(writeVarint64, t.length(), t);
}, Writer.prototype.bool = function(e) {
    return this._push(writeByte, 1, e ? 1 : 0);
}, Writer.prototype.fixed32 = function(e) {
    return this._push(writeFixed32, 4, e >>> 0);
}, Writer.prototype.sfixed32 = Writer.prototype.fixed32, Writer.prototype.fixed64 = function(e) {
    var t = LongBits$1.from(e);
    return this._push(writeFixed32, 4, t.lo)._push(writeFixed32, 4, t.hi);
}, Writer.prototype.sfixed64 = Writer.prototype.fixed64, Writer.prototype.float = function(e) {
    return this._push(minimal.float.writeFloatLE, 4, e);
}, Writer.prototype.double = function(e) {
    return this._push(minimal.float.writeDoubleLE, 8, e);
};
var writeBytes = minimal.Array.prototype.set ? function(e, t, a) {
    t.set(e, a);
} : function(e, t, a) {
    for(var r = 0; r < e.length; ++r)t[a + r] = e[r];
};
Writer.prototype.bytes = function(e) {
    var t = e.length >>> 0;
    if (!t) return this._push(writeByte, 1, 0);
    if (minimal.isString(e)) {
        var a = Writer.alloc(t = base64.length(e));
        base64.decode(e, a, 0), e = a;
    }
    return this.uint32(t)._push(writeBytes, t, e);
}, Writer.prototype.string = function(e) {
    var t = utf8.length(e);
    return t ? this.uint32(t)._push(utf8.write, t, e) : this._push(writeByte, 1, 0);
}, Writer.prototype.fork = function() {
    return this.states = new State(this), this.head = this.tail = new Op(noop, 0, 0), this.len = 0, this;
}, Writer.prototype.reset = function() {
    return this.states ? (this.head = this.states.head, this.tail = this.states.tail, this.len = this.states.len, this.states = this.states.next) : (this.head = this.tail = new Op(noop, 0, 0), this.len = 0), this;
}, Writer.prototype.ldelim = function() {
    var e = this.head, t = this.tail, a = this.len;
    return this.reset().uint32(a), a && (this.tail.next = e.next, this.tail = t, this.len += a), this;
}, Writer.prototype.finish = function() {
    for(var e = this.head.next, t = this.constructor.alloc(this.len), a = 0; e;)e.fn(e.val, t, a), a += e.len, e = e.next;
    return t;
}, Writer._configure = function(e) {
    BufferWriter = e;
};
var writer_buffer = BufferWriter$1;
(BufferWriter$1.prototype = Object.create(writer.prototype)).constructor = BufferWriter$1;
var Buffer$1 = minimal.Buffer;
function BufferWriter$1() {
    writer.call(this);
}
BufferWriter$1.alloc = function(e) {
    return (BufferWriter$1.alloc = minimal._Buffer_allocUnsafe)(e);
};
var writeBytesBuffer = Buffer$1 && Buffer$1.prototype instanceof Uint8Array && "set" === Buffer$1.prototype.set.name ? function(e, t, a) {
    t.set(e, a);
} : function(e, t, a) {
    if (e.copy) e.copy(t, a, 0, e.length);
    else for(var r = 0; r < e.length;)t[a++] = e[r++];
};
function writeStringBuffer(e, t, a) {
    e.length < 40 ? minimal.utf8.write(e, t, a) : t.utf8Write(e, a);
}
BufferWriter$1.prototype.bytes = function(e) {
    minimal.isString(e) && (e = minimal._Buffer_from(e, "base64"));
    var t = e.length >>> 0;
    return this.uint32(t), t && this._push(writeBytesBuffer, t, e), this;
}, BufferWriter$1.prototype.string = function(e) {
    var t = Buffer$1.byteLength(e);
    return this.uint32(t), t && this._push(writeStringBuffer, t, e), this;
};
var reader = Reader, BufferReader, LongBits$2 = minimal.LongBits, utf8$1 = minimal.utf8;
function indexOutOfRange(e, t) {
    return RangeError("index out of range: " + e.pos + " + " + (t || 1) + " > " + e.len);
}
function Reader(e) {
    this.buf = e, this.pos = 0, this.len = e.length;
}
var create_array = "undefined" != typeof Uint8Array ? function(e) {
    if (e instanceof Uint8Array || Array.isArray(e)) return new Reader(e);
    throw Error("illegal buffer");
} : function(e) {
    if (Array.isArray(e)) return new Reader(e);
    throw Error("illegal buffer");
};
function readLongVarint() {
    var e = new LongBits$2(0, 0), t = 0;
    if (!(this.len - this.pos > 4)) {
        for(; t < 3; ++t){
            if (this.pos >= this.len) throw indexOutOfRange(this);
            if (e.lo = (e.lo | (127 & this.buf[this.pos]) << 7 * t) >>> 0, this.buf[this.pos++] < 128) return e;
        }
        return e.lo = (e.lo | (127 & this.buf[this.pos++]) << 7 * t) >>> 0, e;
    }
    for(; t < 4; ++t)if (e.lo = (e.lo | (127 & this.buf[this.pos]) << 7 * t) >>> 0, this.buf[this.pos++] < 128) return e;
    if (e.lo = (e.lo | (127 & this.buf[this.pos]) << 28) >>> 0, e.hi = (e.hi | (127 & this.buf[this.pos]) >> 4) >>> 0, this.buf[this.pos++] < 128) return e;
    if (t = 0, this.len - this.pos > 4) {
        for(; t < 5; ++t)if (e.hi = (e.hi | (127 & this.buf[this.pos]) << 7 * t + 3) >>> 0, this.buf[this.pos++] < 128) return e;
    } else for(; t < 5; ++t){
        if (this.pos >= this.len) throw indexOutOfRange(this);
        if (e.hi = (e.hi | (127 & this.buf[this.pos]) << 7 * t + 3) >>> 0, this.buf[this.pos++] < 128) return e;
    }
    throw Error("invalid varint encoding");
}
function readFixed32_end(e, t) {
    return (e[t - 4] | e[t - 3] << 8 | e[t - 2] << 16 | e[t - 1] << 24) >>> 0;
}
function readFixed64() {
    if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);
    return new LongBits$2(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}
Reader.create = minimal.Buffer ? function(e12) {
    return (Reader.create = function(e) {
        return minimal.Buffer.isBuffer(e) ? new BufferReader(e) : create_array(e);
    })(e12);
} : create_array, Reader.prototype._slice = minimal.Array.prototype.subarray || minimal.Array.prototype.slice, Reader.prototype.uint32 = (function() {
    var e = 4294967295;
    return function() {
        if (e = (127 & this.buf[this.pos]) >>> 0, this.buf[this.pos++] < 128) return e;
        if (e = (e | (127 & this.buf[this.pos]) << 7) >>> 0, this.buf[this.pos++] < 128) return e;
        if (e = (e | (127 & this.buf[this.pos]) << 14) >>> 0, this.buf[this.pos++] < 128) return e;
        if (e = (e | (127 & this.buf[this.pos]) << 21) >>> 0, this.buf[this.pos++] < 128) return e;
        if (e = (e | (15 & this.buf[this.pos]) << 28) >>> 0, this.buf[this.pos++] < 128) return e;
        if ((this.pos += 5) > this.len) throw this.pos = this.len, indexOutOfRange(this, 10);
        return e;
    };
})(), Reader.prototype.int32 = function() {
    return 0 | this.uint32();
}, Reader.prototype.sint32 = function() {
    var e = this.uint32();
    return e >>> 1 ^ -(1 & e) | 0;
}, Reader.prototype.bool = function() {
    return 0 !== this.uint32();
}, Reader.prototype.fixed32 = function() {
    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
    return readFixed32_end(this.buf, this.pos += 4);
}, Reader.prototype.sfixed32 = function() {
    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
    return 0 | readFixed32_end(this.buf, this.pos += 4);
}, Reader.prototype.float = function() {
    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);
    var e = minimal.float.readFloatLE(this.buf, this.pos);
    return this.pos += 4, e;
}, Reader.prototype.double = function() {
    if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);
    var e = minimal.float.readDoubleLE(this.buf, this.pos);
    return this.pos += 8, e;
}, Reader.prototype.bytes = function() {
    var e = this.uint32(), t = this.pos, a = this.pos + e;
    if (a > this.len) throw indexOutOfRange(this, e);
    return this.pos += e, Array.isArray(this.buf) ? this.buf.slice(t, a) : t === a ? new this.buf.constructor(0) : this._slice.call(this.buf, t, a);
}, Reader.prototype.string = function() {
    var e = this.bytes();
    return utf8$1.read(e, 0, e.length);
}, Reader.prototype.skip = function(e) {
    if ("number" == typeof e) {
        if (this.pos + e > this.len) throw indexOutOfRange(this, e);
        this.pos += e;
    } else do {
        if (this.pos >= this.len) throw indexOutOfRange(this);
    }while (128 & this.buf[this.pos++])
    return this;
}, Reader.prototype.skipType = function(e) {
    switch(e){
        case 0:
            this.skip();
            break;
        case 1:
            this.skip(8);
            break;
        case 2:
            this.skip(this.uint32());
            break;
        case 3:
            for(; 4 != (e = 7 & this.uint32());)this.skipType(e);
            break;
        case 5:
            this.skip(4);
            break;
        default:
            throw Error("invalid wire type " + e + " at offset " + this.pos);
    }
    return this;
}, Reader._configure = function(e) {
    BufferReader = e;
    var t = minimal.Long ? "toLong" : "toNumber";
    minimal.merge(Reader.prototype, {
        int64: function() {
            return readLongVarint.call(this)[t](!1);
        },
        uint64: function() {
            return readLongVarint.call(this)[t](!0);
        },
        sint64: function() {
            return readLongVarint.call(this).zzDecode()[t](!1);
        },
        fixed64: function() {
            return readFixed64.call(this)[t](!0);
        },
        sfixed64: function() {
            return readFixed64.call(this)[t](!1);
        }
    });
};
var reader_buffer = BufferReader$1;
function BufferReader$1(e) {
    reader.call(this, e);
}
(BufferReader$1.prototype = Object.create(reader.prototype)).constructor = BufferReader$1, minimal.Buffer && (BufferReader$1.prototype._slice = minimal.Buffer.prototype.slice), BufferReader$1.prototype.string = function() {
    var e = this.uint32();
    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + e, this.len));
};
var service = Service;
function Service(e, t, a) {
    if ("function" != typeof e) throw TypeError("rpcImpl must be a function");
    minimal.EventEmitter.call(this), this.rpcImpl = e, this.requestDelimited = Boolean(t), this.responseDelimited = Boolean(a);
}
(Service.prototype = Object.create(minimal.EventEmitter.prototype)).constructor = Service, Service.prototype.rpcCall = function e13(t, a9, r, n, o) {
    if (!n) throw TypeError("request must be specified");
    var s = this;
    if (!o) return minimal.asPromise(e13, s, t, a9, r, n);
    if (s.rpcImpl) try {
        return s.rpcImpl(t, a9[s.requestDelimited ? "encodeDelimited" : "encode"](n).finish(), function(e, a) {
            if (e) return s.emit("error", e, t), o(e);
            if (null !== a) {
                if (!(a instanceof r)) try {
                    a = r[s.responseDelimited ? "decodeDelimited" : "decode"](a);
                } catch (e) {
                    return s.emit("error", e, t), o(e);
                }
                return s.emit("data", a, t), o(null, a);
            }
            s.end(!0);
        });
    } catch (e) {
        return s.emit("error", e, t), void setTimeout(function() {
            o(e);
        }, 0);
    }
    else setTimeout(function() {
        o(Error("already ended"));
    }, 0);
}, Service.prototype.end = function(e) {
    return this.rpcImpl && (e || this.rpcImpl(null, null, null), this.rpcImpl = null, this.emit("end").off()), this;
};
var rpc_1 = createCommonjsModule(function(e, t) {
    t.Service = service;
}), roots = {
}, indexMinimal = createCommonjsModule(function(e, t) {
    var a = t;
    function r() {
        a.Reader._configure(a.BufferReader), a.util._configure();
    }
    a.build = "minimal", a.Writer = writer, a.BufferWriter = writer_buffer, a.Reader = reader, a.BufferReader = reader_buffer, a.util = minimal, a.rpc = rpc_1, a.roots = roots, a.configure = r, a.Writer._configure(a.BufferWriter), r();
}), minimal$1 = indexMinimal, minimal_1 = minimal$1.roots, minimal_2 = minimal$1.Reader, minimal_3 = minimal$1.util, $Reader = minimal$1.Reader, $util = minimal$1.util, $root = minimal$1.roots.default || (minimal$1.roots.default = {
});
$root.tensorflow = (function() {
    var e14, t8, a10 = {
    };
    return a10.Any = (function() {
        function e15(e) {
            if (e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        return e15.prototype.typeUrl = "", e15.prototype.value = $util.newBuffer([]), e15.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.Any; e.pos < a;){
                var n = e.uint32();
                switch(n >>> 3){
                    case 1:
                        r.typeUrl = e.string();
                        break;
                    case 2:
                        r.value = e.bytes();
                        break;
                    default:
                        e.skipType(7 & n);
                }
            }
            return r;
        }, e15;
    })(), a10.DataType = (e14 = {
    }, (t8 = Object.create(e14))[e14[0] = "DT_INVALID"] = 0, t8[e14[1] = "DT_FLOAT"] = 1, t8[e14[2] = "DT_DOUBLE"] = 2, t8[e14[3] = "DT_INT32"] = 3, t8[e14[4] = "DT_UINT8"] = 4, t8[e14[5] = "DT_INT16"] = 5, t8[e14[6] = "DT_INT8"] = 6, t8[e14[7] = "DT_STRING"] = 7, t8[e14[8] = "DT_COMPLEX64"] = 8, t8[e14[9] = "DT_INT64"] = 9, t8[e14[10] = "DT_BOOL"] = 10, t8[e14[11] = "DT_QINT8"] = 11, t8[e14[12] = "DT_QUINT8"] = 12, t8[e14[13] = "DT_QINT32"] = 13, t8[e14[14] = "DT_BFLOAT16"] = 14, t8[e14[101] = "DT_FLOAT_REF"] = 101, t8[e14[102] = "DT_DOUBLE_REF"] = 102, t8[e14[103] = "DT_INT32_REF"] = 103, t8[e14[104] = "DT_UINT8_REF"] = 104, t8[e14[105] = "DT_INT16_REF"] = 105, t8[e14[106] = "DT_INT8_REF"] = 106, t8[e14[107] = "DT_STRING_REF"] = 107, t8[e14[108] = "DT_COMPLEX64_REF"] = 108, t8[e14[109] = "DT_INT64_REF"] = 109, t8[e14[110] = "DT_BOOL_REF"] = 110, t8[e14[111] = "DT_QINT8_REF"] = 111, t8[e14[112] = "DT_QUINT8_REF"] = 112, t8[e14[113] = "DT_QINT32_REF"] = 113, t8[e14[114] = "DT_BFLOAT16_REF"] = 114, t8), a10.TensorShape = (function() {
        function e16(e) {
            if (this.dim = [], e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        return e16.prototype.dim = $util.emptyArray, e16.prototype.unknownRank = !1, e16.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.TensorShape; e.pos < a;){
                var n = e.uint32();
                switch(n >>> 3){
                    case 2:
                        r.dim && r.dim.length || (r.dim = []), r.dim.push($root.tensorflow.TensorShape.Dim.decode(e, e.uint32()));
                        break;
                    case 3:
                        r.unknownRank = e.bool();
                        break;
                    default:
                        e.skipType(7 & n);
                }
            }
            return r;
        }, e16.Dim = (function() {
            function e17(e) {
                if (e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
            }
            return e17.prototype.size = $util.Long ? $util.Long.fromBits(0, 0, !1) : 0, e17.prototype.name = "", e17.decode = function(e, t) {
                e instanceof $Reader || (e = $Reader.create(e));
                for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.TensorShape.Dim; e.pos < a;){
                    var n = e.uint32();
                    switch(n >>> 3){
                        case 1:
                            r.size = e.int64();
                            break;
                        case 2:
                            r.name = e.string();
                            break;
                        default:
                            e.skipType(7 & n);
                    }
                }
                return r;
            }, e17;
        })(), e16;
    })(), a10.Tensor = (function() {
        function e18(e) {
            if (this.floatVal = [], this.doubleVal = [], this.intVal = [], this.stringVal = [], this.scomplexVal = [], this.int64Val = [], this.boolVal = [], this.uint32Val = [], this.uint64Val = [], e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        return e18.prototype.dtype = 0, e18.prototype.tensorShape = null, e18.prototype.versionNumber = 0, e18.prototype.tensorContent = $util.newBuffer([]), e18.prototype.floatVal = $util.emptyArray, e18.prototype.doubleVal = $util.emptyArray, e18.prototype.intVal = $util.emptyArray, e18.prototype.stringVal = $util.emptyArray, e18.prototype.scomplexVal = $util.emptyArray, e18.prototype.int64Val = $util.emptyArray, e18.prototype.boolVal = $util.emptyArray, e18.prototype.uint32Val = $util.emptyArray, e18.prototype.uint64Val = $util.emptyArray, e18.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.Tensor; e.pos < a;){
                var n = e.uint32();
                switch(n >>> 3){
                    case 1:
                        r.dtype = e.int32();
                        break;
                    case 2:
                        r.tensorShape = $root.tensorflow.TensorShape.decode(e, e.uint32());
                        break;
                    case 3:
                        r.versionNumber = e.int32();
                        break;
                    case 4:
                        r.tensorContent = e.bytes();
                        break;
                    case 5:
                        if (r.floatVal && r.floatVal.length || (r.floatVal = []), 2 == (7 & n)) for(var o = e.uint32() + e.pos; e.pos < o;)r.floatVal.push(e.float());
                        else r.floatVal.push(e.float());
                        break;
                    case 6:
                        if (r.doubleVal && r.doubleVal.length || (r.doubleVal = []), 2 == (7 & n)) for(o = e.uint32() + e.pos; e.pos < o;)r.doubleVal.push(e.double());
                        else r.doubleVal.push(e.double());
                        break;
                    case 7:
                        if (r.intVal && r.intVal.length || (r.intVal = []), 2 == (7 & n)) for(o = e.uint32() + e.pos; e.pos < o;)r.intVal.push(e.int32());
                        else r.intVal.push(e.int32());
                        break;
                    case 8:
                        r.stringVal && r.stringVal.length || (r.stringVal = []), r.stringVal.push(e.bytes());
                        break;
                    case 9:
                        if (r.scomplexVal && r.scomplexVal.length || (r.scomplexVal = []), 2 == (7 & n)) for(o = e.uint32() + e.pos; e.pos < o;)r.scomplexVal.push(e.float());
                        else r.scomplexVal.push(e.float());
                        break;
                    case 10:
                        if (r.int64Val && r.int64Val.length || (r.int64Val = []), 2 == (7 & n)) for(o = e.uint32() + e.pos; e.pos < o;)r.int64Val.push(e.int64());
                        else r.int64Val.push(e.int64());
                        break;
                    case 11:
                        if (r.boolVal && r.boolVal.length || (r.boolVal = []), 2 == (7 & n)) for(o = e.uint32() + e.pos; e.pos < o;)r.boolVal.push(e.bool());
                        else r.boolVal.push(e.bool());
                        break;
                    case 16:
                        if (r.uint32Val && r.uint32Val.length || (r.uint32Val = []), 2 == (7 & n)) for(o = e.uint32() + e.pos; e.pos < o;)r.uint32Val.push(e.uint32());
                        else r.uint32Val.push(e.uint32());
                        break;
                    case 17:
                        if (r.uint64Val && r.uint64Val.length || (r.uint64Val = []), 2 == (7 & n)) for(o = e.uint32() + e.pos; e.pos < o;)r.uint64Val.push(e.uint64());
                        else r.uint64Val.push(e.uint64());
                        break;
                    default:
                        e.skipType(7 & n);
                }
            }
            return r;
        }, e18;
    })(), a10.AttrValue = (function() {
        function e19(e) {
            if (e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        var t9;
        return e19.prototype.list = null, e19.prototype.s = $util.newBuffer([]), e19.prototype.i = $util.Long ? $util.Long.fromBits(0, 0, !1) : 0, e19.prototype.f = 0, e19.prototype.b = !1, e19.prototype.type = 0, e19.prototype.shape = null, e19.prototype.tensor = null, e19.prototype.placeholder = "", e19.prototype.func = null, Object.defineProperty(e19.prototype, "value", {
            get: $util.oneOfGetter(t9 = [
                "list",
                "s",
                "i",
                "f",
                "b",
                "type",
                "shape",
                "tensor",
                "placeholder",
                "func"
            ]),
            set: $util.oneOfSetter(t9)
        }), e19.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.AttrValue; e.pos < a;){
                var n = e.uint32();
                switch(n >>> 3){
                    case 1:
                        r.list = $root.tensorflow.AttrValue.ListValue.decode(e, e.uint32());
                        break;
                    case 2:
                        r.s = e.bytes();
                        break;
                    case 3:
                        r.i = e.int64();
                        break;
                    case 4:
                        r.f = e.float();
                        break;
                    case 5:
                        r.b = e.bool();
                        break;
                    case 6:
                        r.type = e.int32();
                        break;
                    case 7:
                        r.shape = $root.tensorflow.TensorShape.decode(e, e.uint32());
                        break;
                    case 8:
                        r.tensor = $root.tensorflow.Tensor.decode(e, e.uint32());
                        break;
                    case 9:
                        r.placeholder = e.string();
                        break;
                    case 10:
                        r.func = $root.tensorflow.NameAttrList.decode(e, e.uint32());
                        break;
                    default:
                        e.skipType(7 & n);
                }
            }
            return r;
        }, e19.ListValue = (function() {
            function e20(e) {
                if (this.s = [], this.i = [], this.f = [], this.b = [], this.type = [], this.shape = [], this.tensor = [], this.func = [], e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
            }
            return e20.prototype.s = $util.emptyArray, e20.prototype.i = $util.emptyArray, e20.prototype.f = $util.emptyArray, e20.prototype.b = $util.emptyArray, e20.prototype.type = $util.emptyArray, e20.prototype.shape = $util.emptyArray, e20.prototype.tensor = $util.emptyArray, e20.prototype.func = $util.emptyArray, e20.decode = function(e, t) {
                e instanceof $Reader || (e = $Reader.create(e));
                for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.AttrValue.ListValue; e.pos < a;){
                    var n = e.uint32();
                    switch(n >>> 3){
                        case 2:
                            r.s && r.s.length || (r.s = []), r.s.push(e.bytes());
                            break;
                        case 3:
                            if (r.i && r.i.length || (r.i = []), 2 == (7 & n)) for(var o = e.uint32() + e.pos; e.pos < o;)r.i.push(e.int64());
                            else r.i.push(e.int64());
                            break;
                        case 4:
                            if (r.f && r.f.length || (r.f = []), 2 == (7 & n)) for(o = e.uint32() + e.pos; e.pos < o;)r.f.push(e.float());
                            else r.f.push(e.float());
                            break;
                        case 5:
                            if (r.b && r.b.length || (r.b = []), 2 == (7 & n)) for(o = e.uint32() + e.pos; e.pos < o;)r.b.push(e.bool());
                            else r.b.push(e.bool());
                            break;
                        case 6:
                            if (r.type && r.type.length || (r.type = []), 2 == (7 & n)) for(o = e.uint32() + e.pos; e.pos < o;)r.type.push(e.int32());
                            else r.type.push(e.int32());
                            break;
                        case 7:
                            r.shape && r.shape.length || (r.shape = []), r.shape.push($root.tensorflow.TensorShape.decode(e, e.uint32()));
                            break;
                        case 8:
                            r.tensor && r.tensor.length || (r.tensor = []), r.tensor.push($root.tensorflow.Tensor.decode(e, e.uint32()));
                            break;
                        case 9:
                            r.func && r.func.length || (r.func = []), r.func.push($root.tensorflow.NameAttrList.decode(e, e.uint32()));
                            break;
                        default:
                            e.skipType(7 & n);
                    }
                }
                return r;
            }, e20;
        })(), e19;
    })(), a10.NameAttrList = (function() {
        function e21(e) {
            if (this.attr = {
            }, e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        return e21.prototype.name = "", e21.prototype.attr = $util.emptyObject, e21.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a, r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.NameAttrList; e.pos < r;){
                var o = e.uint32();
                switch(o >>> 3){
                    case 1:
                        n.name = e.string();
                        break;
                    case 2:
                        e.skip().pos++, n.attr === $util.emptyObject && (n.attr = {
                        }), a = e.string(), e.pos++, n.attr[a] = $root.tensorflow.AttrValue.decode(e, e.uint32());
                        break;
                    default:
                        e.skipType(7 & o);
                }
            }
            return n;
        }, e21;
    })(), a10.NodeDef = (function() {
        function e22(e) {
            if (this.input = [], this.attr = {
            }, e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        return e22.prototype.name = "", e22.prototype.op = "", e22.prototype.input = $util.emptyArray, e22.prototype.device = "", e22.prototype.attr = $util.emptyObject, e22.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a, r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.NodeDef; e.pos < r;){
                var o = e.uint32();
                switch(o >>> 3){
                    case 1:
                        n.name = e.string();
                        break;
                    case 2:
                        n.op = e.string();
                        break;
                    case 3:
                        n.input && n.input.length || (n.input = []), n.input.push(e.string());
                        break;
                    case 4:
                        n.device = e.string();
                        break;
                    case 5:
                        e.skip().pos++, n.attr === $util.emptyObject && (n.attr = {
                        }), a = e.string(), e.pos++, n.attr[a] = $root.tensorflow.AttrValue.decode(e, e.uint32());
                        break;
                    default:
                        e.skipType(7 & o);
                }
            }
            return n;
        }, e22;
    })(), a10.VersionDef = (function() {
        function e23(e) {
            if (this.badConsumers = [], e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        return e23.prototype.producer = 0, e23.prototype.minConsumer = 0, e23.prototype.badConsumers = $util.emptyArray, e23.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.VersionDef; e.pos < a;){
                var n = e.uint32();
                switch(n >>> 3){
                    case 1:
                        r.producer = e.int32();
                        break;
                    case 2:
                        r.minConsumer = e.int32();
                        break;
                    case 3:
                        if (r.badConsumers && r.badConsumers.length || (r.badConsumers = []), 2 == (7 & n)) for(var o = e.uint32() + e.pos; e.pos < o;)r.badConsumers.push(e.int32());
                        else r.badConsumers.push(e.int32());
                        break;
                    default:
                        e.skipType(7 & n);
                }
            }
            return r;
        }, e23;
    })(), a10.GraphDef = (function() {
        function e24(e) {
            if (this.node = [], e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        return e24.prototype.node = $util.emptyArray, e24.prototype.versions = null, e24.prototype.library = null, e24.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.GraphDef; e.pos < a;){
                var n = e.uint32();
                switch(n >>> 3){
                    case 1:
                        r.node && r.node.length || (r.node = []), r.node.push($root.tensorflow.NodeDef.decode(e, e.uint32()));
                        break;
                    case 4:
                        r.versions = $root.tensorflow.VersionDef.decode(e, e.uint32());
                        break;
                    case 2:
                        r.library = $root.tensorflow.FunctionDefLibrary.decode(e, e.uint32());
                        break;
                    default:
                        e.skipType(7 & n);
                }
            }
            return r;
        }, e24;
    })(), a10.CollectionDef = (function() {
        function e25(e) {
            if (e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        var t10;
        return e25.prototype.nodeList = null, e25.prototype.bytesList = null, e25.prototype.int64List = null, e25.prototype.floatList = null, e25.prototype.anyList = null, Object.defineProperty(e25.prototype, "kind", {
            get: $util.oneOfGetter(t10 = [
                "nodeList",
                "bytesList",
                "int64List",
                "floatList",
                "anyList"
            ]),
            set: $util.oneOfSetter(t10)
        }), e25.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.CollectionDef; e.pos < a;){
                var n = e.uint32();
                switch(n >>> 3){
                    case 1:
                        r.nodeList = $root.tensorflow.CollectionDef.NodeList.decode(e, e.uint32());
                        break;
                    case 2:
                        r.bytesList = $root.tensorflow.CollectionDef.BytesList.decode(e, e.uint32());
                        break;
                    case 3:
                        r.int64List = $root.tensorflow.CollectionDef.Int64List.decode(e, e.uint32());
                        break;
                    case 4:
                        r.floatList = $root.tensorflow.CollectionDef.FloatList.decode(e, e.uint32());
                        break;
                    case 5:
                        r.anyList = $root.tensorflow.CollectionDef.AnyList.decode(e, e.uint32());
                        break;
                    default:
                        e.skipType(7 & n);
                }
            }
            return r;
        }, e25.NodeList = (function() {
            function e26(e) {
                if (this.value = [], e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
            }
            return e26.prototype.value = $util.emptyArray, e26.decode = function(e, t) {
                e instanceof $Reader || (e = $Reader.create(e));
                for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.CollectionDef.NodeList; e.pos < a;){
                    var n = e.uint32();
                    switch(n >>> 3){
                        case 1:
                            r.value && r.value.length || (r.value = []), r.value.push(e.string());
                            break;
                        default:
                            e.skipType(7 & n);
                    }
                }
                return r;
            }, e26;
        })(), e25.BytesList = (function() {
            function e27(e) {
                if (this.value = [], e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
            }
            return e27.prototype.value = $util.emptyArray, e27.decode = function(e, t) {
                e instanceof $Reader || (e = $Reader.create(e));
                for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.CollectionDef.BytesList; e.pos < a;){
                    var n = e.uint32();
                    switch(n >>> 3){
                        case 1:
                            r.value && r.value.length || (r.value = []), r.value.push(e.bytes());
                            break;
                        default:
                            e.skipType(7 & n);
                    }
                }
                return r;
            }, e27;
        })(), e25.Int64List = (function() {
            function e28(e) {
                if (this.value = [], e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
            }
            return e28.prototype.value = $util.emptyArray, e28.decode = function(e, t) {
                e instanceof $Reader || (e = $Reader.create(e));
                for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.CollectionDef.Int64List; e.pos < a;){
                    var n = e.uint32();
                    switch(n >>> 3){
                        case 1:
                            if (r.value && r.value.length || (r.value = []), 2 == (7 & n)) for(var o = e.uint32() + e.pos; e.pos < o;)r.value.push(e.int64());
                            else r.value.push(e.int64());
                            break;
                        default:
                            e.skipType(7 & n);
                    }
                }
                return r;
            }, e28;
        })(), e25.FloatList = (function() {
            function e29(e) {
                if (this.value = [], e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
            }
            return e29.prototype.value = $util.emptyArray, e29.decode = function(e, t) {
                e instanceof $Reader || (e = $Reader.create(e));
                for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.CollectionDef.FloatList; e.pos < a;){
                    var n = e.uint32();
                    switch(n >>> 3){
                        case 1:
                            if (r.value && r.value.length || (r.value = []), 2 == (7 & n)) for(var o = e.uint32() + e.pos; e.pos < o;)r.value.push(e.float());
                            else r.value.push(e.float());
                            break;
                        default:
                            e.skipType(7 & n);
                    }
                }
                return r;
            }, e29;
        })(), e25.AnyList = (function() {
            function e30(e) {
                if (this.value = [], e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
            }
            return e30.prototype.value = $util.emptyArray, e30.decode = function(e, t) {
                e instanceof $Reader || (e = $Reader.create(e));
                for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.CollectionDef.AnyList; e.pos < a;){
                    var n = e.uint32();
                    switch(n >>> 3){
                        case 1:
                            r.value && r.value.length || (r.value = []), r.value.push($root.tensorflow.Any.decode(e, e.uint32()));
                            break;
                        default:
                            e.skipType(7 & n);
                    }
                }
                return r;
            }, e30;
        })(), e25;
    })(), a10.SaverDef = (function() {
        function e31(e) {
            if (e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        var t11, a11;
        return e31.prototype.filenameTensorName = "", e31.prototype.saveTensorName = "", e31.prototype.restoreOpName = "", e31.prototype.maxToKeep = 0, e31.prototype.sharded = !1, e31.prototype.keepCheckpointEveryNHours = 0, e31.prototype.version = 0, e31.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.SaverDef; e.pos < a;){
                var n = e.uint32();
                switch(n >>> 3){
                    case 1:
                        r.filenameTensorName = e.string();
                        break;
                    case 2:
                        r.saveTensorName = e.string();
                        break;
                    case 3:
                        r.restoreOpName = e.string();
                        break;
                    case 4:
                        r.maxToKeep = e.int32();
                        break;
                    case 5:
                        r.sharded = e.bool();
                        break;
                    case 6:
                        r.keepCheckpointEveryNHours = e.float();
                        break;
                    case 7:
                        r.version = e.int32();
                        break;
                    default:
                        e.skipType(7 & n);
                }
            }
            return r;
        }, e31.CheckpointFormatVersion = (t11 = {
        }, (a11 = Object.create(t11))[t11[0] = "LEGACY"] = 0, a11[t11[1] = "V1"] = 1, a11[t11[2] = "V2"] = 2, a11), e31;
    })(), a10.TensorInfo = (function() {
        function e32(e) {
            if (e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        var t12;
        return e32.prototype.name = "", e32.prototype.cooSparse = null, e32.prototype.dtype = 0, e32.prototype.tensorShape = null, Object.defineProperty(e32.prototype, "encoding", {
            get: $util.oneOfGetter(t12 = [
                "name",
                "cooSparse"
            ]),
            set: $util.oneOfSetter(t12)
        }), e32.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.TensorInfo; e.pos < a;){
                var n = e.uint32();
                switch(n >>> 3){
                    case 1:
                        r.name = e.string();
                        break;
                    case 4:
                        r.cooSparse = $root.tensorflow.TensorInfo.CooSparse.decode(e, e.uint32());
                        break;
                    case 2:
                        r.dtype = e.int32();
                        break;
                    case 3:
                        r.tensorShape = $root.tensorflow.TensorShape.decode(e, e.uint32());
                        break;
                    default:
                        e.skipType(7 & n);
                }
            }
            return r;
        }, e32.CooSparse = (function() {
            function e33(e) {
                if (e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
            }
            return e33.prototype.valuesTensorName = "", e33.prototype.indicesTensorName = "", e33.prototype.denseShapeTensorName = "", e33.decode = function(e, t) {
                e instanceof $Reader || (e = $Reader.create(e));
                for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.TensorInfo.CooSparse; e.pos < a;){
                    var n = e.uint32();
                    switch(n >>> 3){
                        case 1:
                            r.valuesTensorName = e.string();
                            break;
                        case 2:
                            r.indicesTensorName = e.string();
                            break;
                        case 3:
                            r.denseShapeTensorName = e.string();
                            break;
                        default:
                            e.skipType(7 & n);
                    }
                }
                return r;
            }, e33;
        })(), e32;
    })(), a10.SignatureDef = (function() {
        function e34(e) {
            if (this.inputs = {
            }, this.outputs = {
            }, e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        return e34.prototype.inputs = $util.emptyObject, e34.prototype.outputs = $util.emptyObject, e34.prototype.methodName = "", e34.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a, r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.SignatureDef; e.pos < r;){
                var o = e.uint32();
                switch(o >>> 3){
                    case 1:
                        e.skip().pos++, n.inputs === $util.emptyObject && (n.inputs = {
                        }), a = e.string(), e.pos++, n.inputs[a] = $root.tensorflow.TensorInfo.decode(e, e.uint32());
                        break;
                    case 2:
                        e.skip().pos++, n.outputs === $util.emptyObject && (n.outputs = {
                        }), a = e.string(), e.pos++, n.outputs[a] = $root.tensorflow.TensorInfo.decode(e, e.uint32());
                        break;
                    case 3:
                        n.methodName = e.string();
                        break;
                    default:
                        e.skipType(7 & o);
                }
            }
            return n;
        }, e34;
    })(), a10.AssetFileDef = (function() {
        function e35(e) {
            if (e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        return e35.prototype.tensorInfo = null, e35.prototype.filename = "", e35.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.AssetFileDef; e.pos < a;){
                var n = e.uint32();
                switch(n >>> 3){
                    case 1:
                        r.tensorInfo = $root.tensorflow.TensorInfo.decode(e, e.uint32());
                        break;
                    case 2:
                        r.filename = e.string();
                        break;
                    default:
                        e.skipType(7 & n);
                }
            }
            return r;
        }, e35;
    })(), a10.OpDef = (function() {
        function e36(e) {
            if (this.inputArg = [], this.outputArg = [], this.attr = [], e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        return e36.prototype.name = "", e36.prototype.inputArg = $util.emptyArray, e36.prototype.outputArg = $util.emptyArray, e36.prototype.attr = $util.emptyArray, e36.prototype.deprecation = null, e36.prototype.summary = "", e36.prototype.description = "", e36.prototype.isCommutative = !1, e36.prototype.isAggregate = !1, e36.prototype.isStateful = !1, e36.prototype.allowsUninitializedInput = !1, e36.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.OpDef; e.pos < a;){
                var n = e.uint32();
                switch(n >>> 3){
                    case 1:
                        r.name = e.string();
                        break;
                    case 2:
                        r.inputArg && r.inputArg.length || (r.inputArg = []), r.inputArg.push($root.tensorflow.OpDef.ArgDef.decode(e, e.uint32()));
                        break;
                    case 3:
                        r.outputArg && r.outputArg.length || (r.outputArg = []), r.outputArg.push($root.tensorflow.OpDef.ArgDef.decode(e, e.uint32()));
                        break;
                    case 4:
                        r.attr && r.attr.length || (r.attr = []), r.attr.push($root.tensorflow.OpDef.AttrDef.decode(e, e.uint32()));
                        break;
                    case 8:
                        r.deprecation = $root.tensorflow.OpDef.OpDeprecation.decode(e, e.uint32());
                        break;
                    case 5:
                        r.summary = e.string();
                        break;
                    case 6:
                        r.description = e.string();
                        break;
                    case 18:
                        r.isCommutative = e.bool();
                        break;
                    case 16:
                        r.isAggregate = e.bool();
                        break;
                    case 17:
                        r.isStateful = e.bool();
                        break;
                    case 19:
                        r.allowsUninitializedInput = e.bool();
                        break;
                    default:
                        e.skipType(7 & n);
                }
            }
            return r;
        }, e36.ArgDef = (function() {
            function e37(e) {
                if (e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
            }
            return e37.prototype.name = "", e37.prototype.description = "", e37.prototype.type = 0, e37.prototype.typeAttr = "", e37.prototype.numberAttr = "", e37.prototype.typeListAttr = "", e37.prototype.isRef = !1, e37.decode = function(e, t) {
                e instanceof $Reader || (e = $Reader.create(e));
                for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.OpDef.ArgDef; e.pos < a;){
                    var n = e.uint32();
                    switch(n >>> 3){
                        case 1:
                            r.name = e.string();
                            break;
                        case 2:
                            r.description = e.string();
                            break;
                        case 3:
                            r.type = e.int32();
                            break;
                        case 4:
                            r.typeAttr = e.string();
                            break;
                        case 5:
                            r.numberAttr = e.string();
                            break;
                        case 6:
                            r.typeListAttr = e.string();
                            break;
                        case 16:
                            r.isRef = e.bool();
                            break;
                        default:
                            e.skipType(7 & n);
                    }
                }
                return r;
            }, e37;
        })(), e36.AttrDef = (function() {
            function e38(e) {
                if (e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
            }
            return e38.prototype.name = "", e38.prototype.type = "", e38.prototype.defaultValue = null, e38.prototype.description = "", e38.prototype.hasMinimum = !1, e38.prototype.minimum = $util.Long ? $util.Long.fromBits(0, 0, !1) : 0, e38.prototype.allowedValues = null, e38.decode = function(e, t) {
                e instanceof $Reader || (e = $Reader.create(e));
                for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.OpDef.AttrDef; e.pos < a;){
                    var n = e.uint32();
                    switch(n >>> 3){
                        case 1:
                            r.name = e.string();
                            break;
                        case 2:
                            r.type = e.string();
                            break;
                        case 3:
                            r.defaultValue = $root.tensorflow.AttrValue.decode(e, e.uint32());
                            break;
                        case 4:
                            r.description = e.string();
                            break;
                        case 5:
                            r.hasMinimum = e.bool();
                            break;
                        case 6:
                            r.minimum = e.int64();
                            break;
                        case 7:
                            r.allowedValues = $root.tensorflow.AttrValue.decode(e, e.uint32());
                            break;
                        default:
                            e.skipType(7 & n);
                    }
                }
                return r;
            }, e38;
        })(), e36.OpDeprecation = (function() {
            function e39(e) {
                if (e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
            }
            return e39.prototype.version = 0, e39.prototype.explanation = "", e39.decode = function(e, t) {
                e instanceof $Reader || (e = $Reader.create(e));
                for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.OpDef.OpDeprecation; e.pos < a;){
                    var n = e.uint32();
                    switch(n >>> 3){
                        case 1:
                            r.version = e.int32();
                            break;
                        case 2:
                            r.explanation = e.string();
                            break;
                        default:
                            e.skipType(7 & n);
                    }
                }
                return r;
            }, e39;
        })(), e36;
    })(), a10.OpList = (function() {
        function e40(e) {
            if (this.op = [], e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        return e40.prototype.op = $util.emptyArray, e40.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.OpList; e.pos < a;){
                var n = e.uint32();
                switch(n >>> 3){
                    case 1:
                        r.op && r.op.length || (r.op = []), r.op.push($root.tensorflow.OpDef.decode(e, e.uint32()));
                        break;
                    default:
                        e.skipType(7 & n);
                }
            }
            return r;
        }, e40;
    })(), a10.MetaGraphDef = (function() {
        function e41(e) {
            if (this.collectionDef = {
            }, this.signatureDef = {
            }, this.assetFileDef = [], e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        return e41.prototype.metaInfoDef = null, e41.prototype.graphDef = null, e41.prototype.saverDef = null, e41.prototype.collectionDef = $util.emptyObject, e41.prototype.signatureDef = $util.emptyObject, e41.prototype.assetFileDef = $util.emptyArray, e41.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a, r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.MetaGraphDef; e.pos < r;){
                var o = e.uint32();
                switch(o >>> 3){
                    case 1:
                        n.metaInfoDef = $root.tensorflow.MetaGraphDef.MetaInfoDef.decode(e, e.uint32());
                        break;
                    case 2:
                        n.graphDef = $root.tensorflow.GraphDef.decode(e, e.uint32());
                        break;
                    case 3:
                        n.saverDef = $root.tensorflow.SaverDef.decode(e, e.uint32());
                        break;
                    case 4:
                        e.skip().pos++, n.collectionDef === $util.emptyObject && (n.collectionDef = {
                        }), a = e.string(), e.pos++, n.collectionDef[a] = $root.tensorflow.CollectionDef.decode(e, e.uint32());
                        break;
                    case 5:
                        e.skip().pos++, n.signatureDef === $util.emptyObject && (n.signatureDef = {
                        }), a = e.string(), e.pos++, n.signatureDef[a] = $root.tensorflow.SignatureDef.decode(e, e.uint32());
                        break;
                    case 6:
                        n.assetFileDef && n.assetFileDef.length || (n.assetFileDef = []), n.assetFileDef.push($root.tensorflow.AssetFileDef.decode(e, e.uint32()));
                        break;
                    default:
                        e.skipType(7 & o);
                }
            }
            return n;
        }, e41.MetaInfoDef = (function() {
            function e42(e) {
                if (this.tags = [], e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
            }
            return e42.prototype.metaGraphVersion = "", e42.prototype.strippedOpList = null, e42.prototype.anyInfo = null, e42.prototype.tags = $util.emptyArray, e42.prototype.tensorflowVersion = "", e42.prototype.tensorflowGitVersion = "", e42.decode = function(e, t) {
                e instanceof $Reader || (e = $Reader.create(e));
                for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.MetaGraphDef.MetaInfoDef; e.pos < a;){
                    var n = e.uint32();
                    switch(n >>> 3){
                        case 1:
                            r.metaGraphVersion = e.string();
                            break;
                        case 2:
                            r.strippedOpList = $root.tensorflow.OpList.decode(e, e.uint32());
                            break;
                        case 3:
                            r.anyInfo = $root.tensorflow.Any.decode(e, e.uint32());
                            break;
                        case 4:
                            r.tags && r.tags.length || (r.tags = []), r.tags.push(e.string());
                            break;
                        case 5:
                            r.tensorflowVersion = e.string();
                            break;
                        case 6:
                            r.tensorflowGitVersion = e.string();
                            break;
                        default:
                            e.skipType(7 & n);
                    }
                }
                return r;
            }, e42;
        })(), e41;
    })(), a10.SavedModel = (function() {
        function e43(e) {
            if (this.metaGraphs = [], e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        return e43.prototype.savedModelSchemaVersion = $util.Long ? $util.Long.fromBits(0, 0, !1) : 0, e43.prototype.metaGraphs = $util.emptyArray, e43.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.SavedModel; e.pos < a;){
                var n = e.uint32();
                switch(n >>> 3){
                    case 1:
                        r.savedModelSchemaVersion = e.int64();
                        break;
                    case 2:
                        r.metaGraphs && r.metaGraphs.length || (r.metaGraphs = []), r.metaGraphs.push($root.tensorflow.MetaGraphDef.decode(e, e.uint32()));
                        break;
                    default:
                        e.skipType(7 & n);
                }
            }
            return r;
        }, e43;
    })(), a10.FunctionDefLibrary = (function() {
        function e44(e) {
            if (this.function = [], this.gradient = [], e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        return e44.prototype.function = $util.emptyArray, e44.prototype.gradient = $util.emptyArray, e44.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.FunctionDefLibrary; e.pos < a;){
                var n = e.uint32();
                switch(n >>> 3){
                    case 1:
                        r.function && r.function.length || (r.function = []), r.function.push($root.tensorflow.FunctionDef.decode(e, e.uint32()));
                        break;
                    case 2:
                        r.gradient && r.gradient.length || (r.gradient = []), r.gradient.push($root.tensorflow.GradientDef.decode(e, e.uint32()));
                        break;
                    default:
                        e.skipType(7 & n);
                }
            }
            return r;
        }, e44;
    })(), a10.FunctionDef = (function() {
        function e45(e) {
            if (this.attr = {
            }, this.nodeDef = [], this.ret = {
            }, e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        return e45.prototype.signature = null, e45.prototype.attr = $util.emptyObject, e45.prototype.nodeDef = $util.emptyArray, e45.prototype.ret = $util.emptyObject, e45.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a, r = void 0 === t ? e.len : e.pos + t, n = new $root.tensorflow.FunctionDef; e.pos < r;){
                var o = e.uint32();
                switch(o >>> 3){
                    case 1:
                        n.signature = $root.tensorflow.OpDef.decode(e, e.uint32());
                        break;
                    case 5:
                        e.skip().pos++, n.attr === $util.emptyObject && (n.attr = {
                        }), a = e.string(), e.pos++, n.attr[a] = $root.tensorflow.AttrValue.decode(e, e.uint32());
                        break;
                    case 3:
                        n.nodeDef && n.nodeDef.length || (n.nodeDef = []), n.nodeDef.push($root.tensorflow.NodeDef.decode(e, e.uint32()));
                        break;
                    case 4:
                        e.skip().pos++, n.ret === $util.emptyObject && (n.ret = {
                        }), a = e.string(), e.pos++, n.ret[a] = e.string();
                        break;
                    default:
                        e.skipType(7 & o);
                }
            }
            return n;
        }, e45;
    })(), a10.GradientDef = (function() {
        function e46(e) {
            if (e) for(var t = Object.keys(e), a = 0; a < t.length; ++a)null != e[t[a]] && (this[t[a]] = e[t[a]]);
        }
        return e46.prototype.functionName = "", e46.prototype.gradientFunc = "", e46.decode = function(e, t) {
            e instanceof $Reader || (e = $Reader.create(e));
            for(var a = void 0 === t ? e.len : e.pos + t, r = new $root.tensorflow.GradientDef; e.pos < a;){
                var n = e.uint32();
                switch(n >>> 3){
                    case 1:
                        r.functionName = e.string();
                        break;
                    case 2:
                        r.gradientFunc = e.string();
                        break;
                    default:
                        e.skipType(7 & n);
                }
            }
            return r;
        }, e46;
    })(), a10;
})();
var compiled_api = $root, compiled_api_1 = compiled_api.tensorflow;
function getParamValue(e47, t, a, r) {
    var n = t.params[e47];
    if (n && void 0 !== n.inputIndex) {
        if ("tensor" === n.type) return getTensor(t.inputNames[n.inputIndex], a, r);
        if ("tensors" === n.type) return (0 === n.inputIndex ? 0 === n.inputParamLength ? t.inputNames : t.inputNames.slice(n.inputIndex, -n.inputParamLength) : t.inputNames.splice(n.inputIndex)).map(function(e) {
            return getTensor(e, a, r);
        });
        var o = Array.prototype.slice.call(getTensor(t.inputNames.slice(n.inputIndex)[0], a, r).dataSync());
        return "number" === n.type ? o[0] : o;
    }
    return n && n.value;
}
function getTensor(e, t, a) {
    var r = parseNodeName(e), n = r[0], o = r[1], s = a.currentContextIds.find(function(e) {
        return !!t[getNodeNameWithContextId(n, e)];
    });
    return void 0 !== s ? t[getNodeNameWithContextId(n, s)][o] : void 0;
}
function getTensorsForCurrentContenxt(e, t, a) {
    return t[getNodeNameWithContextId(e, a.currentContextId)];
}
function getNodeNameAndIndex(e, t) {
    var a = parseNodeName(e), r = a[0], n = a[1];
    return [
        getNodeNameWithContextId(r, t && t.currentContextId),
        n
    ];
}
function getNodeNameWithContextId(e, t) {
    return t ? e + "-" + t : e;
}
function parseNodeName(e) {
    var t = e.lastIndexOf(":");
    return -1 === t ? [
        e,
        0
    ] : [
        e.substring(0, t),
        Number(e.substring(t + 1))
    ];
}
function split$1(e, t) {
    for(var a = [], r = 0; r < e.length; r += t)a.push(e.slice(r, r + t));
    return a;
}
var json = [
    {
        tfOpName: "Add",
        dlOpName: "add",
        category: "arithmetic",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "AddN",
        dlOpName: "addN",
        category: "arithmetic",
        params: [
            {
                tfInputIndex: 0,
                tfInputParamLength: 0,
                dlParamName: "tensors",
                type: "tensors"
            }
        ]
    },
    {
        tfOpName: "BiasAdd",
        dlOpName: "add",
        category: "arithmetic",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Sub",
        dlOpName: "sub",
        category: "arithmetic",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "RealDiv",
        dlOpName: "div",
        category: "arithmetic",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Div",
        dlOpName: "div",
        category: "arithmetic",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "FloorDiv",
        dlOpName: "floorDiv",
        category: "arithmetic",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Mul",
        dlOpName: "mul",
        category: "arithmetic",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Maximum",
        dlOpName: "maximum",
        category: "arithmetic",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            }
        ]
    },
    {
        tfOpName: "Minimum",
        dlOpName: "minimum",
        category: "arithmetic",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            }
        ]
    },
    {
        tfOpName: "Pow",
        dlOpName: "pow",
        category: "arithmetic",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "SquaredDifference",
        dlOpName: "squaredDifference",
        category: "arithmetic",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Mod",
        dlOpName: "mod",
        category: "arithmetic",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "FloorMod",
        dlOpName: "mod",
        category: "arithmetic",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    }
], arithmetic = Object.freeze({
    json: json
}), json$1 = [
    {
        tfOpName: "Abs",
        dlOpName: "abs",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Acos",
        dlOpName: "acos",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Asin",
        dlOpName: "asin",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Atan",
        dlOpName: "atan",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Atan2",
        dlOpName: "atan2",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "y",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Ceil",
        dlOpName: "ceil",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "ClipByValue",
        dlOpName: "clipByValue",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "clip_value_min",
                dlParamName: "clipValueMin",
                type: "number"
            },
            {
                tfParamName: "clip_value_max",
                dlParamName: "clipValueMax",
                type: "number"
            }
        ]
    },
    {
        tfOpName: "Cos",
        dlOpName: "cos",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Cosh",
        dlOpName: "cosh",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Elu",
        dlOpName: "elu",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Exp",
        dlOpName: "exp",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Floor",
        dlOpName: "floor",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Log",
        dlOpName: "log",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Neg",
        dlOpName: "neg",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Relu",
        dlOpName: "relu",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Relu6",
        dlOpName: "clipByValue",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            },
            {
                dlParamName: "clipValueMin",
                type: "number",
                defaultValue: 0
            },
            {
                dlParamName: "clipValueMax",
                type: "number",
                defaultValue: 6
            }
        ]
    },
    {
        tfOpName: "Selu",
        dlOpName: "selu",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Sigmoid",
        dlOpName: "sigmoid",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Sin",
        dlOpName: "sin",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Sinh",
        dlOpName: "sinh",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Sqrt",
        dlOpName: "sqrt",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Rsqrt",
        dlOpName: "rsqrt",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Square",
        dlOpName: "square",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Tan",
        dlOpName: "tan",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Tanh",
        dlOpName: "tanh",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Sign",
        dlOpName: "sign",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Round",
        dlOpName: "round",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Expm1",
        dlOpName: "expm1",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Log1p",
        dlOpName: "log1p",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Reciprocal",
        dlOpName: "reciprocal",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Reciprocal",
        dlOpName: "reciprocal",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Softplus",
        dlOpName: "softplus",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Asinh",
        dlOpName: "asinh",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Acosh",
        dlOpName: "acosh",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Atanh",
        dlOpName: "atanh",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Erf",
        dlOpName: "erf",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Prod",
        dlOpName: "prod",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "axes",
                type: "number[]"
            },
            {
                tfParamName: "keep_dims",
                dlParamName: "keepDims",
                type: "bool",
                notSupported: !0
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "LeakyRelu",
        dlOpName: "leakyRelu",
        category: "basic_math",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "alpha",
                dlParamName: "alpha",
                type: "number",
                defaultValue: 0.2
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    }
], basicMath = Object.freeze({
    json: json$1
}), json$2 = [
    {
        tfOpName: "LoopCond",
        dlOpName: "loopCond",
        category: "control",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "pred",
                type: "tensor"
            }
        ]
    },
    {
        tfOpName: "Switch",
        dlOpName: "switch",
        category: "control",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "data",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "pred",
                type: "tensor"
            }
        ]
    },
    {
        tfOpName: "Merge",
        dlOpName: "merge",
        category: "control",
        params: [
            {
                tfInputIndex: 0,
                tfInputParamLength: 0,
                dlParamName: "tensors",
                type: "tensors"
            }
        ]
    },
    {
        tfOpName: "Enter",
        dlOpName: "enter",
        category: "control",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "tensor",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            },
            {
                tfParamName: "frame_name",
                dlParamName: "frameName",
                type: "string"
            },
            {
                tfParamName: "is_constant",
                dlParamName: "isConstant",
                type: "bool"
            }
        ]
    },
    {
        tfOpName: "Exit",
        dlOpName: "exit",
        category: "control",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "tensor",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "NextIteration",
        dlOpName: "nextIteration",
        category: "control",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "tensor",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "TensorArrayV3",
        dlOpName: "tensorArray",
        category: "control",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "size",
                type: "number"
            },
            {
                tfParamName: "dtype",
                dlParamName: "dtype",
                type: "dtype"
            },
            {
                tfParamName: "element_shape",
                dlParamName: "elementShape",
                type: "shape"
            },
            {
                tfParamName: "dynamic_size",
                dlParamName: "dynamicSize",
                type: "bool"
            },
            {
                tfParamName: "clear_after_read",
                dlParamName: "clearAfterRead",
                type: "bool"
            },
            {
                tfParamName: "identical_element_shapes",
                dlParamName: "identicalElementShapes",
                type: "bool"
            },
            {
                tfParamName: "tensor_array_name",
                dlParamName: "name",
                type: "string"
            }
        ]
    },
    {
        tfOpName: "TensorArrayWriteV3",
        dlOpName: "tensorArrayWrite",
        category: "control",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "tensorArrayId",
                type: "number"
            },
            {
                tfInputIndex: 1,
                dlParamName: "index",
                type: "number"
            },
            {
                tfInputIndex: 2,
                dlParamName: "tensor",
                type: "tensor"
            },
            {
                tfInputIndex: 3,
                dlParamName: "flowIn",
                type: "number"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "TensorArrayReadV3",
        dlOpName: "tensorArrayRead",
        category: "control",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "tensorArrayId",
                type: "number"
            },
            {
                tfInputIndex: 1,
                dlParamName: "index",
                type: "number"
            },
            {
                tfInputIndex: 2,
                dlParamName: "flowIn",
                type: "number"
            },
            {
                tfParamName: "dtype",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "TensorArrayGatherV3",
        dlOpName: "tensorArrayGather",
        category: "control",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "tensorArrayId",
                type: "number"
            },
            {
                tfInputIndex: 1,
                dlParamName: "indices",
                type: "number[]"
            },
            {
                tfInputIndex: 2,
                dlParamName: "flowIn",
                type: "number"
            },
            {
                tfParamName: "dtype",
                dlParamName: "dtype",
                type: "dtype"
            },
            {
                tfParamName: "element_shape",
                dlParamName: "elementShape",
                type: "shape"
            }
        ]
    },
    {
        tfOpName: "TensorArrayScatterV3",
        dlOpName: "tensorArrayScatter",
        category: "control",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "tensorArrayId",
                type: "number"
            },
            {
                tfInputIndex: 1,
                dlParamName: "indices",
                type: "number[]"
            },
            {
                tfInputIndex: 2,
                dlParamName: "tensor",
                type: "tensor"
            },
            {
                tfInputIndex: 3,
                dlParamName: "flowIn",
                type: "number"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype"
            }
        ]
    },
    {
        tfOpName: "TensorArrayConcatV3",
        dlOpName: "tensorArrayConcat",
        category: "control",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "tensorArrayId",
                type: "number"
            },
            {
                tfInputIndex: 1,
                dlParamName: "flowIn",
                type: "number"
            },
            {
                tfParamName: "dtype",
                dlParamName: "dtype",
                type: "dtype"
            },
            {
                tfParamName: "element_shape_except0",
                dlParamName: "elementShapeExcept0",
                type: "shape",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "TensorArraySplitV3",
        dlOpName: "tensorArraySplit",
        category: "control",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "tensorArrayId",
                type: "number"
            },
            {
                tfInputIndex: 1,
                dlParamName: "tensor",
                type: "tensor"
            },
            {
                tfInputIndex: 2,
                dlParamName: "lengths",
                type: "number[]"
            },
            {
                tfInputIndex: 3,
                dlParamName: "flowIn",
                type: "number"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype"
            }
        ]
    },
    {
        tfOpName: "TensorArraySizeV3",
        dlOpName: "tensorArraySize",
        category: "control",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "tensorArrayId",
                type: "number"
            },
            {
                tfInputIndex: 1,
                dlParamName: "flowIn",
                type: "number"
            }
        ]
    },
    {
        tfOpName: "TensorArrayCloseV3",
        dlOpName: "tensorArrayClose",
        category: "control",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "tensorArrayId",
                type: "number"
            }
        ]
    }
], control = Object.freeze({
    json: json$2
}), json$3 = [
    {
        tfOpName: "AvgPool",
        dlOpName: "avgPool",
        category: "convolution",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "strides",
                dlParamName: "strides",
                type: "number[]"
            },
            {
                tfParamName: "padding",
                dlParamName: "pad",
                type: "string"
            },
            {
                tfParamName: "data_format",
                dlParamName: "dataFormat",
                type: "string",
                notSupported: !0
            },
            {
                tfParamName: "ksize",
                dlParamName: "kernelSize",
                type: "number[]"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "MaxPool",
        dlOpName: "maxPool",
        category: "convolution",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "strides",
                dlParamName: "strides",
                type: "number[]"
            },
            {
                tfParamName: "padding",
                dlParamName: "pad",
                type: "string"
            },
            {
                tfParamName: "data_format",
                dlParamName: "dataFormat",
                type: "string",
                notSupported: !0
            },
            {
                tfParamName: "ksize",
                dlParamName: "kernelSize",
                type: "number[]"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Conv1D",
        dlOpName: "conv1d",
        category: "convolution",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "filter",
                type: "tensor"
            },
            {
                tfParamName: "stride",
                dlParamName: "stride",
                type: "number"
            },
            {
                tfParamName: "padding",
                dlParamName: "pad",
                type: "string"
            },
            {
                tfParamName: "data_format",
                dlParamName: "dataFormat",
                type: "string",
                defaultValue: "NWC"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            },
            {
                tfParamName: "dilation",
                dlParamName: "dilation",
                type: "number",
                defaultValue: 1
            }
        ]
    },
    {
        tfOpName: "Conv2D",
        dlOpName: "conv2d",
        category: "convolution",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "filter",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            },
            {
                tfParamName: "strides",
                dlParamName: "strides",
                type: "number[]"
            },
            {
                tfParamName: "padding",
                dlParamName: "pad",
                type: "string"
            },
            {
                tfParamName: "useCudnnOnGpu",
                dlParamName: "useCudnnOnGpu",
                type: "bool"
            },
            {
                tfParamName: "data_format",
                dlParamName: "dataFormat",
                type: "string",
                defaultValue: "NHWC"
            },
            {
                tfParamName: "dilations",
                dlParamName: "dilations",
                type: "number[]"
            }
        ]
    },
    {
        tfOpName: "Conv2DBackpropInput",
        dlOpName: "conv2dTranspose",
        category: "convolution",
        params: [
            {
                tfInputIndex: 2,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "filter",
                type: "tensor"
            },
            {
                tfInputIndex: 0,
                dlParamName: "outputShape",
                type: "number[]"
            },
            {
                tfParamName: "strides",
                dlParamName: "strides",
                type: "number[]"
            },
            {
                tfParamName: "padding",
                dlParamName: "pad",
                type: "string"
            },
            {
                tfParamName: "data_format",
                dlParamName: "dataFormat",
                type: "string",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "DepthwiseConv2d",
        dlOpName: "depthwiseConv2d",
        category: "convolution",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "input",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "filter",
                type: "tensor"
            },
            {
                tfParamName: "strides",
                dlParamName: "strides",
                type: "number[]"
            },
            {
                tfParamName: "padding",
                dlParamName: "pad",
                type: "string"
            },
            {
                tfParamName: "data_format",
                dlParamName: "dataFormat",
                type: "string",
                defaultValue: "NHWC"
            },
            {
                tfParamName: "dilations",
                dlParamName: "dilations",
                type: "number[]"
            }
        ]
    },
    {
        tfOpName: "DepthwiseConv2dNative",
        dlOpName: "depthwiseConv2d",
        category: "convolution",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "input",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "filter",
                type: "tensor"
            },
            {
                tfParamName: "strides",
                dlParamName: "strides",
                type: "number[]"
            },
            {
                tfParamName: "padding",
                dlParamName: "pad",
                type: "string"
            },
            {
                tfParamName: "data_format",
                dlParamName: "dataFormat",
                type: "string",
                defaultValue: "NHWC"
            },
            {
                tfParamName: "dilations",
                dlParamName: "dilations",
                type: "number[]"
            }
        ]
    }
], convolution = Object.freeze({
    json: json$3
}), json$4 = [
    {
        tfOpName: "Fill",
        dlOpName: "fill",
        category: "creation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "shape",
                type: "number[]"
            },
            {
                tfInputIndex: 1,
                dlParamName: "value",
                type: "number"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype"
            }
        ]
    },
    {
        tfOpName: "LinSpace",
        dlOpName: "linspace",
        category: "creation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "start",
                type: "number"
            },
            {
                tfInputIndex: 1,
                dlParamName: "stop",
                type: "number"
            },
            {
                tfInputIndex: 2,
                dlParamName: "num",
                type: "number"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "OneHot",
        dlOpName: "oneHot",
        category: "creation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "indices",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "depth",
                type: "number"
            },
            {
                tfInputIndex: 2,
                dlParamName: "onValue",
                type: "number",
                defaultValue: 1
            },
            {
                tfInputIndex: 3,
                dlParamName: "offValue",
                type: "number",
                defaultValue: 0
            },
            {
                tfParamName: "axis",
                dlParamName: "axis",
                type: "number",
                notSupported: !0
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Ones",
        dlOpName: "ones",
        category: "creation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "shape",
                type: "number[]"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype"
            }
        ]
    },
    {
        tfOpName: "OnesLike",
        dlOpName: "onesLike",
        category: "creation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "dtype",
                dlParamName: "dtype",
                type: "dtype"
            }
        ]
    },
    {
        tfOpName: "RandomUniform",
        dlOpName: "randomUniform",
        category: "creation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "shape",
                type: "number[]"
            },
            {
                tfParamName: "minval",
                dlParamName: "minval",
                type: "number",
                defaultValue: 0
            },
            {
                tfParamName: "maxval",
                dlParamName: "maxval",
                type: "number",
                defaultValue: 1
            },
            {
                tfParamName: "dtype",
                dlParamName: "dtype",
                type: "dtype"
            },
            {
                tfParamName: "seed",
                dlParamName: "seed",
                type: "number",
                defaultValue: 0
            },
            {
                tfParamName: "seed2",
                dlParamName: "seed2",
                type: "number",
                defaultValue: 0,
                notSupported: !0
            },
            {
                tfParamName: "T",
                dlParamName: "T",
                type: "number",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Range",
        dlOpName: "range",
        category: "creation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "start",
                type: "number"
            },
            {
                tfInputIndex: 1,
                dlParamName: "stop",
                type: "number"
            },
            {
                tfInputIndex: 2,
                dlParamName: "step",
                type: "number",
                defaultValue: 0
            },
            {
                tfParamName: "Tidx",
                dlParamName: "dtype",
                type: "dtype"
            }
        ]
    },
    {
        tfOpName: "truncatedNormal",
        dlOpName: "truncatedNormal",
        category: "creation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "shape",
                type: "number[]"
            },
            {
                tfParamName: "means",
                dlParamName: "mean",
                type: "number",
                defaultValue: 0
            },
            {
                tfParamName: "stddev",
                dlParamName: "stdDev",
                type: "number",
                defaultValue: 1
            },
            {
                tfParamName: "seed",
                dlParamName: "seed",
                type: "number"
            },
            {
                tfParamName: "seed2",
                dlParamName: "seed2",
                type: "number",
                defaultValue: 0,
                notSupported: !0
            },
            {
                tfParamName: "dtype",
                dlParamName: "dtype",
                type: "dtype"
            },
            {
                tfParamName: "T",
                dlParamName: "T",
                type: "number",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Zeros",
        dlOpName: "zeros",
        category: "creation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "shape",
                type: "number[]"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype"
            }
        ]
    },
    {
        tfOpName: "ZerosLike",
        dlOpName: "zerosLike",
        category: "creation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype"
            }
        ]
    }
], creation = Object.freeze({
    json: json$4
}), json$5 = [
    {
        tfOpName: "NonMaxSuppressionV2",
        dlOpName: "nonMaxSuppression",
        category: "dynamic",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "boxes",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "scores",
                type: "tensor"
            },
            {
                tfInputIndex: 2,
                dlParamName: "maxOutputSize",
                type: "number"
            },
            {
                tfInputIndex: 3,
                dlParamName: "iouThreshold",
                type: "number"
            }
        ]
    },
    {
        tfOpName: "NonMaxSuppressionV3",
        dlOpName: "nonMaxSuppression",
        category: "dynamic",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "boxes",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "scores",
                type: "tensor"
            },
            {
                tfInputIndex: 2,
                dlParamName: "maxOutputSize",
                type: "number"
            },
            {
                tfInputIndex: 3,
                dlParamName: "iouThreshold",
                type: "number"
            },
            {
                tfInputIndex: 4,
                dlParamName: "scoreThreshold",
                type: "number"
            }
        ]
    },
    {
        tfOpName: "Where",
        dlOpName: "whereAsync",
        category: "dynamic",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "condition",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "ListDiff",
        dlOpName: "setdiff1dAsync",
        category: "dynamic",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "y",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    }
], dynamic = Object.freeze({
    json: json$5
}), json$6 = [
    {
        tfOpName: "TopKV2",
        dlOpName: "topK",
        category: "evaluation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "k",
                type: "number"
            },
            {
                tfParamName: "sorted",
                dlParamName: "sorted",
                type: "bool"
            }
        ]
    }
], evaluation = Object.freeze({
    json: json$6
}), json$7 = [
    {
        tfOpName: "PlaceholderWithDefault",
        dlOpName: "placeholder",
        category: "graph",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "default",
                type: "tensor"
            },
            {
                tfParamName: "shape",
                dlParamName: "shape",
                type: "shape"
            },
            {
                tfParamName: "dtype",
                dlParamName: "dtype",
                type: "dtype"
            }
        ]
    },
    {
        tfOpName: "Placeholder",
        dlOpName: "placeholder",
        category: "graph",
        params: [
            {
                tfParamName: "shape",
                dlParamName: "shape",
                type: "shape"
            },
            {
                tfParamName: "dtype",
                dlParamName: "dtype",
                type: "dtype"
            }
        ]
    },
    {
        tfOpName: "Const",
        dlOpName: "const",
        category: "graph"
    },
    {
        tfOpName: "Identity",
        dlOpName: "identity",
        category: "graph",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            }
        ]
    },
    {
        tfOpName: "Snapshot",
        dlOpName: "snapshot",
        category: "graph",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            }
        ]
    },
    {
        tfOpName: "Rank",
        dlOpName: "rank",
        category: "graph",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            }
        ]
    },
    {
        tfOpName: "Size",
        dlOpName: "size",
        category: "graph",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            }
        ]
    },
    {
        tfOpName: "Shape",
        dlOpName: "shape",
        category: "graph",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            }
        ]
    },
    {
        tfOpName: "ShapeN",
        dlOpName: "shapeN",
        category: "graph",
        params: [
            {
                tfInputIndex: 0,
                tfInputParamLength: 0,
                dlParamName: "x",
                type: "tensors"
            }
        ]
    },
    {
        tfOpName: "Print",
        dlOpName: "print",
        category: "graph",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                tfInputParamLength: 1,
                dlParamName: "data",
                type: "tensors"
            },
            {
                tfParamName: "message",
                dlParamName: "message",
                type: "string"
            },
            {
                tfParamName: "first_n",
                dlParamName: "firstN",
                type: "number",
                notSupprted: !0
            },
            {
                tfParamName: "summarize",
                dlParamName: "summarize",
                type: "number",
                defaultValue: 3
            }
        ]
    },
    {
        tfOpName: "NoOp",
        dlOpName: "noop",
        category: "graph",
        params: []
    },
    {
        tfOpName: "StopGradient",
        dlOpName: "stopGradient",
        category: "graph",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            }
        ]
    },
    {
        tfOpName: "FakeQuantWithMinMaxVars",
        dlOpName: "fakeQuantWithMinMaxVars",
        category: "graph",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "min",
                dlParamName: "min",
                type: "number"
            },
            {
                tfParamName: "max",
                dlParamName: "max",
                type: "number"
            }
        ]
    }
], graph = Object.freeze({
    json: json$7
}), json$8 = [
    {
        tfOpName: "ResizeBilinear",
        dlOpName: "resizeBilinear",
        category: "image",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "images",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "size",
                type: "number[]"
            },
            {
                tfParamName: "align_corners",
                dlParamName: "alignCorners",
                type: "bool"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "ResizeNearestNeighbor",
        dlOpName: "resizeNearestNeighbor",
        category: "image",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "images",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "size",
                type: "number[]"
            },
            {
                tfParamName: "align_corners",
                dlParamName: "alignCorners",
                type: "bool"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "CropAndResize",
        dlOpName: "cropAndResize",
        category: "image",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "image",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "boxes",
                type: "tensor"
            },
            {
                tfInputIndex: 2,
                dlParamName: "boxInd",
                type: "tensor"
            },
            {
                tfInputIndex: 3,
                dlParamName: "cropSize",
                type: "number[]"
            },
            {
                tfParamName: "method",
                dlParamName: "method",
                type: "string"
            },
            {
                tfParamName: "extrapolation_value",
                dlParamName: "extrapolationValue",
                type: "number"
            }
        ]
    }
], image$1 = Object.freeze({
    json: json$8
}), json$9 = [
    {
        tfOpName: "Equal",
        dlOpName: "equal",
        category: "logical",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "NotEqual",
        dlOpName: "notEqual",
        category: "logical",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Greater",
        dlOpName: "greater",
        category: "logical",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "GreaterEqual",
        dlOpName: "greaterEqual",
        category: "logical",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Less",
        dlOpName: "less",
        category: "logical",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "LessEqual",
        dlOpName: "lessEqual",
        category: "logical",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "LogicalAnd",
        dlOpName: "logicalAnd",
        category: "logical",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "LogicalNot",
        dlOpName: "logicalNot",
        category: "logical",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "LogicalOr",
        dlOpName: "logicalOr",
        category: "logical",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Select",
        dlOpName: "where",
        category: "logical",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "condition",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 2,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    }
], logical = Object.freeze({
    json: json$9
}), json$10 = [
    {
        tfOpName: "MatMul",
        dlOpName: "matMul",
        category: "matrices",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "transpose_a",
                dlParamName: "transposeA",
                type: "bool",
                defaultValue: !1
            },
            {
                tfParamName: "transpose_b",
                dlParamName: "transposeB",
                type: "bool",
                defaultValue: !1
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "BatchMatMul",
        dlOpName: "matMul",
        category: "matrices",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "a",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "b",
                type: "tensor"
            },
            {
                tfParamName: "adj_x",
                dlParamName: "transposeA",
                type: "bool",
                defaultValue: !1
            },
            {
                tfParamName: "adj_y",
                dlParamName: "transposeB",
                type: "bool",
                defaultValue: !1
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Transpose",
        dlOpName: "transpose",
        category: "matrices",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "perm",
                type: "number[]"
            },
            {
                tfParamName: "T",
                dlParamName: "dtype",
                type: "dtype",
                notSupported: !0
            }
        ]
    }
], matrices = Object.freeze({
    json: json$10
}), json$11 = [
    {
        tfOpName: "FusedBatchNorm",
        dlOpName: "batchNormalization",
        category: "normalization",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "scale",
                type: "tensor"
            },
            {
                tfInputIndex: 2,
                dlParamName: "offset",
                type: "tensor"
            },
            {
                tfInputIndex: 3,
                dlParamName: "mean",
                type: "tensor"
            },
            {
                tfInputIndex: 4,
                dlParamName: "variance",
                type: "tensor"
            },
            {
                tfParamName: "epsilon",
                dlParamName: "epsilon",
                type: "number",
                defaultValue: 0.001
            },
            {
                tfParamName: "data_format",
                dlParamName: "dataFormat",
                type: "string",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "FusedBatchNormV2",
        dlOpName: "batchNormalization",
        category: "normalization",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "scale",
                type: "tensor"
            },
            {
                tfInputIndex: 2,
                dlParamName: "offset",
                type: "tensor"
            },
            {
                tfInputIndex: 3,
                dlParamName: "mean",
                type: "tensor"
            },
            {
                tfInputIndex: 4,
                dlParamName: "variance",
                type: "tensor"
            },
            {
                tfParamName: "epsilon",
                dlParamName: "epsilon",
                type: "number",
                defaultValue: 0.001
            },
            {
                tfParamName: "data_format",
                dlParamName: "dataFormat",
                type: "string",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "LRN",
        dlOpName: "localResponseNormalization",
        category: "normalization",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "depth_radius",
                dlParamName: "radius",
                type: "number",
                defaultValue: 5
            },
            {
                tfParamName: "bias",
                dlParamName: "bias",
                type: "number",
                defaultValue: 1
            },
            {
                tfParamName: "alpha",
                dlParamName: "alpha",
                type: "number",
                defaultValue: 1
            },
            {
                tfParamName: "beta",
                dlParamName: "beta",
                type: "number",
                defaultValue: 0.5
            }
        ]
    },
    {
        tfOpName: "Softmax",
        dlOpName: "softmax",
        category: "normalization",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            }
        ]
    },
    {
        tfOpName: "LogSoftmax",
        dlOpName: "logSoftmax",
        category: "normalization",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            }
        ]
    },
    {
        tfOpName: "SparseToDense",
        dlOpName: "sparseToDense",
        category: "normalization",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "sparseIndices",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "outputShape",
                type: "number[]"
            },
            {
                tfInputIndex: 2,
                dlParamName: "sparseValues",
                type: "tensor"
            },
            {
                tfInputIndex: 3,
                dlParamName: "defaultValue",
                type: "tensor"
            },
            {
                tfParamName: "validate_indices",
                dlParamName: "validateIndices",
                type: "bool",
                defaultValue: !0,
                notSupported: !0
            }
        ]
    }
], normalization = Object.freeze({
    json: json$11
}), json$12 = [
    {
        tfOpName: "Max",
        dlOpName: "max",
        category: "reduction",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "axis",
                type: "number[]"
            },
            {
                tfParamName: "keep_dims",
                dlParamName: "keepDims",
                type: "bool"
            }
        ]
    },
    {
        tfOpName: "Mean",
        dlOpName: "mean",
        category: "reduction",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "axis",
                type: "number[]"
            },
            {
                tfParamName: "keep_dims",
                dlParamName: "keepDims",
                type: "bool"
            }
        ]
    },
    {
        tfOpName: "Min",
        dlOpName: "min",
        category: "reduction",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "axis",
                type: "number[]"
            },
            {
                tfParamName: "keep_dims",
                dlParamName: "keepDims",
                type: "bool"
            }
        ]
    },
    {
        tfOpName: "Sum",
        dlOpName: "sum",
        category: "reduction",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "axis",
                type: "number[]"
            },
            {
                tfParamName: "keep_dims",
                dlParamName: "keepDims",
                type: "bool"
            }
        ]
    },
    {
        tfOpName: "All",
        dlOpName: "all",
        category: "reduction",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "axis",
                type: "number[]"
            },
            {
                tfParamName: "keep_dims",
                dlParamName: "keepDims",
                type: "bool"
            }
        ]
    },
    {
        tfOpName: "Any",
        dlOpName: "any",
        category: "reduction",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "axis",
                type: "number[]"
            },
            {
                tfParamName: "keep_dims",
                dlParamName: "keepDims",
                type: "bool"
            }
        ]
    },
    {
        tfOpName: "ArgMax",
        dlOpName: "argMax",
        category: "reduction",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "axis",
                type: "number"
            }
        ]
    },
    {
        tfOpName: "ArgMin",
        dlOpName: "argMin",
        category: "reduction",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "axis",
                type: "number"
            }
        ]
    },
    {
        tfOpName: "Prod",
        dlOpName: "prod",
        category: "reduction",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "axis",
                type: "number[]"
            },
            {
                tfParamName: "keep_dims",
                dlParamName: "keepDims",
                type: "bool"
            }
        ]
    }
], reduction = Object.freeze({
    json: json$12
}), json$13 = [
    {
        tfOpName: "ConcatV2",
        dlOpName: "concat",
        category: "slice_join",
        params: [
            {
                tfInputIndex: 0,
                tfInputParamLength: 1,
                dlParamName: "tensors",
                type: "tensors"
            },
            {
                tfInputIndex: -1,
                dlParamName: "axis",
                type: "number"
            }
        ]
    },
    {
        tfOpName: "Concat",
        dlOpName: "concat",
        category: "slice_join",
        params: [
            {
                tfInputIndex: 1,
                tfInputParamLength: 1,
                dlParamName: "tensors",
                type: "tensors"
            },
            {
                tfInputIndex: 0,
                dlParamName: "axis",
                type: "number"
            }
        ]
    },
    {
        tfOpName: "GatherV2",
        dlOpName: "gather",
        category: "slice_join",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "indices",
                type: "tensor"
            },
            {
                tfInputIndex: 2,
                dlParamName: "axis",
                type: "number",
                defaultValue: 0
            }
        ]
    },
    {
        tfOpName: "Gather",
        dlOpName: "gather",
        category: "slice_join",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "indices",
                type: "tensor"
            },
            {
                tfParamName: "axis",
                dlParamName: "axis",
                type: "number",
                defaultValue: 0
            },
            {
                tfParamName: "validate_indices",
                dlParamName: "validateIndices",
                type: "bool",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Reverse",
        dlOpName: "reverse",
        category: "slice_join",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "dims",
                type: "bool",
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "ReverseV2",
        dlOpName: "reverse",
        category: "slice_join",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "axis",
                type: "number[]"
            }
        ]
    },
    {
        tfOpName: "Slice",
        dlOpName: "slice",
        category: "slice_join",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "begin",
                type: "number[]"
            },
            {
                tfInputIndex: 2,
                dlParamName: "size",
                type: "number[]"
            }
        ]
    },
    {
        tfOpName: "StridedSlice",
        dlOpName: "stridedSlice",
        category: "slice_join",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "begin",
                type: "number[]"
            },
            {
                tfInputIndex: 2,
                dlParamName: "end",
                type: "number[]"
            },
            {
                tfInputIndex: 3,
                dlParamName: "strides",
                type: "number[]"
            },
            {
                tfParamName: "begin_mask",
                dlParamName: "beginMask",
                type: "number",
                defaultValue: 0
            },
            {
                tfParamName: "end_mask",
                dlParamName: "endMask",
                type: "number",
                defaultValue: 0
            },
            {
                tfParamName: "new_axis_mask",
                dlParamName: "newAxisMask",
                type: "number",
                defaultValue: 0
            },
            {
                tfParamName: "ellipsis_mask",
                dlParamName: "ellipsisMask",
                type: "number",
                defaultValue: 0
            },
            {
                tfParamName: "shrink_axis_mask",
                dlParamName: "shrinkAxisMask",
                type: "number",
                defaultValue: 0
            }
        ]
    },
    {
        tfOpName: "Pack",
        dlOpName: "stack",
        category: "slice_join",
        params: [
            {
                tfInputIndex: 0,
                tfInputParamLength: 0,
                dlParamName: "tensors",
                type: "tensors"
            },
            {
                tfParamName: "axis",
                dlParamName: "axis",
                type: "number",
                defaultValue: 0
            }
        ]
    },
    {
        tfOpName: "Unpack",
        dlOpName: "unstack",
        category: "slice_join",
        params: [
            {
                tfInputIndex: 0,
                tfInputParamLength: 0,
                dlParamName: "tensor",
                type: "tensor"
            },
            {
                tfParamName: "axis",
                dlParamName: "axis",
                type: "number",
                defaultValue: 0
            },
            {
                tfParamName: "num",
                dlParamName: "num",
                type: "number",
                defaultValue: 0,
                notSupported: !0
            }
        ]
    },
    {
        tfOpName: "Tile",
        dlOpName: "tile",
        category: "slice_join",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "reps",
                type: "number[]"
            }
        ]
    },
    {
        tfOpName: "Split",
        dlOpName: "split",
        category: "slice_join",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "axis",
                type: "number",
                defaultValue: 0
            },
            {
                tfInputIndex: 1,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "num_split",
                dlParamName: "numOrSizeSplits",
                type: "number",
                defaultValue: 1
            }
        ]
    },
    {
        tfOpName: "SplitV",
        dlOpName: "split",
        category: "slice_join",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "numOrSizeSplits",
                type: "number[]"
            },
            {
                tfInputIndex: 2,
                dlParamName: "axis",
                type: "number",
                defaultValue: 0
            }
        ]
    },
    {
        tfOpName: "ScatterNd",
        dlOpName: "scatterNd",
        category: "slice_join",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "indices",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "values",
                type: "tensor"
            },
            {
                tfInputIndex: 2,
                dlParamName: "shape",
                type: "number[]"
            }
        ]
    },
    {
        tfOpName: "GatherNd",
        dlOpName: "gatherNd",
        category: "slice_join",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "indices",
                type: "tensor"
            }
        ]
    },
    {
        tfOpName: "SparseToDense",
        dlOpName: "sparseToDense",
        category: "slice_join",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "sparseIndices",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "outputShape",
                type: "number[]"
            },
            {
                tfInputIndex: 2,
                dlParamName: "sparseValues",
                type: "tensor"
            },
            {
                tfInputIndex: 3,
                dlParamName: "defaultValue",
                type: "tensor"
            },
            {
                tfParamName: "validate_indices",
                dlParamName: "validateIndices",
                type: "bool",
                defaultValue: !1,
                notSupported: !0
            }
        ]
    }
], sliceJoin = Object.freeze({
    json: json$13
}), json$14 = [
    {
        tfOpName: "FFT",
        dlOpName: "fft",
        category: "spectral",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            }
        ]
    },
    {
        tfOpName: "IFFT",
        dlOpName: "ifft",
        category: "spectral",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            }
        ]
    },
    {
        tfOpName: "RFFT",
        dlOpName: "rfft",
        category: "spectral",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "fft_length",
                type: "number",
                unsupported: !0
            }
        ]
    },
    {
        tfOpName: "IRFFT",
        dlOpName: "irfft",
        category: "spectral",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "fft_length",
                type: "number",
                unsupported: !0
            }
        ]
    }
], spectral = Object.freeze({
    json: json$14
}), json$15 = [
    {
        tfOpName: "Cast",
        dlOpName: "cast",
        category: "transformation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "SrcT",
                dlParamName: "sdtype",
                type: "dtype",
                notSupported: !0
            },
            {
                tfParamName: "DstT",
                dlParamName: "dtype",
                type: "dtype"
            }
        ]
    },
    {
        tfOpName: "ExpandDims",
        dlOpName: "expandDims",
        category: "transformation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                tfParamNameDeprecated: "dim",
                dlParamName: "axis",
                type: "number"
            }
        ]
    },
    {
        tfOpName: "Pad",
        dlOpName: "pad",
        category: "transformation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "padding",
                type: "number[]"
            },
            {
                tfParamName: "constant_value",
                dlParamName: "constantValue",
                type: "number",
                defaultValue: 0
            }
        ]
    },
    {
        tfOpName: "PadV2",
        dlOpName: "pad",
        category: "transformation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "padding",
                type: "number[]"
            },
            {
                tfInputIndex: 2,
                dlParamName: "constantValue",
                type: "number",
                defaultValue: 0
            }
        ]
    },
    {
        tfOpName: "Reshape",
        dlOpName: "reshape",
        category: "transformation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "shape",
                type: "number[]"
            }
        ]
    },
    {
        tfOpName: "Squeeze",
        dlOpName: "squeeze",
        category: "transformation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "axis",
                tfParamNameDeprecated: "squeeze_dims",
                dlParamName: "axis",
                type: "number[]"
            }
        ]
    },
    {
        tfOpName: "SpaceToBatchND",
        dlOpName: "spaceToBatchND",
        category: "transformation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "blockShape",
                type: "number[]"
            },
            {
                tfInputIndex: 2,
                dlParamName: "paddings",
                type: "number[]"
            }
        ]
    },
    {
        tfOpName: "BatchToSpaceND",
        dlOpName: "batchToSpaceND",
        category: "transformation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfInputIndex: 1,
                dlParamName: "blockShape",
                type: "number[]"
            },
            {
                tfInputIndex: 2,
                dlParamName: "crops",
                type: "number[]"
            }
        ]
    },
    {
        tfOpName: "DepthToSpace",
        dlOpName: "depthToSpace",
        category: "transformation",
        params: [
            {
                tfInputIndex: 0,
                dlParamName: "x",
                type: "tensor"
            },
            {
                tfParamName: "block_size",
                dlParamName: "blockSize",
                type: "number"
            },
            {
                tfParamName: "data_format",
                dlParamName: "dataFormat",
                type: "string"
            }
        ]
    }
], transformation = Object.freeze({
    json: json$15
}), CONTROL_FLOW_OPS = [
    "Switch",
    "Merge",
    "Enter",
    "Exit",
    "NextIteration"
], DYNAMIC_SHAPE_OPS = [
    "NonMaxSuppressionV2",
    "NonMaxSuppressionV3",
    "Where"
], OperationMapper = function() {
    function e48() {
        var e49 = [
            arithmetic,
            basicMath,
            control,
            convolution,
            creation,
            dynamic,
            evaluation,
            logical,
            image$1,
            graph,
            matrices,
            normalization,
            reduction,
            sliceJoin,
            spectral,
            transformation
        ], t13 = [].concat.apply([], e49.map(function(e) {
            return e.json;
        }));
        this.opMappers = t13.reduce(function(e, t) {
            return e[t.tfOpName] = t, e;
        }, {
        });
    }
    return Object.defineProperty(e48, "Instance", {
        get: function() {
            return this._instance || (this._instance = new this);
        },
        enumerable: !0,
        configurable: !0
    }), e48.prototype.isControlFlow = function(e) {
        return CONTROL_FLOW_OPS.some(function(t) {
            return t === e.op;
        });
    }, e48.prototype.isDynamicShape = function(e) {
        return DYNAMIC_SHAPE_OPS.some(function(t) {
            return t === e.op;
        });
    }, e48.prototype.transformGraph = function(e50) {
        var t14 = this, a = !1, r = !1, n = [], o = [], s1 = e50.node.reduce(function(e, s) {
            return e[s.name] = t14.mapNode(s), t14.isControlFlow(s) && (a = !0), t14.isDynamicShape(s) && (r = !0), "Placeholder" === s.op && n.push(e[s.name]), "Const" === s.op && o.push(e[s.name]), e;
        }, {
        }), i = [], p = [];
        return Object.keys(s1).forEach(function(e51) {
            var t = s1[e51];
            t.inputNames.forEach(function(e) {
                var a = getNodeNameAndIndex(e)[0];
                t.inputs.push(s1[a]), s1[a].children.push(t);
            }), 0 === t.inputs.length && i.push(t);
        }), Object.keys(s1).forEach(function(e) {
            var t = s1[e];
            0 === t.children.length && p.push(t);
        }), {
            nodes: s1,
            inputs: i,
            outputs: p,
            weights: o,
            placeholders: n,
            withControlFlow: a,
            withDynamicShape: r
        };
    }, e48.prototype.mapNode = function(e52) {
        var t = this, a12 = this.opMappers[e52.op];
        if (void 0 === a12) throw new Error("Tensorflow Op is not supported: " + e52.op);
        var r5 = {
            name: e52.name,
            op: a12.dlOpName,
            category: a12.category,
            inputNames: (e52.input || []).map(function(e) {
                return e.startsWith("^") ? e.substr(1) : e;
            }),
            inputs: [],
            children: [],
            params: {
            }
        };
        return a12.params && (r5.params = a12.params.reduce(function(a, r) {
            var n = r.tfInputIndex, o = r.tfInputParamLength, s = r.type, i = void 0;
            if (void 0 === n) switch(r.type){
                case "string":
                    void 0 === (i = t.getStringParam(e52.attr, r.tfParamName, r.defaultValue)) && r.tfParamNameDeprecated && (i = t.getStringParam(e52.attr, r.tfParamNameDeprecated, r.defaultValue));
                    break;
                case "number":
                    void 0 === (i = t.getNumberParam(e52.attr, r.tfParamName, r.defaultValue || 0)) && r.tfParamNameDeprecated && (i = t.getNumberParam(e52.attr, r.tfParamNameDeprecated, r.defaultValue));
                    break;
                case "number[]":
                    void 0 === (i = t.getNumericArrayParam(e52.attr, r.tfParamName, r.defaultValue)) && r.tfParamNameDeprecated && (i = t.getNumericArrayParam(e52.attr, r.tfParamNameDeprecated, r.defaultValue));
                    break;
                case "bool":
                    void 0 === (i = t.getBoolParam(e52.attr, r.tfParamName, r.defaultValue)) && r.tfParamNameDeprecated && (i = t.getBoolParam(e52.attr, r.tfParamNameDeprecated, r.defaultValue));
                    break;
                case "shape":
                    void 0 === (i = t.getTensorShapeParam(e52.attr, r.tfParamName, r.defaultValue)) && r.tfParamNameDeprecated && (i = t.getTensorShapeParam(e52.attr, r.tfParamNameDeprecated, r.defaultValue));
                    break;
                case "dtype":
                    void 0 === (i = t.getDtypeParam(e52.attr, r.tfParamName, r.defaultValue)) && r.tfParamNameDeprecated && (i = t.getDtypeParam(e52.attr, r.tfParamNameDeprecated, r.defaultValue));
                    break;
                case "tensor":
                case "tensors":
                    break;
                default:
                    throw new Error("Unsupported param type: " + r.type + " for op: " + e52.op);
            }
            return a[r.dlParamName] = {
                value: i,
                inputIndex: n,
                type: s,
                inputParamLength: o
            }, a;
        }, {
        })), r5;
    }, e48.prototype.getStringParam = function(e, t, a, r) {
        void 0 === r && (r = !1);
        var n = e[t];
        if (void 0 !== n) {
            var o = String.fromCharCode.apply(null, n.s);
            return r ? o : o.toLowerCase();
        }
        return a;
    }, e48.prototype.getBoolParam = function(e, t, a) {
        var r = e[t];
        return r ? r.b : a;
    }, e48.prototype.getNumberParam = function(e, t, a) {
        var r = e[t], n = r ? r[r.value] : a;
        return "number" == typeof n ? n : n.toInt();
    }, e48.prototype.getDtypeParam = function(e, t, a) {
        var r = e[t];
        if (r && r.type) switch(r.type){
            case compiled_api_1.DataType.DT_FLOAT:
                return "float32";
            case compiled_api_1.DataType.DT_INT32:
                return "int32";
            case compiled_api_1.DataType.DT_BOOL:
                return "bool";
            default:
                return a;
        }
        return a;
    }, e48.prototype.getTensorShapeParam = function(e53, t, a) {
        var r = e53[t];
        return r && r.shape ? r.shape.dim.map(function(e) {
            return "number" == typeof e.size ? e.size : e.size.toInt();
        }) : a;
    }, e48.prototype.getNumericArrayParam = function(e54, t, a) {
        var r = e54[t];
        return r ? (r.list.f && r.list.f.length ? r.list.f : r.list.i).map(function(e) {
            return "number" == typeof e ? e : e.toInt();
        }) : a;
    }, e48;
}(), executeOp = function(e, t, a) {
    switch(e.op){
        case "add":
            return [
                _tfjsCore.add(getParamValue("a", e, t, a), getParamValue("b", e, t, a))
            ];
        case "addN":
            return [
                _tfjsCore.addN(getParamValue("tensors", e, t, a))
            ];
        case "mod":
            return [
                _tfjsCore.mod(getParamValue("a", e, t, a), getParamValue("b", e, t, a))
            ];
        case "mul":
            return [
                _tfjsCore.mul(getParamValue("a", e, t, a), getParamValue("b", e, t, a))
            ];
        case "div":
            return [
                _tfjsCore.div(getParamValue("a", e, t, a), getParamValue("b", e, t, a))
            ];
        case "floorDiv":
            return [
                _tfjsCore.floorDiv(getParamValue("a", e, t, a), getParamValue("b", e, t, a))
            ];
        case "sub":
            return [
                _tfjsCore.sub(getParamValue("a", e, t, a), getParamValue("b", e, t, a))
            ];
        case "minimum":
            return [
                _tfjsCore.minimum(getParamValue("a", e, t, a), getParamValue("b", e, t, a))
            ];
        case "maximum":
            return [
                _tfjsCore.maximum(getParamValue("a", e, t, a), getParamValue("b", e, t, a))
            ];
        case "pow":
            return [
                _tfjsCore.pow(getParamValue("a", e, t, a), getParamValue("b", e, t, a))
            ];
        case "squaredDifference":
            return [
                _tfjsCore.squaredDifference(getParamValue("a", e, t, a), getParamValue("b", e, t, a))
            ];
        default:
            throw TypeError("Node type " + e.op + " is not implemented");
    }
}, executeOp$1 = function(e, t, a) {
    switch(e.op){
        case "abs":
            return [
                _tfjsCore.abs(getParamValue("x", e, t, a))
            ];
        case "acos":
            return [
                _tfjsCore.acos(getParamValue("x", e, t, a))
            ];
        case "acosh":
            return [
                _tfjsCore.acosh(getParamValue("x", e, t, a))
            ];
        case "asin":
            return [
                _tfjsCore.asin(getParamValue("x", e, t, a))
            ];
        case "asinh":
            return [
                _tfjsCore.asinh(getParamValue("x", e, t, a))
            ];
        case "atan":
            return [
                _tfjsCore.atan(getParamValue("x", e, t, a))
            ];
        case "atan2":
            return [
                _tfjsCore.atan2(getParamValue("x", e, t, a), getParamValue("y", e, t, a))
            ];
        case "atanh":
            return [
                _tfjsCore.atanh(getParamValue("x", e, t, a))
            ];
        case "ceil":
            return [
                _tfjsCore.ceil(getParamValue("x", e, t, a))
            ];
        case "cos":
            return [
                _tfjsCore.cos(getParamValue("x", e, t, a))
            ];
        case "cosh":
            return [
                _tfjsCore.cosh(getParamValue("x", e, t, a))
            ];
        case "elu":
            return [
                _tfjsCore.elu(getParamValue("x", e, t, a))
            ];
        case "erf":
            return [
                _tfjsCore.erf(getParamValue("x", e, t, a))
            ];
        case "exp":
            return [
                _tfjsCore.exp(getParamValue("x", e, t, a))
            ];
        case "expm1":
            return [
                _tfjsCore.expm1(getParamValue("x", e, t, a))
            ];
        case "floor":
            return [
                _tfjsCore.floor(getParamValue("x", e, t, a))
            ];
        case "log":
            return [
                _tfjsCore.log(getParamValue("x", e, t, a))
            ];
        case "log1p":
            return [
                _tfjsCore.log1p(getParamValue("x", e, t, a))
            ];
        case "neg":
            return [
                _tfjsCore.neg(getParamValue("x", e, t, a))
            ];
        case "reciprocal":
            return [
                _tfjsCore.reciprocal(getParamValue("x", e, t, a))
            ];
        case "relu":
            return [
                _tfjsCore.relu(getParamValue("x", e, t, a))
            ];
        case "round":
            return [
                _tfjsCore.round(getParamValue("x", e, t, a))
            ];
        case "selu":
            return [
                _tfjsCore.selu(getParamValue("x", e, t, a))
            ];
        case "sigmoid":
            return [
                _tfjsCore.sigmoid(getParamValue("x", e, t, a))
            ];
        case "sin":
            return [
                _tfjsCore.sin(getParamValue("x", e, t, a))
            ];
        case "sign":
            return [
                _tfjsCore.sign(getParamValue("x", e, t, a))
            ];
        case "sinh":
            return [
                _tfjsCore.sinh(getParamValue("x", e, t, a))
            ];
        case "softplus":
            return [
                _tfjsCore.softplus(getParamValue("x", e, t, a))
            ];
        case "sqrt":
            return [
                _tfjsCore.sqrt(getParamValue("x", e, t, a))
            ];
        case "square":
            return [
                _tfjsCore.square(getParamValue("x", e, t, a))
            ];
        case "tanh":
            return [
                _tfjsCore.tanh(getParamValue("x", e, t, a))
            ];
        case "tan":
            return [
                _tfjsCore.tan(getParamValue("x", e, t, a))
            ];
        case "clipByValue":
            return [
                _tfjsCore.clipByValue(getParamValue("x", e, t, a), getParamValue("clipValueMin", e, t, a), getParamValue("clipValueMax", e, t, a))
            ];
        case "rsqrt":
            return [
                _tfjsCore.div(_tfjsCore.scalar(1, "float32"), _tfjsCore.sqrt(getTensor(e.inputNames[0], t, a)))
            ];
        case "prod":
            return [
                _tfjsCore.prod(getParamValue("x", e, t, a), getParamValue("axes", e, t, a))
            ];
        case "leakyRelu":
            return [
                _tfjsCore.leakyRelu(getParamValue("x", e, t, a), getParamValue("alpha", e, t, a))
            ];
        default:
            throw TypeError("Node type " + e.op + " is not implemented");
    }
}, TensorArray = function() {
    function e55(t, a, r, n, o, s, i) {
        this.name = t, this.dtype = a, this.maxSize = r, this.elementShape = n, this.identicalElementShapes = o, this.dynamicSize = s, this.clearAfterRead = i, this.tensors = [], this.closed_ = !1, this.id = e55.nextId++;
    }
    return Object.defineProperty(e55.prototype, "closed", {
        get: function() {
            return this.closed_;
        },
        enumerable: !0,
        configurable: !0
    }), e55.prototype.clearAndClose = function() {
        this.tensors.forEach(function(e) {
            return e.tensor.dispose();
        }), this.tensors = [], this.closed_ = !0;
    }, e55.prototype.size = function() {
        return this.tensors.length;
    }, e55.prototype.read = function(e) {
        if (this.closed_) throw new Error("TensorArray " + this.name + " has already been closed.");
        if (e < 0 || e >= this.tensors.length) throw new Error("Tried to read from index " + e + ", but array size is: " + this.tensors.length);
        var t = this.tensors[e];
        if (t.cleared) throw new Error("TensorArray " + this.name + ": Could not read index " + e + " twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).");
        return this.clearAfterRead && (t.cleared = !0), t.read = !0, t.tensor;
    }, e55.prototype.readMany = function(e56) {
        var t = this;
        return e56.map(function(e) {
            return t.read(e);
        });
    }, e55.prototype.write = function(e, t) {
        if (this.closed_) throw new Error("TensorArray " + this.name + " has already been closed.");
        if (e < 0 || !this.dynamicSize && e >= this.maxSize) throw new Error("Tried to write to index " + e + ", but array is not resizeable and size is: " + this.maxSize);
        var a = this.tensors[e] || {
        };
        if (t.dtype !== this.dtype) throw new Error("TensorArray " + this.name + ": Could not write to TensorArray index " + e + ",\n          because the value dtype is " + t.dtype + ", but TensorArray dtype is " + this.dtype + ".");
        if (0 !== this.size() || null != this.elementShape && 0 !== this.elementShape.length || (this.elementShape = t.shape), this.assertShapesMatch(this.elementShape, t.shape, "TensorArray " + this.name + ": Could not write to TensorArray index " + e + "."), a && a.read) throw new Error("TensorArray " + this.name + ": Could not write to TensorArray index " + e + ", because it has already been read.");
        if (a && a.written) throw new Error("TensorArray " + this.name + ": Could not write to TensorArray index " + e + ", because it has already been written.");
        a.tensor = t, a.written = !0, this.tensors[e] = a;
    }, e55.prototype.writeMany = function(e57, t) {
        var a = this;
        if (e57.length !== t.length) throw new Error("TensorArray " + this.name + ": could not write multiple tensors,because the index size: " + e57.length + " is not the same as tensors size: " + t.length + ".");
        e57.forEach(function(e, r) {
            return a.write(e, t[r]);
        });
    }, e55.prototype.gather = function(e, t) {
        if (t && t !== this.dtype) throw new Error("TensorArray dtype is " + this.dtype + " but gather requested dtype " + t);
        if (!e) {
            e = [];
            for(var a = 0; a < this.size(); a++)e.push(a);
        }
        if (0 === e.length) return _tfjsCore.tensor([], [
            0
        ].concat(this.elementShape));
        var r = this.readMany(e);
        return this.assertShapesMatch(this.elementShape, r[0].shape, "TensorArray shape mismatch: "), _tfjsCore.stack(r, 0);
    }, e55.prototype.concat = function(e) {
        if (e && e !== this.dtype) throw new Error("TensorArray dtype is " + this.dtype + " but concat requested dtype " + e);
        if (0 === this.size()) return _tfjsCore.tensor([], [
            0
        ].concat(this.elementShape));
        for(var t = [], a = 0; a < this.size(); a++)t.push(a);
        var r = this.readMany(t);
        return this.assertShapesMatch(this.elementShape, r[0].shape, "TensorArray shape mismatch: tensor array shape (" + this.elementShape + ") vs first tensor shape (" + r[0].shape + ")"), _tfjsCore.concat(r, 0);
    }, e55.prototype.scatter = function(e, t) {
        if (t.dtype !== this.dtype) throw new Error("TensorArray dtype is " + this.dtype + " but tensor has dtype " + t.dtype);
        if (e.length !== t.shape[0]) throw new Error("Expected len(indices) == tensor.shape[0], but saw: " + e.length + " vs. " + t.shape[0]);
        var a = Math.max.apply(Math, e);
        if (!this.dynamicSize && a >= this.maxSize) throw new Error("Max index must be < array size (" + a + "  vs. " + this.maxSize + ")");
        this.writeMany(e, _tfjsCore.unstack(t, 0));
    }, e55.prototype.split = function(e58, t) {
        var a = this;
        if (t.dtype !== this.dtype) throw new Error("TensorArray dtype is " + this.dtype + " but tensor has dtype " + t.dtype);
        var r = 0, n = e58.map(function(e) {
            return r += e;
        });
        if (r !== t.shape[0]) throw new Error("Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        " + r + ", and tensor's shape is: " + t.shape);
        if (!this.dynamicSize && e58.length !== this.maxSize) throw new Error("TensorArray's size is not equal to the size of lengths (" + this.maxSize + " vs. " + e58.length + "), and the TensorArray is not marked as dynamically resizeable");
        var o = 0 === r ? 0 : t.size / r, s = [];
        _tfjsCore.tidy(function() {
            t = t.reshape([
                1,
                r,
                o
            ]);
            for(var i = 0; i < e58.length; ++i){
                var p = [
                    0,
                    0 === i ? 0 : n[i - 1],
                    0
                ], u = [
                    1,
                    e58[i],
                    o
                ];
                s[i] = _tfjsCore.slice(t, p, u).reshape(a.elementShape);
            }
            return s;
        });
        for(var i2 = [], p1 = 0; p1 < e58.length; p1++)i2[p1] = p1;
        this.writeMany(i2, s);
    }, e55.prototype.assertShapesMatch = function(e, t, a) {
        void 0 === a && (a = ""), _tfjsCore.util.assert(this.arraysEqual(e, t), a + " Shapes " + e + " and " + t + " must match");
    }, e55.prototype.arraysEqual = function(e, t) {
        if (e.length !== t.length) return !1;
        for(var a = 0; a < e.length; a++)if (-1 !== e[a] && -1 !== t[a] && e[a] !== t[a]) return !1;
        return !0;
    }, e55.nextId = 0, e55;
}();
function executeOp$2(e59, t, a) {
    return __awaiter(this, void 0, void 0, function() {
        var r, n, o, s, i, p, u, m, l, d, c, f, y, h, g, N, P, b, x, I, v, O, w, V, T, _, k, S, A, D, $, E, M, j, R;
        return __generator(this, function(L) {
            switch(L.label){
                case 0:
                    switch(e59.op){
                        case "loopCond":
                            return [
                                3,
                                1
                            ];
                        case "switch":
                            return [
                                3,
                                2
                            ];
                        case "merge":
                            return [
                                3,
                                4
                            ];
                        case "enter":
                            return [
                                3,
                                5
                            ];
                        case "exit":
                            return [
                                3,
                                6
                            ];
                        case "nextIteration":
                            return [
                                3,
                                7
                            ];
                        case "tensorArray":
                            return [
                                3,
                                8
                            ];
                        case "tensorArrayWrite":
                            return [
                                3,
                                9
                            ];
                        case "tensorArrayRead":
                            return [
                                3,
                                10
                            ];
                        case "tensorArrayGather":
                            return [
                                3,
                                11
                            ];
                        case "tensorArrayScatter":
                            return [
                                3,
                                12
                            ];
                        case "tensorArrayConcat":
                            return [
                                3,
                                13
                            ];
                        case "tensorArraySplit":
                            return [
                                3,
                                14
                            ];
                        case "tensorArraySize":
                            return [
                                3,
                                15
                            ];
                        case "tensorArrayClose":
                            return [
                                3,
                                16
                            ];
                    }
                    return [
                        3,
                        17
                    ];
                case 1:
                    return [
                        2,
                        [
                            getParamValue("pred", e59, t, a).clone()
                        ]
                    ];
                case 2:
                    return r = getParamValue("pred", e59, t, a), n = getParamValue("data", e59, t, a), [
                        4,
                        r.data()
                    ];
                case 3:
                    return [
                        2,
                        L.sent()[0] ? [
                            void 0,
                            n.clone()
                        ] : [
                            n.clone(),
                            void 0
                        ]
                    ];
                case 4:
                    return [
                        2,
                        (o = e59.inputNames.find(function(e) {
                            return void 0 !== getTensor(e, t, a);
                        })) ? [
                            getTensor(o, t, a).clone()
                        ] : void 0
                    ];
                case 5:
                    return s = getParamValue("frameName", e59, t, a), i = getParamValue("tensor", e59, t, a), a.enterFrame(s), [
                        2,
                        [
                            i.clone()
                        ]
                    ];
                case 6:
                    return p = getParamValue("tensor", e59, t, a), a.exitFrame(), [
                        2,
                        [
                            p.clone()
                        ]
                    ];
                case 7:
                    return u = getParamValue("tensor", e59, t, a), a.nextIteration(), [
                        2,
                        [
                            u.clone()
                        ]
                    ];
                case 8:
                    return m = getParamValue("size", e59, t, a), l = getParamValue("dtype", e59, t, a), d = getParamValue("elementShape", e59, t, a), c = getParamValue("dynamicSize", e59, t, a), f = getParamValue("clearAfterRead", e59, t, a), y = getParamValue("identicalElementShapes", e59, t, a), h = getParamValue("name", e59, t, a), g = new TensorArray(h, l, m, d, y, c, f), a.addTensorArray(g), [
                        2,
                        [
                            _tfjsCore.scalar(g.id),
                            _tfjsCore.scalar(1)
                        ]
                    ];
                case 9:
                    return N = getParamValue("tensorArrayId", e59, t, a), P = getParamValue("index", e59, t, a), b = getParamValue("tensor", e59, t, a), a.getTensorArray(N).write(P, b), [
                        2,
                        [
                            _tfjsCore.scalar(1)
                        ]
                    ];
                case 10:
                    return x = getParamValue("tensorArrayId", e59, t, a), I = getParamValue("index", e59, t, a), [
                        2,
                        [
                            a.getTensorArray(x).read(I)
                        ]
                    ];
                case 11:
                    return v = getParamValue("tensorArrayId", e59, t, a), O = getParamValue("indices", e59, t, a), w = getParamValue("dtype", e59, t, a), [
                        2,
                        [
                            a.getTensorArray(v).gather(O, w)
                        ]
                    ];
                case 12:
                    return V = getParamValue("tensorArrayId", e59, t, a), T = getParamValue("indices", e59, t, a), _ = getParamValue("tensor", e59, t, a), a.getTensorArray(V).scatter(T, _), [
                        2,
                        [
                            _tfjsCore.scalar(1)
                        ]
                    ];
                case 13:
                    return k = getParamValue("tensorArrayId", e59, t, a), S = a.getTensorArray(k), A = getParamValue("dtype", e59, t, a), [
                        2,
                        [
                            S.concat(A)
                        ]
                    ];
                case 14:
                    return D = getParamValue("tensorArrayId", e59, t, a), $ = getParamValue("tensor", e59, t, a), E = getParamValue("lengths", e59, t, a), a.getTensorArray(D).split(E, $), [
                        2,
                        [
                            _tfjsCore.scalar(1)
                        ]
                    ];
                case 15:
                    return M = getParamValue("tensorArrayId", e59, t, a), j = a.getTensorArray(M), [
                        2,
                        [
                            _tfjsCore.scalar(j.size(), "int32")
                        ]
                    ];
                case 16:
                    return R = getParamValue("tensorArrayId", e59, t, a), a.getTensorArray(R).clearAndClose(), [
                        2,
                        []
                    ];
                case 17:
                    throw TypeError("Node type " + e59.op + " is not implemented");
            }
        });
    });
}
var executeOp$3 = function(e, t, a) {
    switch(e.op){
        case "conv1d":
            var r = getParamValue("stride", e, t, a), n = getParamValue("pad", e, t, a), o = getParamValue("dataFormat", e, t, a).toUpperCase(), s = getParamValue("dilation", e, t, a);
            return [
                _tfjsCore.conv1d(getParamValue("x", e, t, a), getParamValue("filter", e, t, a), r, n, o, s)
            ];
        case "conv2d":
            r = getParamValue("strides", e, t, a), n = getParamValue("pad", e, t, a), o = getParamValue("dataFormat", e, t, a).toUpperCase();
            var i = getParamValue("dilations", e, t, a);
            return [
                _tfjsCore.conv2d(getParamValue("x", e, t, a), getParamValue("filter", e, t, a), [
                    r[1],
                    r[2]
                ], n, o, [
                    i[0],
                    i[1]
                ])
            ];
        case "conv2dTranspose":
            var p = getParamValue("outputShape", e, t, a);
            r = getParamValue("strides", e, t, a), n = getParamValue("pad", e, t, a);
            return [
                _tfjsCore.conv2dTranspose(getParamValue("x", e, t, a), getParamValue("filter", e, t, a), p, [
                    r[1],
                    r[2]
                ], n)
            ];
        case "depthwiseConv2d":
            r = getParamValue("strides", e, t, a), n = getParamValue("pad", e, t, a), i = getParamValue("dilations", e, t, a), o = getParamValue("dataFormat", e, t, a).toUpperCase();
            return [
                _tfjsCore.depthwiseConv2d(getParamValue("input", e, t, a), getParamValue("filter", e, t, a), [
                    r[1],
                    r[2]
                ], n, o, [
                    i[0],
                    i[1]
                ])
            ];
        case "avgPool":
            r = getParamValue("strides", e, t, a), n = getParamValue("pad", e, t, a);
            var u = getParamValue("kernelSize", e, t, a);
            return [
                _tfjsCore.avgPool(getParamValue("x", e, t, a), [
                    u[1],
                    u[2]
                ], [
                    r[1],
                    r[2]
                ], n)
            ];
        case "maxPool":
            r = getParamValue("strides", e, t, a), n = getParamValue("pad", e, t, a), u = getParamValue("kernelSize", e, t, a);
            return [
                _tfjsCore.maxPool(getParamValue("x", e, t, a), [
                    u[1],
                    u[2]
                ], [
                    r[1],
                    r[2]
                ], n)
            ];
        default:
            throw TypeError("Node type " + e.op + " is not implemented");
    }
}, executeOp$4 = function(e, t, a) {
    switch(e.op){
        case "fill":
            var r = getParamValue("shape", e, t, a), n = getParamValue("dtype", e, t, a), o = getParamValue("value", e, t, a);
            return [
                _tfjsCore.fill(r, o, n)
            ];
        case "linspace":
            var s = getParamValue("start", e, t, a), i = getParamValue("stop", e, t, a), p = getParamValue("num", e, t, a);
            return [
                _tfjsCore.linspace(s, i, p)
            ];
        case "oneHot":
            var u = getParamValue("indices", e, t, a), m = getParamValue("depth", e, t, a), l = getParamValue("onValue", e, t, a), d = getParamValue("offValue", e, t, a);
            return [
                _tfjsCore.oneHot(u, m, l, d)
            ];
        case "ones":
            return [
                _tfjsCore.ones(getParamValue("shape", e, t, a), getParamValue("dtype", e, t, a))
            ];
        case "onesLike":
            return [
                _tfjsCore.onesLike(getParamValue("x", e, t, a))
            ];
        case "randomUniform":
            return [
                _tfjsCore.randomUniform(getParamValue("shape", e, t, a), getParamValue("minval", e, t, a), getParamValue("maxval", e, t, a), getParamValue("dtype", e, t, a))
            ];
        case "range":
            s = getParamValue("start", e, t, a);
            var c = getParamValue("stop", e, t, a), f = getParamValue("step", e, t, a);
            return [
                _tfjsCore.range(s, c, f, getParamValue("dtype", e, t, a))
            ];
        case "truncatedNormal":
            r = getParamValue("shape", e, t, a);
            var y = getParamValue("mean", e, t, a), h = getParamValue("stdDev", e, t, a), g = getParamValue("seed", e, t, a);
            return [
                _tfjsCore.truncatedNormal(r, y, h, getParamValue("dtype", e, t, a), g)
            ];
        case "zeros":
            return [
                _tfjsCore.zeros(getParamValue("shape", e, t, a), getParamValue("dtype", e, t, a))
            ];
        case "zerosLike":
            return [
                _tfjsCore.zerosLike(getParamValue("x", e, t, a))
            ];
        default:
            throw TypeError("Node type " + e.op + " is not implemented");
    }
};
function executeOp$5(e, t, a) {
    return __awaiter(this, void 0, void 0, function() {
        var r, n, o, s, i;
        return __generator(this, function(p) {
            switch(p.label){
                case 0:
                    switch(e.op){
                        case "nonMaxSuppression":
                            return [
                                3,
                                1
                            ];
                        case "whereAsync":
                            return [
                                3,
                                3
                            ];
                        case "setdiff1dAsync":
                            return [
                                3,
                                5
                            ];
                    }
                    return [
                        3,
                        7
                    ];
                case 1:
                    return r = getParamValue("boxes", e, t, a), n = getParamValue("scores", e, t, a), o = getParamValue("maxOutputSize", e, t, a), s = getParamValue("iouThreshold", e, t, a), i = getParamValue("scoreThreshold", e, t, a), [
                        4,
                        _tfjsCore.image.nonMaxSuppressionAsync(r, n, o, s, i)
                    ];
                case 2:
                    return [
                        2,
                        [
                            p.sent()
                        ]
                    ];
                case 3:
                    return [
                        4,
                        _tfjsCore.whereAsync(getParamValue("condition", e, t, a))
                    ];
                case 4:
                    return [
                        2,
                        [
                            p.sent()
                        ]
                    ];
                case 5:
                    return [
                        4,
                        _tfjsCore.setdiff1dAsync(getParamValue("x", e, t, a), getParamValue("y", e, t, a))
                    ];
                case 6:
                    return [
                        2,
                        p.sent()
                    ];
                case 7:
                    throw TypeError("Node type " + e.op + " is not implemented");
            }
        });
    });
}
var executeOp$6 = function(e, t, a) {
    switch(e.op){
        case "topK":
            var r = getParamValue("x", e, t, a), n = getParamValue("k", e, t, a), o = getParamValue("sorted", e, t, a), s = _tfjsCore.topk(r, n, o);
            return [
                s.values,
                s.indices
            ];
        default:
            throw TypeError("Node type " + e.op + " is not implemented");
    }
}, executeOp$7 = function(e60, t, a) {
    switch(e60.op){
        case "const":
            return t[e60.name];
        case "placeholder":
            var r = getParamValue("default", e60, t, a);
            return [
                getTensor(e60.name, t, a) || r
            ];
        case "identity":
        case "stopGradient":
        case "fakeQuantWithMinMaxVars":
            return [
                getParamValue("x", e60, t, a).clone()
            ];
        case "snapshot":
            return [
                getParamValue("x", e60, t, a).clone()
            ];
        case "shape":
            return [
                _tfjsCore.tensor1d(getParamValue("x", e60, t, a).shape, "int32")
            ];
        case "shapeN":
            return getParamValue("x", e60, t, a).map(function(e) {
                return _tfjsCore.tensor1d(e.shape);
            });
        case "size":
            return [
                _tfjsCore.scalar(getParamValue("x", e60, t, a).size, "int32")
            ];
        case "rank":
            return [
                _tfjsCore.scalar(getParamValue("x", e60, t, a).rank, "int32")
            ];
        case "noop":
            return [];
        case "print":
            var n = getParamValue("x", e60, t, a), o = getParamValue("data", e60, t, a), s = getParamValue("message", e60, t, a), i = getParamValue("summarize", e60, t, a);
            console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."), console.log(s);
            for(var p = 0; p < o.length; p++)console.log(Array.prototype.slice.call(o[0].dataSync()).slice(0, i));
            return [
                n
            ];
        default:
            throw TypeError("Node type " + e60.op + " is not implemented");
    }
}, executeOp$8 = function(e, t, a) {
    switch(e.op){
        case "resizeBilinear":
            var r = getParamValue("images", e, t, a), n = getParamValue("size", e, t, a), o = getParamValue("alignCorners", e, t, a);
            return [
                _tfjsCore.image.resizeBilinear(r, [
                    n[0],
                    n[1]
                ], o)
            ];
        case "resizeNearestNeighbor":
            r = getParamValue("images", e, t, a), n = getParamValue("size", e, t, a), o = getParamValue("alignCorners", e, t, a);
            return [
                _tfjsCore.image.resizeNearestNeighbor(r, [
                    n[0],
                    n[1]
                ], o)
            ];
        case "cropAndResize":
            var s = getParamValue("image", e, t, a), i = getParamValue("boxes", e, t, a), p = getParamValue("boxInd", e, t, a), u = getParamValue("cropSize", e, t, a), m = getParamValue("method", e, t, a), l = getParamValue("extrapolationValue", e, t, a);
            return [
                _tfjsCore.image.cropAndResize(s, i, p, u, m, l)
            ];
        default:
            throw TypeError("Node type " + e.op + " is not implemented");
    }
}, executeOp$9 = function(e, t, a) {
    switch(e.op){
        case "equal":
            return [
                _tfjsCore.equal(getParamValue("a", e, t, a), getParamValue("b", e, t, a))
            ];
        case "notEqual":
            return [
                _tfjsCore.notEqual(getParamValue("a", e, t, a), getParamValue("b", e, t, a))
            ];
        case "greater":
            return [
                _tfjsCore.greater(getParamValue("a", e, t, a), getParamValue("b", e, t, a))
            ];
        case "greaterEqual":
            return [
                _tfjsCore.greaterEqual(getParamValue("a", e, t, a), getParamValue("b", e, t, a))
            ];
        case "less":
            return [
                _tfjsCore.less(getParamValue("a", e, t, a), getParamValue("b", e, t, a))
            ];
        case "lessEqual":
            return [
                _tfjsCore.lessEqual(getParamValue("a", e, t, a), getParamValue("b", e, t, a))
            ];
        case "logicalAnd":
            return [
                _tfjsCore.logicalAnd(getParamValue("a", e, t, a), getParamValue("b", e, t, a))
            ];
        case "logicalNot":
            return [
                _tfjsCore.logicalNot(getParamValue("a", e, t, a))
            ];
        case "logicalOr":
            return [
                _tfjsCore.logicalOr(getParamValue("a", e, t, a), getParamValue("b", e, t, a))
            ];
        case "where":
            return [
                _tfjsCore.where(getParamValue("condition", e, t, a), getParamValue("a", e, t, a), getParamValue("b", e, t, a))
            ];
        default:
            throw TypeError("Node type " + e.op + " is not implemented");
    }
}, executeOp$10 = function(e, t, a) {
    switch(e.op){
        case "matMul":
            return [
                _tfjsCore.matMul(getParamValue("a", e, t, a), getParamValue("b", e, t, a), getParamValue("transposeA", e, t, a), getParamValue("transposeB", e, t, a))
            ];
        case "transpose":
            return [
                _tfjsCore.transpose(getParamValue("x", e, t, a), getParamValue("perm", e, t, a))
            ];
        default:
            throw TypeError("Node type " + e.op + " is not implemented");
    }
}, executeOp$11 = function(e, t, a) {
    switch(e.op){
        case "batchNormalization":
            return [
                _tfjsCore.batchNorm(getParamValue("x", e, t, a), getParamValue("mean", e, t, a), getParamValue("variance", e, t, a), getParamValue("offset", e, t, a), getParamValue("scale", e, t, a), getParamValue("epsilon", e, t, a))
            ];
        case "localResponseNormalization":
            return [
                _tfjsCore.localResponseNormalization(getParamValue("x", e, t, a), getParamValue("radius", e, t, a), getParamValue("bias", e, t, a), getParamValue("alpha", e, t, a), getParamValue("beta", e, t, a))
            ];
        case "softmax":
            return [
                _tfjsCore.softmax(getParamValue("x", e, t, a))
            ];
        case "logSoftmax":
            return [
                _tfjsCore.logSoftmax(getParamValue("x", e, t, a))
            ];
        case "sparseToDense":
            return [
                _tfjsCore.sparseToDense(getParamValue("sparseIndices", e, t, a), getParamValue("outputShape", e, t, a), getParamValue("sparseValues", e, t, a), getParamValue("defaultValue", e, t, a))
            ];
        default:
            throw TypeError("Node type " + e.op + " is not implemented");
    }
}, executeOp$12 = function(e, t, a) {
    switch(e.op){
        case "max":
            var r = getParamValue("axis", e, t, a), n = getParamValue("keepDims", e, t, a);
            return [
                _tfjsCore.max(getParamValue("x", e, t, a), r, n)
            ];
        case "mean":
            r = getParamValue("axis", e, t, a), n = getParamValue("keepDims", e, t, a);
            return [
                _tfjsCore.mean(getParamValue("x", e, t, a), r, n)
            ];
        case "min":
            r = getParamValue("axis", e, t, a), n = getParamValue("keepDims", e, t, a);
            return [
                _tfjsCore.min(getParamValue("x", e, t, a), r, n)
            ];
        case "sum":
            r = getParamValue("axis", e, t, a), n = getParamValue("keepDims", e, t, a);
            return [
                _tfjsCore.sum(getParamValue("x", e, t, a), r, n)
            ];
        case "all":
            r = getParamValue("axis", e, t, a), n = getParamValue("keepDims", e, t, a);
            return [
                _tfjsCore.all(getParamValue("x", e, t, a), r, n)
            ];
        case "any":
            r = getParamValue("axis", e, t, a), n = getParamValue("keepDims", e, t, a);
            return [
                _tfjsCore.any(getParamValue("x", e, t, a), r, n)
            ];
        case "argMax":
            r = getParamValue("axis", e, t, a);
            return [
                _tfjsCore.argMax(getParamValue("x", e, t, a), r)
            ];
        case "argMin":
            r = getParamValue("axis", e, t, a);
            return [
                _tfjsCore.argMin(getParamValue("x", e, t, a), r)
            ];
        case "prod":
            r = getParamValue("axis", e, t, a), n = getParamValue("keepDims", e, t, a);
            return [
                _tfjsCore.prod(getParamValue("x", e, t, a), r, n)
            ];
        default:
            throw TypeError("Node type " + e.op + " is not implemented");
    }
}, executeOp$13 = function(e61, t15, a) {
    switch(e61.op){
        case "concat":
            var r6 = getParamValue("axis", e61, t15, a), n4 = getParamValue("tensors", e61, t15, a);
            return [
                _tfjsCore.concat(n4, r6)
            ];
        case "gather":
            r6 = getParamValue("axis", e61, t15, a);
            var o4 = getParamValue("x", e61, t15, a), s2 = getParamValue("indices", e61, t15, a);
            return [
                _tfjsCore.gather(o4, s2, r6)
            ];
        case "reverse":
            r6 = getParamValue("axis", e61, t15, a), o4 = getParamValue("x", e61, t15, a);
            return [
                _tfjsCore.reverse(o4, r6)
            ];
        case "slice":
            var i3 = getParamValue("begin", e61, t15, a), p = getParamValue("size", e61, t15, a);
            return [
                _tfjsCore.slice(getParamValue("x", e61, t15, a), i3, p)
            ];
        case "stridedSlice":
            i3 = getParamValue("begin", e61, t15, a);
            var u = getParamValue("end", e61, t15, a), m = getParamValue("strides", e61, t15, a), l = getParamValue("beginMask", e61, t15, a), d = getParamValue("endMask", e61, t15, a), c = getParamValue("ellipsisMask", e61, t15, a), f = getParamValue("newAxisMask", e61, t15, a), y = getParamValue("shrinkAxisMask", e61, t15, a), h = getParamValue("x", e61, t15, a);
            if (1 === i3.length && h.shape.length > 1) for(var g = 1; g < h.shape.length; g++)i3.push(0), u.push(h.shape[g]), m.push(m[0]);
            return [
                _tfjsCore.stridedSlice(h, i3, u, m, l, d, c, f, y)
            ];
        case "stack":
            return _tfjsCore.tidy(function() {
                var r = getParamValue("axis", e61, t15, a), n = getParamValue("tensors", e61, t15, a), o = n[0].shape, s = n[0].squeeze().shape, i = n.map(function(e) {
                    var t = _tfjsCore.util.arraysEqual(e.shape, o);
                    if (!t && !_tfjsCore.util.arraysEqual(e.squeeze().shape, s)) throw new Error("the input tensors shape does not match");
                    return t ? e : e.reshape(o);
                });
                return [
                    _tfjsCore.stack(i, r)
                ];
            });
        case "unstack":
            return _tfjsCore.tidy(function() {
                var r = getParamValue("axis", e61, t15, a), n = getParamValue("tensor", e61, t15, a);
                return _tfjsCore.unstack(n, r);
            });
        case "tile":
            var N = getParamValue("reps", e61, t15, a);
            return [
                _tfjsCore.tile(getParamValue("x", e61, t15, a), N)
            ];
        case "split":
            r6 = getParamValue("axis", e61, t15, a);
            var P = getParamValue("numOrSizeSplits", e61, t15, a);
            return _tfjsCore.split(getParamValue("x", e61, t15, a), P, r6);
        case "scatterNd":
            s2 = getParamValue("indices", e61, t15, a);
            var b = getParamValue("values", e61, t15, a), x = getParamValue("shape", e61, t15, a);
            return [
                _tfjsCore.scatterND(s2, b, x)
            ];
        case "gatherNd":
            var I = getParamValue("x", e61, t15, a);
            s2 = getParamValue("indices", e61, t15, a);
            return [
                _tfjsCore.gatherND(I, s2)
            ];
        case "sparseToDense":
            s2 = getParamValue("sparseIndices", e61, t15, a), x = getParamValue("outputShape", e61, t15, a);
            var v = getParamValue("sparseValues", e61, t15, a), O = getParamValue("defaultValue", e61, t15, a);
            return [
                _tfjsCore.sparseToDense(s2, v, x, O)
            ];
        default:
            throw TypeError("Node type " + e61.op + " is not implemented");
    }
}, executeOp$14 = function(e, t, a) {
    switch(e.op){
        case "fft":
            return [
                _tfjsCore.fft(getParamValue("x", e, t, a))
            ];
        case "ifft":
            return [
                _tfjsCore.ifft(getParamValue("x", e, t, a))
            ];
        case "rfft":
            return [
                _tfjsCore.rfft(getParamValue("x", e, t, a))
            ];
        case "irfft":
            return [
                _tfjsCore.irfft(getParamValue("x", e, t, a))
            ];
        default:
            throw TypeError("Node type " + e.op + " is not implemented");
    }
}, executeOp$15 = function(e, t, a) {
    switch(e.op){
        case "cast":
            return [
                _tfjsCore.cast(getParamValue("x", e, t, a), getParamValue("dtype", e, t, a))
            ];
        case "expandDims":
            var r = getParamValue("axis", e, t, a);
            return [
                _tfjsCore.expandDims(getParamValue("x", e, t, a), r)
            ];
        case "squeeze":
            r = getParamValue("axis", e, t, a);
            return [
                _tfjsCore.squeeze(getParamValue("x", e, t, a), r)
            ];
        case "reshape":
            return [
                _tfjsCore.reshape(getParamValue("x", e, t, a), getParamValue("shape", e, t, a))
            ];
        case "pad":
            return [
                _tfjsCore.pad(getParamValue("x", e, t, a), split$1(getParamValue("padding", e, t, a), 2), getParamValue("constantValue", e, t, a))
            ];
        case "spaceToBatchND":
            var n = getParamValue("blockShape", e, t, a), o = split$1(getParamValue("paddings", e, t, a), 2);
            return [
                _tfjsCore.spaceToBatchND(getParamValue("x", e, t, a), n, o)
            ];
        case "batchToSpaceND":
            n = getParamValue("blockShape", e, t, a);
            var s = split$1(getParamValue("crops", e, t, a), 2);
            return [
                _tfjsCore.batchToSpaceND(getParamValue("x", e, t, a), n, s)
            ];
        case "depthToSpace":
            var i = getParamValue("blockSize", e, t, a), p = getParamValue("dataFormat", e, t, a).toUpperCase();
            return [
                _tfjsCore.depthToSpace(getParamValue("x", e, t, a), i, p)
            ];
        default:
            throw TypeError("Node type " + e.op + " is not implemented");
    }
};
function executeOp$16(e, t, a) {
    switch(e.category){
        case "arithmetic":
            return executeOp(e, t, a);
        case "basic_math":
            return executeOp$1(e, t, a);
        case "control":
            return executeOp$2(e, t, a);
        case "convolution":
            return executeOp$3(e, t, a);
        case "creation":
            return executeOp$4(e, t, a);
        case "dynamic":
            return executeOp$5(e, t, a);
        case "evaluation":
            return executeOp$6(e, t, a);
        case "image":
            return executeOp$8(e, t, a);
        case "graph":
            return executeOp$7(e, t, a);
        case "logical":
            return executeOp$9(e, t, a);
        case "matrices":
            return executeOp$10(e, t, a);
        case "normalization":
            return executeOp$11(e, t, a);
        case "reduction":
            return executeOp$12(e, t, a);
        case "slice_join":
            return executeOp$13(e, t, a);
        case "spectral":
            return executeOp$14(e, t, a);
        case "transformation":
            return executeOp$15(e, t, a);
        default:
            throw TypeError("Node type " + e.op + " is not implemented");
    }
}
var ExecutionContext = function() {
    function e62(e, t) {
        this.weightMap = e, this.tensorArrayMap = t, this.rootContext = {
            id: 0,
            frameName: "",
            iterationId: 0
        }, this.contexts = [
            this.rootContext
        ], this.lastId = 0, this.generateCurrentContextIds();
    }
    return e62.prototype.newFrame = function(e, t) {
        return {
            id: e,
            frameName: t,
            iterationId: 0
        };
    }, Object.defineProperty(e62.prototype, "currentContext", {
        get: function() {
            return this.contexts;
        },
        set: function(e) {
            this.contexts !== e && (this.contexts = e, this.generateCurrentContextIds());
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e62.prototype, "currentContextId", {
        get: function() {
            return this._currentContextIds[0];
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e62.prototype, "currentContextIds", {
        get: function() {
            return this._currentContextIds;
        },
        enumerable: !0,
        configurable: !0
    }), e62.prototype.generateCurrentContextIds = function() {
        for(var e = [], t = 0; t < this.contexts.length - 1; t++){
            var a = this.contexts.slice(0, this.contexts.length - t);
            e.push(this.contextIdforContexts(a));
        }
        e.push(""), this._currentContextIds = e;
    }, e62.prototype.contextIdforContexts = function(e63) {
        return e63 ? e63.map(function(e) {
            return 0 === e.id && 0 === e.iterationId ? "" : e.frameName + "-" + e.iterationId;
        }).join("/") : "";
    }, e62.prototype.enterFrame = function(e) {
        this.contexts && (this.lastId++, this.contexts = this.contexts.slice(), this.contexts.push(this.newFrame(this.lastId, e)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));
    }, e62.prototype.exitFrame = function() {
        if (!(this.contexts && this.contexts.length > 1)) throw new Error("Cannot exit frame, the context is empty");
        this.contexts = this.contexts.slice(), this.contexts.splice(-1), this.currentContextIds.shift();
    }, e62.prototype.nextIteration = function() {
        if (!(this.contexts && this.contexts.length > 0)) throw new Error("Cannot increase frame iteration, the context is empty");
        this.contexts = this.contexts.slice(), this.lastId++;
        var e = Object.assign({
        }, this.contexts[this.contexts.length - 1]);
        e.iterationId += 1, e.id = this.lastId, this.contexts.splice(-1, 1, e), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
    }, e62.prototype.getWeight = function(e) {
        return this.weightMap[e];
    }, e62.prototype.addTensorArray = function(e) {
        this.tensorArrayMap[e.id] = e;
    }, e62.prototype.getTensorArray = function(e) {
        return this.tensorArrayMap[e];
    }, e62;
}(), GraphExecutor = function() {
    function e64(e) {
        this.graph = e, this.compiledMap = new Map, this._weightMap = {
        }, this.SEPERATOR = ",", this.placeholders = e.placeholders, this._outputs = e.outputs, this.compile();
    }
    return Object.defineProperty(e64.prototype, "weightMap", {
        get: function() {
            return this._weightMap;
        },
        set: function(e65) {
            var t = Object.keys(e65).map(function(t) {
                return e65[t].map(function(e) {
                    return e.id;
                });
            });
            this.weightIds = [].concat.apply([], t), this._weightMap = e65;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e64.prototype, "inputs", {
        get: function() {
            return this.placeholders.map(function(e) {
                return {
                    name: e.name,
                    shape: e.params.shape ? e.params.shape.value : void 0,
                    dtype: e.params.dtype ? e.params.dtype.value : void 0
                };
            });
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e64.prototype, "outputs", {
        get: function() {
            return this._outputs.map(function(e) {
                return {
                    name: e.name,
                    shape: e.params.shape ? e.params.shape.value : void 0,
                    dtype: e.params.dtype ? e.params.dtype.value : void 0
                };
            });
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e64.prototype, "inputNodes", {
        get: function() {
            return this.placeholders.map(function(e) {
                return e.name;
            });
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e64.prototype, "outputNodes", {
        get: function() {
            return this.outputs.map(function(e) {
                return e.name;
            });
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e64.prototype, "isControlFlowModel", {
        get: function() {
            return this.graph.withControlFlow;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e64.prototype, "isDynamicShapeModel", {
        get: function() {
            return this.graph.withDynamicShape;
        },
        enumerable: !0,
        configurable: !0
    }), e64.prototype.compile = function(e66) {
        if (!this.graph.withControlFlow && !this.graph.withDynamicShape) {
            var t = [], a = e66 || this.graph.placeholders, r = a.map(function(e) {
                return e.name;
            }).sort().join(this.SEPERATOR);
            if (!this.compiledMap.get(r)) {
                for(var n = a.concat(this.graph.weights), o = {
                }; n.length > 0;){
                    var s = n.pop();
                    o[s.name] = !0, t.push(s), s.children.forEach(function(e67) {
                        !o[e67.name] && e67.inputNames.every(function(e) {
                            var t = getNodeNameAndIndex(e)[0];
                            return o[t];
                        }) && n.push(e67);
                    });
                }
                this.compiledMap.set(r, t);
            }
        }
    }, e64.prototype.execute = function(e, t16, a13) {
        var r = this;
        void 0 === t16 && (t16 = !0);
        var n = Object.keys(e).sort();
        this.checkInput(e, t16), this.checkInputShapeAndType(e, t16), this.compile(n.map(function(e) {
            return r.graph.nodes[e];
        }));
        var o = this.calculateOutputs(a13);
        this.checkOutput(this.compiledMap.get(n.join(this.SEPERATOR)), o);
        var s = {
        };
        return _tfjsCore.tidy(function() {
            for(var t = new ExecutionContext(r._weightMap, s), a = __assign({
            }, r.weightMap, e), i = r.getFrozenTensorIds(a), p = {
            }, u = r.compiledMap.get(n.join(r.SEPERATOR)), m = 0; m < u.length; m++){
                var l = u[m];
                if (a[l.name] || (a[l.name] = executeOp$16(l, a, t), r.checkTensorForDisposal(l.name, l, a, t, i, o, p)), o.every(function(e) {
                    return !!a[e];
                })) break;
            }
            return r.findOutputs(a, t, o);
        });
    }, e64.prototype.getFrozenTensorIds = function(e68) {
        var t = [].concat.apply([], Object.keys(e68).map(function(t) {
            return e68[t];
        }).map(function(e69) {
            return e69.map(function(e) {
                return e.id;
            });
        }));
        return new Set(t);
    }, e64.prototype.checkTensorForDisposal = function(e70, t17, a, r, n, o, s) {
        "control" !== t17.category && -1 === o.indexOf(e70) && (a[e70].forEach(function(e) {
            null != e && (s[e.id] = (s[e.id] || 0) + t17.children.length);
        }), t17.inputs.forEach(function(e71) {
            if ("control" !== e71.category) {
                var t18 = getTensorsForCurrentContenxt(e71.name, a, r);
                null != t18 && t18.forEach(function(e) {
                    if (e && !n.has(e.id)) {
                        var t = s[e.id];
                        1 === t ? (e.dispose(), delete s[e.id]) : null != t && s[e.id]--;
                    }
                });
            }
        }));
    }, e64.prototype.executeAsync = function(e72, t) {
        return __awaiter(this, void 0, void 0, function() {
            var a, r, n, o, s, i, p, u, m = this;
            return __generator(this, function(l) {
                switch(l.label){
                    case 0:
                        return this.checkInput(e72, !1), this.checkInputShapeAndType(e72, !1), a = {
                        }, r = new ExecutionContext(this._weightMap, a), n = this.calculateOutputs(t), [
                            4,
                            this.executeWithControlFlow(e72, r, n)
                        ];
                    case 1:
                        return o = l.sent(), s = this.findOutputs(o, r, t), i = Object.keys(s).map(function(e) {
                            return s[e].id;
                        }), p = Object.keys(e72).map(function(t) {
                            return e72[t].map(function(e) {
                                return e.id;
                            });
                        }), u = [].concat.apply([], p), Object.keys(o).forEach(function(e73) {
                            o[e73].forEach(function(e) {
                                e && -1 === i.indexOf(e.id) && -1 === u.indexOf(e.id) && -1 === m.weightIds.indexOf(e.id) && e.dispose();
                            });
                        }), [
                            2,
                            s
                        ];
                }
            });
        });
    }, e64.prototype.executeWithControlFlow = function(e74, t, a) {
        return __awaiter(this, void 0, void 0, function() {
            var r, n, o, s, i, p, u, m, l = this;
            return __generator(this, function(d) {
                switch(d.label){
                    case 0:
                        r = Object.keys(e74), n = r.map(function(e) {
                            return l.graph.nodes[e];
                        }), o = n.concat(this.graph.weights).map(function(e) {
                            return {
                                node: e,
                                contexts: t.currentContext
                            };
                        }), s = __assign({
                        }, this.weightMap, e74), i = {
                        }, p = this.getFrozenTensorIds(s), u = {
                        }, d.label = 1;
                    case 1:
                        return o.length > 0 ? (m = this.processStack(n, o, t, s, u, p, a, i), [
                            4,
                            Promise.all(m)
                        ]) : [
                            3,
                            3
                        ];
                    case 2:
                        return d.sent(), [
                            3,
                            1
                        ];
                    case 3:
                        return [
                            2,
                            s
                        ];
                }
            });
        });
    }, e64.prototype.processStack = function(e75, t, a, r, n, o, s, i) {
        for(var p = this, u = [], m1 = function() {
            var m = t.pop();
            a.currentContext = m.contexts;
            var d = "";
            if ("enter" === m.node.op && getParamValue("isConstant", m.node, r, a) && (d = getNodeNameAndIndex(m.node.name, a)[0]), -1 === e75.indexOf(m.node)) {
                var c = executeOp$16(m.node, r, a);
                d || (d = getNodeNameAndIndex(m.node.name, a)[0]);
                var f = a.currentContext;
                c instanceof Promise ? u.push(c.then(function(e) {
                    return r[d] = e, a.currentContext = f, p.checkTensorForDisposal(d, m.node, r, a, o, s, i), p.processChildNodes(m.node, t, a, r, n), e;
                })) : (r[d] = c, l.checkTensorForDisposal(d, m.node, r, a, o, s, i), l.processChildNodes(m.node, t, a, r, n));
            } else l.processChildNodes(m.node, t, a, r, n);
        }, l = this; t.length > 0;)m1();
        return u;
    }, e64.prototype.processChildNodes = function(e76, t, a, r, n) {
        e76.children.forEach(function(e77) {
            var o = getNodeNameAndIndex(e77.name, a)[0];
            n[o] || ("merge" === e77.op ? e77.inputNames.some(function(e) {
                return !!getTensor(e, r, a);
            }) && (n[o] = !0, t.push({
                contexts: a.currentContext,
                node: e77
            })) : e77.inputNames.every(function(e) {
                return !!getTensor(e, r, a);
            }) && (n[o] = !0, t.push({
                contexts: a.currentContext,
                node: e77
            })));
        });
    }, e64.prototype.calculateOutputs = function(e78) {
        return !e78 || e78 instanceof Array || (e78 = [
            e78
        ]), e78 || this.graph.outputs.map(function(e) {
            return e.name;
        });
    }, e64.prototype.findOutputs = function(e, t, a14) {
        return this.calculateOutputs(a14).reduce(function(a, r) {
            return a[r] = getTensor(r, e, t), a;
        }, {
        });
    }, e64.prototype.dispose = function() {
        var e79 = this;
        Object.keys(this.weightMap).forEach(function(t) {
            return e79.weightMap[t].forEach(function(e) {
                return e.dispose();
            });
        });
    }, e64.prototype.checkInputShapeAndType = function(e80, t) {
        void 0 === t && (t = !0), this.placeholders.forEach(function(a) {
            var r = e80[a.name];
            if (t || r) {
                var n = r[0];
                if (a.params.shape && a.params.shape.value) {
                    var o = a.params.shape.value, s = o.length === n.shape.length && n.shape.every(function(e, t) {
                        return -1 === o[t] || o[t] === e;
                    });
                    _tfjsCore.util.assert(s, "The shape of dict['" + a.name + "'] provided in model.execute(dict) must be [" + o + "], but was [" + n.shape + "]");
                }
                a.params.dtype && a.params.dtype.value && _tfjsCore.util.assert(n.dtype === a.params.dtype.value, "The dtype of dict['" + a.name + "'] provided in model.execute(dict) must be " + a.params.dtype.value + ", but was " + n.dtype);
            }
        });
    }, e64.prototype.checkInput = function(e81, t) {
        var a = this;
        void 0 === t && (t = !0);
        var r = Object.keys(e81), n = [], o = [];
        this.inputNodes.forEach(function(e) {
            -1 === r.indexOf(e) && n.push(e);
        }), r.forEach(function(e) {
            -1 === a.inputNodes.indexOf(e) && o.push(e);
        });
        var s = o.filter(function(e) {
            return !a.graph.nodes[e];
        });
        if (n.length > 0 && t) throw new Error("The dict provided in model.execute(dict) has the keys [" + r + "], but is missing the required keys: [" + n + "].");
        if (o.length > 0 && t) throw new Error("The dict provided in model.execute(dict) has unused keys: [" + o + "]. Please provide only the following keys: [" + this.inputNodes + "].");
        if (s.length > 0) throw new Error("The dict provided in model.execute(dict) has keys: [" + s + "] not part of model graph.");
    }, e64.prototype.checkOutput = function(e82, t20) {
        var a = e82.map(function(e) {
            return e.name;
        }), r = [];
        if (t20.forEach(function(e) {
            var t = parseNodeName(e)[0];
            -1 === a.indexOf(t) && r.push(t);
        }), r.length > 0) throw new Error("The following outputs are not generated by the execution: [" + r + "].");
    }, e64;
}(), TFHUB_SEARCH_PARAM = "?tfjs-format=file", DEFAULT_MODEL_NAME = "tensorflowjs_model.pb", DEFAULT_MANIFEST_NAME = "weights_manifest.json", FrozenModel = function() {
    function e83(e, t, a, r, n) {
        this.modelUrl = e, this.weightManifestUrl = t, this.requestOption = a, this.weightPrefix = r, this.onProgress = n, this.version = "n/a";
    }
    return Object.defineProperty(e83.prototype, "modelVersion", {
        get: function() {
            return this.version;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e83.prototype, "inputNodes", {
        get: function() {
            return this.executor.inputNodes;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e83.prototype, "outputNodes", {
        get: function() {
            return this.executor.outputNodes;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e83.prototype, "inputs", {
        get: function() {
            return this.executor.inputs;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e83.prototype, "outputs", {
        get: function() {
            return this.executor.outputs;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e83.prototype, "weights", {
        get: function() {
            return this.executor.weightMap;
        },
        enumerable: !0,
        configurable: !0
    }), e83.prototype.findIOHandler = function() {
        var e = [
            this.modelUrl,
            this.weightManifestUrl
        ];
        if (this.requestOption || this.weightPrefix) this.handler = _tfjsCore.io.browserHTTPRequest(e, this.requestOption, this.weightPrefix, null, this.onProgress);
        else {
            var t = _tfjsCore.io.getLoadHandlers(e, this.onProgress);
            if (0 === t.length) t.push(_tfjsCore.io.browserHTTPRequest(e, this.requestOption, this.weightPrefix, null, this.onProgress));
            else if (t.length > 1) throw new Error("Found more than one (" + t.length + ") load handlers for URL '" + [
                e
            ] + "'");
            this.handler = t[0];
        }
    }, e83.prototype.load = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e, t, a;
            return __generator(this, function(r) {
                switch(r.label){
                    case 0:
                        if (this.findIOHandler(), null == this.handler.load) throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
                        return [
                            4,
                            this.handler.load()
                        ];
                    case 1:
                        return e = r.sent(), t = compiled_api_1.GraphDef.decode(new Uint8Array(e.modelTopology)), this.version = t.versions.producer + "." + t.versions.minConsumer, a = _tfjsCore.io.decodeWeights(e.weightData, e.weightSpecs), this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(t)), this.executor.weightMap = this.convertTensorMapToTensorsMap(a), [
                            2,
                            !0
                        ];
                }
            });
        });
    }, e83.prototype.predict = function(e, t) {
        return this.execute_(e, !0, this.outputNodes);
    }, e83.prototype.constructTensorMap = function(e84) {
        var t = e84 instanceof _tfjsCore.Tensor ? [
            e84
        ] : e84;
        if (t.length !== this.inputNodes.length) throw new Error("Input tensor count mismatch,the frozen model has " + this.inputNodes.length + " placeholders, while there are " + t.length + " input tensors.");
        return this.inputNodes.reduce(function(e, a, r) {
            return e[a] = t[r], e;
        }, {
        });
    }, e83.prototype.execute = function(e, t) {
        return this.execute_(e, !1, t);
    }, e83.prototype.execute_ = function(e, t, a) {
        if (void 0 === t && (t = !0), a = a || this.outputNodes, (e instanceof _tfjsCore.Tensor || Array.isArray(e)) && (e = this.constructTensorMap(e)), this.executor.isControlFlowModel || this.executor.isDynamicShapeModel) throw new Error("The model contains control flow or dynamic shape ops, please use executeAsync method");
        var r = this.executor.execute(this.convertTensorMapToTensorsMap(e), t, a), n = Object.keys(r);
        return Array.isArray(a) && a.length > 1 ? a.map(function(e) {
            return r[e];
        }) : r[n[0]];
    }, e83.prototype.executeAsync = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            var a, r;
            return __generator(this, function(n) {
                switch(n.label){
                    case 0:
                        if (!this.executor.isControlFlowModel && !this.executor.isDynamicShapeModel) throw new Error("The model does not contain control flow or dynamic shape ops, please use execute method for better performance.");
                        return t = t || this.outputNodes, (e instanceof _tfjsCore.Tensor || Array.isArray(e)) && (e = this.constructTensorMap(e)), [
                            4,
                            this.executor.executeAsync(this.convertTensorMapToTensorsMap(e), t)
                        ];
                    case 1:
                        return a = n.sent(), r = Object.keys(a), [
                            2,
                            Array.isArray(t) && t.length > 1 ? t.map(function(e) {
                                return a[e];
                            }) : a[r[0]]
                        ];
                }
            });
        });
    }, e83.prototype.convertTensorMapToTensorsMap = function(e) {
        return Object.keys(e).reduce(function(t, a) {
            return t[a] = [
                e[a]
            ], t;
        }, {
        });
    }, e83.prototype.dispose = function() {
        this.executor.dispose();
    }, e83;
}(), tensorflow_json;
function loadFrozenModel(e, t, a, r) {
    return __awaiter(this, void 0, void 0, function() {
        var n;
        return __generator(this, function(o) {
            switch(o.label){
                case 0:
                    return [
                        4,
                        (n = new FrozenModel(e, t, a, null, r)).load()
                    ];
                case 1:
                    return o.sent(), [
                        2,
                        n
                    ];
            }
        });
    });
}
function loadTfHubModule(e, t, a) {
    return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(r) {
            return e.endsWith("/") || (e += "/"), [
                2,
                loadFrozenModel("" + e + DEFAULT_MODEL_NAME + TFHUB_SEARCH_PARAM, "" + e + DEFAULT_MANIFEST_NAME + TFHUB_SEARCH_PARAM, t, a)
            ];
        });
    });
}
!function(e85) {
    !function(e) {
        e[e.DT_INVALID = 0] = "DT_INVALID", e[e.DT_FLOAT = 1] = "DT_FLOAT", e[e.DT_DOUBLE = 2] = "DT_DOUBLE", e[e.DT_INT32 = 3] = "DT_INT32", e[e.DT_UINT8 = 4] = "DT_UINT8", e[e.DT_INT16 = 5] = "DT_INT16", e[e.DT_INT8 = 6] = "DT_INT8", e[e.DT_STRING = 7] = "DT_STRING", e[e.DT_COMPLEX64 = 8] = "DT_COMPLEX64", e[e.DT_INT64 = 9] = "DT_INT64", e[e.DT_BOOL = 10] = "DT_BOOL", e[e.DT_QINT8 = 11] = "DT_QINT8", e[e.DT_QUINT8 = 12] = "DT_QUINT8", e[e.DT_QINT32 = 13] = "DT_QINT32", e[e.DT_BFLOAT16 = 14] = "DT_BFLOAT16", e[e.DT_FLOAT_REF = 101] = "DT_FLOAT_REF", e[e.DT_DOUBLE_REF = 102] = "DT_DOUBLE_REF", e[e.DT_INT32_REF = 103] = "DT_INT32_REF", e[e.DT_UINT8_REF = 104] = "DT_UINT8_REF", e[e.DT_INT16_REF = 105] = "DT_INT16_REF", e[e.DT_INT8_REF = 106] = "DT_INT8_REF", e[e.DT_STRING_REF = 107] = "DT_STRING_REF", e[e.DT_COMPLEX64_REF = 108] = "DT_COMPLEX64_REF", e[e.DT_INT64_REF = 109] = "DT_INT64_REF", e[e.DT_BOOL_REF = 110] = "DT_BOOL_REF", e[e.DT_QINT8_REF = 111] = "DT_QINT8_REF", e[e.DT_QUINT8_REF = 112] = "DT_QUINT8_REF", e[e.DT_QINT32_REF = 113] = "DT_QINT32_REF", e[e.DT_BFLOAT16_REF = 114] = "DT_BFLOAT16_REF";
    }(e85.DataType || (e85.DataType = {
    })), (function(e86) {
        !function(e) {
            e[e.LEGACY = 0] = "LEGACY", e[e.V1 = 1] = "V1", e[e.V2 = 2] = "V2";
        }(e86.CheckpointFormatVersion || (e86.CheckpointFormatVersion = {
        }));
    })(e85.SaverDef || (e85.SaverDef = {
    }));
}(tensorflow_json || (tensorflow_json = {
}));
var CONTROL_FLOW_OPS$1 = [
    "Switch",
    "Merge",
    "Enter",
    "Exit",
    "NextIteration"
], DYNAMIC_SHAPE_OPS$1 = [
    "NonMaxSuppressionV2",
    "NonMaxSuppressionV3",
    "Where"
], OperationMapper$1 = function() {
    function e87() {
        var e88 = [
            arithmetic,
            basicMath,
            control,
            convolution,
            creation,
            dynamic,
            evaluation,
            logical,
            image$1,
            graph,
            matrices,
            normalization,
            reduction,
            sliceJoin,
            spectral,
            transformation
        ], t21 = [].concat.apply([], e88.map(function(e) {
            return e.json;
        }));
        this.opMappers = t21.reduce(function(e, t) {
            return e[t.tfOpName] = t, e;
        }, {
        });
    }
    return Object.defineProperty(e87, "Instance", {
        get: function() {
            return this._instance || (this._instance = new this);
        },
        enumerable: !0,
        configurable: !0
    }), e87.prototype.isControlFlow = function(e) {
        return CONTROL_FLOW_OPS$1.some(function(t) {
            return t === e.op;
        });
    }, e87.prototype.isDynamicShape = function(e) {
        return DYNAMIC_SHAPE_OPS$1.some(function(t) {
            return t === e.op;
        });
    }, e87.prototype.transformGraph = function(e89) {
        var t22 = this, a = !1, r = !1, n = [], o = [], s3 = e89.node.reduce(function(e, s) {
            return e[s.name] = t22.mapNode(s), t22.isControlFlow(s) && (a = !0), t22.isDynamicShape(s) && (r = !0), "Placeholder" === s.op && n.push(e[s.name]), "Const" === s.op && o.push(e[s.name]), e;
        }, {
        }), i = [], p = [];
        return Object.keys(s3).forEach(function(e90) {
            var t = s3[e90];
            t.inputNames.forEach(function(e) {
                var a = getNodeNameAndIndex(e)[0];
                t.inputs.push(s3[a]), s3[a].children.push(t);
            }), 0 === t.inputs.length && i.push(t);
        }), Object.keys(s3).forEach(function(e) {
            var t = s3[e];
            0 === t.children.length && p.push(t);
        }), {
            nodes: s3,
            inputs: i,
            outputs: p,
            weights: o,
            placeholders: n,
            withControlFlow: a,
            withDynamicShape: r
        };
    }, e87.prototype.mapNode = function(e91) {
        var t = this, a15 = this.opMappers[e91.op];
        if (void 0 === a15) throw new Error("Tensorflow Op is not supported: " + e91.op);
        var r7 = {
            name: e91.name,
            op: a15.dlOpName,
            category: a15.category,
            inputNames: (e91.input || []).map(function(e) {
                return e.startsWith("^") ? e.substr(1) : e;
            }),
            inputs: [],
            children: [],
            params: {
            }
        };
        return a15.params && (r7.params = a15.params.reduce(function(a, r) {
            var n = r.tfInputIndex, o = r.tfInputParamLength, s = r.type, i = void 0;
            if (void 0 === n) switch(r.type){
                case "string":
                    void 0 === (i = t.getStringParam(e91.attr, r.tfParamName, r.defaultValue)) && r.tfParamNameDeprecated && (i = t.getStringParam(e91.attr, r.tfParamNameDeprecated, r.defaultValue));
                    break;
                case "number":
                    void 0 === (i = t.getNumberParam(e91.attr, r.tfParamName, r.defaultValue || 0)) && r.tfParamNameDeprecated && (i = t.getNumberParam(e91.attr, r.tfParamNameDeprecated, r.defaultValue));
                    break;
                case "number[]":
                    void 0 === (i = t.getNumericArrayParam(e91.attr, r.tfParamName, r.defaultValue)) && r.tfParamNameDeprecated && (i = t.getNumericArrayParam(e91.attr, r.tfParamNameDeprecated, r.defaultValue));
                    break;
                case "bool":
                    void 0 === (i = t.getBoolParam(e91.attr, r.tfParamName, r.defaultValue)) && r.tfParamNameDeprecated && (i = t.getBoolParam(e91.attr, r.tfParamNameDeprecated, r.defaultValue));
                    break;
                case "shape":
                    void 0 === (i = t.getTensorShapeParam(e91.attr, r.tfParamName, r.defaultValue)) && r.tfParamNameDeprecated && (i = t.getTensorShapeParam(e91.attr, r.tfParamNameDeprecated, r.defaultValue));
                    break;
                case "dtype":
                    void 0 === (i = t.getDtypeParam(e91.attr, r.tfParamName, r.defaultValue)) && r.tfParamNameDeprecated && (i = t.getDtypeParam(e91.attr, r.tfParamNameDeprecated, r.defaultValue));
                    break;
                case "tensor":
                case "tensors":
                    break;
                default:
                    throw new Error("Unsupported param type: " + r.type + " for op: " + e91.op);
            }
            return a[r.dlParamName] = {
                value: i,
                inputIndex: n,
                type: s,
                inputParamLength: o
            }, a;
        }, {
        })), r7;
    }, e87.prototype.decodeBase64 = function(e) {
        if ("undefined" != typeof atob) return atob(e);
        if ("undefined" != typeof Buffer) return new Buffer(e, "base64").toString();
        throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()");
    }, e87.prototype.getStringParam = function(e, t, a, r) {
        void 0 === r && (r = !1);
        var n = e[t];
        if (void 0 !== n) {
            var o = Array.isArray(n.s) ? String.fromCharCode.apply(null, n.s) : this.decodeBase64(n.s);
            return r ? o : o.toLowerCase();
        }
        return a;
    }, e87.prototype.getBoolParam = function(e, t, a) {
        var r = e[t];
        return r ? r.b : a;
    }, e87.prototype.getNumberParam = function(e, t, a) {
        var r = e[t] || {
        }, n = r.i ? r.i : r.f ? r.f : a;
        return "number" == typeof n ? n : parseInt(n, 10);
    }, e87.prototype.getDtypeParam = function(e, t, a) {
        var r = e[t];
        if (r && r.type) {
            var n = r.type;
            switch("string" == typeof r.type && (n = tensorflow_json.DataType[r.type]), n){
                case tensorflow_json.DataType.DT_FLOAT:
                    return "float32";
                case tensorflow_json.DataType.DT_INT32:
                    return "int32";
                case tensorflow_json.DataType.DT_BOOL:
                    return "bool";
                default:
                    return a;
            }
        }
        return a;
    }, e87.prototype.getTensorShapeParam = function(e92, t, a) {
        var r = e92[t];
        if (r && r.shape) {
            if (r.shape.unknownRank) return;
            if (null != r.shape.dim) return r.shape.dim.map(function(e) {
                return "number" == typeof e.size ? e.size : parseInt(e.size, 10);
            });
        }
        return a;
    }, e87.prototype.getNumericArrayParam = function(e93, t, a) {
        var r = e93[t];
        return r ? (r.list.f && r.list.f.length ? r.list.f : r.list.i).map(function(e) {
            return "number" == typeof e ? e : parseInt(e, 10);
        }) : a;
    }, e87;
}(), FrozenModel$1 = function() {
    function e94(e, t, a, r) {
        this.modelUrl = e, this.requestOption = t, this.weightPrefix = a, this.onProgress = r, this.version = "n/a";
    }
    return Object.defineProperty(e94.prototype, "modelVersion", {
        get: function() {
            return this.version;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e94.prototype, "inputNodes", {
        get: function() {
            return this.executor.inputNodes;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e94.prototype, "outputNodes", {
        get: function() {
            return this.executor.outputNodes;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e94.prototype, "inputs", {
        get: function() {
            return this.executor.inputs;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e94.prototype, "outputs", {
        get: function() {
            return this.executor.outputs;
        },
        enumerable: !0,
        configurable: !0
    }), Object.defineProperty(e94.prototype, "weights", {
        get: function() {
            return this.executor.weightMap;
        },
        enumerable: !0,
        configurable: !0
    }), e94.prototype.findIOHandler = function() {
        var e = this.modelUrl;
        if (this.requestOption || this.weightPrefix) this.handler = _tfjsCore.io.browserHTTPRequest(e, this.requestOption, this.weightPrefix, null, this.onProgress);
        else {
            var t = _tfjsCore.io.getLoadHandlers(e, this.onProgress);
            if (0 === t.length) t.push(_tfjsCore.io.browserHTTPRequest(e, this.requestOption, this.weightPrefix, null, this.onProgress));
            else if (t.length > 1) throw new Error("Found more than one (" + t.length + ") load handlers for URL '" + [
                e
            ] + "'");
            this.handler = t[0];
        }
    }, e94.prototype.load = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e, t, a;
            return __generator(this, function(r) {
                switch(r.label){
                    case 0:
                        if (this.findIOHandler(), null == this.handler.load) throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
                        return [
                            4,
                            this.handler.load()
                        ];
                    case 1:
                        return e = r.sent(), t = e.modelTopology, this.version = t.versions.producer + "." + t.versions.minConsumer, a = _tfjsCore.io.decodeWeights(e.weightData, e.weightSpecs), this.executor = new GraphExecutor(OperationMapper$1.Instance.transformGraph(t)), this.executor.weightMap = this.convertTensorMapToTensorsMap(a), [
                            2,
                            !0
                        ];
                }
            });
        });
    }, e94.prototype.predict = function(e, t) {
        return this.execute_(e, !0, this.outputNodes);
    }, e94.prototype.constructTensorMap = function(e95) {
        var t = e95 instanceof _tfjsCore.Tensor ? [
            e95
        ] : e95;
        if (t.length !== this.inputNodes.length) throw new Error("Input tensor count mismatch,the frozen model has " + this.inputNodes.length + " placeholders, while there are " + t.length + " input tensors.");
        return this.inputNodes.reduce(function(e, a, r) {
            return e[a] = t[r], e;
        }, {
        });
    }, e94.prototype.execute = function(e, t) {
        return this.execute_(e, !1, t);
    }, e94.prototype.execute_ = function(e, t, a) {
        if (void 0 === t && (t = !0), a = a || this.outputNodes, (e instanceof _tfjsCore.Tensor || Array.isArray(e)) && (e = this.constructTensorMap(e)), this.executor.isControlFlowModel || this.executor.isDynamicShapeModel) throw new Error("The model contains control flow or dynamic shape ops, please use executeAsync method");
        var r = this.executor.execute(this.convertTensorMapToTensorsMap(e), t, a), n = Object.keys(r);
        return Array.isArray(a) && a.length > 1 ? a.map(function(e) {
            return r[e];
        }) : r[n[0]];
    }, e94.prototype.executeAsync = function(e, t) {
        return __awaiter(this, void 0, void 0, function() {
            var a, r;
            return __generator(this, function(n) {
                switch(n.label){
                    case 0:
                        if (!this.executor.isControlFlowModel && !this.executor.isDynamicShapeModel) throw new Error("The model does not contain control flow or dynamic shape ops, please use execute method for better performance.");
                        return t = t || this.outputNodes, (e instanceof _tfjsCore.Tensor || Array.isArray(e)) && (e = this.constructTensorMap(e)), [
                            4,
                            this.executor.executeAsync(this.convertTensorMapToTensorsMap(e), t)
                        ];
                    case 1:
                        return a = n.sent(), r = Object.keys(a), [
                            2,
                            Array.isArray(t) && t.length > 1 ? t.map(function(e) {
                                return a[e];
                            }) : a[r[0]]
                        ];
                }
            });
        });
    }, e94.prototype.convertTensorMapToTensorsMap = function(e) {
        return Object.keys(e).reduce(function(t, a) {
            return t[a] = [
                e[a]
            ], t;
        }, {
        });
    }, e94.prototype.dispose = function() {
        this.executor.dispose();
    }, e94;
}();
function loadFrozenModel$1(e, t, a) {
    return __awaiter(this, void 0, void 0, function() {
        var r;
        return __generator(this, function(n) {
            switch(n.label){
                case 0:
                    return [
                        4,
                        (r = new FrozenModel$1(e, t, null, a)).load()
                    ];
                case 1:
                    return n.sent(), [
                        2,
                        r
                    ];
            }
        });
    });
}
var version = "0.8.4";
function loadFrozenModel$2(e, t, a, r) {
    return _tfjsCore.deprecationWarn("tf.loadFrozenModel() is going away. Use tf.loadGraphModel() instead, and note the positional argument changes."), e && e.endsWith(".json") ? loadFrozenModel$1(e, a, r) : (null != e && null == t && (t = getWeightsManifestUrl(e)), loadFrozenModel(e, t, a, r));
}
function getWeightsManifestUrl(e) {
    var t;
    null != e && (t = e.substr(0, e.lastIndexOf("/")) + "/" + DEFAULT_MANIFEST_NAME);
    return t;
}
function loadGraphModel(e, t) {
    if (void 0 === t && (t = {
    }), null == t && (t = {
    }), t.fromTFHub) return loadTfHubModule(e, t.requestInit, t.onProgress);
    var a = void 0;
    return e && e.endsWith(".json") ? loadFrozenModel$1(e, t.requestInit, t.onProgress) : (null != e && null == a && (a = getWeightsManifestUrl(e)), loadFrozenModel(e, a, t.requestInit, t.onProgress));
}

},{"@tensorflow/tfjs-core":"djGzH","buffer":"fCgem","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"847Hn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "array", ()=>array
);
parcelHelpers.export(exports, "Dataset", ()=>Dataset
);
parcelHelpers.export(exports, "zip", ()=>zip
);
parcelHelpers.export(exports, "CSVDataset", ()=>CSVDataset
);
parcelHelpers.export(exports, "TextLineDataset", ()=>TextLineDataset
);
parcelHelpers.export(exports, "csv", ()=>csv
);
parcelHelpers.export(exports, "generator", ()=>generator
);
parcelHelpers.export(exports, "FileDataSource", ()=>FileDataSource
);
parcelHelpers.export(exports, "URLDataSource", ()=>URLDataSource
);
parcelHelpers.export(exports, "version_data", ()=>version
);
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjsCore = require("@tensorflow/tfjs-core");
var process = require("process");
var Buffer = require("buffer").Buffer;
var global = arguments[3];
var extendStatics = function(t1, e1) {
    return (extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(t, e) {
        t.__proto__ = e;
    } || function(t, e) {
        for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
    })(t1, e1);
};
function __extends(t, e) {
    function r() {
        this.constructor = t;
    }
    extendStatics(t, e), t.prototype = null === e ? Object.create(e) : (r.prototype = e.prototype, new r);
}
function __awaiter(t2, e2, r, n) {
    return new (r || (r = Promise))(function(o, i) {
        function s(t) {
            try {
                u(n.next(t));
            } catch (t3) {
                i(t3);
            }
        }
        function a(t) {
            try {
                u(n.throw(t));
            } catch (t4) {
                i(t4);
            }
        }
        function u(t) {
            t.done ? o(t.value) : new r(function(e) {
                e(t.value);
            }).then(s, a);
        }
        u((n = n.apply(t2, e2 || [])).next());
    });
}
function __generator(t5, e) {
    var r, n, o, i1, s = {
        label: 0,
        sent: function() {
            if (1 & o[0]) throw o[1];
            return o[1];
        },
        trys: [],
        ops: []
    };
    function a1(i2) {
        return function(a) {
            return (function(i) {
                if (r) throw new TypeError("Generator is already executing.");
                for(; s;)try {
                    if (r = 1, n && (o = 2 & i[0] ? n.return : i[0] ? n.throw || ((o = n.return) && o.call(n), 0) : n.next) && !(o = o.call(n, i[1])).done) return o;
                    switch(n = 0, o && (i = [
                        2 & i[0],
                        o.value
                    ]), i[0]){
                        case 0:
                        case 1:
                            o = i;
                            break;
                        case 4:
                            return s.label++, {
                                value: i[1],
                                done: !1
                            };
                        case 5:
                            s.label++, n = i[1], i = [
                                0
                            ];
                            continue;
                        case 7:
                            i = s.ops.pop(), s.trys.pop();
                            continue;
                        default:
                            if (!(o = (o = s.trys).length > 0 && o[o.length - 1]) && (6 === i[0] || 2 === i[0])) {
                                s = 0;
                                continue;
                            }
                            if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {
                                s.label = i[1];
                                break;
                            }
                            if (6 === i[0] && s.label < o[1]) {
                                s.label = o[1], o = i;
                                break;
                            }
                            if (o && s.label < o[2]) {
                                s.label = o[2], s.ops.push(i);
                                break;
                            }
                            o[2] && s.ops.pop(), s.trys.pop();
                            continue;
                    }
                    i = e.call(t5, s);
                } catch (t) {
                    i = [
                        6,
                        t
                    ], n = 0;
                } finally{
                    r = o = 0;
                }
                if (5 & i[0]) throw i[1];
                return {
                    value: i[0] ? i[1] : void 0,
                    done: !0
                };
            })([
                i2,
                a
            ]);
        };
    }
    return i1 = {
        next: a1(0),
        throw: a1(1),
        return: a1(2)
    }, "function" == typeof Symbol && (i1[Symbol.iterator] = function() {
        return this;
    }), i1;
}
var commonjsGlobal = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {
};
function unwrapExports(t) {
    return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
}
function createCommonjsModule(t, e) {
    return t(e = {
        exports: {
        }
    }, e.exports), e.exports;
}
var alea = createCommonjsModule(function(t6) {
    !function(t7, e3, r1) {
        function n1(t, e) {
            return e.c = t.c, e.s0 = t.s0, e.s1 = t.s1, e.s2 = t.s2, e;
        }
        function o1(t8, e4) {
            var r2 = new function(t9) {
                var e, r3 = this, n2 = (e = 4022871197, function(t) {
                    t = t.toString();
                    for(var r = 0; r < t.length; r++){
                        var n = 0.02519603282416938 * (e += t.charCodeAt(r));
                        n -= e = n >>> 0, e = (n *= e) >>> 0, e += 4294967296 * (n -= e);
                    }
                    return 0.00000000023283064365386963 * (e >>> 0);
                });
                r3.next = function() {
                    var t = 2091639 * r3.s0 + 0.00000000023283064365386963 * r3.c;
                    return r3.s0 = r3.s1, r3.s1 = r3.s2, r3.s2 = t - (r3.c = 0 | t);
                }, r3.c = 1, r3.s0 = n2(" "), r3.s1 = n2(" "), r3.s2 = n2(" "), r3.s0 -= n2(t9), r3.s0 < 0 && (r3.s0 += 1), r3.s1 -= n2(t9), r3.s1 < 0 && (r3.s1 += 1), r3.s2 -= n2(t9), r3.s2 < 0 && (r3.s2 += 1), n2 = null;
            }(t8), o = e4 && e4.state, i = r2.next;
            return i.int32 = function() {
                return 4294967296 * r2.next() | 0;
            }, i.double = function() {
                return i() + 0.00000000000000011102230246251565 * (2097152 * i() | 0);
            }, i.quick = i, o && ("object" == typeof o && n1(o, r2), i.state = function() {
                return n1(r2, {
                });
            }), i;
        }
        e3 && e3.exports ? e3.exports = o1 : r1 && r1.amd ? r1(function() {
            return o1;
        }) : this.alea = o1;
    }(0, t6, !1);
}), xor128 = createCommonjsModule(function(t10) {
    !function(t11, e5, r4) {
        function n3(t, e) {
            return e.x = t.x, e.y = t.y, e.z = t.z, e.w = t.w, e;
        }
        function o2(t12, e6) {
            var r5 = new function(t13) {
                var e = this, r = "";
                e.x = 0, e.y = 0, e.z = 0, e.w = 0, e.next = function() {
                    var t = e.x ^ e.x << 11;
                    return e.x = e.y, e.y = e.z, e.z = e.w, e.w ^= e.w >>> 19 ^ t ^ t >>> 8;
                }, t13 === (0 | t13) ? e.x = t13 : r += t13;
                for(var n = 0; n < r.length + 64; n++)e.x ^= 0 | r.charCodeAt(n), e.next();
            }(t12), o = e6 && e6.state, i = function() {
                return (r5.next() >>> 0) / 4294967296;
            };
            return i.double = function() {
                do var t = ((r5.next() >>> 11) + (r5.next() >>> 0) / 4294967296) / 2097152;
                while (0 === t)
                return t;
            }, i.int32 = r5.next, i.quick = i, o && ("object" == typeof o && n3(o, r5), i.state = function() {
                return n3(r5, {
                });
            }), i;
        }
        e5 && e5.exports ? e5.exports = o2 : r4 && r4.amd ? r4(function() {
            return o2;
        }) : this.xor128 = o2;
    }(0, t10, !1);
}), xorwow = createCommonjsModule(function(t14) {
    !function(t15, e7, r6) {
        function n4(t, e) {
            return e.x = t.x, e.y = t.y, e.z = t.z, e.w = t.w, e.v = t.v, e.d = t.d, e;
        }
        function o3(t16, e8) {
            var r7 = new function(t17) {
                var e = this, r = "";
                e.next = function() {
                    var t = e.x ^ e.x >>> 2;
                    return e.x = e.y, e.y = e.z, e.z = e.w, e.w = e.v, (e.d = e.d + 362437 | 0) + (e.v = e.v ^ e.v << 4 ^ t ^ t << 1) | 0;
                }, e.x = 0, e.y = 0, e.z = 0, e.w = 0, e.v = 0, t17 === (0 | t17) ? e.x = t17 : r += t17;
                for(var n = 0; n < r.length + 64; n++)e.x ^= 0 | r.charCodeAt(n), n == r.length && (e.d = e.x << 10 ^ e.x >>> 4), e.next();
            }(t16), o = e8 && e8.state, i = function() {
                return (r7.next() >>> 0) / 4294967296;
            };
            return i.double = function() {
                do var t = ((r7.next() >>> 11) + (r7.next() >>> 0) / 4294967296) / 2097152;
                while (0 === t)
                return t;
            }, i.int32 = r7.next, i.quick = i, o && ("object" == typeof o && n4(o, r7), i.state = function() {
                return n4(r7, {
                });
            }), i;
        }
        e7 && e7.exports ? e7.exports = o3 : r6 && r6.amd ? r6(function() {
            return o3;
        }) : this.xorwow = o3;
    }(0, t14, !1);
}), xorshift7 = createCommonjsModule(function(t18) {
    !function(t19, e9, r8) {
        function n5(t, e) {
            return e.x = t.x.slice(), e.i = t.i, e;
        }
        function o4(t20, e10) {
            null == t20 && (t20 = +new Date);
            var r9 = new function(t21) {
                var e11 = this;
                e11.next = function() {
                    var t, r, n = e11.x, o = e11.i;
                    return t = n[o], r = (t ^= t >>> 7) ^ t << 24, r ^= (t = n[o + 1 & 7]) ^ t >>> 10, r ^= (t = n[o + 3 & 7]) ^ t >>> 3, r ^= (t = n[o + 4 & 7]) ^ t << 7, t = n[o + 7 & 7], r ^= (t ^= t << 13) ^ t << 9, n[o] = r, e11.i = o + 1 & 7, r;
                }, (function(t, e) {
                    var r, n = [];
                    if (e === (0 | e)) n[0] = e;
                    else for(e = "" + e, r = 0; r < e.length; ++r)n[7 & r] = n[7 & r] << 15 ^ e.charCodeAt(r) + n[r + 1 & 7] << 13;
                    for(; n.length < 8;)n.push(0);
                    for(r = 0; r < 8 && 0 === n[r]; ++r);
                    for(8 == r ? n[7] = -1 : n[r], t.x = n, t.i = 0, r = 256; r > 0; --r)t.next();
                })(e11, t21);
            }(t20), o5 = e10 && e10.state, i = function() {
                return (r9.next() >>> 0) / 4294967296;
            };
            return i.double = function() {
                do var t = ((r9.next() >>> 11) + (r9.next() >>> 0) / 4294967296) / 2097152;
                while (0 === t)
                return t;
            }, i.int32 = r9.next, i.quick = i, o5 && (o5.x && n5(o5, r9), i.state = function() {
                return n5(r9, {
                });
            }), i;
        }
        e9 && e9.exports ? e9.exports = o4 : r8 && r8.amd ? r8(function() {
            return o4;
        }) : this.xorshift7 = o4;
    }(0, t18, !1);
}), xor4096 = createCommonjsModule(function(t22) {
    !function(t23, e12, r10) {
        function n6(t, e) {
            return e.i = t.i, e.w = t.w, e.X = t.X.slice(), e;
        }
        function o6(t24, e13) {
            null == t24 && (t24 = +new Date);
            var r11 = new function(t25) {
                var e14 = this;
                e14.next = function() {
                    var t, r, n = e14.w, o = e14.X, i = e14.i;
                    return e14.w = n = n + 1640531527 | 0, r = o[i + 34 & 127], t = o[i = i + 1 & 127], r ^= r << 13, t ^= t << 17, r ^= r >>> 15, t ^= t >>> 12, r = o[i] = r ^ t, e14.i = i, r + (n ^ n >>> 16) | 0;
                }, (function(t, e) {
                    var r, n, o, i, s, a = [], u = 128;
                    for(e === (0 | e) ? (n = e, e = null) : (e += "\0", n = 0, u = Math.max(u, e.length)), o = 0, i = -32; i < u; ++i)e && (n ^= e.charCodeAt((i + 32) % e.length)), 0 === i && (s = n), n ^= n << 10, n ^= n >>> 15, n ^= n << 4, n ^= n >>> 13, i >= 0 && (s = s + 1640531527 | 0, o = 0 == (r = a[127 & i] ^= n + s) ? o + 1 : 0);
                    for(o >= 128 && (a[127 & (e && e.length || 0)] = -1), o = 127, i = 512; i > 0; --i)n = a[o + 34 & 127], r = a[o = o + 1 & 127], n ^= n << 13, r ^= r << 17, n ^= n >>> 15, r ^= r >>> 12, a[o] = n ^ r;
                    t.w = s, t.X = a, t.i = o;
                })(e14, t25);
            }(t24), o7 = e13 && e13.state, i3 = function() {
                return (r11.next() >>> 0) / 4294967296;
            };
            return i3.double = function() {
                do var t = ((r11.next() >>> 11) + (r11.next() >>> 0) / 4294967296) / 2097152;
                while (0 === t)
                return t;
            }, i3.int32 = r11.next, i3.quick = i3, o7 && (o7.X && n6(o7, r11), i3.state = function() {
                return n6(r11, {
                });
            }), i3;
        }
        e12 && e12.exports ? e12.exports = o6 : r10 && r10.amd ? r10(function() {
            return o6;
        }) : this.xor4096 = o6;
    }(0, t22, !1);
}), tychei = createCommonjsModule(function(t26) {
    !function(t27, e15, r12) {
        function n7(t, e) {
            return e.a = t.a, e.b = t.b, e.c = t.c, e.d = t.d, e;
        }
        function o8(t28, e16) {
            var r13 = new function(t29) {
                var e = this, r14 = "";
                e.next = function() {
                    var t = e.b, r = e.c, n = e.d, o = e.a;
                    return t = t << 25 ^ t >>> 7 ^ r, r = r - n | 0, n = n << 24 ^ n >>> 8 ^ o, o = o - t | 0, e.b = t = t << 20 ^ t >>> 12 ^ r, e.c = r = r - n | 0, e.d = n << 16 ^ r >>> 16 ^ o, e.a = o - t | 0;
                }, e.a = 0, e.b = 0, e.c = -1640531527, e.d = 1367130551, t29 === Math.floor(t29) ? (e.a = t29 / 4294967296 | 0, e.b = 0 | t29) : r14 += t29;
                for(var n8 = 0; n8 < r14.length + 20; n8++)e.b ^= 0 | r14.charCodeAt(n8), e.next();
            }(t28), o9 = e16 && e16.state, i = function() {
                return (r13.next() >>> 0) / 4294967296;
            };
            return i.double = function() {
                do var t = ((r13.next() >>> 11) + (r13.next() >>> 0) / 4294967296) / 2097152;
                while (0 === t)
                return t;
            }, i.int32 = r13.next, i.quick = i, o9 && ("object" == typeof o9 && n7(o9, r13), i.state = function() {
                return n7(r13, {
                });
            }), i;
        }
        e15 && e15.exports ? e15.exports = o8 : r12 && r12.amd ? r12(function() {
            return o8;
        }) : this.tychei = o8;
    }(0, t26, !1);
}), seedrandom = createCommonjsModule(function(t30) {
    !function(e17, r15) {
        var n9, o10 = (0, eval)("this"), i4 = 256, s1 = 6, a2 = "random", u = r15.pow(i4, s1), h = r15.pow(2, 52), c = 2 * h, l = i4 - 1;
        function f1(t31, f, m) {
            var v = [], w = d(function t(e, r) {
                var n, o = [], i = typeof e;
                if (r && "object" == i) for(n in e)try {
                    o.push(t(e[n], r - 1));
                } catch (t32) {
                }
                return o.length ? o : "string" == i ? e : e + "\0";
            }((f = 1 == f ? {
                entropy: !0
            } : f || {
            }).entropy ? [
                t31,
                y(e17)
            ] : null == t31 ? function() {
                try {
                    var t;
                    return n9 && (t = n9.randomBytes) ? t = t(i4) : (t = new Uint8Array(i4), (o10.crypto || o10.msCrypto).getRandomValues(t)), y(t);
                } catch (t) {
                    var r = o10.navigator, s = r && r.plugins;
                    return [
                        +new Date,
                        o10,
                        s,
                        o10.screen,
                        y(e17)
                    ];
                }
            }() : t31, 3), v), _ = new function(t33) {
                var e18, r16 = t33.length, n = this, o11 = 0, s2 = n.i = n.j = 0, a3 = n.S = [];
                r16 || (t33 = [
                    r16++
                ]);
                for(; o11 < i4;)a3[o11] = o11++;
                for(o11 = 0; o11 < i4; o11++)a3[o11] = a3[s2 = l & s2 + t33[o11 % r16] + (e18 = a3[o11])], a3[s2] = e18;
                (n.g = function(t) {
                    for(var e, r = 0, o = n.i, s = n.j, a = n.S; t--;)e = a[o = l & o + 1], r = r * i4 + a[l & (a[o] = a[s = l & s + e]) + (a[s] = e)];
                    return n.i = o, n.j = s, r;
                })(i4);
            }(v), g = function() {
                for(var t = _.g(s1), e = u, r = 0; t < h;)t = (t + r) * i4, e *= i4, r = _.g(1);
                for(; t >= c;)t /= 2, e /= 2, r >>>= 1;
                return (t + r) / e;
            };
            return g.int32 = function() {
                return 0 | _.g(4);
            }, g.quick = function() {
                return _.g(4) / 4294967296;
            }, g.double = g, d(y(_.S), e17), (f.pass || m || function(t, e, n, o) {
                return o && (o.S && p(o, _), t.state = function() {
                    return p(_, {
                    });
                }), n ? (r15[a2] = t, e) : t;
            })(g, w, "global" in f ? f.global : this == r15, f.state);
        }
        function p(t, e) {
            return e.i = t.i, e.j = t.j, e.S = t.S.slice(), e;
        }
        function d(t, e) {
            for(var r, n = t + "", o = 0; o < n.length;)e[l & o] = l & (r ^= 19 * e[l & o]) + n.charCodeAt(o++);
            return y(e);
        }
        function y(t) {
            return String.fromCharCode.apply(0, t);
        }
        if (r15["seed" + a2] = f1, d(r15.random(), e17), t30.exports) {
            t30.exports = f1;
            try {
                n9 = require("crypto");
            } catch (t) {
            }
        }
    }([], Math);
});
seedrandom.alea = alea, seedrandom.xor128 = xor128, seedrandom.xorwow = xorwow, seedrandom.xorshift7 = xorshift7, seedrandom.xor4096 = xor4096, seedrandom.tychei = tychei;
var seedrandom$1 = seedrandom, seedrandom_1 = seedrandom$1.alea, util$1 = createCommonjsModule(function(t34, e19) {
    function r17(t) {
        for(var e = t.length, r = 0, n = 0; e > 0;)n = Math.random() * e | 0, r = t[--e], t[e] = t[n], t[n] = r;
    }
    function n10(t, e) {
        if (!t) throw new Error("string" == typeof e ? e : e());
    }
    function o12(t, e) {
        if (void 0 === e && (e = []), Array.isArray(t) || h(t)) for(var r = 0; r < t.length; ++r)o12(t[r], e);
        else e.push(t);
        return e;
    }
    function i5(t, e) {
        if (t === e) return !0;
        if (null == t || null == e) return !1;
        if (t.length !== e.length) return !1;
        for(var r = 0; r < t.length; r++)if (t[r] !== e[r]) return !1;
        return !0;
    }
    function s3(t) {
        return t % 1 == 0;
    }
    function a4(t35, e20) {
        var r = e20.length;
        return n10((t35 = null == t35 ? e20.map(function(t, e) {
            return e;
        }) : [].concat(t35)).every(function(t) {
            return t >= -r && t < r;
        }), "All values in axis param must be in range [-" + r + ", " + r + ") but got axis " + t35), n10(t35.every(function(t) {
            return s3(t);
        }), "All values in axis param must be integers but got axis " + t35), t35.map(function(t) {
            return t < 0 ? r + t : t;
        });
    }
    function u1(t, e) {
        for(var r = 0; r < t.length; r++){
            var n = t[r];
            if (isNaN(n) || !isFinite(n)) throw Error("A tensor of type " + e + " being uploaded contains " + n + ".");
        }
    }
    function h(t) {
        return t instanceof Float32Array || t instanceof Int32Array || t instanceof Uint8Array;
    }
    function c(t) {
        return "string" == typeof t || t instanceof String;
    }
    function l(t) {
        return "boolean" == typeof t;
    }
    function f(t) {
        return "number" == typeof t;
    }
    function p(t, e) {
        if (null == e || "float32" === e || "complex64" === e) return new Float32Array(t);
        if ("int32" === e) return new Int32Array(t);
        if ("bool" === e) return new Uint8Array(t);
        throw new Error("Unknown data type " + e);
    }
    Object.defineProperty(e19, "__esModule", {
        value: !0
    }), e19.shuffle = r17, e19.clamp = function(t, e, r) {
        return Math.max(t, Math.min(e, r));
    }, e19.nearestLargerEven = function(t) {
        return t % 2 == 0 ? t : t + 1;
    }, e19.sum = function(t) {
        for(var e = 0, r = 0; r < t.length; r++)e += t[r];
        return e;
    }, e19.randUniform = function(t, e) {
        var r = Math.random();
        return e * r + (1 - r) * t;
    }, e19.distSquared = function(t, e) {
        for(var r = 0, n = 0; n < t.length; n++){
            var o = Number(t[n]) - Number(e[n]);
            r += o * o;
        }
        return r;
    }, e19.assert = n10, e19.assertShapesMatch = function(t, e, r) {
        void 0 === r && (r = ""), n10(i5(t, e), r + " Shapes " + t + " and " + e + " must match");
    }, e19.assertNonNull = function(t) {
        n10(null != t, "The input to the tensor constructor must be a non-null value.");
    }, e19.flatten = o12, e19.sizeFromShape = function(t) {
        if (0 === t.length) return 1;
        for(var e = t[0], r = 1; r < t.length; r++)e *= t[r];
        return e;
    }, e19.isScalarShape = function(t) {
        return 0 === t.length;
    }, e19.arraysEqual = i5, e19.isInt = s3, e19.tanh = function(t) {
        if (null != Math.tanh) return Math.tanh(t);
        if (t === 1 / 0) return 1;
        if (t === -1 / 0) return -1;
        var e = Math.exp(2 * t);
        return (e - 1) / (e + 1);
    }, e19.sizeToSquarishShape = function(t) {
        var e = Math.ceil(Math.sqrt(t));
        return [
            e,
            Math.ceil(t / e)
        ];
    }, e19.createShuffledIndices = function(t) {
        for(var e = new Uint32Array(t), n = 0; n < t; ++n)e[n] = n;
        return r17(e), e;
    }, e19.rightPad = function(t, e) {
        return e <= t.length ? t : t + " ".repeat(e - t.length);
    }, e19.repeatedTry = function(t, e, r) {
        return void 0 === e && (e = function(t) {
            return 0;
        }), new Promise(function(n, o) {
            var i = 0, s = function() {
                if (t()) n();
                else {
                    var a = e(++i);
                    null != r && i >= r ? o() : setTimeout(s, a);
                }
            };
            s();
        });
    }, e19.inferFromImplicitShape = function(t, e) {
        for(var r = 1, n = -1, o = 0; o < t.length; ++o)if (t[o] >= 0) r *= t[o];
        else if (-1 === t[o]) {
            if (-1 !== n) throw Error("Shapes can only have 1 implicit size. Found -1 at dim " + n + " and dim " + o);
            n = o;
        } else if (t[o] < 0) throw Error("Shapes can not be < 0. Found " + t[o] + " at dim " + o);
        if (-1 === n) {
            if (e > 0 && e !== r) throw Error("Size(" + e + ") must match the product of shape " + t);
            return t;
        }
        if (0 === r) throw Error("Cannot infer the missing size in [" + t + "] when there are 0 elements");
        if (e % r != 0) throw Error("The implicit shape can't be a fractional number. Got " + e + " / " + r);
        var i = t.slice();
        return i[n] = e / r, i;
    }, e19.parseAxisParam = a4, e19.squeezeShape = function(t, e) {
        for(var r = [], n = [], o = null == e ? null : a4(e, t).sort(), i = 0, s = 0; s < t.length; ++s){
            if (null != o) {
                if (o[i] === s && 1 !== t[s]) throw new Error("Can't squeeze axis " + s + " since its dim '" + t[s] + "' is not 1");
                (null == o[i] || o[i] > s) && 1 === t[s] && (r.push(t[s]), n.push(s)), o[i] <= s && i++;
            }
            1 !== t[s] && (r.push(t[s]), n.push(s));
        }
        return {
            newShape: r,
            keptDims: n
        };
    }, e19.getTypedArrayFromDType = function(t, e) {
        var r = null;
        if (null == t || "float32" === t) r = new Float32Array(e);
        else if ("int32" === t) r = new Int32Array(e);
        else {
            if ("bool" !== t) throw new Error("Unknown data type " + t);
            r = new Uint8Array(e);
        }
        return r;
    }, e19.getArrayFromDType = function(t, e) {
        var r = null;
        if (null == t || "float32" === t) r = new Float32Array(e);
        else if ("int32" === t) r = new Int32Array(e);
        else if ("bool" === t) r = new Uint8Array(e);
        else {
            if ("string" !== t) throw new Error("Unknown data type " + t);
            r = new Array(e);
        }
        return r;
    }, e19.checkComputationForErrors = function(t, e, r) {
        if ("float32" === e) for(var n = 0; n < t.length; n++){
            var o = t[n];
            if (isNaN(o) || !isFinite(o)) throw Error("The result of the '" + r + "' is " + o + ".");
        }
    }, e19.checkConversionForErrors = u1, e19.hasEncodingLoss = function(t, e) {
        return !("complex64" === e || "float32" === e && "complex64" !== t || "int32" === e && "float32" !== t && "complex64" !== t || "bool" === e && "bool" === t);
    }, e19.isTypedArray = h, e19.bytesPerElement = function(t) {
        if ("float32" === t || "int32" === t) return 4;
        if ("complex64" === t) return 8;
        if ("bool" === t) return 1;
        throw new Error("Unknown dtype " + t);
    }, e19.bytesFromStringArray = function(t36) {
        if (null == t36) return 0;
        var e = 0;
        return t36.forEach(function(t) {
            return e += 2 * t.length;
        }), e;
    }, e19.isString = c, e19.isBoolean = l, e19.isNumber = f, e19.inferDtype = function t(e) {
        return Array.isArray(e) ? t(e[0]) : e instanceof Float32Array ? "float32" : e instanceof Int32Array || e instanceof Uint8Array ? "int32" : f(e) ? "float32" : c(e) ? "string" : l(e) ? "bool" : "float32";
    }, e19.isFunction = function(t) {
        return !!(t && t.constructor && t.call && t.apply);
    }, e19.nearestDivisor = function(t, e) {
        for(var r = e; r < t; ++r)if (t % r == 0) return r;
        return t;
    }, e19.computeStrides = function(t) {
        var e = t.length;
        if (e < 2) return [];
        var r = new Array(e - 1);
        r[e - 2] = t[e - 1];
        for(var n = e - 3; n >= 0; --n)r[n] = r[n + 1] * t[n + 1];
        return r;
    }, e19.toTypedArray = function(t37, e21, r) {
        if ("string" === e21) throw new Error("Cannot convert a string[] to a TypedArray");
        if (Array.isArray(t37) && (t37 = o12(t37)), r && u1(t37, e21), (function(t, e) {
            return t instanceof Float32Array && "float32" === e || t instanceof Int32Array && "int32" === e || t instanceof Uint8Array && "bool" === e;
        })(t37, e21)) return t37;
        if (null == e21 || "float32" === e21 || "complex64" === e21) return new Float32Array(t37);
        if ("int32" === e21) return new Int32Array(t37);
        if ("bool" === e21) {
            for(var n = new Uint8Array(t37.length), i = 0; i < n.length; ++i)0 !== Math.round(t37[i]) && (n[i] = 1);
            return n;
        }
        throw new Error("Unknown data type " + e21);
    }, e19.toNestedArray = function(t38, e22) {
        if (0 === t38.length) return e22[0];
        var r18 = t38.reduce(function(t, e) {
            return t * e;
        });
        if (0 === r18) return [];
        if (r18 !== e22.length) throw new Error("[" + t38 + "] does not match the input size.");
        return (function t39(e23, r, n) {
            var o = new Array;
            if (1 === r.length) for(var i = r[0], s = 0; s < i; s++)o[s] = n[e23 + s];
            else {
                i = r[0];
                var a = r.slice(1), u = a.reduce(function(t, e) {
                    return t * e;
                });
                for(s = 0; s < i; s++)o[s] = t39(e23 + s * u, a, n);
            }
            return o;
        })(0, t38, e22);
    }, e19.makeOnesTypedArray = function(t, e) {
        for(var r = p(t, e), n = 0; n < r.length; n++)r[n] = 1;
        return r;
    }, e19.makeZerosTypedArray = p, e19.now = function() {
        if ("undefined" != typeof performance) return performance.now();
        if ("undefined" != typeof process) {
            var t = process.hrtime();
            return 1000 * t[0] + t[1] / 1000000;
        }
        throw new Error("Cannot measure time in this environment. You should run tf.js in the browser or in Node.js");
    }, e19.monitorPromisesProgress = function(t40, e24, r, o) {
        !function(t) {
            n10(null != t && Array.isArray(t) && t.length > 0, "promises must be a none empty array");
        }(t40), (function(t, e) {
            n10(t >= 0 && t <= 1, "Progress fraction must be in range [0, 1], but got startFraction " + t), n10(e >= 0 && e <= 1, "Progress fraction must be in range [0, 1], but got endFraction " + e), n10(e >= t, "startFraction must be no more than endFraction, but got startFraction " + t + " and endFraction " + e);
        })(r = null == r ? 0 : r, o = null == o ? 1 : o);
        var i = 0;
        return Promise.all(t40.map(function(n11) {
            return n11.then(function(n) {
                var s = r + ++i / t40.length * (o - r);
                return e24(s), n;
            }), n11;
        }));
    };
});
unwrapExports(util$1);
var util_1 = util$1.shuffle, util_2 = util$1.clamp, util_3 = util$1.nearestLargerEven, util_4 = util$1.sum, util_5 = util$1.randUniform, util_6 = util$1.distSquared, util_7 = util$1.assert, util_8 = util$1.assertShapesMatch, util_9 = util$1.assertNonNull, util_10 = util$1.flatten, util_11 = util$1.sizeFromShape, util_12 = util$1.isScalarShape, util_13 = util$1.arraysEqual, util_14 = util$1.isInt, util_15 = util$1.tanh, util_16 = util$1.sizeToSquarishShape, util_17 = util$1.createShuffledIndices, util_18 = util$1.rightPad, util_19 = util$1.repeatedTry, util_20 = util$1.inferFromImplicitShape, util_21 = util$1.parseAxisParam, util_22 = util$1.squeezeShape, util_23 = util$1.getTypedArrayFromDType, util_24 = util$1.getArrayFromDType, util_25 = util$1.checkComputationForErrors, util_26 = util$1.checkConversionForErrors, util_27 = util$1.hasEncodingLoss, util_28 = util$1.isTypedArray, util_29 = util$1.bytesPerElement, util_30 = util$1.bytesFromStringArray, util_31 = util$1.isString, util_32 = util$1.isBoolean, util_33 = util$1.isNumber, util_34 = util$1.inferDtype, util_35 = util$1.isFunction, util_36 = util$1.nearestDivisor, util_37 = util$1.computeStrides, util_38 = util$1.toTypedArray, util_39 = util$1.toNestedArray, util_40 = util$1.makeOnesTypedArray, util_41 = util$1.makeZerosTypedArray, util_42 = util$1.now, util_43 = util$1.monitorPromisesProgress, tensor_format = createCommonjsModule(function(t41, e25) {
    Object.defineProperty(e25, "__esModule", {
        value: !0
    });
    var r19 = 20, n12 = 3, o13 = 7;
    function i(t, e) {
        var r;
        return r = Array.isArray(t) ? parseFloat(t[0].toFixed(o13)) + " + " + parseFloat(t[1].toFixed(o13)) + "j" : util$1.isString(t) ? "'" + t + "'" : parseFloat(t.toFixed(o13)).toString(), util$1.rightPad(r, e);
    }
    function s(t) {
        for(var e = [], r = 0; r < t.length; r += 2)e.push([
            t[r],
            t[r + 1]
        ]);
        return e;
    }
    e25.tensorToString = function(t42, e26, o14, a5) {
        var u2 = util$1.computeStrides(e26), h1 = function(t, e, r, n) {
            var o = util$1.sizeFromShape(e), a = n[n.length - 1], u = new Array(a).fill(0), h = e.length, c = "complex64" === r ? s(t) : t;
            if (h > 1) for(var l = 0; l < o / a; l++)for(var f = l * a, p = 0; p < a; p++)u[p] = Math.max(u[p], i(c[f + p], 0).length);
            return u;
        }(t42, e26, o14, u2), c1 = e26.length, l1 = function t43(e, o, a, u, h, c) {
            void 0 === c && (c = !0);
            var l = "complex64" === a ? 2 : 1, f = o[0], p = o.length;
            if (0 === p) {
                if ("complex64" === a) {
                    var d = s(e);
                    return [
                        i(d[0], 0)
                    ];
                }
                return [
                    e[0].toString()
                ];
            }
            if (1 === p) {
                if (f > r19) {
                    var y = n12 * l, m = Array.from(e.slice(0, y)), v = Array.from(e.slice(f - n12 * l, f));
                    return "complex64" === a && (m = s(m), v = s(v)), [
                        "[" + m.map(function(t, e) {
                            return i(t, h[e]);
                        }).join(", ") + ", ..., " + v.map(function(t, e) {
                            return i(t, h[f - n12 + e]);
                        }).join(", ") + "]"
                    ];
                }
                var w = "complex64" === a ? s(e) : Array.from(e);
                return [
                    "[" + w.map(function(t, e) {
                        return i(t, h[e]);
                    }).join(", ") + "]"
                ];
            }
            var _ = o.slice(1), g = u.slice(1), b = u[0] * l, I = [];
            if (f > r19) {
                for(var x = 0; x < n12; x++){
                    var S = x * b, D = S + b;
                    I.push.apply(I, t43(e.slice(S, D), _, a, g, h, !1));
                }
                I.push("...");
                for(var x = f - n12; x < f; x++){
                    var S = x * b, D = S + b;
                    I.push.apply(I, t43(e.slice(S, D), _, a, g, h, x === f - 1));
                }
            } else for(var x = 0; x < f; x++){
                var S = x * b, D = S + b;
                I.push.apply(I, t43(e.slice(S, D), _, a, g, h, x === f - 1));
            }
            var T = 2 === p ? "," : "";
            I[0] = "[" + I[0] + T;
            for(var x = 1; x < I.length - 1; x++)I[x] = " " + I[x] + T;
            for(var E = ",\n", x = 2; x < p; x++)E += "\n";
            return I[I.length - 1] = " " + I[I.length - 1] + "]" + (c ? "" : E), I;
        }(t42, e26, o14, u2, h1), f2 = [
            "Tensor"
        ];
        return a5 && (f2.push("  dtype: " + o14), f2.push("  rank: " + c1), f2.push("  shape: [" + e26 + "]"), f2.push("  values:")), f2.push(l1.map(function(t) {
            return "    " + t;
        }).join("\n")), f2.join("\n");
    };
});
unwrapExports(tensor_format);
var tensor_format_1 = tensor_format.tensorToString, tensor = createCommonjsModule(function(t44, e27) {
    var r20, n13 = commonjsGlobal && commonjsGlobal.__extends || (r20 = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(t, e) {
        t.__proto__ = e;
    } || function(t, e) {
        for(var r in e)e.hasOwnProperty(r) && (t[r] = e[r]);
    }, function(t, e) {
        function n() {
            this.constructor = t;
        }
        r20(t, e), t.prototype = null === e ? Object.create(e) : (n.prototype = e.prototype, new n);
    }), o15 = commonjsGlobal && commonjsGlobal.__awaiter || function(t45, e28, r, n) {
        return new (r || (r = Promise))(function(o, i) {
            function s(t) {
                try {
                    u(n.next(t));
                } catch (t46) {
                    i(t46);
                }
            }
            function a(t) {
                try {
                    u(n.throw(t));
                } catch (t47) {
                    i(t47);
                }
            }
            function u(t) {
                t.done ? o(t.value) : new r(function(e) {
                    e(t.value);
                }).then(s, a);
            }
            u((n = n.apply(t45, e28 || [])).next());
        });
    }, i6 = commonjsGlobal && commonjsGlobal.__generator || function(t48, e) {
        var r, n, o, i7, s = {
            label: 0,
            sent: function() {
                if (1 & o[0]) throw o[1];
                return o[1];
            },
            trys: [],
            ops: []
        };
        function a7(i8) {
            return function(a) {
                return (function(i) {
                    if (r) throw new TypeError("Generator is already executing.");
                    for(; s;)try {
                        if (r = 1, n && (o = 2 & i[0] ? n.return : i[0] ? n.throw || ((o = n.return) && o.call(n), 0) : n.next) && !(o = o.call(n, i[1])).done) return o;
                        switch(n = 0, o && (i = [
                            2 & i[0],
                            o.value
                        ]), i[0]){
                            case 0:
                            case 1:
                                o = i;
                                break;
                            case 4:
                                return s.label++, {
                                    value: i[1],
                                    done: !1
                                };
                            case 5:
                                s.label++, n = i[1], i = [
                                    0
                                ];
                                continue;
                            case 7:
                                i = s.ops.pop(), s.trys.pop();
                                continue;
                            default:
                                if (!(o = (o = s.trys).length > 0 && o[o.length - 1]) && (6 === i[0] || 2 === i[0])) {
                                    s = 0;
                                    continue;
                                }
                                if (3 === i[0] && (!o || i[1] > o[0] && i[1] < o[3])) {
                                    s.label = i[1];
                                    break;
                                }
                                if (6 === i[0] && s.label < o[1]) {
                                    s.label = o[1], o = i;
                                    break;
                                }
                                if (o && s.label < o[2]) {
                                    s.label = o[2], s.ops.push(i);
                                    break;
                                }
                                o[2] && s.ops.pop(), s.trys.pop();
                                continue;
                        }
                        i = e.call(t48, s);
                    } catch (t) {
                        i = [
                            6,
                            t
                        ], n = 0;
                    } finally{
                        r = o = 0;
                    }
                    if (5 & i[0]) throw i[1];
                    return {
                        value: i[0] ? i[1] : void 0,
                        done: !0
                    };
                })([
                    i8,
                    a
                ]);
            };
        }
        return i7 = {
            next: a7(0),
            throw: a7(1),
            return: a7(2)
        }, "function" == typeof Symbol && (i7[Symbol.iterator] = function() {
            return this;
        }), i7;
    };
    Object.defineProperty(e27, "__esModule", {
        value: !0
    });
    var s4 = util$1, a6 = function() {
        function t49(t, e, r) {
            if (this.dtype = e, this.shape = t.slice(), this.size = util$1.sizeFromShape(t), null != r) {
                var n = r.length;
                util$1.assert(n === this.size, "Length of values '" + n + "' does not match the size inferred by the shape '" + this.size + "'.");
            }
            if ("complex64" === e) throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
            this.values = r || util$1.getArrayFromDType(e, util$1.sizeFromShape(this.shape)), this.strides = s4.computeStrides(t);
        }
        return t49.prototype.set = function(t) {
            for(var e = [], r = 1; r < arguments.length; r++)e[r - 1] = arguments[r];
            0 === e.length && (e = [
                0
            ]), util$1.assert(e.length === this.rank, "The number of provided coordinates (" + e.length + ") must match the rank (" + this.rank + ")");
            var n = this.locToIndex(e);
            this.values[n] = t;
        }, t49.prototype.get = function() {
            for(var t = [], e = 0; e < arguments.length; e++)t[e] = arguments[e];
            0 === t.length && (t = [
                0
            ]);
            for(var r = t[t.length - 1], n = 0; n < t.length - 1; ++n)r += this.strides[n] * t[n];
            return this.values[r];
        }, t49.prototype.locToIndex = function(t) {
            if (0 === this.rank) return 0;
            if (1 === this.rank) return t[0];
            for(var e = t[t.length - 1], r = 0; r < t.length - 1; ++r)e += this.strides[r] * t[r];
            return e;
        }, t49.prototype.indexToLoc = function(t) {
            if (0 === this.rank) return [];
            if (1 === this.rank) return [
                t
            ];
            for(var e = new Array(this.shape.length), r = 0; r < e.length - 1; ++r)e[r] = Math.floor(t / this.strides[r]), t -= e[r] * this.strides[r];
            return e[e.length - 1] = t, e;
        }, Object.defineProperty(t49.prototype, "rank", {
            get: function() {
                return this.shape.length;
            },
            enumerable: !0,
            configurable: !0
        }), t49.prototype.toTensor = function() {
            return l.make(this.shape, {
                values: this.values
            }, this.dtype);
        }, t49;
    }();
    e27.TensorBuffer = a6;
    var u3 = null, h = null, c = null;
    e27.setTensorTracker = function(t) {
        u3 = t;
    }, e27.setOpHandler = function(t) {
        h = t;
    }, e27.setDeprecationWarningFn = function(t) {
        c = t;
    };
    var l = function() {
        function t50(t, e, r, n) {
            this.isDisposedInternal = !1, this.shape = t.slice(), this.dtype = e || "float32", this.size = util$1.sizeFromShape(t), this.strides = s4.computeStrides(t), this.dataId = null != n ? n : {
            }, this.id = u3().nextTensorId(), this.rankType = this.rank < 5 ? this.rank.toString() : "higher", u3().registerTensor(this), null != r && u3().write(this.dataId, r);
        }
        return t50.make = function(e, r, n) {
            return new t50(e, n, r.values, r.dataId);
        }, t50.prototype.flatten = function() {
            return this.throwIfDisposed(), this.as1D();
        }, t50.prototype.asScalar = function() {
            return this.throwIfDisposed(), util$1.assert(1 === this.size, "The array must have only 1 element."), this.reshape([]);
        }, t50.prototype.as1D = function() {
            return this.throwIfDisposed(), this.reshape([
                this.size
            ]);
        }, t50.prototype.as2D = function(t, e) {
            return this.throwIfDisposed(), this.reshape([
                t,
                e
            ]);
        }, t50.prototype.as3D = function(t, e, r) {
            return this.throwIfDisposed(), this.reshape([
                t,
                e,
                r
            ]);
        }, t50.prototype.as4D = function(t, e, r, n) {
            return this.throwIfDisposed(), this.reshape([
                t,
                e,
                r,
                n
            ]);
        }, t50.prototype.as5D = function(t, e, r, n, o) {
            return this.throwIfDisposed(), this.reshape([
                t,
                e,
                r,
                n,
                o
            ]);
        }, t50.prototype.asType = function(t) {
            return this.throwIfDisposed(), h.cast(this, t);
        }, Object.defineProperty(t50.prototype, "rank", {
            get: function() {
                return this.shape.length;
            },
            enumerable: !0,
            configurable: !0
        }), t50.prototype.get = function() {
            for(var t = [], e = 0; e < arguments.length; e++)t[e] = arguments[e];
            c("Tensor.get() is deprecated. Use Tensor.array() and native array indexing instead."), util$1.assert(t.length === this.rank, "Number of coordinates in get() must match the rank of the tensor"), util$1.assert("complex64" !== this.dtype, "Tensor.get() is not supported for complex64 tensors yet."), this.throwIfDisposed(), 0 === t.length && (t = [
                0
            ]);
            for(var r = t[t.length - 1], n = 0; n < t.length - 1; ++n)r += this.strides[n] * t[n];
            return this.dataSync()[r];
        }, t50.prototype.buffer = function() {
            return c("Tensor.buffer() is renamed to Tensor.bufferSync() in TensorFlow.js 1.0 and Tensor.buffer() will become an async function."), h.buffer(this.shape, this.dtype, this.dataSync());
        }, t50.prototype.bufferSync = function() {
            return h.buffer(this.shape, this.dtype, this.dataSync());
        }, t50.prototype.array = function() {
            return o15(this, void 0, void 0, function() {
                var t, e;
                return i6(this, function(r) {
                    switch(r.label){
                        case 0:
                            return t = s4.toNestedArray, e = [
                                this.shape
                            ], [
                                4,
                                this.data()
                            ];
                        case 1:
                            return [
                                2,
                                t.apply(void 0, e.concat([
                                    r.sent()
                                ]))
                            ];
                    }
                });
            });
        }, t50.prototype.arraySync = function() {
            return s4.toNestedArray(this.shape, this.dataSync());
        }, t50.prototype.data = function() {
            return o15(this, void 0, void 0, function() {
                return i6(this, function(t) {
                    return this.throwIfDisposed(), [
                        2,
                        u3().read(this.dataId)
                    ];
                });
            });
        }, t50.prototype.dataSync = function() {
            return this.throwIfDisposed(), u3().readSync(this.dataId);
        }, t50.prototype.dispose = function() {
            this.isDisposed || (u3().disposeTensor(this), this.isDisposedInternal = !0);
        }, Object.defineProperty(t50.prototype, "isDisposed", {
            get: function() {
                return this.isDisposedInternal;
            },
            enumerable: !0,
            configurable: !0
        }), t50.prototype.throwIfDisposed = function() {
            if (this.isDisposed) throw new Error("Tensor is disposed.");
        }, t50.prototype.toFloat = function() {
            return this.asType("float32");
        }, t50.prototype.toInt = function() {
            return this.asType("int32");
        }, t50.prototype.toBool = function() {
            return this.asType("bool");
        }, t50.prototype.print = function(t) {
            return void 0 === t && (t = !1), h.print(this, t);
        }, t50.prototype.reshape = function(t) {
            return this.throwIfDisposed(), h.reshape(this, t);
        }, t50.prototype.reshapeAs = function(t) {
            return this.throwIfDisposed(), this.reshape(t.shape);
        }, t50.prototype.expandDims = function(t) {
            return void 0 === t && (t = 0), h.expandDims(this, t);
        }, t50.prototype.cumsum = function(t, e, r) {
            return void 0 === t && (t = 0), void 0 === e && (e = !1), void 0 === r && (r = !1), h.cumsum(this, t, e, r);
        }, t50.prototype.squeeze = function(t) {
            return this.throwIfDisposed(), h.squeeze(this, t);
        }, t50.prototype.clone = function() {
            return this.throwIfDisposed(), h.clone(this);
        }, t50.prototype.oneHot = function(t, e, r) {
            return this.throwIfDisposed(), h.oneHot(this, t, e, r);
        }, t50.prototype.toString = function(t) {
            void 0 === t && (t = !1);
            var e = this.dataSync();
            return tensor_format.tensorToString(e, this.shape, this.dtype, t);
        }, t50.prototype.tile = function(t) {
            return this.throwIfDisposed(), h.tile(this, t);
        }, t50.prototype.gather = function(t, e) {
            return void 0 === e && (e = 0), this.throwIfDisposed(), h.gather(this, t, e);
        }, t50.prototype.matMul = function(t, e, r) {
            return void 0 === e && (e = !1), void 0 === r && (r = !1), this.throwIfDisposed(), h.matMul(this, t, e, r);
        }, t50.prototype.dot = function(t) {
            return this.throwIfDisposed(), h.dot(this, t);
        }, t50.prototype.norm = function(t, e, r) {
            return void 0 === t && (t = "euclidean"), void 0 === e && (e = null), void 0 === r && (r = !1), this.throwIfDisposed(), h.norm(this, t, e, r);
        }, t50.prototype.slice = function(t, e) {
            return this.throwIfDisposed(), h.slice(this, t, e);
        }, t50.prototype.reverse = function(t) {
            return this.throwIfDisposed(), h.reverse(this, t);
        }, t50.prototype.concat = function(e, r) {
            return void 0 === r && (r = 0), this.throwIfDisposed(), e instanceof t50 && (e = [
                e
            ]), h.concat([
                this
            ].concat(e), r);
        }, t50.prototype.split = function(t, e) {
            return void 0 === e && (e = 0), this.throwIfDisposed(), h.split(this, t, e);
        }, t50.prototype.stack = function(t, e) {
            return void 0 === e && (e = 0), h.stack([
                this,
                t
            ], e);
        }, t50.prototype.unstack = function(t) {
            return void 0 === t && (t = 0), h.unstack(this, t);
        }, t50.prototype.pad = function(t, e) {
            return void 0 === e && (e = 0), h.pad(this, t, e);
        }, t50.prototype.batchNormalization = function(t, e, r, n, o) {
            return void 0 === r && (r = 0.001), c("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"), this.batchNorm(t, e, o, n, r);
        }, t50.prototype.batchNorm = function(t, e, r, n, o) {
            return void 0 === o && (o = 0.001), this.throwIfDisposed(), h.batchNorm(this, t, e, r, n, o);
        }, t50.prototype.all = function(t, e) {
            return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), h.all(this, t, e);
        }, t50.prototype.any = function(t, e) {
            return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), h.any(this, t, e);
        }, t50.prototype.logSumExp = function(t, e) {
            return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), h.logSumExp(this, t, e);
        }, t50.prototype.sum = function(t, e) {
            return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), h.sum(this, t, e);
        }, t50.prototype.prod = function(t, e) {
            return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), h.prod(this, t, e);
        }, t50.prototype.mean = function(t, e) {
            return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), h.mean(this, t, e);
        }, t50.prototype.min = function(t, e) {
            return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), h.min(this, t, e);
        }, t50.prototype.max = function(t, e) {
            return void 0 === t && (t = null), void 0 === e && (e = !1), this.throwIfDisposed(), h.max(this, t, e);
        }, t50.prototype.argMin = function(t) {
            return void 0 === t && (t = null), this.throwIfDisposed(), h.argMin(this, t);
        }, t50.prototype.argMax = function(t) {
            return void 0 === t && (t = null), this.throwIfDisposed(), h.argMax(this, t);
        }, t50.prototype.cast = function(t) {
            return this.throwIfDisposed(), h.cast(this, t);
        }, t50.prototype.add = function(t) {
            return this.throwIfDisposed(), h.add(this, t);
        }, t50.prototype.addStrict = function(t) {
            return this.throwIfDisposed(), h.addStrict(this, t);
        }, t50.prototype.atan2 = function(t) {
            return this.throwIfDisposed(), h.atan2(this, t);
        }, t50.prototype.sub = function(t) {
            return this.throwIfDisposed(), h.sub(this, t);
        }, t50.prototype.subStrict = function(t) {
            return this.throwIfDisposed(), h.subStrict(this, t);
        }, t50.prototype.pow = function(t) {
            return this.throwIfDisposed(), h.pow(this, t);
        }, t50.prototype.powStrict = function(t) {
            return this.throwIfDisposed(), h.powStrict(this, t);
        }, t50.prototype.mul = function(t) {
            return this.throwIfDisposed(), h.mul(this, t);
        }, t50.prototype.mulStrict = function(t) {
            return this.throwIfDisposed(), h.mulStrict(this, t);
        }, t50.prototype.div = function(t) {
            return this.throwIfDisposed(), h.div(this, t);
        }, t50.prototype.floorDiv = function(t) {
            return this.throwIfDisposed(), h.floorDiv(this, t);
        }, t50.prototype.divStrict = function(t) {
            return this.throwIfDisposed(), h.divStrict(this, t);
        }, t50.prototype.minimum = function(t) {
            return this.throwIfDisposed(), h.minimum(this, t);
        }, t50.prototype.minimumStrict = function(t) {
            return this.throwIfDisposed(), h.minimumStrict(this, t);
        }, t50.prototype.maximum = function(t) {
            return this.throwIfDisposed(), h.maximum(this, t);
        }, t50.prototype.maximumStrict = function(t) {
            return this.throwIfDisposed(), h.maximumStrict(this, t);
        }, t50.prototype.mod = function(t) {
            return this.throwIfDisposed(), h.mod(this, t);
        }, t50.prototype.modStrict = function(t) {
            return this.throwIfDisposed(), h.modStrict(this, t);
        }, t50.prototype.squaredDifference = function(t) {
            return this.throwIfDisposed(), h.squaredDifference(this, t);
        }, t50.prototype.squaredDifferenceStrict = function(t) {
            return this.throwIfDisposed(), h.squaredDifferenceStrict(this, t);
        }, t50.prototype.transpose = function(t) {
            return this.throwIfDisposed(), h.transpose(this, t);
        }, t50.prototype.notEqual = function(t) {
            return this.throwIfDisposed(), h.notEqual(this, t);
        }, t50.prototype.notEqualStrict = function(t) {
            return this.throwIfDisposed(), h.notEqualStrict(this, t);
        }, t50.prototype.less = function(t) {
            return this.throwIfDisposed(), h.less(this, t);
        }, t50.prototype.lessStrict = function(t) {
            return this.throwIfDisposed(), h.lessStrict(this, t);
        }, t50.prototype.equal = function(t) {
            return this.throwIfDisposed(), h.equal(this, t);
        }, t50.prototype.equalStrict = function(t) {
            return this.throwIfDisposed(), h.equalStrict(this, t);
        }, t50.prototype.lessEqual = function(t) {
            return this.throwIfDisposed(), h.lessEqual(this, t);
        }, t50.prototype.lessEqualStrict = function(t) {
            return this.throwIfDisposed(), h.lessEqualStrict(this, t);
        }, t50.prototype.greater = function(t) {
            return this.throwIfDisposed(), h.greater(this, t);
        }, t50.prototype.greaterStrict = function(t) {
            return this.throwIfDisposed(), h.greaterStrict(this, t);
        }, t50.prototype.greaterEqual = function(t) {
            return this.throwIfDisposed(), h.greaterEqual(this, t);
        }, t50.prototype.greaterEqualStrict = function(t) {
            return this.throwIfDisposed(), h.greaterEqualStrict(this, t);
        }, t50.prototype.logicalAnd = function(t) {
            return this.throwIfDisposed(), h.logicalAnd(this, t);
        }, t50.prototype.logicalOr = function(t) {
            return this.throwIfDisposed(), h.logicalOr(this, t);
        }, t50.prototype.logicalNot = function() {
            return this.throwIfDisposed(), h.logicalNot(this);
        }, t50.prototype.logicalXor = function(t) {
            return this.throwIfDisposed(), h.logicalXor(this, t);
        }, t50.prototype.where = function(t, e) {
            return this.throwIfDisposed(), h.where(t, this, e);
        }, t50.prototype.neg = function() {
            return this.throwIfDisposed(), h.neg(this);
        }, t50.prototype.ceil = function() {
            return this.throwIfDisposed(), h.ceil(this);
        }, t50.prototype.floor = function() {
            return this.throwIfDisposed(), h.floor(this);
        }, t50.prototype.sign = function() {
            return this.throwIfDisposed(), h.sign(this);
        }, t50.prototype.exp = function() {
            return this.throwIfDisposed(), h.exp(this);
        }, t50.prototype.expm1 = function() {
            return this.throwIfDisposed(), h.expm1(this);
        }, t50.prototype.log = function() {
            return this.throwIfDisposed(), h.log(this);
        }, t50.prototype.log1p = function() {
            return this.throwIfDisposed(), h.log1p(this);
        }, t50.prototype.sqrt = function() {
            return this.throwIfDisposed(), h.sqrt(this);
        }, t50.prototype.rsqrt = function() {
            return this.throwIfDisposed(), h.rsqrt(this);
        }, t50.prototype.square = function() {
            return this.throwIfDisposed(), h.square(this);
        }, t50.prototype.reciprocal = function() {
            return this.throwIfDisposed(), h.reciprocal(this);
        }, t50.prototype.abs = function() {
            return this.throwIfDisposed(), h.abs(this);
        }, t50.prototype.clipByValue = function(t, e) {
            return this.throwIfDisposed(), h.clipByValue(this, t, e);
        }, t50.prototype.relu = function() {
            return this.throwIfDisposed(), h.relu(this);
        }, t50.prototype.elu = function() {
            return this.throwIfDisposed(), h.elu(this);
        }, t50.prototype.selu = function() {
            return this.throwIfDisposed(), h.selu(this);
        }, t50.prototype.leakyRelu = function(t) {
            return void 0 === t && (t = 0.2), this.throwIfDisposed(), h.leakyRelu(this, t);
        }, t50.prototype.prelu = function(t) {
            return this.throwIfDisposed(), h.prelu(this, t);
        }, t50.prototype.sigmoid = function() {
            return this.throwIfDisposed(), h.sigmoid(this);
        }, t50.prototype.logSigmoid = function() {
            return this.throwIfDisposed(), h.logSigmoid(this);
        }, t50.prototype.softplus = function() {
            return this.throwIfDisposed(), h.softplus(this);
        }, t50.prototype.zerosLike = function() {
            return this.throwIfDisposed(), h.zerosLike(this);
        }, t50.prototype.onesLike = function() {
            return this.throwIfDisposed(), h.onesLike(this);
        }, t50.prototype.sin = function() {
            return this.throwIfDisposed(), h.sin(this);
        }, t50.prototype.cos = function() {
            return this.throwIfDisposed(), h.cos(this);
        }, t50.prototype.tan = function() {
            return this.throwIfDisposed(), h.tan(this);
        }, t50.prototype.asin = function() {
            return this.throwIfDisposed(), h.asin(this);
        }, t50.prototype.acos = function() {
            return this.throwIfDisposed(), h.acos(this);
        }, t50.prototype.atan = function() {
            return this.throwIfDisposed(), h.atan(this);
        }, t50.prototype.sinh = function() {
            return this.throwIfDisposed(), h.sinh(this);
        }, t50.prototype.cosh = function() {
            return this.throwIfDisposed(), h.cosh(this);
        }, t50.prototype.tanh = function() {
            return this.throwIfDisposed(), h.tanh(this);
        }, t50.prototype.asinh = function() {
            return this.throwIfDisposed(), h.asinh(this);
        }, t50.prototype.acosh = function() {
            return this.throwIfDisposed(), h.acosh(this);
        }, t50.prototype.atanh = function() {
            return this.throwIfDisposed(), h.atanh(this);
        }, t50.prototype.erf = function() {
            return this.throwIfDisposed(), h.erf(this);
        }, t50.prototype.round = function() {
            return this.throwIfDisposed(), h.round(this);
        }, t50.prototype.step = function(t) {
            return void 0 === t && (t = 0), this.throwIfDisposed(), h.step(this, t);
        }, t50.prototype.softmax = function(t) {
            return void 0 === t && (t = -1), this.throwIfDisposed(), h.softmax(this, t);
        }, t50.prototype.logSoftmax = function(t) {
            return void 0 === t && (t = -1), this.throwIfDisposed(), h.logSoftmax(this, t);
        }, t50.prototype.resizeBilinear = function(t, e) {
            return void 0 === e && (e = !1), this.throwIfDisposed(), h.image.resizeBilinear(this, t, e);
        }, t50.prototype.resizeNearestNeighbor = function(t, e) {
            return void 0 === e && (e = !1), this.throwIfDisposed(), h.image.resizeNearestNeighbor(this, t, e);
        }, t50.prototype.conv1d = function(t, e, r, n, o, i) {
            return void 0 === n && (n = "NWC"), void 0 === o && (o = 1), this.throwIfDisposed(), h.conv1d(this, t, e, r, n, o, i);
        }, t50.prototype.conv2d = function(t, e, r, n, o, i) {
            return void 0 === n && (n = "NHWC"), void 0 === o && (o = [
                1,
                1
            ]), this.throwIfDisposed(), h.conv2d(this, t, e, r, n, o, i);
        }, t50.prototype.conv2dTranspose = function(t, e, r, n, o) {
            return this.throwIfDisposed(), h.conv2dTranspose(this, t, e, r, n, o);
        }, t50.prototype.depthwiseConv2D = function(t, e, r, n, o, i) {
            return void 0 === n && (n = "NHWC"), void 0 === o && (o = [
                1,
                1
            ]), this.throwIfDisposed(), h.depthwiseConv2d(this, t, e, r, n, o, i);
        }, t50.prototype.separableConv2d = function(t, e, r, n, o, i) {
            return void 0 === o && (o = [
                1,
                1
            ]), void 0 === i && (i = "NHWC"), this.throwIfDisposed(), h.separableConv2d(this, t, e, r, n, o, i);
        }, t50.prototype.avgPool = function(t, e, r, n) {
            return this.throwIfDisposed(), h.avgPool(this, t, e, r, n);
        }, t50.prototype.maxPool = function(t, e, r, n) {
            return this.throwIfDisposed(), h.maxPool(this, t, e, r, n);
        }, t50.prototype.localResponseNormalization = function(t, e, r, n) {
            return void 0 === t && (t = 5), void 0 === e && (e = 1), void 0 === r && (r = 1), void 0 === n && (n = 0.5), h.localResponseNormalization(this, t, e, r, n);
        }, t50.prototype.pool = function(t, e, r, n, o) {
            return this.throwIfDisposed(), h.pool(this, t, e, r, n, o);
        }, t50.prototype.variable = function(t, e, r) {
            return void 0 === t && (t = !0), this.throwIfDisposed(), f.variable(this, t, e, r);
        }, t50.prototype.unsortedSegmentSum = function(t, e) {
            return this.throwIfDisposed(), h.unsortedSegmentSum(this, t, e);
        }, t50.prototype.batchToSpaceND = function(t, e) {
            return this.throwIfDisposed(), h.batchToSpaceND(this, t, e);
        }, t50.prototype.spaceToBatchND = function(t, e) {
            return this.throwIfDisposed(), h.spaceToBatchND(this, t, e);
        }, t50.prototype.topk = function(t, e) {
            return void 0 === t && (t = 1), void 0 === e && (e = !0), this.throwIfDisposed(), h.topk(this, t, e);
        }, t50.prototype.stridedSlice = function(t, e, r, n, o, i, s, a) {
            return void 0 === n && (n = 0), void 0 === o && (o = 0), void 0 === i && (i = 0), void 0 === s && (s = 0), void 0 === a && (a = 0), this.throwIfDisposed(), h.stridedSlice(this, t, e, r, n, o, i, s, a);
        }, t50.prototype.depthToSpace = function(t, e) {
            return this.throwIfDisposed(), h.depthToSpace(this, t, e);
        }, t50.prototype.fft = function() {
            return this.throwIfDisposed(), h.spectral.fft(this);
        }, t50.prototype.ifft = function() {
            return this.throwIfDisposed(), h.spectral.ifft(this);
        }, t50.prototype.rfft = function() {
            return this.throwIfDisposed(), h.spectral.rfft(this);
        }, t50.prototype.irfft = function() {
            return this.throwIfDisposed(), h.spectral.irfft(this);
        }, t50;
    }();
    e27.Tensor = l, Object.defineProperty(l, Symbol.hasInstance, {
        value: function(t) {
            return !!t && null != t.dataId && null != t.shape && null != t.dtype;
        }
    });
    var f = function(t51) {
        function e29(e, r, n) {
            void 0 === r && (r = !0);
            var o = t51.call(this, e.shape, e.dtype, null, e.dataId) || this;
            o.trainable = r, o.name = n, null == o.name && (o.name = u3().nextVariableId().toString());
            try {
                u3().registerVariable(o);
            } catch (t) {
                throw u3().disposeTensor(o), t;
            }
            return o;
        }
        return n13(e29, t51), e29.variable = function(t, r, n, o) {
            return void 0 === r && (r = !0), null != o && o !== t.dtype && (t = t.asType(o)), new e29(t, r, n);
        }, e29.prototype.assign = function(t) {
            if (t.dtype !== this.dtype) throw new Error("dtype of the new value (" + t.dtype + ") and previous value (" + this.dtype + ") must match");
            if (!util$1.arraysEqual(t.shape, this.shape)) throw new Error("shape of the new value (" + t.shape + ") and previous value (" + this.shape + ") must match");
            u3().disposeTensor(this), this.dataId = t.dataId, u3().registerTensor(this);
        }, e29;
    }(l);
    e27.Variable = f, Object.defineProperty(f, Symbol.hasInstance, {
        value: function(t) {
            return t instanceof l && null != t.assign && t.assign instanceof Function;
        }
    });
    var p = f.variable;
    e27.variable = p;
});
unwrapExports(tensor);
var tensor_1 = tensor.TensorBuffer, tensor_2 = tensor.setTensorTracker, tensor_3 = tensor.setOpHandler, tensor_4 = tensor.setDeprecationWarningFn, tensor_5 = tensor.Tensor, tensor_6 = tensor.Variable, tensor_7 = tensor.variable, types = createCommonjsModule(function(t52, e30) {
    var r, n, o, i;
    Object.defineProperty(e30, "__esModule", {
        value: !0
    }), (function(t) {
        t.R0 = "R0", t.R1 = "R1", t.R2 = "R2", t.R3 = "R3", t.R4 = "R4", t.R5 = "R5", t.R6 = "R6";
    })(e30.Rank || (e30.Rank = {
    })), (function(t) {
        t.float32 = "float32", t.int32 = "int32", t.bool = "int32", t.complex64 = "complex64";
    })(r || (r = {
    })), (function(t) {
        t.float32 = "float32", t.int32 = "int32", t.bool = "bool", t.complex64 = "complex64";
    })(n || (n = {
    })), (function(t) {
        t.float32 = "float32", t.int32 = "float32", t.bool = "float32", t.complex64 = "complex64";
    })(o || (o = {
    })), (function(t) {
        t.float32 = "complex64", t.int32 = "complex64", t.bool = "complex64", t.complex64 = "complex64";
    })(i || (i = {
    }));
    var s = {
        float32: o,
        int32: r,
        bool: n,
        complex64: i
    };
    function a(t, e) {
        if ("string" === t || "string" === e) {
            if ("string" === t && "string" === e) return "string";
            throw new Error("Can not upcast " + t + " with " + e);
        }
        return s[t][e];
    }
    e30.upcastType = a, e30.sumOutType = function(t) {
        return a(t, "int32");
    };
});
unwrapExports(types);
var types_1 = types.Rank, types_2 = types.upcastType, types_3 = types.sumOutType, tensor_util = createCommonjsModule(function(t53, e31) {
    Object.defineProperty(e31, "__esModule", {
        value: !0
    }), e31.makeTypesMatch = function(t, e) {
        if (t.dtype === e.dtype) return [
            t,
            e
        ];
        var r = types.upcastType(t.dtype, e.dtype);
        return [
            t.cast(r),
            e.cast(r)
        ];
    }, e31.assertTypesMatch = function(t, e) {
        util$1.assert(t.dtype === e.dtype, "The dtypes of the first(" + t.dtype + ") and second(" + e.dtype + ") input must match");
    }, e31.isTensorInList = function(t, e) {
        for(var r = 0; r < e.length; r++)if (e[r].id === t.id) return !0;
        return !1;
    }, e31.flattenNameArrayMap = function(t, e) {
        var r = [];
        if (t instanceof tensor.Tensor) r.push(t);
        else for(var n = t, o = 0; o < e.length; o++)r.push(n[e[o]]);
        return r;
    }, e31.unflattenToNameArrayMap = function(t, e) {
        if (t.length !== e.length) throw new Error("Cannot unflatten Tensor[], keys and arrays are not of same length.");
        for(var r = {
        }, n = 0; n < t.length; n++)r[t[n]] = e[n];
        return r;
    }, e31.getTensorsInContainer = function(t54) {
        var e32 = [];
        return (function t(e, r, n) {
            if (null != e) {
                if (e instanceof tensor.Tensor) r.push(e);
                else if (o = e, Array.isArray(o) || "object" == typeof o) {
                    var o, i = e;
                    for(var s in i){
                        var a = i[s];
                        n.has(a) || (n.add(a), t(a, r, n));
                    }
                }
            }
        })(t54, e32, new Set), e32;
    };
});
unwrapExports(tensor_util);
var tensor_util_1 = tensor_util.makeTypesMatch, tensor_util_2 = tensor_util.assertTypesMatch, tensor_util_3 = tensor_util.isTensorInList, tensor_util_4 = tensor_util.flattenNameArrayMap, tensor_util_5 = tensor_util.unflattenToNameArrayMap, tensor_util_6 = tensor_util.getTensorsInContainer;
function deepMapInternal(t, e, r, n) {
    if (void 0 === r && (r = new Map), void 0 === n && (n = new Set), null == t) return null;
    if (n.has(t)) throw new Error("Circular references are not supported.");
    if (r.has(t)) return r.get(t);
    var o = e(t);
    if (o.recurse && null !== o.value) throw new Error("A deep map function may not return both a value and recurse=true.");
    if (o.recurse) {
        if (isIterable(t)) {
            var i = Array.isArray(t) ? [] : {
            };
            for(var s in n.add(t), t){
                var a = deepMapInternal(t[s], e, r, n);
                i[s] = a;
            }
            return n.delete(t), i;
        }
        throw new Error("Can't recurse into non-iterable type: " + t);
    }
    return r.set(t, o.value), o.value;
}
function deepZip(t, e) {
    return void 0 === e && (e = zipToList), deepZipInternal(t, e);
}
function deepZipInternal(t55, e, r) {
    void 0 === r && (r = new Set);
    var n = t55[0];
    if (r.has(n)) throw new Error("Circular references are not supported.");
    var o16 = e(t55);
    if (o16.recurse && null !== o16.value) throw new Error("A deep zip function may not return both a value and recurse=true.");
    if (o16.recurse) {
        if (isIterable(n)) {
            var i = Array.isArray(n) ? [] : {
            };
            r.add(n);
            var s = function(n) {
                var o = deepZipInternal(t55.map(function(t) {
                    return t[n];
                }), e, r);
                i[n] = o;
            };
            for(var a in n)s(a);
            return r.delete(n), i;
        }
        throw new Error("Can't recurse into non-iterable type: " + n);
    }
    return o16.value;
}
function zipToList(t) {
    return null === t ? null : isIterable(t[0]) ? {
        value: null,
        recurse: !0
    } : {
        value: t,
        recurse: !1
    };
}
function deepMapAndAwaitAll(t, e) {
    return __awaiter(this, void 0, void 0, function() {
        var r, n, o, i, s, a;
        return __generator(this, function(u) {
            switch(u.label){
                case 0:
                    r = new Map, deepMapInternal(t, e, r), n = 0, o = Array.from(r.keys()), u.label = 1;
                case 1:
                    return n < o.length ? (i = o[n], (s = r.get(i)) instanceof Promise ? [
                        4,
                        s
                    ] : [
                        3,
                        3
                    ]) : [
                        3,
                        4
                    ];
                case 2:
                    a = u.sent(), r.set(i, a), u.label = 3;
                case 3:
                    return n++, [
                        3,
                        1
                    ];
                case 4:
                    return [
                        2,
                        deepMapInternal(t, e, r)
                    ];
            }
        });
    });
}
function isIterable(t) {
    return null != t && (Array.isArray(t) || "object" == typeof t && !(t instanceof _tfjsCore.Tensor));
}
function isNumericArray(t) {
    if (null == t) return !1;
    if (!Array.isArray(t)) return !1;
    for(var e in t)if ("number" != typeof t[e]) return !1;
    return !0;
}
var RingBuffer = function() {
    function t56(t) {
        if (this.capacity = t, this.begin = 0, this.end = 0, t < 1) throw new RangeError("Can't create ring buffer of capacity < 1.");
        this.data = new Array(t), this.doubledCapacity = 2 * t;
    }
    return t56.prototype.wrap = function(t) {
        for(; t < 0;)t += this.doubledCapacity;
        return t % this.doubledCapacity;
    }, t56.prototype.get = function(t) {
        if (t < 0) throw new RangeError("Can't get item at a negative index.");
        return this.data[t % this.capacity];
    }, t56.prototype.set = function(t, e) {
        if (t < 0) throw new RangeError("Can't set item at a negative index.");
        this.data[t % this.capacity] = e;
    }, t56.prototype.length = function() {
        var t = this.end - this.begin;
        return t < 0 && (t = this.doubledCapacity + t), t;
    }, t56.prototype.isFull = function() {
        return this.length() === this.capacity;
    }, t56.prototype.isEmpty = function() {
        return 0 === this.length();
    }, t56.prototype.push = function(t) {
        if (this.isFull()) throw new RangeError("Ring buffer is full.");
        this.set(this.end, t), this.end = this.wrap(this.end + 1);
    }, t56.prototype.pushAll = function(t) {
        for(var e = 0, r = t; e < r.length; e++){
            var n = r[e];
            this.push(n);
        }
    }, t56.prototype.pop = function() {
        if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
        this.end = this.wrap(this.end - 1);
        var t = this.get(this.end);
        return this.set(this.end, void 0), t;
    }, t56.prototype.unshift = function(t) {
        if (this.isFull()) throw new RangeError("Ring buffer is full.");
        this.begin = this.wrap(this.begin - 1), this.set(this.begin, t);
    }, t56.prototype.shift = function() {
        if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
        var t = this.get(this.begin);
        return this.set(this.begin, void 0), this.begin = this.wrap(this.begin + 1), t;
    }, t56.prototype.shuffleExcise = function(t) {
        if (this.isEmpty()) throw new RangeError("Ring buffer is empty.");
        var e = this.wrap(this.begin + t), r = this.get(e);
        return this.set(e, this.pop()), r;
    }, t56;
}(), GrowingRingBuffer = function(t57) {
    function e33() {
        return t57.call(this, e33.INITIAL_CAPACITY) || this;
    }
    return __extends(e33, t57), e33.prototype.isFull = function() {
        return !1;
    }, e33.prototype.push = function(e) {
        t57.prototype.isFull.call(this) && this.expand(), t57.prototype.push.call(this, e);
    }, e33.prototype.unshift = function(e) {
        t57.prototype.isFull.call(this) && this.expand(), t57.prototype.unshift.call(this, e);
    }, e33.prototype.expand = function() {
        for(var t = 2 * this.capacity, e = new Array(t), r = this.length(), n = 0; n < r; n++)e[n] = this.get(this.wrap(this.begin + n));
        this.data = e, this.capacity = t, this.doubledCapacity = 2 * this.capacity, this.begin = 0, this.end = r;
    }, e33.INITIAL_CAPACITY = 32, e33;
}(RingBuffer);
function iteratorFromItems(t) {
    return new ArrayIterator(t);
}
function iteratorFromFunction(t) {
    return new FunctionCallIterator(t);
}
function iteratorFromConcatenated(t, e) {
    return new ChainedIterator(t, e);
}
function iteratorFromZipped(t, e) {
    return void 0 === e && (e = ZipMismatchMode.FAIL), new ZipIterator(t, e);
}
var ZipMismatchMode, LazyIterator = function() {
    function t58() {
    }
    return t58.prototype.collect = function(t, e) {
        return void 0 === t && (t = 1000), void 0 === e && (e = 100), __awaiter(this, void 0, void 0, function() {
            var r, n, o, i;
            return __generator(this, function(s) {
                switch(s.label){
                    case 0:
                        return r = e > 0 ? this.prefetch(e) : this, n = [], o = 0, [
                            4,
                            r.next()
                        ];
                    case 1:
                        i = s.sent(), s.label = 2;
                    case 2:
                        return i.done ? [
                            3,
                            4
                        ] : (n.push(i.value), ++o >= t ? [
                            2,
                            n
                        ] : [
                            4,
                            r.next()
                        ]);
                    case 3:
                        return i = s.sent(), [
                            3,
                            2
                        ];
                    case 4:
                        return [
                            2,
                            n
                        ];
                }
            });
        });
    }, t58.prototype.resolveFully = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t;
            return __generator(this, function(e) {
                switch(e.label){
                    case 0:
                        return [
                            4,
                            this.next()
                        ];
                    case 1:
                        t = e.sent(), e.label = 2;
                    case 2:
                        return t.done ? [
                            3,
                            4
                        ] : [
                            4,
                            this.next()
                        ];
                    case 3:
                        return t = e.sent(), [
                            3,
                            2
                        ];
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
    }, t58.prototype.resolveWhile = function(t) {
        return __awaiter(this, void 0, void 0, function() {
            var e, r;
            return __generator(this, function(n) {
                switch(n.label){
                    case 0:
                        return [
                            4,
                            this.next()
                        ];
                    case 1:
                        e = n.sent(), r = t(e.value), n.label = 2;
                    case 2:
                        return e.done || !r ? [
                            3,
                            4
                        ] : [
                            4,
                            this.next()
                        ];
                    case 3:
                        return e = n.sent(), r = t(e.value), [
                            3,
                            2
                        ];
                    case 4:
                        return [
                            2
                        ];
                }
            });
        });
    }, t58.prototype.handleErrors = function(t) {
        return new ErrorHandlingLazyIterator(this, t);
    }, t58.prototype.filter = function(t) {
        return new FilterIterator(this, t);
    }, t58.prototype.map = function(t) {
        return new MapIterator(this, t);
    }, t58.prototype.mapAsync = function(t) {
        return new AsyncMapIterator(this, t);
    }, t58.prototype.serialMapAsync = function(t) {
        return new AsyncMapIterator(this, t).serial();
    }, t58.prototype.flatmap = function(t) {
        return new FlatmapIterator(this, t);
    }, t58.prototype.forEachAsync = function(t) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                return [
                    2,
                    this.map(t).resolveFully()
                ];
            });
        });
    }, t58.prototype.serialForEach = function(t59) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                return [
                    2,
                    this.serialMapAsync(t59).resolveWhile(function(t) {
                        return !0 === t;
                    })
                ];
            });
        });
    }, t58.prototype.rowMajorBatch = function(t, e) {
        return void 0 === e && (e = !0), new RowMajorBatchIterator(this, t, e);
    }, t58.prototype.columnMajorBatch = function(t60, e, r) {
        return void 0 === e && (e = !0), void 0 === r && (r = zipToList), this.rowMajorBatch(t60, e).map(function(t) {
            return deepZip(t, r);
        });
    }, t58.prototype.concatenate = function(t, e) {
        return new ChainedIterator(iteratorFromItems([
            this,
            t
        ]), e);
    }, t58.prototype.take = function(t) {
        return t < 0 || null == t ? this : new TakeIterator(this, t);
    }, t58.prototype.skip = function(t) {
        return t < 0 || null == t ? this : new SkipIterator(this, t);
    }, t58.prototype.prefetch = function(t) {
        return new PrefetchIterator(this, t);
    }, t58.prototype.shuffle = function(t, e) {
        return new ShuffleIterator(this, t, e);
    }, t58.prototype.serial = function() {
        return new SerialIterator(this);
    }, t58;
}(), ArrayIterator = function(t61) {
    function e34(e) {
        var r = t61.call(this) || this;
        return r.items = e, r.trav = 0, r;
    }
    return __extends(e34, t61), e34.prototype.summary = function() {
        return "Array of " + this.items.length + " items";
    }, e34.prototype.next = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t, e;
            return __generator(this, function(r) {
                return this.trav >= this.items.length ? [
                    2,
                    {
                        value: null,
                        done: !0
                    }
                ] : (t = this.items[this.trav], e = t instanceof _tfjsCore.Tensor ? _tfjsCore.clone(t) : t, this.trav++, [
                    2,
                    {
                        value: e,
                        done: !1
                    }
                ]);
            });
        });
    }, e34;
}(LazyIterator), FunctionCallIterator = function(t) {
    function e35(e) {
        var r = t.call(this) || this;
        return r.nextFn = e, r;
    }
    return __extends(e35, t), e35.prototype.summary = function() {
        return "Function call";
    }, e35.prototype.next = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                try {
                    return [
                        2,
                        this.nextFn()
                    ];
                } catch (t62) {
                    throw t62.message = "Error thrown while iterating through a dataset: " + t62.message, t62;
                }
                return [
                    2
                ];
            });
        });
    }, e35;
}(LazyIterator), SerialIterator = function(t63) {
    function e36(e) {
        var r = t63.call(this) || this;
        return r.upstream = e, r.lastRead = Promise.resolve({
            value: null,
            done: !1
        }), r;
    }
    return __extends(e36, t63), e36.prototype.summary = function() {
        return this.upstream.summary() + " -> Serial";
    }, e36.prototype.next = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t = this;
            return __generator(this, function(e) {
                return this.lastRead = this.lastRead.then(function() {
                    return t.serialNext();
                }), [
                    2,
                    this.lastRead
                ];
            });
        });
    }, e36.prototype.serialNext = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [
                    2,
                    this.upstream.next()
                ];
            });
        });
    }, e36;
}(LazyIterator), SkipIterator = function(t64) {
    function e37(e, r) {
        var n = t64.call(this) || this;
        return n.upstream = e, n.maxCount = r, n.count = 0, n.lastRead = Promise.resolve({
            value: null,
            done: !1
        }), n;
    }
    return __extends(e37, t64), e37.prototype.summary = function() {
        return this.upstream.summary() + " -> Skip";
    }, e37.prototype.next = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t = this;
            return __generator(this, function(e) {
                return this.lastRead = this.lastRead.then(function() {
                    return t.serialNext();
                }), [
                    2,
                    this.lastRead
                ];
            });
        });
    }, e37.prototype.serialNext = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t;
            return __generator(this, function(e) {
                switch(e.label){
                    case 0:
                        return (this.count++) < this.maxCount ? [
                            4,
                            this.upstream.next()
                        ] : [
                            3,
                            2
                        ];
                    case 1:
                        return (t = e.sent()).done ? [
                            2,
                            t
                        ] : (_tfjsCore.dispose(t.value), [
                            3,
                            0
                        ]);
                    case 2:
                        return [
                            2,
                            this.upstream.next()
                        ];
                }
            });
        });
    }, e37;
}(LazyIterator), TakeIterator = function(t) {
    function e38(e, r) {
        var n = t.call(this) || this;
        return n.upstream = e, n.maxCount = r, n.count = 0, n;
    }
    return __extends(e38, t), e38.prototype.summary = function() {
        return this.upstream.summary() + " -> Take";
    }, e38.prototype.next = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return (this.count++) >= this.maxCount ? [
                    2,
                    {
                        value: null,
                        done: !0
                    }
                ] : [
                    2,
                    this.upstream.next()
                ];
            });
        });
    }, e38;
}(LazyIterator), RowMajorBatchIterator = function(t65) {
    function e39(e, r, n) {
        void 0 === n && (n = !0);
        var o = t65.call(this) || this;
        return o.upstream = e, o.batchSize = r, o.enableSmallLastBatch = n, o.lastRead = Promise.resolve({
            value: null,
            done: !1
        }), o;
    }
    return __extends(e39, t65), e39.prototype.summary = function() {
        return this.upstream.summary() + " -> RowMajorBatch";
    }, e39.prototype.next = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t = this;
            return __generator(this, function(e) {
                return this.lastRead = this.lastRead.then(function() {
                    return t.serialNext();
                }), [
                    2,
                    this.lastRead
                ];
            });
        });
    }, e39.prototype.serialNext = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t, e;
            return __generator(this, function(r) {
                switch(r.label){
                    case 0:
                        t = [], r.label = 1;
                    case 1:
                        return t.length < this.batchSize ? [
                            4,
                            this.upstream.next()
                        ] : [
                            3,
                            3
                        ];
                    case 2:
                        return (e = r.sent()).done ? this.enableSmallLastBatch && t.length > 0 ? [
                            2,
                            {
                                value: t,
                                done: !1
                            }
                        ] : [
                            2,
                            {
                                value: null,
                                done: !0
                            }
                        ] : (t.push(e.value), [
                            3,
                            1
                        ]);
                    case 3:
                        return [
                            2,
                            {
                                value: t,
                                done: !1
                            }
                        ];
                }
            });
        });
    }, e39;
}(LazyIterator), FilterIterator = function(t66) {
    function e40(e, r) {
        var n = t66.call(this) || this;
        return n.upstream = e, n.predicate = r, n.lastRead = Promise.resolve({
            value: null,
            done: !1
        }), n;
    }
    return __extends(e40, t66), e40.prototype.summary = function() {
        return this.upstream.summary() + " -> Filter";
    }, e40.prototype.next = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t = this;
            return __generator(this, function(e) {
                return this.lastRead = this.lastRead.then(function() {
                    return t.serialNext();
                }), [
                    2,
                    this.lastRead
                ];
            });
        });
    }, e40.prototype.serialNext = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t;
            return __generator(this, function(e) {
                switch(e.label){
                    case 0:
                        return [
                            4,
                            this.upstream.next()
                        ];
                    case 1:
                        return (t = e.sent()).done || this.predicate(t.value) ? [
                            2,
                            t
                        ] : (_tfjsCore.dispose(t.value), [
                            3,
                            0
                        ]);
                    case 2:
                        return [
                            2
                        ];
                }
            });
        });
    }, e40;
}(LazyIterator), MapIterator = function(t67) {
    function e41(e, r) {
        var n = t67.call(this) || this;
        return n.upstream = e, n.transform = r, n;
    }
    return __extends(e41, t67), e41.prototype.summary = function() {
        return this.upstream.summary() + " -> Map";
    }, e41.prototype.next = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t, e, r, n, o, i, s;
            return __generator(this, function(a) {
                switch(a.label){
                    case 0:
                        return [
                            4,
                            this.upstream.next()
                        ];
                    case 1:
                        if ((t = a.sent()).done) return [
                            2,
                            {
                                value: null,
                                done: !0
                            }
                        ];
                        for(e = tensor_util_6(t.value), r = this.transform(t.value), n = tensor_util_6(r), o = 0, i = e; o < i.length; o++)s = i[o], tensor_util_3(s, n) || s.dispose();
                        return [
                            2,
                            {
                                value: r,
                                done: !1
                            }
                        ];
                }
            });
        });
    }, e41;
}(LazyIterator), ErrorHandlingLazyIterator = function(t68) {
    function e42(e, r) {
        var n = t68.call(this) || this;
        return n.upstream = e, n.handler = r, n.count = 0, n.lastRead = Promise.resolve({
            value: null,
            done: !1
        }), n;
    }
    return __extends(e42, t68), e42.prototype.summary = function() {
        return this.upstream.summary() + " -> handleErrors";
    }, e42.prototype.next = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t = this;
            return __generator(this, function(e) {
                return this.lastRead = this.lastRead.then(function() {
                    return t.serialNext();
                }), [
                    2,
                    this.lastRead
                ];
            });
        });
    }, e42.prototype.serialNext = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t;
            return __generator(this, function(e) {
                switch(e.label){
                    case 0:
                        e.label = 1;
                    case 1:
                        return e.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]), [
                            4,
                            this.upstream.next()
                        ];
                    case 2:
                        return [
                            2,
                            e.sent()
                        ];
                    case 3:
                        return t = e.sent(), this.handler(t) ? [
                            3,
                            4
                        ] : [
                            2,
                            {
                                value: null,
                                done: !0
                            }
                        ];
                    case 4:
                        return [
                            3,
                            0
                        ];
                    case 5:
                        return [
                            2
                        ];
                }
            });
        });
    }, e42;
}(LazyIterator), AsyncMapIterator = function(t69) {
    function e43(e, r) {
        var n = t69.call(this) || this;
        return n.upstream = e, n.transform = r, n;
    }
    return __extends(e43, t69), e43.prototype.summary = function() {
        return this.upstream.summary() + " -> AsyncMap";
    }, e43.prototype.next = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t, e, r, n, o, i, s;
            return __generator(this, function(a) {
                switch(a.label){
                    case 0:
                        return [
                            4,
                            this.upstream.next()
                        ];
                    case 1:
                        return (t = a.sent()).done ? [
                            2,
                            {
                                value: null,
                                done: !0
                            }
                        ] : (e = tensor_util_6(t.value), [
                            4,
                            this.transform(t.value)
                        ]);
                    case 2:
                        for(r = a.sent(), n = tensor_util_6(r), o = 0, i = e; o < i.length; o++)s = i[o], tensor_util_3(s, n) || s.dispose();
                        return [
                            2,
                            {
                                value: r,
                                done: !1
                            }
                        ];
                }
            });
        });
    }, e43;
}(LazyIterator), OneToManyIterator = function(t70) {
    function e44() {
        var e = t70.call(this) || this;
        return e.outputQueue = new GrowingRingBuffer, e.lastRead = Promise.resolve({
            value: null,
            done: !1
        }), e;
    }
    return __extends(e44, t70), e44.prototype.next = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t = this;
            return __generator(this, function(e) {
                return this.lastRead = this.lastRead.then(function() {
                    return t.serialNext();
                }), [
                    2,
                    this.lastRead
                ];
            });
        });
    }, e44.prototype.serialNext = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                switch(t.label){
                    case 0:
                        return 0 !== this.outputQueue.length() ? [
                            3,
                            2
                        ] : [
                            4,
                            this.pump()
                        ];
                    case 1:
                        return t.sent() ? [
                            3,
                            0
                        ] : [
                            2,
                            {
                                value: null,
                                done: !0
                            }
                        ];
                    case 2:
                        return [
                            2,
                            {
                                value: this.outputQueue.shift(),
                                done: !1
                            }
                        ];
                }
            });
        });
    }, e44;
}(LazyIterator), FlatmapIterator = function(t71) {
    function e45(e, r) {
        var n = t71.call(this) || this;
        return n.upstream = e, n.transform = r, n;
    }
    return __extends(e45, t71), e45.prototype.summary = function() {
        return this.upstream.summary() + " -> Flatmap";
    }, e45.prototype.pump = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t, e, r, n, o, i, s;
            return __generator(this, function(a) {
                switch(a.label){
                    case 0:
                        return [
                            4,
                            this.upstream.next()
                        ];
                    case 1:
                        if ((t = a.sent()).done) return [
                            2,
                            !1
                        ];
                        for(e = tensor_util_6(t.value), r = this.transform(t.value), n = tensor_util_6(r), this.outputQueue.pushAll(r), o = 0, i = e; o < i.length; o++)s = i[o], tensor_util_3(s, n) || s.dispose();
                        return [
                            2,
                            !0
                        ];
                }
            });
        });
    }, e45;
}(OneToManyIterator), ChainedIterator = function(t72) {
    function e46(e, r) {
        var n = t72.call(this) || this;
        return n.baseErrorHandler = r, n.lastRead = null, n.iterator = null, n.moreIterators = e, n;
    }
    return __extends(e46, t72), e46.prototype.summary = function() {
        return "TODO: fill in upstream of chained summaries -> Chained";
    }, e46.prototype.next = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return this.lastRead = this.readFromChain(this.lastRead), [
                    2,
                    this.lastRead
                ];
            });
        });
    }, e46.prototype.readFromChain = function(t) {
        return __awaiter(this, void 0, void 0, function() {
            var e, r;
            return __generator(this, function(n) {
                switch(n.label){
                    case 0:
                        return [
                            4,
                            t
                        ];
                    case 1:
                        return n.sent(), null != this.iterator ? [
                            3,
                            3
                        ] : [
                            4,
                            this.moreIterators.next()
                        ];
                    case 2:
                        if ((e = n.sent()).done) return [
                            2,
                            {
                                value: null,
                                done: !0
                            }
                        ];
                        this.iterator = e.value, null != this.baseErrorHandler && (this.iterator = this.iterator.handleErrors(this.baseErrorHandler)), n.label = 3;
                    case 3:
                        return [
                            4,
                            this.iterator.next()
                        ];
                    case 4:
                        return (r = n.sent()).done ? (this.iterator = null, [
                            2,
                            this.readFromChain(t)
                        ]) : [
                            2,
                            r
                        ];
                }
            });
        });
    }, e46;
}(LazyIterator);
!function(t) {
    t[t.FAIL = 0] = "FAIL", t[t.SHORTEST = 1] = "SHORTEST", t[t.LONGEST = 2] = "LONGEST";
}(ZipMismatchMode || (ZipMismatchMode = {
}));
var ZipIterator = function(t73) {
    function e47(e, r) {
        void 0 === r && (r = ZipMismatchMode.FAIL);
        var n = t73.call(this) || this;
        return n.iterators = e, n.mismatchMode = r, n.count = 0, n.currentPromise = null, n;
    }
    return __extends(e47, t73), e47.prototype.summary = function() {
        return "{TODO: fill in upstream of zip summaries} -> Zip";
    }, e47.prototype.nextState = function(t74) {
        return __awaiter(this, void 0, void 0, function() {
            function e(t75) {
                return t75 instanceof LazyIterator ? {
                    value: t75.next().then(function(t) {
                        return r++, t.done && n++, t.value;
                    }),
                    recurse: !1
                } : {
                    value: null,
                    recurse: !0
                };
            }
            var r, n, o;
            return __generator(this, function(i) {
                switch(i.label){
                    case 0:
                        return [
                            4,
                            t74
                        ];
                    case 1:
                        return i.sent(), r = 0, n = 0, [
                            4,
                            deepMapAndAwaitAll(this.iterators, e)
                        ];
                    case 2:
                        if (o = i.sent(), r === n) return [
                            2,
                            {
                                value: null,
                                done: !0
                            }
                        ];
                        if (n > 0) switch(this.mismatchMode){
                            case ZipMismatchMode.FAIL:
                                throw new Error("Zipped streams should have the same length. Mismatched at element " + this.count + ".");
                            case ZipMismatchMode.SHORTEST:
                                return [
                                    2,
                                    {
                                        value: null,
                                        done: !0
                                    }
                                ];
                            case ZipMismatchMode.LONGEST:
                        }
                        return this.count++, [
                            2,
                            {
                                value: o,
                                done: !1
                            }
                        ];
                }
            });
        });
    }, e47.prototype.next = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                switch(t.label){
                    case 0:
                        return this.currentPromise = this.nextState(this.currentPromise), [
                            4,
                            this.currentPromise
                        ];
                    case 1:
                        return [
                            2,
                            t.sent()
                        ];
                }
            });
        });
    }, e47;
}(LazyIterator), PrefetchIterator = function(t76) {
    function e48(e, r) {
        var n = t76.call(this) || this;
        return n.upstream = e, n.bufferSize = r, n.buffer = new RingBuffer(r), n;
    }
    return __extends(e48, t76), e48.prototype.summary = function() {
        return this.upstream.summary() + " -> Prefetch";
    }, e48.prototype.refill = function() {
        for(; !this.buffer.isFull();){
            var t = this.upstream.next();
            this.buffer.push(t);
        }
    }, e48.prototype.next = function() {
        return this.refill(), this.buffer.shift();
    }, e48;
}(LazyIterator), ShuffleIterator = function(t77) {
    function e49(e, r, n) {
        var o = t77.call(this, e, r) || this;
        return o.upstream = e, o.windowSize = r, o.upstreamExhausted = !1, o.random = seedrandom_1(n || _tfjsCore.util.now().toString()), o.lastRead = Promise.resolve({
            value: null,
            done: !1
        }), o;
    }
    return __extends(e49, t77), e49.prototype.next = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t = this;
            return __generator(this, function(e) {
                return this.lastRead = this.lastRead.then(function() {
                    return t.serialNext();
                }), [
                    2,
                    this.lastRead
                ];
            });
        });
    }, e49.prototype.randomInt = function(t) {
        return Math.floor(this.random() * t);
    }, e49.prototype.chooseIndex = function() {
        return this.randomInt(this.buffer.length());
    }, e49.prototype.serialNext = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t, e;
            return __generator(this, function(r) {
                switch(r.label){
                    case 0:
                        this.upstreamExhausted || this.refill(), r.label = 1;
                    case 1:
                        return this.buffer.isEmpty() ? [
                            3,
                            3
                        ] : (t = this.chooseIndex(), [
                            4,
                            this.buffer.shuffleExcise(t)
                        ]);
                    case 2:
                        return (e = r.sent()).done ? (this.upstreamExhausted = !0, [
                            3,
                            1
                        ]) : (this.refill(), [
                            2,
                            e
                        ]);
                    case 3:
                        return [
                            2,
                            {
                                value: null,
                                done: !0
                            }
                        ];
                }
            });
        });
    }, e49;
}(PrefetchIterator), Dataset = function() {
    function t78() {
        this.size = null;
    }
    return t78.prototype.batch = function(t, e) {
        var r21 = this;
        void 0 === e && (e = !0);
        var n = this;
        return _tfjsCore.util.assert(t > 0, "batchSize need to be positive, but it is\n      " + t), datasetFromIteratorFn(function() {
            return __awaiter(r21, void 0, void 0, function() {
                return __generator(this, function(r) {
                    switch(r.label){
                        case 0:
                            return [
                                4,
                                n.iterator()
                            ];
                        case 1:
                            return [
                                2,
                                r.sent().columnMajorBatch(t, e, deepBatchConcat)
                            ];
                    }
                });
            });
        }, this.size === 1 / 0 || null == this.size ? this.size : e ? Math.ceil(this.size / t) : Math.floor(this.size / t));
    }, t78.prototype.concatenate = function(t) {
        var e50 = this, r = this;
        return datasetFromIteratorFn(function() {
            return __awaiter(e50, void 0, void 0, function() {
                var e, n;
                return __generator(this, function(o) {
                    switch(o.label){
                        case 0:
                            return [
                                4,
                                r.iterator()
                            ];
                        case 1:
                            return n = (e = o.sent()).concatenate, [
                                4,
                                t.iterator()
                            ];
                        case 2:
                            return [
                                2,
                                n.apply(e, [
                                    o.sent()
                                ])
                            ];
                    }
                });
            });
        }, this.size === 1 / 0 || t.size === 1 / 0 ? 1 / 0 : null != this.size && null != t.size ? this.size + t.size : null);
    }, t78.prototype.filter = function(t) {
        var e51 = this, r = this;
        return datasetFromIteratorFn(function() {
            return __awaiter(e51, void 0, void 0, function() {
                return __generator(this, function(e52) {
                    switch(e52.label){
                        case 0:
                            return [
                                4,
                                r.iterator()
                            ];
                        case 1:
                            return [
                                2,
                                e52.sent().filter(function(e) {
                                    return _tfjsCore.tidy(function() {
                                        return t(e);
                                    });
                                })
                            ];
                    }
                });
            });
        }, this.size === 1 / 0 ? 1 / 0 : null);
    }, t78.prototype.forEachAsync = function(t) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                switch(e.label){
                    case 0:
                        return [
                            4,
                            this.iterator()
                        ];
                    case 1:
                        return [
                            2,
                            e.sent().forEachAsync(t)
                        ];
                }
            });
        });
    }, t78.prototype.forEach = function(t) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(e) {
                return _tfjsCore.deprecationWarn("dataset.forEach() is deprecated and will be removed. Please use dataset.forEachAsync() instead"), [
                    2,
                    this.forEachAsync(t)
                ];
            });
        });
    }, t78.prototype.map = function(t) {
        var e53 = this, r = this;
        return datasetFromIteratorFn(function() {
            return __awaiter(e53, void 0, void 0, function() {
                return __generator(this, function(e54) {
                    switch(e54.label){
                        case 0:
                            return [
                                4,
                                r.iterator()
                            ];
                        case 1:
                            return [
                                2,
                                e54.sent().map(function(e) {
                                    return _tfjsCore.tidy(function() {
                                        return t(e);
                                    });
                                })
                            ];
                    }
                });
            });
        }, this.size);
    }, t78.prototype.mapAsync = function(t) {
        var e55 = this, r = this;
        return datasetFromIteratorFn(function() {
            return __awaiter(e55, void 0, void 0, function() {
                return __generator(this, function(e) {
                    switch(e.label){
                        case 0:
                            return [
                                4,
                                r.iterator()
                            ];
                        case 1:
                            return [
                                2,
                                e.sent().mapAsync(t)
                            ];
                    }
                });
            });
        }, this.size);
    }, t78.prototype.prefetch = function(t) {
        var e56 = this, r = this;
        return datasetFromIteratorFn(function() {
            return __awaiter(e56, void 0, void 0, function() {
                return __generator(this, function(e) {
                    switch(e.label){
                        case 0:
                            return [
                                4,
                                r.iterator()
                            ];
                        case 1:
                            return [
                                2,
                                e.sent().prefetch(t)
                            ];
                    }
                });
            });
        }, this.size);
    }, t78.prototype.repeat = function(t79) {
        var e57 = this, r = this;
        return datasetFromIteratorFn(function() {
            return __awaiter(e57, void 0, void 0, function() {
                var e58 = this;
                return __generator(this, function(n) {
                    return [
                        2,
                        iteratorFromConcatenated(iteratorFromFunction(function() {
                            return __awaiter(e58, void 0, void 0, function() {
                                var t;
                                return __generator(this, function(e) {
                                    switch(e.label){
                                        case 0:
                                            return t = {
                                            }, [
                                                4,
                                                r.iterator()
                                            ];
                                        case 1:
                                            return [
                                                2,
                                                (t.value = e.sent(), t.done = !1, t)
                                            ];
                                    }
                                });
                            });
                        }).take(t79))
                    ];
                });
            });
        }, null != this.size && t79 > 0 ? this.size * t79 : 0 === t79 ? 0 : null != this.size && (void 0 === t79 || t79 < 0) ? 1 / 0 : null);
    }, t78.prototype.skip = function(t) {
        var e59 = this, r = this;
        return datasetFromIteratorFn(function() {
            return __awaiter(e59, void 0, void 0, function() {
                return __generator(this, function(e) {
                    switch(e.label){
                        case 0:
                            return [
                                4,
                                r.iterator()
                            ];
                        case 1:
                            return [
                                2,
                                e.sent().skip(t)
                            ];
                    }
                });
            });
        }, null != this.size && t >= 0 && this.size >= t ? this.size - t : null != this.size && (this.size < t || void 0 === t || t < 0) ? 0 : null);
    }, t78.prototype.shuffle = function(t, e60, r) {
        var n14 = this;
        void 0 === r && (r = !0);
        var o = this, i = seedrandom_1(e60 || _tfjsCore.util.now().toString());
        return datasetFromIteratorFn(function() {
            return __awaiter(n14, void 0, void 0, function() {
                var e;
                return __generator(this, function(n) {
                    switch(n.label){
                        case 0:
                            return e = i.int32(), r && (e += i.int32()), [
                                4,
                                o.iterator()
                            ];
                        case 1:
                            return [
                                2,
                                n.sent().shuffle(t, e.toString())
                            ];
                    }
                });
            });
        }, this.size);
    }, t78.prototype.take = function(t) {
        var e61 = this, r = this;
        return datasetFromIteratorFn(function() {
            return __awaiter(e61, void 0, void 0, function() {
                return __generator(this, function(e) {
                    switch(e.label){
                        case 0:
                            return [
                                4,
                                r.iterator()
                            ];
                        case 1:
                            return [
                                2,
                                e.sent().take(t)
                            ];
                    }
                });
            });
        }, null != this.size && this.size > t ? t : null != this.size && this.size <= t ? this.size : null);
    }, t78.prototype.toArray = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                switch(t.label){
                    case 0:
                        return [
                            4,
                            this.iterator()
                        ];
                    case 1:
                        return [
                            2,
                            t.sent().collect()
                        ];
                }
            });
        });
    }, t78;
}();
function datasetFromIteratorFn(t80, e) {
    return void 0 === e && (e = null), new (function(r) {
        function n() {
            var t = null !== r && r.apply(this, arguments) || this;
            return t.size = e, t;
        }
        return __extends(n, r), n.prototype.iterator = function() {
            return __awaiter(this, void 0, void 0, function() {
                return __generator(this, function(e) {
                    return [
                        2,
                        t80()
                    ];
                });
            });
        }, n;
    }(Dataset));
}
function array(t) {
    var e = this;
    return datasetFromIteratorFn(function() {
        return __awaiter(e, void 0, void 0, function() {
            return __generator(this, function(e) {
                return [
                    2,
                    iteratorFromItems(t)
                ];
            });
        });
    }, t.length);
}
function zip(t81) {
    var e62, r = this;
    if (!isIterable(t81)) throw new Error("The argument to zip() must be an object or array.");
    if (Array.isArray(t81)) for(var n = 0; n < t81.length; n++)e62 = null == e62 ? t81[n].size : Math.min(e62, t81[n].size);
    else if (t81 instanceof Object) for(var o in t81)e62 = null == e62 ? t81[o].size : Math.min(e62, t81[o].size);
    return datasetFromIteratorFn(function() {
        return __awaiter(r, void 0, void 0, function() {
            return __generator(this, function(e) {
                switch(e.label){
                    case 0:
                        return [
                            4,
                            deepMapAndAwaitAll(t81, function(t) {
                                if (t instanceof Dataset) return {
                                    value: t.iterator(),
                                    recurse: !1
                                };
                                if (isIterable(t)) return {
                                    value: null,
                                    recurse: !0
                                };
                                throw new Error("Leaves of the structure passed to zip() must be Datasets, not primitives.");
                            })
                        ];
                    case 1:
                        return [
                            2,
                            iteratorFromZipped(e.sent(), ZipMismatchMode.SHORTEST)
                        ];
                }
            });
        });
    }, e62);
}
function deepBatchConcat(t) {
    if (null === t) return null;
    var e = t[0];
    return "string" == typeof e ? {
        value: t,
        recurse: !1
    } : isIterable(e) ? isNumericArray(e) ? {
        value: batchConcat(t),
        recurse: !1
    } : {
        value: null,
        recurse: !0
    } : {
        value: batchConcat(t),
        recurse: !1
    };
}
function batchConcat(t) {
    if (0 === t.length) throw new Error("Can't make a batch of zero elements.");
    if (t[0] instanceof _tfjsCore.Tensor) return _tfjsCore.stack(t);
    if (Array.isArray(t[0])) return batchConcatArrays(t);
    var e = t;
    return _tfjsCore.Tensor.make([
        e.length
    ], {
        values: new Float32Array(e)
    });
}
function batchConcatArrays(t) {
    for(var e = t[0].length, r = [
        t.length,
        t[0].length
    ], n = new Float32Array(t.length * e), o = 0, i = 0, s = t; i < s.length; i++){
        var a = s[i];
        if (a.length !== e) throw new Error("Elements must have the same shape to be batched");
        n.set(a, o), o += e;
    }
    return _tfjsCore.Tensor.make(r, {
        values: n
    });
}
var TextLineDataset = function(t82) {
    function e63(e) {
        var r = t82.call(this) || this;
        return r.input = e, r;
    }
    return __extends(e63, t82), e63.prototype.iterator = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t, e;
            return __generator(this, function(r) {
                switch(r.label){
                    case 0:
                        return [
                            4,
                            this.input.iterator()
                        ];
                    case 1:
                        return t = r.sent(), e = t.decodeUTF8(), [
                            2,
                            e.split("\n")
                        ];
                }
            });
        });
    }, e63;
}(Dataset), CODE_QUOTE = '"', STATE_OUT = Symbol("out"), STATE_FIELD = Symbol("field"), STATE_QUOTE = Symbol("quote"), STATE_QUOTE_AFTER_QUOTE = Symbol("quoteafterquote"), STATE_WITHIN_QUOTE_IN_QUOTE = Symbol("quoteinquote"), CSVDataset = function(t83) {
    function e64(e, r) {
        var n = t83.call(this) || this;
        return n.input = e, n.hasHeader = !0, n.fullColumnNames = null, n.columnNamesValidated = !1, n.columnConfigs = null, n.configuredColumnsOnly = !1, n.delimiter = ",", n.base = new TextLineDataset(e), r || (r = {
        }), n.hasHeader = !1 !== r.hasHeader, n.fullColumnNames = r.columnNames, n.columnConfigs = r.columnConfigs, n.configuredColumnsOnly = r.configuredColumnsOnly, n.delimiter = r.delimiter ? r.delimiter : ",", n;
    }
    return __extends(e64, t83), e64.prototype.columnNames = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                switch(t.label){
                    case 0:
                        return this.columnNamesValidated ? [
                            3,
                            2
                        ] : [
                            4,
                            this.setColumnNames()
                        ];
                    case 1:
                        t.sent(), t.label = 2;
                    case 2:
                        return [
                            2,
                            this.configuredColumnsOnly ? Object.keys(this.columnConfigs) : this.fullColumnNames
                        ];
                }
            });
        });
    }, e64.prototype.setColumnNames = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t84, e, r, n, o, i;
            return __generator(this, function(s) {
                switch(s.label){
                    case 0:
                        return [
                            4,
                            this.maybeReadHeaderLine()
                        ];
                    case 1:
                        if (t84 = s.sent(), !this.fullColumnNames && !t84) throw new Error("Column names must be provided if there is no header line.");
                        if (this.fullColumnNames && t84 && _tfjsCore.util.assert(t84.length === this.fullColumnNames.length, "The length of provided columnNames (" + this.fullColumnNames.length.toString() + ") does not match the length of the header line read from file (" + t84.length.toString() + ")."), this.fullColumnNames || (this.fullColumnNames = t84), e = this.fullColumnNames.reduce(function(t, e) {
                            return t[e] = t[e] + 1 || 1, t;
                        }, {
                        }), r = Object.keys(e).filter(function(t) {
                            return e[t] > 1;
                        }), _tfjsCore.util.assert(0 === r.length, "Duplicate column names found: " + r.toString()), this.columnConfigs) {
                            for(n = 0, o = Object.keys(this.columnConfigs); n < o.length; n++)if (i = o[n], -1 === this.fullColumnNames.indexOf(i)) throw new Error('The key "' + i + '" provided in columnConfigs does not match any of the column names (' + this.fullColumnNames.toString() + ").");
                        }
                        return this.columnNamesValidated = !0, [
                            2
                        ];
                }
            });
        });
    }, e64.prototype.maybeReadHeaderLine = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t;
            return __generator(this, function(e) {
                switch(e.label){
                    case 0:
                        return this.hasHeader ? [
                            4,
                            this.base.iterator()
                        ] : [
                            3,
                            3
                        ];
                    case 1:
                        return [
                            4,
                            e.sent().next()
                        ];
                    case 2:
                        if ((t = e.sent()).done) throw new Error("No data was found for CSV parsing.");
                        return [
                            2,
                            t.value.split(this.delimiter)
                        ];
                    case 3:
                        return [
                            2,
                            null
                        ];
                }
            });
        });
    }, e64.prototype.iterator = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t85, e = this;
            return __generator(this, function(r) {
                switch(r.label){
                    case 0:
                        return this.columnNamesValidated ? [
                            3,
                            2
                        ] : [
                            4,
                            this.setColumnNames()
                        ];
                    case 1:
                        r.sent(), r.label = 2;
                    case 2:
                        return [
                            4,
                            this.base.iterator()
                        ];
                    case 3:
                        return t85 = r.sent(), this.hasHeader && (t85 = t85.skip(1)), [
                            2,
                            t85.map(function(t) {
                                return e.makeDataElement(t);
                            })
                        ];
                }
            });
        });
    }, e64.prototype.makeDataElement = function(t) {
        for(var e = this.parseRow(t), r = {
        }, n = {
        }, o = 0; o < this.fullColumnNames.length; o++){
            var i = this.fullColumnNames[o], s = this.columnConfigs ? this.columnConfigs[i] : null;
            if (!this.configuredColumnsOnly || s) {
                var a = e[o], u = null;
                if ("" === a) {
                    if (s && void 0 !== s.default) u = s.default;
                    else {
                        if (s && (s.required || s.isLabel)) throw new Error("Required column " + i + " is empty in this line: " + t);
                        u = void 0;
                    }
                } else {
                    var h = Number(a);
                    if (isNaN(h)) u = s && "bool" === s.dtype ? this.getBoolean(a) : a;
                    else if (s && s.dtype) switch(s.dtype){
                        case "float32":
                            u = h;
                            break;
                        case "int32":
                            u = Math.floor(h);
                            break;
                        case "bool":
                            u = this.getBoolean(a);
                            break;
                        default:
                            u = h;
                    }
                    else u = h;
                }
                s && s.isLabel ? n[i] = u : r[i] = u;
            }
        }
        return 0 === Object.keys(n).length ? r : [
            r,
            n
        ];
    }, e64.prototype.getBoolean = function(t) {
        return "1" === t || "true" === t.toLowerCase() ? 1 : 0;
    }, e64.prototype.parseRow = function(t) {
        for(var e = [], r = 0, n = t.length, o = STATE_FIELD, i = 0; i < n; i++)switch(o){
            case STATE_OUT:
                switch(t.charAt(i)){
                    case CODE_QUOTE:
                        r = i + 1, o = STATE_QUOTE;
                        break;
                    case this.delimiter:
                        e.push(""), o = STATE_OUT, r = i + 1;
                        break;
                    default:
                        o = STATE_FIELD, r = i;
                }
                break;
            case STATE_FIELD:
                switch(t.charAt(i)){
                    case this.delimiter:
                        e.push(t.substring(r, i)), o = STATE_OUT, r = i + 1;
                }
                break;
            case STATE_QUOTE:
                switch(t.charAt(i)){
                    case CODE_QUOTE:
                        o = STATE_QUOTE_AFTER_QUOTE;
                }
                break;
            case STATE_QUOTE_AFTER_QUOTE:
                switch(t.charAt(i)){
                    case this.delimiter:
                        e.push(t.substring(r, i - 1)), o = STATE_OUT, r = i + 1;
                        break;
                    case CODE_QUOTE:
                        o = STATE_QUOTE;
                        break;
                    default:
                        o = STATE_WITHIN_QUOTE_IN_QUOTE;
                }
                break;
            case STATE_WITHIN_QUOTE_IN_QUOTE:
                switch(t.charAt(i)){
                    case CODE_QUOTE:
                        o = STATE_QUOTE;
                }
        }
        return o === STATE_QUOTE_AFTER_QUOTE ? e.push(t.substring(r, n - 1)) : e.push(t.substring(r)), e;
    }, e64;
}(Dataset), DataSource = function() {
    return function() {
    };
}(), StringIterator = function(t86) {
    function e() {
        return null !== t86 && t86.apply(this, arguments) || this;
    }
    return __extends(e, t86), e.prototype.split = function(t) {
        return new SplitIterator(this, t);
    }, e;
}(LazyIterator), SplitIterator = function(t) {
    function e65(e, r) {
        var n = t.call(this) || this;
        return n.upstream = e, n.impl = new SplitIteratorImpl(e, r), n;
    }
    return __extends(e65, t), e65.prototype.summary = function() {
        return this.impl.summary();
    }, e65.prototype.next = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [
                    2,
                    this.impl.next()
                ];
            });
        });
    }, e65;
}(StringIterator), SplitIteratorImpl = function(t87) {
    function e66(e, r) {
        var n = t87.call(this) || this;
        return n.upstream = e, n.separator = r, n.carryover = "", n;
    }
    return __extends(e66, t87), e66.prototype.summary = function() {
        return this.upstream.summary() + " -> Split('" + this.separator + "')";
    }, e66.prototype.pump = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t, e, r, n, o;
            return __generator(this, function(i) {
                switch(i.label){
                    case 0:
                        return [
                            4,
                            this.upstream.next()
                        ];
                    case 1:
                        if ((t = i.sent()).done) return "" === this.carryover ? [
                            2,
                            !1
                        ] : (this.outputQueue.push(this.carryover), this.carryover = "", [
                            2,
                            !0
                        ]);
                        for((e = t.value.split(this.separator))[0] = this.carryover + e[0], r = 0, n = e.slice(0, -1); r < n.length; r++)o = n[r], this.outputQueue.push(o);
                        return this.carryover = e[e.length - 1], [
                            2,
                            !0
                        ];
                }
            });
        });
    }, e66;
}(OneToManyIterator), ByteChunkIterator = function(t) {
    function e() {
        return null !== t && t.apply(this, arguments) || this;
    }
    return __extends(e, t), e.prototype.decodeUTF8 = function() {
        return new Utf8Iterator(this);
    }, e;
}(LazyIterator), Utf8Iterator = function(t) {
    function e67(e) {
        var r = t.call(this) || this;
        return r.upstream = e, r.impl = new Utf8IteratorImpl(e), r;
    }
    return __extends(e67, t), e67.prototype.summary = function() {
        return this.impl.summary();
    }, e67.prototype.next = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [
                    2,
                    this.impl.next()
                ];
            });
        });
    }, e67;
}(StringIterator), Utf8IteratorImpl = function(t88) {
    function e68(e) {
        var r = t88.call(this) || this;
        if (r.upstream = e, _tfjsCore.ENV.get("IS_BROWSER")) r.decoder = new TextDecoder("utf-8");
        else {
            var n = require("string_decoder").StringDecoder;
            r.decoder = new n("utf8");
        }
        return r;
    }
    return __extends(e68, t88), e68.prototype.summary = function() {
        return this.upstream.summary() + " -> Utf8";
    }, e68.prototype.pump = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t, e, r;
            return __generator(this, function(n) {
                switch(n.label){
                    case 0:
                        return [
                            4,
                            this.upstream.next()
                        ];
                    case 1:
                        return (t = n.sent()).done ? [
                            2,
                            !1
                        ] : (e = t.value, r = _tfjsCore.ENV.get("IS_BROWSER") ? this.decoder.decode(e, {
                            stream: !0
                        }) : this.decoder.write(Buffer.from(e.buffer)), this.outputQueue.push(r), [
                            2,
                            !0
                        ]);
                }
            });
        });
    }, e68;
}(OneToManyIterator), FileChunkIterator = function(t89) {
    function e69(e, r) {
        void 0 === r && (r = {
        });
        var n = t89.call(this) || this;
        return n.file = e, n.options = r, _tfjsCore.util.assert(e instanceof Uint8Array || !!_tfjsCore.ENV.get("IS_BROWSER") && (e instanceof File || e instanceof Blob), "FileChunkIterator only supports File, Blob and Uint8Array right now."), n.offset = r.offset || 0, n.chunkSize = r.chunkSize || 1048576, n;
    }
    return __extends(e69, t89), e69.prototype.summary = function() {
        return "FileChunks " + this.file;
    }, e69.prototype.next = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t90, e70, r = this;
            return __generator(this, function(n15) {
                switch(n15.label){
                    case 0:
                        return this.offset >= (this.file instanceof Uint8Array ? this.file.byteLength : this.file.size) ? [
                            2,
                            {
                                value: null,
                                done: !0
                            }
                        ] : (t90 = new Promise(function(t91, e) {
                            var n16 = r.offset + r.chunkSize;
                            if (r.file instanceof Uint8Array) t91(new Uint8Array(r.file.slice(r.offset, n16)));
                            else {
                                var o = new FileReader;
                                o.onload = function(r) {
                                    var n = o.result;
                                    if (n instanceof ArrayBuffer && (n = new Uint8Array(n)), !(n instanceof Uint8Array)) return e(new TypeError("FileReader returned unknown type."));
                                    t91(n);
                                }, o.onabort = function(t) {
                                    return e(new Error("Aborted"));
                                }, o.onerror = function(t) {
                                    return e(new Error(t.type));
                                };
                                var i = r.file.slice(r.offset, n16);
                                o.readAsArrayBuffer(i);
                            }
                            r.offset = n16;
                        }), e70 = {
                        }, [
                            4,
                            t90
                        ]);
                    case 1:
                        return [
                            2,
                            (e70.value = n15.sent(), e70.done = !1, e70)
                        ];
                }
            });
        });
    }, e69;
}(ByteChunkIterator);
function urlChunkIterator(t, e) {
    return void 0 === e && (e = {
    }), __awaiter(this, void 0, void 0, function() {
        var r, n, o, i;
        return __generator(this, function(s) {
            switch(s.label){
                case 0:
                    return _tfjsCore.ENV.get("IS_BROWSER") ? [
                        4,
                        fetch(t)
                    ] : [
                        3,
                        5
                    ];
                case 1:
                    return (r = s.sent()).ok ? [
                        4,
                        r.blob()
                    ] : [
                        3,
                        3
                    ];
                case 2:
                    return n = s.sent(), [
                        2,
                        new FileChunkIterator(n, e)
                    ];
                case 3:
                    throw new Error(r.statusText);
                case 4:
                    return [
                        3,
                        9
                    ];
                case 5:
                    if (o = require("node-fetch"), "string" != typeof t) throw new Error("URL must be a string. Request objects are not supported in the node.js environment yet.");
                    return [
                        4,
                        o(t)
                    ];
                case 6:
                    return (r = s.sent()).ok ? [
                        4,
                        r.buffer()
                    ] : [
                        3,
                        8
                    ];
                case 7:
                    return i = s.sent(), [
                        2,
                        new FileChunkIterator(i, e)
                    ];
                case 8:
                    throw new Error(r.statusText);
                case 9:
                    return [
                        2
                    ];
            }
        });
    });
}
function isLocalPath(t) {
    return "string" == typeof t && "file://" === t.substr(0, 7);
}
var FileDataSource = function(t92) {
    function e71(e, r) {
        void 0 === r && (r = {
        });
        var n = t92.call(this) || this;
        return n.input = e, n.options = r, n;
    }
    return __extends(e71, t92), e71.prototype.iterator = function() {
        return __awaiter(this, void 0, void 0, function() {
            var t;
            return __generator(this, function(e) {
                return isLocalPath(this.input) && _tfjsCore.ENV.get("IS_NODE") && (t = require("fs"), this.input = t.readFileSync(this.input.substr(7))), [
                    2,
                    new FileChunkIterator(this.input, this.options)
                ];
            });
        });
    }, e71;
}(DataSource), URLDataSource = function(t) {
    function e72(e, r) {
        void 0 === r && (r = {
        });
        var n = t.call(this) || this;
        return n.url = e, n.fileOptions = r, n;
    }
    return __extends(e72, t), e72.prototype.iterator = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(t) {
                return isLocalPath(this.url) ? [
                    2,
                    new FileDataSource(this.url, this.fileOptions).iterator()
                ] : [
                    2,
                    urlChunkIterator(this.url, this.fileOptions)
                ];
            });
        });
    }, e72;
}(DataSource);
function csv(t, e) {
    return void 0 === e && (e = {
    }), new CSVDataset(new URLDataSource(t), e);
}
function generator(t) {
    var e = this, r = iteratorFromFunction(t);
    return datasetFromIteratorFn(function() {
        return __awaiter(e, void 0, void 0, function() {
            return __generator(this, function(t) {
                return [
                    2,
                    r
                ];
            });
        });
    });
}
var version = "0.2.3";

},{"@tensorflow/tfjs-core":"djGzH","process":"d5jf4","buffer":"fCgem","crypto":"hagNj","string_decoder":"3vmkr","node-fetch":"biJx9","fs":"jhUEF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"biJx9":[function(require,module,exports) {
module.exports = exports = window.fetch;
// Needed for TypeScript and Webpack.
exports.default = window.fetch.bind(window);
exports.Headers = window.Headers;
exports.Request = window.Request;
exports.Response = window.Response;

},{}],"dOdSf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MobileNet", ()=>MobileNet
);
/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */ var _tfjs = require("@tensorflow/tfjs");
var _imagenetClasses = require("./imagenet_classes");
const GOOGLE_CLOUD_STORAGE_DIR = 'https://storage.googleapis.com/tfjs-models/savedmodel/';
const MODEL_FILE_URL = 'mobilenet_v2_1.0_224/model.json';
const INPUT_NODE_NAME = 'images';
const OUTPUT_NODE_NAME = 'module_apply_default/MobilenetV2/Logits/output';
const PREPROCESS_DIVISOR = _tfjs.scalar(127.5);
class MobileNet {
    constructor(){
    }
    async load() {
        this.model = await _tfjs.loadGraphModel(GOOGLE_CLOUD_STORAGE_DIR + MODEL_FILE_URL);
    }
    dispose() {
        if (this.model) this.model.dispose();
    }
    /**
   * Infer through MobileNet. This does standard ImageNet pre-processing before
   * inferring through the model. This method returns named activations as well
   * as softmax logits.
   *
   * @param input un-preprocessed input Array.
   * @return The softmax logits.
   */ predict(input) {
        const preprocessedInput = _tfjs.div(_tfjs.sub(input.asType('float32'), PREPROCESS_DIVISOR), PREPROCESS_DIVISOR);
        const reshapedInput = preprocessedInput.reshape([
            1,
            ...preprocessedInput.shape
        ]);
        return this.model.execute({
            [INPUT_NODE_NAME]: reshapedInput
        }, OUTPUT_NODE_NAME);
    }
    getTopKClasses(logits, topK) {
        const predictions = _tfjs.tidy(()=>{
            return _tfjs.softmax(logits);
        });
        const values = predictions.dataSync();
        predictions.dispose();
        let predictionList = [];
        for(let i = 0; i < values.length; i++)predictionList.push({
            value: values[i],
            index: i
        });
        predictionList = predictionList.sort((a, b)=>{
            return b.value - a.value;
        }).slice(0, topK);
        return predictionList.map((x)=>{
            return {
                label: _imagenetClasses.IMAGENET_CLASSES[x.index],
                value: x.value
            };
        });
    }
}

},{"@tensorflow/tfjs":"2Nmqy","./imagenet_classes":"bc5RY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bc5RY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IMAGENET_CLASSES", ()=>IMAGENET_CLASSES
);
const IMAGENET_CLASSES = {
    0: 'background',
    1: 'tench, Tinca tinca',
    2: 'goldfish, Carassius auratus',
    3: "great white shark, white shark, man-eater, man-eating shark, Carcharodon carcharias",
    4: 'tiger shark, Galeocerdo cuvieri',
    5: 'hammerhead, hammerhead shark',
    6: 'electric ray, crampfish, numbfish, torpedo',
    7: 'stingray',
    8: 'cock',
    9: 'hen',
    10: 'ostrich, Struthio camelus',
    11: 'brambling, Fringilla montifringilla',
    12: 'goldfinch, Carduelis carduelis',
    13: 'house finch, linnet, Carpodacus mexicanus',
    14: 'junco, snowbird',
    15: 'indigo bunting, indigo finch, indigo bird, Passerina cyanea',
    16: 'robin, American robin, Turdus migratorius',
    17: 'bulbul',
    18: 'jay',
    19: 'magpie',
    20: 'chickadee',
    21: 'water ouzel, dipper',
    22: 'kite',
    23: 'bald eagle, American eagle, Haliaeetus leucocephalus',
    24: 'vulture',
    25: 'great grey owl, great gray owl, Strix nebulosa',
    26: 'European fire salamander, Salamandra salamandra',
    27: 'common newt, Triturus vulgaris',
    28: 'eft',
    29: 'spotted salamander, Ambystoma maculatum',
    30: 'axolotl, mud puppy, Ambystoma mexicanum',
    31: 'bullfrog, Rana catesbeiana',
    32: 'tree frog, tree-frog',
    33: 'tailed frog, bell toad, ribbed toad, tailed toad, Ascaphus trui',
    34: 'loggerhead, loggerhead turtle, Caretta caretta',
    35: 'leatherback turtle, leatherback, leathery turtle, Dermochelys coriacea',
    36: 'mud turtle',
    37: 'terrapin',
    38: 'box turtle, box tortoise',
    39: 'banded gecko',
    40: 'common iguana, iguana, Iguana iguana',
    41: 'American chameleon, anole, Anolis carolinensis',
    42: 'whiptail, whiptail lizard',
    43: 'agama',
    44: 'frilled lizard, Chlamydosaurus kingi',
    45: 'alligator lizard',
    46: 'Gila monster, Heloderma suspectum',
    47: 'green lizard, Lacerta viridis',
    48: 'African chameleon, Chamaeleo chamaeleon',
    49: "Komodo dragon, Komodo lizard, dragon lizard, giant lizard, Varanus komodoensis",
    50: 'African crocodile, Nile crocodile, Crocodylus niloticus',
    51: 'American alligator, Alligator mississipiensis',
    52: 'triceratops',
    53: 'thunder snake, worm snake, Carphophis amoenus',
    54: 'ringneck snake, ring-necked snake, ring snake',
    55: 'hognose snake, puff adder, sand viper',
    56: 'green snake, grass snake',
    57: 'king snake, kingsnake',
    58: 'garter snake, grass snake',
    59: 'water snake',
    60: 'vine snake',
    61: 'night snake, Hypsiglena torquata',
    62: 'boa constrictor, Constrictor constrictor',
    63: 'rock python, rock snake, Python sebae',
    64: 'Indian cobra, Naja naja',
    65: 'green mamba',
    66: 'sea snake',
    67: 'horned viper, cerastes, sand viper, horned asp, Cerastes cornutus',
    68: 'diamondback, diamondback rattlesnake, Crotalus adamanteus',
    69: 'sidewinder, horned rattlesnake, Crotalus cerastes',
    70: 'trilobite',
    71: 'harvestman, daddy longlegs, Phalangium opilio',
    72: 'scorpion',
    73: 'black and gold garden spider, Argiope aurantia',
    74: 'barn spider, Araneus cavaticus',
    75: 'garden spider, Aranea diademata',
    76: 'black widow, Latrodectus mactans',
    77: 'tarantula',
    78: 'wolf spider, hunting spider',
    79: 'tick',
    80: 'centipede',
    81: 'black grouse',
    82: 'ptarmigan',
    83: 'ruffed grouse, partridge, Bonasa umbellus',
    84: 'prairie chicken, prairie grouse, prairie fowl',
    85: 'peacock',
    86: 'quail',
    87: 'partridge',
    88: 'African grey, African gray, Psittacus erithacus',
    89: 'macaw',
    90: 'sulphur-crested cockatoo, Kakatoe galerita, Cacatua galerita',
    91: 'lorikeet',
    92: 'coucal',
    93: 'bee eater',
    94: 'hornbill',
    95: 'hummingbird',
    96: 'jacamar',
    97: 'toucan',
    98: 'drake',
    99: 'red-breasted merganser, Mergus serrator',
    100: 'goose',
    101: 'black swan, Cygnus atratus',
    102: 'tusker',
    103: 'echidna, spiny anteater, anteater',
    104: "platypus, duckbill, duckbilled platypus, duck-billed platypus, Ornithorhynchus anatinus",
    105: 'wallaby, brush kangaroo',
    106: 'koala, koala bear, kangaroo bear, native bear, Phascolarctos cinereus',
    107: 'wombat',
    108: 'jelly fish',
    109: 'sea anemone, anemone',
    110: 'brain coral',
    111: 'flatworm, platyhelminth',
    112: 'nematode, nematode worm, roundworm',
    113: 'conch',
    114: 'snail',
    115: 'slug',
    116: 'sea slug, nudibranch',
    117: 'chiton, coat-of-mail shell, sea cradle, polyplacophore',
    118: 'chambered nautilus, pearly nautilus, nautilus',
    119: 'Dungeness crab, Cancer magister',
    120: 'rock crab, Cancer irroratus',
    121: 'fiddler crab',
    122: "king crab, Alaska crab, Alaskan king crab, Alaska king crab, Paralithodes camtschatica",
    123: 'American lobster, Northern lobster, Maine lobster, Homarus americanus',
    124: "spiny lobster, langouste, rock lobster, crawfish, crayfish, sea crawfish",
    125: 'crayfish, crawfish, crawdad, crawdaddy',
    126: 'hermit crab',
    127: 'isopod',
    128: 'white stork, Ciconia ciconia',
    129: 'black stork, Ciconia nigra',
    130: 'spoonbill',
    131: 'flamingo',
    132: 'little blue heron, Egretta caerulea',
    133: 'American egret, great white heron, Egretta albus',
    134: 'bittern',
    135: 'crane',
    136: 'limpkin, Aramus pictus',
    137: 'European gallinule, Porphyrio porphyrio',
    138: 'American coot, marsh hen, mud hen, water hen, Fulica americana',
    139: 'bustard',
    140: 'ruddy turnstone, Arenaria interpres',
    141: 'red-backed sandpiper, dunlin, Erolia alpina',
    142: 'redshank, Tringa totanus',
    143: 'dowitcher',
    144: 'oystercatcher, oyster catcher',
    145: 'pelican',
    146: 'king penguin, Aptenodytes patagonica',
    147: 'albatross, mollymawk',
    148: "grey whale, gray whale, devilfish, Eschrichtius gibbosus, Eschrichtius robustus",
    149: 'killer whale, killer, orca, grampus, sea wolf, Orcinus orca',
    150: 'dugong, Dugong dugon',
    151: 'sea lion',
    152: 'Chihuahua',
    153: 'Japanese spaniel',
    154: 'Maltese dog, Maltese terrier, Maltese',
    155: 'Pekinese, Pekingese, Peke',
    156: 'Shih-Tzu',
    157: 'Blenheim spaniel',
    158: 'papillon',
    159: 'toy terrier',
    160: 'Rhodesian ridgeback',
    161: 'Afghan hound, Afghan',
    162: 'basset, basset hound',
    163: 'beagle',
    164: 'bloodhound, sleuthhound',
    165: 'bluetick',
    166: 'black-and-tan coonhound',
    167: 'Walker hound, Walker foxhound',
    168: 'English foxhound',
    169: 'redbone',
    170: 'borzoi, Russian wolfhound',
    171: 'Irish wolfhound',
    172: 'Italian greyhound',
    173: 'whippet',
    174: 'Ibizan hound, Ibizan Podenco',
    175: 'Norwegian elkhound, elkhound',
    176: 'otterhound, otter hound',
    177: 'Saluki, gazelle hound',
    178: 'Scottish deerhound, deerhound',
    179: 'Weimaraner',
    180: 'Staffordshire bullterrier, Staffordshire bull terrier',
    181: "American Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier",
    182: 'Bedlington terrier',
    183: 'Border terrier',
    184: 'Kerry blue terrier',
    185: 'Irish terrier',
    186: 'Norfolk terrier',
    187: 'Norwich terrier',
    188: 'Yorkshire terrier',
    189: 'wire-haired fox terrier',
    190: 'Lakeland terrier',
    191: 'Sealyham terrier, Sealyham',
    192: 'Airedale, Airedale terrier',
    193: 'cairn, cairn terrier',
    194: 'Australian terrier',
    195: 'Dandie Dinmont, Dandie Dinmont terrier',
    196: 'Boston bull, Boston terrier',
    197: 'miniature schnauzer',
    198: 'giant schnauzer',
    199: 'standard schnauzer',
    200: 'Scotch terrier, Scottish terrier, Scottie',
    201: 'Tibetan terrier, chrysanthemum dog',
    202: 'silky terrier, Sydney silky',
    203: 'soft-coated wheaten terrier',
    204: 'West Highland white terrier',
    205: 'Lhasa, Lhasa apso',
    206: 'flat-coated retriever',
    207: 'curly-coated retriever',
    208: 'golden retriever',
    209: 'Labrador retriever',
    210: 'Chesapeake Bay retriever',
    211: 'German short-haired pointer',
    212: 'vizsla, Hungarian pointer',
    213: 'English setter',
    214: 'Irish setter, red setter',
    215: 'Gordon setter',
    216: 'Brittany spaniel',
    217: 'clumber, clumber spaniel',
    218: 'English springer, English springer spaniel',
    219: 'Welsh springer spaniel',
    220: 'cocker spaniel, English cocker spaniel, cocker',
    221: 'Sussex spaniel',
    222: 'Irish water spaniel',
    223: 'kuvasz',
    224: 'schipperke',
    225: 'groenendael',
    226: 'malinois',
    227: 'briard',
    228: 'kelpie',
    229: 'komondor',
    230: 'Old English sheepdog, bobtail',
    231: 'Shetland sheepdog, Shetland sheep dog, Shetland',
    232: 'collie',
    233: 'Border collie',
    234: 'Bouvier des Flandres, Bouviers des Flandres',
    235: 'Rottweiler',
    236: 'German shepherd, German shepherd dog, German police dog, alsatian',
    237: 'Doberman, Doberman pinscher',
    238: 'miniature pinscher',
    239: 'Greater Swiss Mountain dog',
    240: 'Bernese mountain dog',
    241: 'Appenzeller',
    242: 'EntleBucher',
    243: 'boxer',
    244: 'bull mastiff',
    245: 'Tibetan mastiff',
    246: 'French bulldog',
    247: 'Great Dane',
    248: 'Saint Bernard, St Bernard',
    249: 'Eskimo dog, husky',
    250: 'malamute, malemute, Alaskan malamute',
    251: 'Siberian husky',
    252: 'dalmatian, coach dog, carriage dog',
    253: 'affenpinscher, monkey pinscher, monkey dog',
    254: 'basenji',
    255: 'pug, pug-dog',
    256: 'Leonberg',
    257: 'Newfoundland, Newfoundland dog',
    258: 'Great Pyrenees',
    259: 'Samoyed, Samoyede',
    260: 'Pomeranian',
    261: 'chow, chow chow',
    262: 'keeshond',
    263: 'Brabancon griffon',
    264: 'Pembroke, Pembroke Welsh corgi',
    265: 'Cardigan, Cardigan Welsh corgi',
    266: 'toy poodle',
    267: 'miniature poodle',
    268: 'standard poodle',
    269: 'Mexican hairless',
    270: 'timber wolf, grey wolf, gray wolf, Canis lupus',
    271: 'white wolf, Arctic wolf, Canis lupus tundrarum',
    272: 'red wolf, maned wolf, Canis rufus, Canis niger',
    273: 'coyote, prairie wolf, brush wolf, Canis latrans',
    274: 'dingo, warrigal, warragal, Canis dingo',
    275: 'dhole, Cuon alpinus',
    276: 'African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus',
    277: 'hyena, hyaena',
    278: 'red fox, Vulpes vulpes',
    279: 'kit fox, Vulpes macrotis',
    280: 'Arctic fox, white fox, Alopex lagopus',
    281: 'grey fox, gray fox, Urocyon cinereoargenteus',
    282: 'tabby, tabby cat',
    283: 'tiger cat',
    284: 'Persian cat',
    285: 'Siamese cat, Siamese',
    286: 'Egyptian cat',
    287: "cougar, puma, catamount, mountain lion, painter, panther, Felis concolor",
    288: 'lynx, catamount',
    289: 'leopard, Panthera pardus',
    290: 'snow leopard, ounce, Panthera uncia',
    291: 'jaguar, panther, Panthera onca, Felis onca',
    292: 'lion, king of beasts, Panthera leo',
    293: 'tiger, Panthera tigris',
    294: 'cheetah, chetah, Acinonyx jubatus',
    295: 'brown bear, bruin, Ursus arctos',
    296: "American black bear, black bear, Ursus americanus, Euarctos americanus",
    297: 'ice bear, polar bear, Ursus Maritimus, Thalarctos maritimus',
    298: 'sloth bear, Melursus ursinus, Ursus ursinus',
    299: 'mongoose',
    300: 'meerkat, mierkat',
    301: 'tiger beetle',
    302: 'ladybug, ladybeetle, lady beetle, ladybird, ladybird beetle',
    303: 'ground beetle, carabid beetle',
    304: 'long-horned beetle, longicorn, longicorn beetle',
    305: 'leaf beetle, chrysomelid',
    306: 'dung beetle',
    307: 'rhinoceros beetle',
    308: 'weevil',
    309: 'fly',
    310: 'bee',
    311: 'ant, emmet, pismire',
    312: 'grasshopper, hopper',
    313: 'cricket',
    314: 'walking stick, walkingstick, stick insect',
    315: 'cockroach, roach',
    316: 'mantis, mantid',
    317: 'cicada, cicala',
    318: 'leafhopper',
    319: 'lacewing, lacewing fly',
    320: "dragonfly, darning needle, devil's darning needle, sewingneedle, snake feeder, snake doctor, mosquito hawk, skeeter hawk",
    321: 'damselfly',
    322: 'admiral',
    323: 'ringlet, ringlet butterfly',
    324: 'monarch, monarch butterfly, milkweed butterfly, Danaus plexippus',
    325: 'cabbage butterfly',
    326: 'sulphur butterfly, sulfur butterfly',
    327: 'lycaenid, lycaenid butterfly',
    328: 'starfish, sea star',
    329: 'sea urchin',
    330: 'sea cucumber, holothurian',
    331: 'wood rabbit, cottontail, cottontail rabbit',
    332: 'hare',
    333: 'Angora, Angora rabbit',
    334: 'hamster',
    335: 'porcupine, hedgehog',
    336: 'fox squirrel, eastern fox squirrel, Sciurus niger',
    337: 'marmot',
    338: 'beaver',
    339: 'guinea pig, Cavia cobaya',
    340: 'sorrel',
    341: 'zebra',
    342: 'hog, pig, grunter, squealer, Sus scrofa',
    343: 'wild boar, boar, Sus scrofa',
    344: 'warthog',
    345: 'hippopotamus, hippo, river horse, Hippopotamus amphibius',
    346: 'ox',
    347: 'water buffalo, water ox, Asiatic buffalo, Bubalus bubalis',
    348: 'bison',
    349: 'ram, tup',
    350: "bighorn, bighorn sheep, cimarron, Rocky Mountain bighorn, Rocky Mountain sheep, Ovis canadensis",
    351: 'ibex, Capra ibex',
    352: 'hartebeest',
    353: 'impala, Aepyceros melampus',
    354: 'gazelle',
    355: 'Arabian camel, dromedary, Camelus dromedarius',
    356: 'llama',
    357: 'weasel',
    358: 'mink',
    359: 'polecat, fitch, foulmart, foumart, Mustela putorius',
    360: 'black-footed ferret, ferret, Mustela nigripes',
    361: 'otter',
    362: 'skunk, polecat, wood pussy',
    363: 'badger',
    364: 'armadillo',
    365: 'three-toed sloth, ai, Bradypus tridactylus',
    366: 'orangutan, orang, orangutang, Pongo pygmaeus',
    367: 'gorilla, Gorilla gorilla',
    368: 'chimpanzee, chimp, Pan troglodytes',
    369: 'gibbon, Hylobates lar',
    370: 'siamang, Hylobates syndactylus, Symphalangus syndactylus',
    371: 'guenon, guenon monkey',
    372: 'patas, hussar monkey, Erythrocebus patas',
    373: 'baboon',
    374: 'macaque',
    375: 'langur',
    376: 'colobus, colobus monkey',
    377: 'proboscis monkey, Nasalis larvatus',
    378: 'marmoset',
    379: 'capuchin, ringtail, Cebus capucinus',
    380: 'howler monkey, howler',
    381: 'titi, titi monkey',
    382: 'spider monkey, Ateles geoffroyi',
    383: 'squirrel monkey, Saimiri sciureus',
    384: 'Madagascar cat, ring-tailed lemur, Lemur catta',
    385: 'indri, indris, Indri indri, Indri brevicaudatus',
    386: 'Indian elephant, Elephas maximus',
    387: 'African elephant, Loxodonta africana',
    388: 'lesser panda, red panda, panda, bear cat, cat bear, Ailurus fulgens',
    389: 'giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca',
    390: 'barracouta, snoek',
    391: 'eel',
    392: "coho, cohoe, coho salmon, blue jack, silver salmon, Oncorhynchus kisutch",
    393: 'rock beauty, Holocanthus tricolor',
    394: 'anemone fish',
    395: 'sturgeon',
    396: 'gar, garfish, garpike, billfish, Lepisosteus osseus',
    397: 'lionfish',
    398: 'puffer, pufferfish, blowfish, globefish',
    399: 'abacus',
    400: 'abaya',
    401: 'academic gown, academic robe, judge\'s robe',
    402: 'accordion, piano accordion, squeeze box',
    403: 'acoustic guitar',
    404: 'aircraft carrier, carrier, flattop, attack aircraft carrier',
    405: 'airliner',
    406: 'airship, dirigible',
    407: 'altar',
    408: 'ambulance',
    409: 'amphibian, amphibious vehicle',
    410: 'analog clock',
    411: 'apiary, bee house',
    412: 'apron',
    413: "ashcan, trash can, garbage can, wastebin, ash bin, ash-bin, ashbin, dustbin, trash barrel, trash bin",
    414: 'assault rifle, assault gun',
    415: 'backpack, back pack, knapsack, packsack, rucksack, haversack',
    416: 'bakery, bakeshop, bakehouse',
    417: 'balance beam, beam',
    418: 'balloon',
    419: 'ballpoint, ballpoint pen, ballpen, Biro',
    420: 'Band Aid',
    421: 'banjo',
    422: 'bannister, banister, balustrade, balusters, handrail',
    423: 'barbell',
    424: 'barber chair',
    425: 'barbershop',
    426: 'barn',
    427: 'barometer',
    428: 'barrel, cask',
    429: 'barrow, garden cart, lawn cart, wheelbarrow',
    430: 'baseball',
    431: 'basketball',
    432: 'bassinet',
    433: 'bassoon',
    434: 'bathing cap, swimming cap',
    435: 'bath towel',
    436: 'bathtub, bathing tub, bath, tub',
    437: "beach wagon, station wagon, wagon, estate car, beach waggon, station waggon, waggon",
    438: 'beacon, lighthouse, beacon light, pharos',
    439: 'beaker',
    440: 'bearskin, busby, shako',
    441: 'beer bottle',
    442: 'beer glass',
    443: 'bell cote, bell cot',
    444: 'bib',
    445: 'bicycle-built-for-two, tandem bicycle, tandem',
    446: 'bikini, two-piece',
    447: 'binder, ring-binder',
    448: 'binoculars, field glasses, opera glasses',
    449: 'birdhouse',
    450: 'boathouse',
    451: 'bobsled, bobsleigh, bob',
    452: 'bolo tie, bolo, bola tie, bola',
    453: 'bonnet, poke bonnet',
    454: 'bookcase',
    455: 'bookshop, bookstore, bookstall',
    456: 'bottlecap',
    457: 'bow',
    458: 'bow tie, bow-tie, bowtie',
    459: 'brass, memorial tablet, plaque',
    460: 'brassiere, bra, bandeau',
    461: 'breakwater, groin, groyne, mole, bulwark, seawall, jetty',
    462: 'breastplate, aegis, egis',
    463: 'broom',
    464: 'bucket, pail',
    465: 'buckle',
    466: 'bulletproof vest',
    467: 'bullet train, bullet',
    468: 'butcher shop, meat market',
    469: 'cab, hack, taxi, taxicab',
    470: 'caldron, cauldron',
    471: 'candle, taper, wax light',
    472: 'cannon',
    473: 'canoe',
    474: 'can opener, tin opener',
    475: 'cardigan',
    476: 'car mirror',
    477: 'carousel, carrousel, merry-go-round, roundabout, whirligig',
    478: 'carpenter\'s kit, tool kit',
    479: 'carton',
    480: 'car wheel',
    481: "cash machine, cash dispenser, automated teller machine, automatic teller machine, automated teller, automatic teller, ATM",
    482: 'cassette',
    483: 'cassette player',
    484: 'castle',
    485: 'catamaran',
    486: 'CD player',
    487: 'cello, violoncello',
    488: 'cellular telephone, cellular phone, cellphone, cell, mobile phone',
    489: 'chain',
    490: 'chainlink fence',
    491: "chain mail, ring mail, mail, chain armor, chain armour, ring armor, ring armour",
    492: 'chain saw, chainsaw',
    493: 'chest',
    494: 'chiffonier, commode',
    495: 'chime, bell, gong',
    496: 'china cabinet, china closet',
    497: 'Christmas stocking',
    498: 'church, church building',
    499: 'cinema, movie theater, movie theatre, movie house, picture palace',
    500: 'cleaver, meat cleaver, chopper',
    501: 'cliff dwelling',
    502: 'cloak',
    503: 'clog, geta, patten, sabot',
    504: 'cocktail shaker',
    505: 'coffee mug',
    506: 'coffeepot',
    507: 'coil, spiral, volute, whorl, helix',
    508: 'combination lock',
    509: 'computer keyboard, keypad',
    510: 'confectionery, confectionary, candy store',
    511: 'container ship, containership, container vessel',
    512: 'convertible',
    513: 'corkscrew, bottle screw',
    514: 'cornet, horn, trumpet, trump',
    515: 'cowboy boot',
    516: 'cowboy hat, ten-gallon hat',
    517: 'cradle',
    518: 'crane',
    519: 'crash helmet',
    520: 'crate',
    521: 'crib, cot',
    522: 'Crock Pot',
    523: 'croquet ball',
    524: 'crutch',
    525: 'cuirass',
    526: 'dam, dike, dyke',
    527: 'desk',
    528: 'desktop computer',
    529: 'dial telephone, dial phone',
    530: 'diaper, nappy, napkin',
    531: 'digital clock',
    532: 'digital watch',
    533: 'dining table, board',
    534: 'dishrag, dishcloth',
    535: 'dishwasher, dish washer, dishwashing machine',
    536: 'disk brake, disc brake',
    537: 'dock, dockage, docking facility',
    538: 'dogsled, dog sled, dog sleigh',
    539: 'dome',
    540: 'doormat, welcome mat',
    541: 'drilling platform, offshore rig',
    542: 'drum, membranophone, tympan',
    543: 'drumstick',
    544: 'dumbbell',
    545: 'Dutch oven',
    546: 'electric fan, blower',
    547: 'electric guitar',
    548: 'electric locomotive',
    549: 'entertainment center',
    550: 'envelope',
    551: 'espresso maker',
    552: 'face powder',
    553: 'feather boa, boa',
    554: 'file, file cabinet, filing cabinet',
    555: 'fireboat',
    556: 'fire engine, fire truck',
    557: 'fire screen, fireguard',
    558: 'flagpole, flagstaff',
    559: 'flute, transverse flute',
    560: 'folding chair',
    561: 'football helmet',
    562: 'forklift',
    563: 'fountain',
    564: 'fountain pen',
    565: 'four-poster',
    566: 'freight car',
    567: 'French horn, horn',
    568: 'frying pan, frypan, skillet',
    569: 'fur coat',
    570: 'garbage truck, dustcart',
    571: 'gasmask, respirator, gas helmet',
    572: 'gas pump, gasoline pump, petrol pump, island dispenser',
    573: 'goblet',
    574: 'go-kart',
    575: 'golf ball',
    576: 'golfcart, golf cart',
    577: 'gondola',
    578: 'gong, tam-tam',
    579: 'gown',
    580: 'grand piano, grand',
    581: 'greenhouse, nursery, glasshouse',
    582: 'grille, radiator grille',
    583: 'grocery store, grocery, food market, market',
    584: 'guillotine',
    585: 'hair slide',
    586: 'hair spray',
    587: 'half track',
    588: 'hammer',
    589: 'hamper',
    590: 'hand blower, blow dryer, blow drier, hair dryer, hair drier',
    591: 'hand-held computer, hand-held microcomputer',
    592: 'handkerchief, hankie, hanky, hankey',
    593: 'hard disc, hard disk, fixed disk',
    594: 'harmonica, mouth organ, harp, mouth harp',
    595: 'harp',
    596: 'harvester, reaper',
    597: 'hatchet',
    598: 'holster',
    599: 'home theater, home theatre',
    600: 'honeycomb',
    601: 'hook, claw',
    602: 'hoopskirt, crinoline',
    603: 'horizontal bar, high bar',
    604: 'horse cart, horse-cart',
    605: 'hourglass',
    606: 'iPod',
    607: 'iron, smoothing iron',
    608: 'jack-o\'-lantern',
    609: 'jean, blue jean, denim',
    610: 'jeep, landrover',
    611: 'jersey, T-shirt, tee shirt',
    612: 'jigsaw puzzle',
    613: 'jinrikisha, ricksha, rickshaw',
    614: 'joystick',
    615: 'kimono',
    616: 'knee pad',
    617: 'knot',
    618: 'lab coat, laboratory coat',
    619: 'ladle',
    620: 'lampshade, lamp shade',
    621: 'laptop, laptop computer',
    622: 'lawn mower, mower',
    623: 'lens cap, lens cover',
    624: 'letter opener, paper knife, paperknife',
    625: 'library',
    626: 'lifeboat',
    627: 'lighter, light, igniter, ignitor',
    628: 'limousine, limo',
    629: 'liner, ocean liner',
    630: 'lipstick, lip rouge',
    631: 'Loafer',
    632: 'lotion',
    633: "loudspeaker, speaker, speaker unit, loudspeaker system, speaker system",
    634: 'loupe, jeweler\'s loupe',
    635: 'lumbermill, sawmill',
    636: 'magnetic compass',
    637: 'mailbag, postbag',
    638: 'mailbox, letter box',
    639: 'maillot',
    640: 'maillot, tank suit',
    641: 'manhole cover',
    642: 'maraca',
    643: 'marimba, xylophone',
    644: 'mask',
    645: 'matchstick',
    646: 'maypole',
    647: 'maze, labyrinth',
    648: 'measuring cup',
    649: 'medicine chest, medicine cabinet',
    650: 'megalith, megalithic structure',
    651: 'microphone, mike',
    652: 'microwave, microwave oven',
    653: 'military uniform',
    654: 'milk can',
    655: 'minibus',
    656: 'miniskirt, mini',
    657: 'minivan',
    658: 'missile',
    659: 'mitten',
    660: 'mixing bowl',
    661: 'mobile home, manufactured home',
    662: 'Model T',
    663: 'modem',
    664: 'monastery',
    665: 'monitor',
    666: 'moped',
    667: 'mortar',
    668: 'mortarboard',
    669: 'mosque',
    670: 'mosquito net',
    671: 'motor scooter, scooter',
    672: 'mountain bike, all-terrain bike, off-roader',
    673: 'mountain tent',
    674: 'mouse, computer mouse',
    675: 'mousetrap',
    676: 'moving van',
    677: 'muzzle',
    678: 'nail',
    679: 'neck brace',
    680: 'necklace',
    681: 'nipple',
    682: 'notebook, notebook computer',
    683: 'obelisk',
    684: 'oboe, hautboy, hautbois',
    685: 'ocarina, sweet potato',
    686: 'odometer, hodometer, mileometer, milometer',
    687: 'oil filter',
    688: 'organ, pipe organ',
    689: 'oscilloscope, scope, cathode-ray oscilloscope, CRO',
    690: 'overskirt',
    691: 'oxcart',
    692: 'oxygen mask',
    693: 'packet',
    694: 'paddle, boat paddle',
    695: 'paddlewheel, paddle wheel',
    696: 'padlock',
    697: 'paintbrush',
    698: 'pajama, pyjama, pj\'s, jammies',
    699: 'palace',
    700: 'panpipe, pandean pipe, syrinx',
    701: 'paper towel',
    702: 'parachute, chute',
    703: 'parallel bars, bars',
    704: 'park bench',
    705: 'parking meter',
    706: 'passenger car, coach, carriage',
    707: 'patio, terrace',
    708: 'pay-phone, pay-station',
    709: 'pedestal, plinth, footstall',
    710: 'pencil box, pencil case',
    711: 'pencil sharpener',
    712: 'perfume, essence',
    713: 'Petri dish',
    714: 'photocopier',
    715: 'pick, plectrum, plectron',
    716: 'pickelhaube',
    717: 'picket fence, paling',
    718: 'pickup, pickup truck',
    719: 'pier',
    720: 'piggy bank, penny bank',
    721: 'pill bottle',
    722: 'pillow',
    723: 'ping-pong ball',
    724: 'pinwheel',
    725: 'pirate, pirate ship',
    726: 'pitcher, ewer',
    727: 'plane, carpenter\'s plane, woodworking plane',
    728: 'planetarium',
    729: 'plastic bag',
    730: 'plate rack',
    731: 'plow, plough',
    732: 'plunger, plumber\'s helper',
    733: 'Polaroid camera, Polaroid Land camera',
    734: 'pole',
    735: "police van, police wagon, paddy wagon, patrol wagon, wagon, black Maria",
    736: 'poncho',
    737: 'pool table, billiard table, snooker table',
    738: 'pop bottle, soda bottle',
    739: 'pot, flowerpot',
    740: 'potter\'s wheel',
    741: 'power drill',
    742: 'prayer rug, prayer mat',
    743: 'printer',
    744: 'prison, prison house',
    745: 'projectile, missile',
    746: 'projector',
    747: 'puck, hockey puck',
    748: 'punching bag, punch bag, punching ball, punchball',
    749: 'purse',
    750: 'quill, quill pen',
    751: 'quilt, comforter, comfort, puff',
    752: 'racer, race car, racing car',
    753: 'racket, racquet',
    754: 'radiator',
    755: 'radio, wireless',
    756: 'radio telescope, radio reflector',
    757: 'rain barrel',
    758: 'recreational vehicle, RV, R.V.',
    759: 'reel',
    760: 'reflex camera',
    761: 'refrigerator, icebox',
    762: 'remote control, remote',
    763: 'restaurant, eating house, eating place, eatery',
    764: 'revolver, six-gun, six-shooter',
    765: 'rifle',
    766: 'rocking chair, rocker',
    767: 'rotisserie',
    768: 'rubber eraser, rubber, pencil eraser',
    769: 'rugby ball',
    770: 'rule, ruler',
    771: 'running shoe',
    772: 'safe',
    773: 'safety pin',
    774: 'saltshaker, salt shaker',
    775: 'sandal',
    776: 'sarong',
    777: 'sax, saxophone',
    778: 'scabbard',
    779: 'scale, weighing machine',
    780: 'school bus',
    781: 'schooner',
    782: 'scoreboard',
    783: 'screen, CRT screen',
    784: 'screw',
    785: 'screwdriver',
    786: 'seat belt, seatbelt',
    787: 'sewing machine',
    788: 'shield, buckler',
    789: 'shoe shop, shoe-shop, shoe store',
    790: 'shoji',
    791: 'shopping basket',
    792: 'shopping cart',
    793: 'shovel',
    794: 'shower cap',
    795: 'shower curtain',
    796: 'ski',
    797: 'ski mask',
    798: 'sleeping bag',
    799: 'slide rule, slipstick',
    800: 'sliding door',
    801: 'slot, one-armed bandit',
    802: 'snorkel',
    803: 'snowmobile',
    804: 'snowplow, snowplough',
    805: 'soap dispenser',
    806: 'soccer ball',
    807: 'sock',
    808: 'solar dish, solar collector, solar furnace',
    809: 'sombrero',
    810: 'soup bowl',
    811: 'space bar',
    812: 'space heater',
    813: 'space shuttle',
    814: 'spatula',
    815: 'speedboat',
    816: 'spider web, spider\'s web',
    817: 'spindle',
    818: 'sports car, sport car',
    819: 'spotlight, spot',
    820: 'stage',
    821: 'steam locomotive',
    822: 'steel arch bridge',
    823: 'steel drum',
    824: 'stethoscope',
    825: 'stole',
    826: 'stone wall',
    827: 'stopwatch, stop watch',
    828: 'stove',
    829: 'strainer',
    830: 'streetcar, tram, tramcar, trolley, trolley car',
    831: 'stretcher',
    832: 'studio couch, day bed',
    833: 'stupa, tope',
    834: 'submarine, pigboat, sub, U-boat',
    835: 'suit, suit of clothes',
    836: 'sundial',
    837: 'sunglass',
    838: 'sunglasses, dark glasses, shades',
    839: 'sunscreen, sunblock, sun blocker',
    840: 'suspension bridge',
    841: 'swab, swob, mop',
    842: 'sweatshirt',
    843: 'swimming trunks, bathing trunks',
    844: 'swing',
    845: 'switch, electric switch, electrical switch',
    846: 'syringe',
    847: 'table lamp',
    848: 'tank, army tank, armored combat vehicle, armoured combat vehicle',
    849: 'tape player',
    850: 'teapot',
    851: 'teddy, teddy bear',
    852: 'television, television system',
    853: 'tennis ball',
    854: 'thatch, thatched roof',
    855: 'theater curtain, theatre curtain',
    856: 'thimble',
    857: 'thresher, thrasher, threshing machine',
    858: 'throne',
    859: 'tile roof',
    860: 'toaster',
    861: 'tobacco shop, tobacconist shop, tobacconist',
    862: 'toilet seat',
    863: 'torch',
    864: 'totem pole',
    865: 'tow truck, tow car, wrecker',
    866: 'toyshop',
    867: 'tractor',
    868: "trailer truck, tractor trailer, trucking rig, rig, articulated lorry, semi",
    869: 'tray',
    870: 'trench coat',
    871: 'tricycle, trike, velocipede',
    872: 'trimaran',
    873: 'tripod',
    874: 'triumphal arch',
    875: 'trolleybus, trolley coach, trackless trolley',
    876: 'trombone',
    877: 'tub, vat',
    878: 'turnstile',
    879: 'typewriter keyboard',
    880: 'umbrella',
    881: 'unicycle, monocycle',
    882: 'upright, upright piano',
    883: 'vacuum, vacuum cleaner',
    884: 'vase',
    885: 'vault',
    886: 'velvet',
    887: 'vending machine',
    888: 'vestment',
    889: 'viaduct',
    890: 'violin, fiddle',
    891: 'volleyball',
    892: 'waffle iron',
    893: 'wall clock',
    894: 'wallet, billfold, notecase, pocketbook',
    895: 'wardrobe, closet, press',
    896: 'warplane, military plane',
    897: 'washbasin, handbasin, washbowl, lavabo, wash-hand basin',
    898: 'washer, automatic washer, washing machine',
    899: 'water bottle',
    900: 'water jug',
    901: 'water tower',
    902: 'whiskey jug',
    903: 'whistle',
    904: 'wig',
    905: 'window screen',
    906: 'window shade',
    907: 'Windsor tie',
    908: 'wine bottle',
    909: 'wing',
    910: 'wok',
    911: 'wooden spoon',
    912: 'wool, woolen, woollen',
    913: 'worm fence, snake fence, snake-rail fence, Virginia fence',
    914: 'wreck',
    915: 'yawl',
    916: 'yurt',
    917: 'web site, website, internet site, site',
    918: 'comic book',
    919: 'crossword puzzle, crossword',
    920: 'street sign',
    921: 'traffic light, traffic signal, stoplight',
    922: 'book jacket, dust cover, dust jacket, dust wrapper',
    923: 'menu',
    924: 'plate',
    925: 'guacamole',
    926: 'consomme',
    927: 'hot pot, hotpot',
    928: 'trifle',
    929: 'ice cream, icecream',
    930: 'ice lolly, lolly, lollipop, popsicle',
    931: 'French loaf',
    932: 'bagel, beigel',
    933: 'pretzel',
    934: 'cheeseburger',
    935: 'hotdog, hot dog, red hot',
    936: 'mashed potato',
    937: 'head cabbage',
    938: 'broccoli',
    939: 'cauliflower',
    940: 'zucchini, courgette',
    941: 'spaghetti squash',
    942: 'acorn squash',
    943: 'butternut squash',
    944: 'cucumber, cuke',
    945: 'artichoke, globe artichoke',
    946: 'bell pepper',
    947: 'cardoon',
    948: 'mushroom',
    949: 'Granny Smith',
    950: 'strawberry',
    951: 'orange',
    952: 'lemon',
    953: 'fig',
    954: 'pineapple, ananas',
    955: 'banana',
    956: 'jackfruit, jak, jack',
    957: 'custard apple',
    958: 'pomegranate',
    959: 'hay',
    960: 'carbonara',
    961: 'chocolate sauce, chocolate syrup',
    962: 'dough',
    963: 'meat loaf, meatloaf',
    964: 'pizza, pizza pie',
    965: 'potpie',
    966: 'burrito',
    967: 'red wine',
    968: 'espresso',
    969: 'cup',
    970: 'eggnog',
    971: 'alp',
    972: 'bubble',
    973: 'cliff, drop, drop-off',
    974: 'coral reef',
    975: 'geyser',
    976: 'lakeside, lakeshore',
    977: 'promontory, headland, head, foreland',
    978: 'sandbar, sand bar',
    979: 'seashore, coast, seacoast, sea-coast',
    980: 'valley, vale',
    981: 'volcano',
    982: 'ballplayer, baseball player',
    983: 'groom, bridegroom',
    984: 'scuba diver',
    985: 'rapeseed',
    986: 'daisy',
    987: "yellow lady's slipper, yellow lady-slipper, Cypripedium calceolus, Cypripedium parviflorum",
    988: 'corn',
    989: 'acorn',
    990: 'hip, rose hip, rosehip',
    991: 'buckeye, horse chestnut, conker',
    992: 'coral fungus',
    993: 'agaric',
    994: 'gyromitra',
    995: 'stinkhorn, carrion fungus',
    996: 'earthstar',
    997: "hen-of-the-woods, hen of the woods, Polyporus frondosus, Grifola frondosa",
    998: 'bolete',
    999: 'ear, spike, capitulum',
    1000: 'toilet tissue, toilet paper, bathroom tissue'
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iJhxD":[function(require,module,exports) {
module.exports = require('./helpers/bundle-url').getBundleURL('eDUoX') + "cat.66fc7f67.jpg";

},{"./helpers/bundle-url":"lgJ39"}],"lgJ39":[function(require,module,exports) {
"use strict";
var bundleURL = {
};
function getBundleURLCached(id) {
    var value = bundleURL[id];
    if (!value) {
        value = getBundleURL();
        bundleURL[id] = value;
    }
    return value;
}
function getBundleURL() {
    try {
        throw new Error();
    } catch (err) {
        var matches = ('' + err.stack).match(/(https?|file|ftp):\/\/[^)\n]+/g);
        if (matches) // The first two stack frames will be this function and getBundleURLCached.
        // Use the 3rd one, which will be a runtime in the original bundle.
        return getBaseURL(matches[2]);
    }
    return '/';
}
function getBaseURL(url) {
    return ('' + url).replace(/^((?:https?|file|ftp):\/\/.+)\/[^/]+$/, '$1') + '/';
} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.
function getOrigin(url) {
    var matches = ('' + url).match(/(https?|file|ftp):\/\/[^/]+/);
    if (!matches) throw new Error('Origin not found');
    return matches[0];
}
exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
exports.getOrigin = getOrigin;

},{}]},["5VGEk"], "5VGEk", "parcelRequire06aa")

//# sourceMappingURL=index.b915eb7d.js.map
